
GNSS_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007750  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007a1c  08007a1c  00008a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a54  08007a54  00008a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a5c  08007a5c  00008a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007a60  08007a60  00008a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007a64  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ab8  24000010  08007a74  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ac8  08007a74  00009ac8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011f32  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025ab  00000000  00000000  0001af70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ba8  00000000  00000000  0001d520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008ed  00000000  00000000  0001e0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003196c  00000000  00000000  0001e9b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000121b6  00000000  00000000  00050321  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fa69  00000000  00000000  000624d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a1f40  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f34  00000000  00000000  001a1f84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001a4eb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007a04 	.word	0x08007a04

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08007a04 	.word	0x08007a04

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <GNSS_Tanimla>:
#include "SysTick_Timer.h"
U_Blox_frame_high_layer U_Blox_frame_tx;
U_Blox_frame_high_layer U_Blox_frame_rx;
int b=0;
static uint32_t zaman;
void GNSS_Tanimla() {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
	U_Blox_Init();
 8000602:	f000 f8e1 	bl	80007c8 <U_Blox_Init>
	for (int i = 0; i < 26; i++) {
 8000606:	2300      	movs	r3, #0
 8000608:	607b      	str	r3, [r7, #4]
 800060a:	e008      	b.n	800061e <GNSS_Tanimla+0x22>
		U_Blox_frame_tx.payload.data[i] = 0;
 800060c:	4a2c      	ldr	r2, [pc, #176]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4413      	add	r3, r2
 8000612:	3304      	adds	r3, #4
 8000614:	2200      	movs	r2, #0
 8000616:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	3301      	adds	r3, #1
 800061c:	607b      	str	r3, [r7, #4]
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	2b19      	cmp	r3, #25
 8000622:	ddf3      	ble.n	800060c <GNSS_Tanimla+0x10>
	}
	U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 8000624:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000626:	2206      	movs	r2, #6
 8000628:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 800062a:	4b25      	ldr	r3, [pc, #148]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800062c:	2200      	movs	r2, #0
 800062e:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000630:	4a23      	ldr	r2, [pc, #140]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000632:	7d13      	ldrb	r3, [r2, #20]
 8000634:	f36f 0341 	bfc	r3, #1, #1
 8000638:	7513      	strb	r3, [r2, #20]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 800063a:	4a21      	ldr	r2, [pc, #132]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800063c:	7a13      	ldrb	r3, [r2, #8]
 800063e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000642:	7213      	strb	r3, [r2, #8]
			3;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 8000644:	4a1e      	ldr	r2, [pc, #120]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000646:	7a13      	ldrb	r3, [r2, #8]
 8000648:	2110      	movs	r1, #16
 800064a:	f361 0305 	bfi	r3, r1, #0, #6
 800064e:	7213      	strb	r3, [r2, #8]
			16;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000650:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000652:	7a53      	ldrb	r3, [r2, #9]
 8000654:	f36f 1305 	bfc	r3, #4, #2
 8000658:	7253      	strb	r3, [r2, #9]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 800065a:	4a19      	ldr	r2, [pc, #100]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800065c:	7a53      	ldrb	r3, [r2, #9]
 800065e:	2104      	movs	r1, #4
 8000660:	f361 0343 	bfi	r3, r1, #1, #3
 8000664:	7253      	strb	r3, [r2, #9]
			4;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 8000666:	4b16      	ldr	r3, [pc, #88]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000668:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800066c:	60da      	str	r2, [r3, #12]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 800066e:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000670:	2200      	movs	r2, #0
 8000672:	80da      	strh	r2, [r3, #6]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 8000674:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000676:	7c13      	ldrb	r3, [r2, #16]
 8000678:	f043 0301 	orr.w	r3, r3, #1
 800067c:	7413      	strb	r3, [r2, #16]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 800067e:	4a10      	ldr	r2, [pc, #64]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000680:	7c93      	ldrb	r3, [r2, #18]
 8000682:	f043 0301 	orr.w	r3, r3, #1
 8000686:	7493      	strb	r3, [r2, #18]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 8000688:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800068a:	2201      	movs	r2, #1
 800068c:	711a      	strb	r2, [r3, #4]
	U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000690:	2214      	movs	r2, #20
 8000692:	805a      	strh	r2, [r3, #2]
	U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000694:	480a      	ldr	r0, [pc, #40]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000696:	f000 f925 	bl	80008e4 <U_Blox_Set_Frame>
	if(U_Blox_Is_Packet_Ready_To_Send())
 800069a:	f000 f9e7 	bl	8000a6c <U_Blox_Is_Packet_Ready_To_Send>
 800069e:	4603      	mov	r3, r0
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d001      	beq.n	80006a8 <GNSS_Tanimla+0xac>
	{
		U_Blox_Send_Packet();
 80006a4:	f000 f9f2 	bl	8000a8c <U_Blox_Send_Packet>
	}
	U_Blox_Send_Frame();
 80006a8:	f000 f95a 	bl	8000960 <U_Blox_Send_Frame>
	//while(!U_Blox_Is_Packet_Ready());
	zaman=SystickGetMs();
 80006ac:	f000 fd74 	bl	8001198 <SystickGetMs>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <GNSS_Tanimla+0xc8>)
 80006b4:	6013      	str	r3, [r2, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2400002c 	.word	0x2400002c
 80006c4:	24000420 	.word	0x24000420

080006c8 <GNSS_Veri_Al>:
uint8_t GNSS_Veri_Al(GNSS *GNSS_t) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	if(SystickCheckMs(zaman,500))
 80006d0:	4b36      	ldr	r3, [pc, #216]	@ (80007ac <GNSS_Veri_Al+0xe4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 fd69 	bl	80011b0 <SystickCheckMs>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d01c      	beq.n	800071e <GNSS_Veri_Al+0x56>
	{
	U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_NAV;
 80006e4:	4b32      	ldr	r3, [pc, #200]	@ (80007b0 <GNSS_Veri_Al+0xe8>)
 80006e6:	2201      	movs	r2, #1
 80006e8:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PVT;
 80006ea:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <GNSS_Veri_Al+0xe8>)
 80006ec:	2207      	movs	r2, #7
 80006ee:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_tx.length = 0;
 80006f0:	4b2f      	ldr	r3, [pc, #188]	@ (80007b0 <GNSS_Veri_Al+0xe8>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	805a      	strh	r2, [r3, #2]
	U_Blox_Set_Frame(&U_Blox_frame_tx);
 80006f6:	482e      	ldr	r0, [pc, #184]	@ (80007b0 <GNSS_Veri_Al+0xe8>)
 80006f8:	f000 f8f4 	bl	80008e4 <U_Blox_Set_Frame>
	if(U_Blox_Is_Packet_Ready_To_Send())
 80006fc:	f000 f9b6 	bl	8000a6c <U_Blox_Is_Packet_Ready_To_Send>
 8000700:	4603      	mov	r3, r0
 8000702:	2b00      	cmp	r3, #0
 8000704:	d004      	beq.n	8000710 <GNSS_Veri_Al+0x48>
	{
		U_Blox_Send_Packet();
 8000706:	f000 f9c1 	bl	8000a8c <U_Blox_Send_Packet>
		GNSS_t->SM=SM_GNSS_IDLE;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	2200      	movs	r2, #0
 800070e:	741a      	strb	r2, [r3, #16]
	}
	U_Blox_Send_Frame();
 8000710:	f000 f926 	bl	8000960 <U_Blox_Send_Frame>
	zaman=SystickGetMs();
 8000714:	f000 fd40 	bl	8001198 <SystickGetMs>
 8000718:	4603      	mov	r3, r0
 800071a:	4a24      	ldr	r2, [pc, #144]	@ (80007ac <GNSS_Veri_Al+0xe4>)
 800071c:	6013      	str	r3, [r2, #0]
	}

	if (U_Blox_Is_Packet_Ready()) {
 800071e:	f000 f995 	bl	8000a4c <U_Blox_Is_Packet_Ready>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d03b      	beq.n	80007a0 <GNSS_Veri_Al+0xd8>
		U_Blox_Get_Package(&U_Blox_frame_rx);
 8000728:	4822      	ldr	r0, [pc, #136]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 800072a:	f000 f9d5 	bl	8000ad8 <U_Blox_Get_Package>
		if (U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_NAV) {
 800072e:	4b21      	ldr	r3, [pc, #132]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b01      	cmp	r3, #1
 8000734:	d129      	bne.n	800078a <GNSS_Veri_Al+0xc2>
			GNSS_t->ay = U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.month;
 8000736:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 8000738:	7a9a      	ldrb	r2, [r3, #10]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	709a      	strb	r2, [r3, #2]
			GNSS_t->boylam =
					U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lon;
 800073e:	4b1d      	ldr	r3, [pc, #116]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 8000740:	69da      	ldr	r2, [r3, #28]
			GNSS_t->boylam =
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	609a      	str	r2, [r3, #8]
			GNSS_t->enlem = U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lat;
 8000746:	4b1b      	ldr	r3, [pc, #108]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 8000748:	6a1a      	ldr	r2, [r3, #32]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	60da      	str	r2, [r3, #12]
			GNSS_t->gun = U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.day;
 800074e:	4b19      	ldr	r3, [pc, #100]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 8000750:	7ada      	ldrb	r2, [r3, #11]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	70da      	strb	r2, [r3, #3]
			GNSS_t->dakika =
					U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.min;
 8000756:	4b17      	ldr	r3, [pc, #92]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 8000758:	7b5a      	ldrb	r2, [r3, #13]
			GNSS_t->dakika =
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	711a      	strb	r2, [r3, #4]
			GNSS_t->yil = U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.year;
 800075e:	4b15      	ldr	r3, [pc, #84]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 8000760:	891a      	ldrh	r2, [r3, #8]
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	801a      	strh	r2, [r3, #0]
			GNSS_t->saniye =
					U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.sec;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 8000768:	7b9a      	ldrb	r2, [r3, #14]
			GNSS_t->saniye =
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	715a      	strb	r2, [r3, #5]
			U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_NAV;
 800076e:	4b10      	ldr	r3, [pc, #64]	@ (80007b0 <GNSS_Veri_Al+0xe8>)
 8000770:	2201      	movs	r2, #1
 8000772:	701a      	strb	r2, [r3, #0]
			U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PVT;
 8000774:	4b0e      	ldr	r3, [pc, #56]	@ (80007b0 <GNSS_Veri_Al+0xe8>)
 8000776:	2207      	movs	r2, #7
 8000778:	705a      	strb	r2, [r3, #1]
			U_Blox_frame_tx.length = 0;
 800077a:	4b0d      	ldr	r3, [pc, #52]	@ (80007b0 <GNSS_Veri_Al+0xe8>)
 800077c:	2200      	movs	r2, #0
 800077e:	805a      	strh	r2, [r3, #2]
			U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000780:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <GNSS_Veri_Al+0xe8>)
 8000782:	f000 f8af 	bl	80008e4 <U_Blox_Set_Frame>
			U_Blox_Send_Frame();
 8000786:	f000 f8eb 	bl	8000960 <U_Blox_Send_Frame>
		}
		if (U_Blox_frame_rx.message_class == 5) {
 800078a:	4b0a      	ldr	r3, [pc, #40]	@ (80007b4 <GNSS_Veri_Al+0xec>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	2b05      	cmp	r3, #5
 8000790:	d104      	bne.n	800079c <GNSS_Veri_Al+0xd4>
			b++;
 8000792:	4b09      	ldr	r3, [pc, #36]	@ (80007b8 <GNSS_Veri_Al+0xf0>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3301      	adds	r3, #1
 8000798:	4a07      	ldr	r2, [pc, #28]	@ (80007b8 <GNSS_Veri_Al+0xf0>)
 800079a:	6013      	str	r3, [r2, #0]
		}
        return 1;
 800079c:	2301      	movs	r3, #1
 800079e:	e000      	b.n	80007a2 <GNSS_Veri_Al+0xda>
	}
	else{
		return 0;
 80007a0:	2300      	movs	r3, #0
	}
}
 80007a2:	4618      	mov	r0, r3
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	24000420 	.word	0x24000420
 80007b0:	2400002c 	.word	0x2400002c
 80007b4:	24000224 	.word	0x24000224
 80007b8:	2400041c 	.word	0x2400041c

080007bc <GNSS_Gorev>:

void GNSS_Gorev() {
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
	U_Blox_Task();
 80007c0:	f000 f814 	bl	80007ec <U_Blox_Task>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <U_Blox_Init>:
	} Sm;
	uint8_t Buffer[500];
	uint16_t buffer_index;
} U_Blox_Tx;

void U_Blox_Init() {
 80007c8:	b480      	push	{r7}
 80007ca:	af00      	add	r7, sp, #0
	U_Blox_Rx.Sm = SM_RX_IDLE;
 80007cc:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <U_Blox_Init+0x1c>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	701a      	strb	r2, [r3, #0]
	U_Blox_Tx.Sm=SM_TX_IDLE;
 80007d2:	4b05      	ldr	r3, [pc, #20]	@ (80007e8 <U_Blox_Init+0x20>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	701a      	strb	r2, [r3, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	24000620 	.word	0x24000620
 80007e8:	24000818 	.word	0x24000818

080007ec <U_Blox_Task>:
void U_Blox_Task() {
 80007ec:	b590      	push	{r4, r7, lr}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t;
	switch (U_Blox_Tx.Sm) {
 80007f2:	4b38      	ldr	r3, [pc, #224]	@ (80008d4 <U_Blox_Task+0xe8>)
 80007f4:	781b      	ldrb	r3, [r3, #0]
 80007f6:	2b02      	cmp	r3, #2
 80007f8:	d005      	beq.n	8000806 <U_Blox_Task+0x1a>
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	dc27      	bgt.n	800084e <U_Blox_Task+0x62>
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d022      	beq.n	8000848 <U_Blox_Task+0x5c>
 8000802:	2b01      	cmp	r3, #1
	case SM_TX_IDLE:
		break;
	case SM_TX_PREPARE:
		break;
 8000804:	e023      	b.n	800084e <U_Blox_Task+0x62>
	case SM_TX_SEND:
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Tx.Buffer;
 8000806:	4b34      	ldr	r3, [pc, #208]	@ (80008d8 <U_Blox_Task+0xec>)
 8000808:	607b      	str	r3, [r7, #4]
		while (U_Blox_Tx.buffer_index < U_Blox_frame_low_layer_t->length + 8)
 800080a:	e009      	b.n	8000820 <U_Blox_Task+0x34>
		{
				U_Blox_Send_Data(U_Blox_Tx.Buffer[U_Blox_Tx.buffer_index]);
 800080c:	4b31      	ldr	r3, [pc, #196]	@ (80008d4 <U_Blox_Task+0xe8>)
 800080e:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000812:	461a      	mov	r2, r3
 8000814:	4b2f      	ldr	r3, [pc, #188]	@ (80008d4 <U_Blox_Task+0xe8>)
 8000816:	4413      	add	r3, r2
 8000818:	785b      	ldrb	r3, [r3, #1]
 800081a:	4618      	mov	r0, r3
 800081c:	f000 f94a 	bl	8000ab4 <U_Blox_Send_Data>
		while (U_Blox_Tx.buffer_index < U_Blox_frame_low_layer_t->length + 8)
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	889b      	ldrh	r3, [r3, #4]
 8000824:	3307      	adds	r3, #7
 8000826:	4a2b      	ldr	r2, [pc, #172]	@ (80008d4 <U_Blox_Task+0xe8>)
 8000828:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 800082c:	4293      	cmp	r3, r2
 800082e:	daed      	bge.n	800080c <U_Blox_Task+0x20>
		}
		if(U_Blox_Tx.buffer_index >= U_Blox_frame_low_layer_t->length + 8)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	889b      	ldrh	r3, [r3, #4]
 8000834:	3307      	adds	r3, #7
 8000836:	4a27      	ldr	r2, [pc, #156]	@ (80008d4 <U_Blox_Task+0xe8>)
 8000838:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 800083c:	4293      	cmp	r3, r2
 800083e:	da05      	bge.n	800084c <U_Blox_Task+0x60>
		{
			U_Blox_Tx.Sm=SM_TX_IDLE;
 8000840:	4b24      	ldr	r3, [pc, #144]	@ (80008d4 <U_Blox_Task+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000846:	e001      	b.n	800084c <U_Blox_Task+0x60>
		break;
 8000848:	bf00      	nop
 800084a:	e000      	b.n	800084e <U_Blox_Task+0x62>
		break;
 800084c:	bf00      	nop
	}
	switch (U_Blox_Rx.Sm) {
 800084e:	4b23      	ldr	r3, [pc, #140]	@ (80008dc <U_Blox_Task+0xf0>)
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <U_Blox_Task+0x6e>
 8000856:	2b01      	cmp	r3, #1
				}
			}
		}
		break;
	case SM_RX_PROCESS:
		break;
 8000858:	e037      	b.n	80008ca <U_Blox_Task+0xde>
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;
 800085a:	4b21      	ldr	r3, [pc, #132]	@ (80008e0 <U_Blox_Task+0xf4>)
 800085c:	607b      	str	r3, [r7, #4]
		if (U_Blox_Rx.buffer_index >= 2) {
 800085e:	4b1f      	ldr	r3, [pc, #124]	@ (80008dc <U_Blox_Task+0xf0>)
 8000860:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000864:	2b01      	cmp	r3, #1
 8000866:	d92f      	bls.n	80008c8 <U_Blox_Task+0xdc>
			if (!((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2bb5      	cmp	r3, #181	@ 0xb5
 800086e:	d103      	bne.n	8000878 <U_Blox_Task+0x8c>
					&& (U_Blox_frame_low_layer_t->sync_char_2 == 0x62))) {
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	785b      	ldrb	r3, [r3, #1]
			if (!((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 8000874:	2b62      	cmp	r3, #98	@ 0x62
 8000876:	d003      	beq.n	8000880 <U_Blox_Task+0x94>
				RxBufferMove(1);
 8000878:	2001      	movs	r0, #1
 800087a:	f000 f961 	bl	8000b40 <RxBufferMove>
		break;
 800087e:	e023      	b.n	80008c8 <U_Blox_Task+0xdc>
					>= (U_Blox_frame_low_layer_t->length + 8)) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	889b      	ldrh	r3, [r3, #4]
 8000884:	3307      	adds	r3, #7
			} else if (U_Blox_Rx.buffer_index
 8000886:	4a15      	ldr	r2, [pc, #84]	@ (80008dc <U_Blox_Task+0xf0>)
 8000888:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 800088c:	4293      	cmp	r3, r2
 800088e:	da1b      	bge.n	80008c8 <U_Blox_Task+0xdc>
				if ((*(uint16_t*) &U_Blox_frame_low_layer_t->payload[U_Blox_frame_low_layer_t->length])
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	889b      	ldrh	r3, [r3, #4]
 8000894:	461a      	mov	r2, r3
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	3306      	adds	r3, #6
 800089c:	881c      	ldrh	r4, [r3, #0]
						!= U_Blox_Calculate_Checksum(
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 f878 	bl	8000994 <U_Blox_Calculate_Checksum>
 80008a4:	4603      	mov	r3, r0
				if ((*(uint16_t*) &U_Blox_frame_low_layer_t->payload[U_Blox_frame_low_layer_t->length])
 80008a6:	429c      	cmp	r4, r3
 80008a8:	d007      	beq.n	80008ba <U_Blox_Task+0xce>
					RxBufferMove(U_Blox_frame_low_layer_t->length + 8);
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	889b      	ldrh	r3, [r3, #4]
 80008ae:	3308      	adds	r3, #8
 80008b0:	b29b      	uxth	r3, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f944 	bl	8000b40 <RxBufferMove>
		break;
 80008b8:	e006      	b.n	80008c8 <U_Blox_Task+0xdc>
					U_Blox_Rx.Sm = SM_RX_PROCESS;
 80008ba:	4b08      	ldr	r3, [pc, #32]	@ (80008dc <U_Blox_Task+0xf0>)
 80008bc:	2201      	movs	r2, #1
 80008be:	701a      	strb	r2, [r3, #0]
					U_Blox_Rx.buffer_index = 0;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <U_Blox_Task+0xf0>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		break;
 80008c8:	bf00      	nop
	}
}
 80008ca:	bf00      	nop
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd90      	pop	{r4, r7, pc}
 80008d2:	bf00      	nop
 80008d4:	24000818 	.word	0x24000818
 80008d8:	24000819 	.word	0x24000819
 80008dc:	24000620 	.word	0x24000620
 80008e0:	24000621 	.word	0x24000621

080008e4 <U_Blox_Set_Frame>:

void U_Blox_Set_Frame(U_Blox_frame_high_layer *U_blox_Frame) {
 80008e4:	b590      	push	{r4, r7, lr}
 80008e6:	b083      	sub	sp, #12
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer_transmit.sync_char_1 = 0xB5;
 80008ec:	4b19      	ldr	r3, [pc, #100]	@ (8000954 <U_Blox_Set_Frame+0x70>)
 80008ee:	22b5      	movs	r2, #181	@ 0xb5
 80008f0:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_low_layer_transmit.sync_char_2 = 0x62;
 80008f2:	4b18      	ldr	r3, [pc, #96]	@ (8000954 <U_Blox_Set_Frame+0x70>)
 80008f4:	2262      	movs	r2, #98	@ 0x62
 80008f6:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_low_layer_transmit.length = U_blox_Frame->length;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	885a      	ldrh	r2, [r3, #2]
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <U_Blox_Set_Frame+0x70>)
 80008fe:	809a      	strh	r2, [r3, #4]
	U_Blox_frame_low_layer_transmit.message_class = U_blox_Frame->message_class;
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	781a      	ldrb	r2, [r3, #0]
 8000904:	4b13      	ldr	r3, [pc, #76]	@ (8000954 <U_Blox_Set_Frame+0x70>)
 8000906:	709a      	strb	r2, [r3, #2]
	U_Blox_frame_low_layer_transmit.message_id = U_blox_Frame->message_id;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	785a      	ldrb	r2, [r3, #1]
 800090c:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <U_Blox_Set_Frame+0x70>)
 800090e:	70da      	strb	r2, [r3, #3]
	memcpy(&U_Blox_frame_low_layer_transmit.payload, U_blox_Frame->payload.data,
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	1d19      	adds	r1, r3, #4
			U_blox_Frame->length);
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	885b      	ldrh	r3, [r3, #2]
	memcpy(&U_Blox_frame_low_layer_transmit.payload, U_blox_Frame->payload.data,
 8000918:	461a      	mov	r2, r3
 800091a:	480f      	ldr	r0, [pc, #60]	@ (8000958 <U_Blox_Set_Frame+0x74>)
 800091c:	f007 f864 	bl	80079e8 <memcpy>
	(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <U_Blox_Set_Frame+0x70>)
 8000922:	889b      	ldrh	r3, [r3, #4]
 8000924:	461a      	mov	r2, r3
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <U_Blox_Set_Frame+0x70>)
 8000928:	4413      	add	r3, r2
 800092a:	1d9c      	adds	r4, r3, #6
			U_Blox_Calculate_Checksum(&U_Blox_frame_low_layer_transmit);
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <U_Blox_Set_Frame+0x70>)
 800092e:	f000 f831 	bl	8000994 <U_Blox_Calculate_Checksum>
 8000932:	4603      	mov	r3, r0
	(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000934:	8023      	strh	r3, [r4, #0]
	memset(&U_blox_Frame->payload, 0, 500);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	3304      	adds	r3, #4
 800093a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800093e:	2100      	movs	r1, #0
 8000940:	4618      	mov	r0, r3
 8000942:	f007 f825 	bl	8007990 <memset>
	U_Blox_Tx.Sm=SM_TX_PREPARE;
 8000946:	4b05      	ldr	r3, [pc, #20]	@ (800095c <U_Blox_Set_Frame+0x78>)
 8000948:	2201      	movs	r2, #1
 800094a:	701a      	strb	r2, [r3, #0]
}
 800094c:	bf00      	nop
 800094e:	370c      	adds	r7, #12
 8000950:	46bd      	mov	sp, r7
 8000952:	bd90      	pop	{r4, r7, pc}
 8000954:	24000424 	.word	0x24000424
 8000958:	2400042a 	.word	0x2400042a
 800095c:	24000818 	.word	0x24000818

08000960 <U_Blox_Send_Frame>:
uint8_t U_Blox_Send_Frame() {
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
	//paket hazır mı kontrolu gerek
	HAL_UART_Transmit(&huart3,
 8000964:	2364      	movs	r3, #100	@ 0x64
 8000966:	2206      	movs	r2, #6
 8000968:	4907      	ldr	r1, [pc, #28]	@ (8000988 <U_Blox_Send_Frame+0x28>)
 800096a:	4808      	ldr	r0, [pc, #32]	@ (800098c <U_Blox_Send_Frame+0x2c>)
 800096c:	f004 fb24 	bl	8004fb8 <HAL_UART_Transmit>
			(uint8_t*) &U_Blox_frame_low_layer_transmit.sync_char_1, 6, 100);
	HAL_UART_Transmit(&huart3,
			(uint8_t*) &U_Blox_frame_low_layer_transmit.payload,
			U_Blox_frame_low_layer_transmit.length + 2, 100);
 8000970:	4b05      	ldr	r3, [pc, #20]	@ (8000988 <U_Blox_Send_Frame+0x28>)
 8000972:	889b      	ldrh	r3, [r3, #4]
	HAL_UART_Transmit(&huart3,
 8000974:	3302      	adds	r3, #2
 8000976:	b29a      	uxth	r2, r3
 8000978:	2364      	movs	r3, #100	@ 0x64
 800097a:	4905      	ldr	r1, [pc, #20]	@ (8000990 <U_Blox_Send_Frame+0x30>)
 800097c:	4803      	ldr	r0, [pc, #12]	@ (800098c <U_Blox_Send_Frame+0x2c>)
 800097e:	f004 fb1b 	bl	8004fb8 <HAL_UART_Transmit>
	return 1;
 8000982:	2301      	movs	r3, #1
}
 8000984:	4618      	mov	r0, r3
 8000986:	bd80      	pop	{r7, pc}
 8000988:	24000424 	.word	0x24000424
 800098c:	24000a10 	.word	0x24000a10
 8000990:	2400042a 	.word	0x2400042a

08000994 <U_Blox_Calculate_Checksum>:
uint16_t U_Blox_Calculate_Checksum(U_Blox_frame_low_layer *U_blox_Frame) {
 8000994:	b480      	push	{r7}
 8000996:	b087      	sub	sp, #28
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	uint8_t ck_a = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	75fb      	strb	r3, [r7, #23]
	uint8_t ck_b = 0;
 80009a0:	2300      	movs	r3, #0
 80009a2:	75bb      	strb	r3, [r7, #22]
	uint8_t *data = (uint8_t*) &U_blox_Frame->message_class;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	3302      	adds	r3, #2
 80009a8:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e00e      	b.n	80009ce <U_Blox_Calculate_Checksum+0x3a>
		ck_a = ck_a + *data;
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	781a      	ldrb	r2, [r3, #0]
 80009b4:	7dfb      	ldrb	r3, [r7, #23]
 80009b6:	4413      	add	r3, r2
 80009b8:	75fb      	strb	r3, [r7, #23]
		ck_b = ck_b + ck_a;
 80009ba:	7dba      	ldrb	r2, [r7, #22]
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	4413      	add	r3, r2
 80009c0:	75bb      	strb	r3, [r7, #22]
		data++;
 80009c2:	693b      	ldr	r3, [r7, #16]
 80009c4:	3301      	adds	r3, #1
 80009c6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	3301      	adds	r3, #1
 80009cc:	60fb      	str	r3, [r7, #12]
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	889b      	ldrh	r3, [r3, #4]
 80009d2:	3303      	adds	r3, #3
 80009d4:	68fa      	ldr	r2, [r7, #12]
 80009d6:	429a      	cmp	r2, r3
 80009d8:	ddea      	ble.n	80009b0 <U_Blox_Calculate_Checksum+0x1c>
	}
	return (uint16_t) (ck_a + (uint16_t) ((uint16_t) ck_b << 8));
 80009da:	7dfb      	ldrb	r3, [r7, #23]
 80009dc:	b29a      	uxth	r2, r3
 80009de:	7dbb      	ldrb	r3, [r7, #22]
 80009e0:	b29b      	uxth	r3, r3
 80009e2:	021b      	lsls	r3, r3, #8
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4413      	add	r3, r2
 80009e8:	b29b      	uxth	r3, r3
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	371c      	adds	r7, #28
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <U_Blox_Receive_Data>:
void U_Blox_Receive_Data(uint8_t data) {
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	71fb      	strb	r3, [r7, #7]
	if (U_Blox_Rx.buffer_index > 498) {
 8000a02:	4b11      	ldr	r3, [pc, #68]	@ (8000a48 <U_Blox_Receive_Data+0x50>)
 8000a04:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000a08:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 8000a0c:	d907      	bls.n	8000a1e <U_Blox_Receive_Data+0x26>
		U_Blox_Rx.buffer_index = 0;
 8000a0e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a48 <U_Blox_Receive_Data+0x50>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		RxBufferMove(400);
 8000a16:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000a1a:	f000 f891 	bl	8000b40 <RxBufferMove>
	}
	U_Blox_Rx.Buffer[U_Blox_Rx.buffer_index] = data;
 8000a1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a48 <U_Blox_Receive_Data+0x50>)
 8000a20:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b08      	ldr	r3, [pc, #32]	@ (8000a48 <U_Blox_Receive_Data+0x50>)
 8000a28:	4413      	add	r3, r2
 8000a2a:	79fa      	ldrb	r2, [r7, #7]
 8000a2c:	705a      	strb	r2, [r3, #1]
	U_Blox_Rx.buffer_index++;
 8000a2e:	4b06      	ldr	r3, [pc, #24]	@ (8000a48 <U_Blox_Receive_Data+0x50>)
 8000a30:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000a34:	3301      	adds	r3, #1
 8000a36:	b29a      	uxth	r2, r3
 8000a38:	4b03      	ldr	r3, [pc, #12]	@ (8000a48 <U_Blox_Receive_Data+0x50>)
 8000a3a:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	24000620 	.word	0x24000620

08000a4c <U_Blox_Is_Packet_Ready>:

uint8_t U_Blox_Is_Packet_Ready() {
 8000a4c:	b480      	push	{r7}
 8000a4e:	af00      	add	r7, sp, #0
	return (U_Blox_Rx.Sm == SM_RX_PROCESS);
 8000a50:	4b05      	ldr	r3, [pc, #20]	@ (8000a68 <U_Blox_Is_Packet_Ready+0x1c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	bf0c      	ite	eq
 8000a58:	2301      	moveq	r3, #1
 8000a5a:	2300      	movne	r3, #0
 8000a5c:	b2db      	uxtb	r3, r3
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	24000620 	.word	0x24000620

08000a6c <U_Blox_Is_Packet_Ready_To_Send>:

uint8_t U_Blox_Is_Packet_Ready_To_Send(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
	return (U_Blox_Tx.Sm==SM_TX_IDLE);
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <U_Blox_Is_Packet_Ready_To_Send+0x1c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	bf0c      	ite	eq
 8000a78:	2301      	moveq	r3, #1
 8000a7a:	2300      	movne	r3, #0
 8000a7c:	b2db      	uxtb	r3, r3
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	24000818 	.word	0x24000818

08000a8c <U_Blox_Send_Packet>:

void U_Blox_Send_Packet()
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	if(U_Blox_Tx.Sm==SM_TX_PREPARE)
 8000a90:	4b07      	ldr	r3, [pc, #28]	@ (8000ab0 <U_Blox_Send_Packet+0x24>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b01      	cmp	r3, #1
 8000a96:	d106      	bne.n	8000aa6 <U_Blox_Send_Packet+0x1a>
	{
		U_Blox_Tx.buffer_index=0;
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <U_Blox_Send_Packet+0x24>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		U_Blox_Tx.Sm=SM_TX_SEND;
 8000aa0:	4b03      	ldr	r3, [pc, #12]	@ (8000ab0 <U_Blox_Send_Packet+0x24>)
 8000aa2:	2202      	movs	r2, #2
 8000aa4:	701a      	strb	r2, [r3, #0]
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	24000818 	.word	0x24000818

08000ab4 <U_Blox_Send_Data>:
void U_Blox_Send_Data(uint8_t data)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &data,1, 100);
 8000abe:	1df9      	adds	r1, r7, #7
 8000ac0:	2364      	movs	r3, #100	@ 0x64
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	4803      	ldr	r0, [pc, #12]	@ (8000ad4 <U_Blox_Send_Data+0x20>)
 8000ac6:	f004 fa77 	bl	8004fb8 <HAL_UART_Transmit>
}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	24000a10 	.word	0x24000a10

08000ad8 <U_Blox_Get_Package>:
void U_Blox_Get_Package(U_Blox_frame_high_layer *U_Blox_frame_high_layer_t) {
 8000ad8:	b480      	push	{r7}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t =
 8000ae0:	4b15      	ldr	r3, [pc, #84]	@ (8000b38 <U_Blox_Get_Package+0x60>)
 8000ae2:	60bb      	str	r3, [r7, #8]
			(U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;

	U_Blox_frame_high_layer_t->length = U_Blox_frame_low_layer_t->length;
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	889a      	ldrh	r2, [r3, #4]
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	805a      	strh	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
			U_Blox_frame_low_layer_t->message_class;
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	789a      	ldrb	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_high_layer_t->message_id =
			U_Blox_frame_low_layer_t->message_id;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	78da      	ldrb	r2, [r3, #3]
	U_Blox_frame_high_layer_t->message_id =
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 500; i++) {
 8000afc:	2300      	movs	r3, #0
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	e00d      	b.n	8000b1e <U_Blox_Get_Package+0x46>
		U_Blox_frame_high_layer_t->payload.data[i] =
				U_Blox_frame_low_layer_t->payload[i];
 8000b02:	68ba      	ldr	r2, [r7, #8]
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	4413      	add	r3, r2
 8000b08:	3306      	adds	r3, #6
 8000b0a:	7819      	ldrb	r1, [r3, #0]
		U_Blox_frame_high_layer_t->payload.data[i] =
 8000b0c:	687a      	ldr	r2, [r7, #4]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	4413      	add	r3, r2
 8000b12:	3304      	adds	r3, #4
 8000b14:	460a      	mov	r2, r1
 8000b16:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 500; i++) {
 8000b18:	68fb      	ldr	r3, [r7, #12]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b24:	dbed      	blt.n	8000b02 <U_Blox_Get_Package+0x2a>
	}
	U_Blox_Rx.Sm = SM_RX_IDLE;
 8000b26:	4b05      	ldr	r3, [pc, #20]	@ (8000b3c <U_Blox_Get_Package+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
}
 8000b2c:	bf00      	nop
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	24000621 	.word	0x24000621
 8000b3c:	24000620 	.word	0x24000620

08000b40 <RxBufferMove>:
void RxBufferMove(uint16_t move) {
 8000b40:	b480      	push	{r7}
 8000b42:	b085      	sub	sp, #20
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	4603      	mov	r3, r0
 8000b48:	80fb      	strh	r3, [r7, #6]
	int tempMove = move;
 8000b4a:	88fb      	ldrh	r3, [r7, #6]
 8000b4c:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
	while (move < U_Blox_Rx.buffer_index) {
 8000b52:	e00d      	b.n	8000b70 <RxBufferMove+0x30>
		U_Blox_Rx.Buffer[index++] = U_Blox_Rx.Buffer[move++];
 8000b54:	88fb      	ldrh	r3, [r7, #6]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	80fa      	strh	r2, [r7, #6]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	1c5a      	adds	r2, r3, #1
 8000b60:	60fa      	str	r2, [r7, #12]
 8000b62:	4a0e      	ldr	r2, [pc, #56]	@ (8000b9c <RxBufferMove+0x5c>)
 8000b64:	440a      	add	r2, r1
 8000b66:	7851      	ldrb	r1, [r2, #1]
 8000b68:	4a0c      	ldr	r2, [pc, #48]	@ (8000b9c <RxBufferMove+0x5c>)
 8000b6a:	4413      	add	r3, r2
 8000b6c:	460a      	mov	r2, r1
 8000b6e:	705a      	strb	r2, [r3, #1]
	while (move < U_Blox_Rx.buffer_index) {
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <RxBufferMove+0x5c>)
 8000b72:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000b76:	88fa      	ldrh	r2, [r7, #6]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d3eb      	bcc.n	8000b54 <RxBufferMove+0x14>
	}
	U_Blox_Rx.buffer_index -= tempMove;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <RxBufferMove+0x5c>)
 8000b7e:	f8b3 21f6 	ldrh.w	r2, [r3, #502]	@ 0x1f6
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	4b04      	ldr	r3, [pc, #16]	@ (8000b9c <RxBufferMove+0x5c>)
 8000b8c:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
}
 8000b90:	bf00      	nop
 8000b92:	3714      	adds	r7, #20
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	24000620 	.word	0x24000620

08000ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000ba4:	f000 f958 	bl	8000e58 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ba8:	f000 fb28 	bl	80011fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bac:	f000 f830 	bl	8000c10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bb0:	f000 f8e8 	bl	8000d84 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000bb4:	f000 f89a 	bl	8000cec <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &data,1);
 8000bb8:	2201      	movs	r2, #1
 8000bba:	490f      	ldr	r1, [pc, #60]	@ (8000bf8 <main+0x58>)
 8000bbc:	480f      	ldr	r0, [pc, #60]	@ (8000bfc <main+0x5c>)
 8000bbe:	f004 fa89 	bl	80050d4 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bc8:	480d      	ldr	r0, [pc, #52]	@ (8000c00 <main+0x60>)
 8000bca:	f001 fc29 	bl	8002420 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,1);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2102      	movs	r1, #2
 8000bd2:	480c      	ldr	r0, [pc, #48]	@ (8000c04 <main+0x64>)
 8000bd4:	f001 fc24 	bl	8002420 <HAL_GPIO_WritePin>
  GNSS_Tanimla();
 8000bd8:	f7ff fd10 	bl	80005fc <GNSS_Tanimla>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    GNSS_Gorev();
 8000bdc:	f7ff fdee 	bl	80007bc <GNSS_Gorev>
	    if(GNSS_Veri_Al(&GNSS_t))
 8000be0:	4809      	ldr	r0, [pc, #36]	@ (8000c08 <main+0x68>)
 8000be2:	f7ff fd71 	bl	80006c8 <GNSS_Veri_Al>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d0f7      	beq.n	8000bdc <main+0x3c>
	    {
	    	//HAL_UART_Transmit(&huart3, (uint8_t*)("Yil"), 3, 1000);
	    	//HAL_UART_Transmit(&huart3, (uint8_t*)&GNSS_t.yil, 2, 1000);
	    	a++;
 8000bec:	4b07      	ldr	r3, [pc, #28]	@ (8000c0c <main+0x6c>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	4a06      	ldr	r2, [pc, #24]	@ (8000c0c <main+0x6c>)
 8000bf4:	6013      	str	r3, [r2, #0]
	    GNSS_Gorev();
 8000bf6:	e7f1      	b.n	8000bdc <main+0x3c>
 8000bf8:	24000abc 	.word	0x24000abc
 8000bfc:	24000a10 	.word	0x24000a10
 8000c00:	58020400 	.word	0x58020400
 8000c04:	58021000 	.word	0x58021000
 8000c08:	24000aa4 	.word	0x24000aa4
 8000c0c:	24000ab8 	.word	0x24000ab8

08000c10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b09c      	sub	sp, #112	@ 0x70
 8000c14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1a:	224c      	movs	r2, #76	@ 0x4c
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f006 feb6 	bl	8007990 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c24:	1d3b      	adds	r3, r7, #4
 8000c26:	2220      	movs	r2, #32
 8000c28:	2100      	movs	r1, #0
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	f006 feb0 	bl	8007990 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c30:	2002      	movs	r0, #2
 8000c32:	f001 fc0f 	bl	8002454 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c36:	2300      	movs	r3, #0
 8000c38:	603b      	str	r3, [r7, #0]
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c40:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c4e:	603b      	str	r3, [r7, #0]
 8000c50:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c52:	bf00      	nop
 8000c54:	4b24      	ldr	r3, [pc, #144]	@ (8000ce8 <SystemClock_Config+0xd8>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c60:	d1f8      	bne.n	8000c54 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c62:	2301      	movs	r3, #1
 8000c64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c66:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c70:	2302      	movs	r3, #2
 8000c72:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c74:	2301      	movs	r3, #1
 8000c76:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000c78:	2322      	movs	r3, #34	@ 0x22
 8000c7a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c80:	2302      	movs	r3, #2
 8000c82:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c84:	2302      	movs	r3, #2
 8000c86:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c88:	230c      	movs	r3, #12
 8000c8a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000c90:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c94:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f001 fc14 	bl	80024c8 <HAL_RCC_OscConfig>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ca6:	f000 f903 	bl	8000eb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000caa:	233f      	movs	r3, #63	@ 0x3f
 8000cac:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cae:	2303      	movs	r3, #3
 8000cb0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cba:	2340      	movs	r3, #64	@ 0x40
 8000cbc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cbe:	2340      	movs	r3, #64	@ 0x40
 8000cc0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cc8:	2340      	movs	r3, #64	@ 0x40
 8000cca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	2103      	movs	r1, #3
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f001 ffd3 	bl	8002c7c <HAL_RCC_ClockConfig>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000cdc:	f000 f8e8 	bl	8000eb0 <Error_Handler>
  }
}
 8000ce0:	bf00      	nop
 8000ce2:	3770      	adds	r7, #112	@ 0x70
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bd80      	pop	{r7, pc}
 8000ce8:	58024800 	.word	0x58024800

08000cec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cf0:	4b22      	ldr	r3, [pc, #136]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000cf2:	4a23      	ldr	r2, [pc, #140]	@ (8000d80 <MX_USART3_UART_Init+0x94>)
 8000cf4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000cf6:	4b21      	ldr	r3, [pc, #132]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000cf8:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000cfc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d04:	4b1d      	ldr	r3, [pc, #116]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d10:	4b1a      	ldr	r3, [pc, #104]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d12:	220c      	movs	r2, #12
 8000d14:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d16:	4b19      	ldr	r3, [pc, #100]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d1c:	4b17      	ldr	r3, [pc, #92]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d22:	4b16      	ldr	r3, [pc, #88]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d28:	4b14      	ldr	r3, [pc, #80]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d2e:	4b13      	ldr	r3, [pc, #76]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d34:	4811      	ldr	r0, [pc, #68]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d36:	f004 f8ef 	bl	8004f18 <HAL_UART_Init>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d40:	f000 f8b6 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d44:	2100      	movs	r1, #0
 8000d46:	480d      	ldr	r0, [pc, #52]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d48:	f006 fd57 	bl	80077fa <HAL_UARTEx_SetTxFifoThreshold>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d52:	f000 f8ad 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d56:	2100      	movs	r1, #0
 8000d58:	4808      	ldr	r0, [pc, #32]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d5a:	f006 fd8c 	bl	8007876 <HAL_UARTEx_SetRxFifoThreshold>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d64:	f000 f8a4 	bl	8000eb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d68:	4804      	ldr	r0, [pc, #16]	@ (8000d7c <MX_USART3_UART_Init+0x90>)
 8000d6a:	f006 fd0d 	bl	8007788 <HAL_UARTEx_DisableFifoMode>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d74:	f000 f89c 	bl	8000eb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d78:	bf00      	nop
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	24000a10 	.word	0x24000a10
 8000d80:	40004800 	.word	0x40004800

08000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b088      	sub	sp, #32
 8000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d9a:	4b2c      	ldr	r3, [pc, #176]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000d9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da0:	4a2a      	ldr	r2, [pc, #168]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000da6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000daa:	4b28      	ldr	r3, [pc, #160]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000db4:	60bb      	str	r3, [r7, #8]
 8000db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000db8:	4b24      	ldr	r3, [pc, #144]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000dba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dbe:	4a23      	ldr	r2, [pc, #140]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000dc0:	f043 0302 	orr.w	r3, r3, #2
 8000dc4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dc8:	4b20      	ldr	r3, [pc, #128]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dce:	f003 0302 	and.w	r3, r3, #2
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dd6:	4b1d      	ldr	r3, [pc, #116]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000dd8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000dde:	f043 0310 	orr.w	r3, r3, #16
 8000de2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000de6:	4b19      	ldr	r3, [pc, #100]	@ (8000e4c <MX_GPIO_Init+0xc8>)
 8000de8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dec:	f003 0310 	and.w	r3, r3, #16
 8000df0:	603b      	str	r3, [r7, #0]
 8000df2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000df4:	2200      	movs	r2, #0
 8000df6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000dfa:	4815      	ldr	r0, [pc, #84]	@ (8000e50 <MX_GPIO_Init+0xcc>)
 8000dfc:	f001 fb10 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	2102      	movs	r1, #2
 8000e04:	4813      	ldr	r0, [pc, #76]	@ (8000e54 <MX_GPIO_Init+0xd0>)
 8000e06:	f001 fb0b 	bl	8002420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e0a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e10:	2301      	movs	r3, #1
 8000e12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	4619      	mov	r1, r3
 8000e22:	480b      	ldr	r0, [pc, #44]	@ (8000e50 <MX_GPIO_Init+0xcc>)
 8000e24:	f001 f954 	bl	80020d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e28:	2302      	movs	r3, #2
 8000e2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e34:	2300      	movs	r3, #0
 8000e36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e38:	f107 030c 	add.w	r3, r7, #12
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4805      	ldr	r0, [pc, #20]	@ (8000e54 <MX_GPIO_Init+0xd0>)
 8000e40:	f001 f946 	bl	80020d0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e44:	bf00      	nop
 8000e46:	3720      	adds	r7, #32
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	58024400 	.word	0x58024400
 8000e50:	58020400 	.word	0x58020400
 8000e54:	58021000 	.word	0x58021000

08000e58 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e5e:	463b      	mov	r3, r7
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e6a:	f000 fb55 	bl	8001518 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e72:	2300      	movs	r3, #0
 8000e74:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e76:	2300      	movs	r3, #0
 8000e78:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e7a:	231f      	movs	r3, #31
 8000e7c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e7e:	2387      	movs	r3, #135	@ 0x87
 8000e80:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e86:	2300      	movs	r3, #0
 8000e88:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e8e:	2301      	movs	r3, #1
 8000e90:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e92:	2300      	movs	r3, #0
 8000e94:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e96:	2300      	movs	r3, #0
 8000e98:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f000 fb73 	bl	8001588 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000ea2:	2004      	movs	r0, #4
 8000ea4:	f000 fb50 	bl	8001548 <HAL_MPU_Enable>

}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}

08000eb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb4:	b672      	cpsid	i
}
 8000eb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb8:	bf00      	nop
 8000eba:	e7fd      	b.n	8000eb8 <Error_Handler+0x8>

08000ebc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b083      	sub	sp, #12
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8000eec <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec8:	4a08      	ldr	r2, [pc, #32]	@ (8000eec <HAL_MspInit+0x30>)
 8000eca:	f043 0302 	orr.w	r3, r3, #2
 8000ece:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ed2:	4b06      	ldr	r3, [pc, #24]	@ (8000eec <HAL_MspInit+0x30>)
 8000ed4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ed8:	f003 0302 	and.w	r3, r3, #2
 8000edc:	607b      	str	r3, [r7, #4]
 8000ede:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	370c      	adds	r7, #12
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	58024400 	.word	0x58024400

08000ef0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b0b8      	sub	sp, #224	@ 0xe0
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef8:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f08:	f107 0310 	add.w	r3, r7, #16
 8000f0c:	22b8      	movs	r2, #184	@ 0xb8
 8000f0e:	2100      	movs	r1, #0
 8000f10:	4618      	mov	r0, r3
 8000f12:	f006 fd3d 	bl	8007990 <memset>
  if(huart->Instance==USART3)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc8 <HAL_UART_MspInit+0xd8>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d14e      	bne.n	8000fbe <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f20:	f04f 0202 	mov.w	r2, #2
 8000f24:	f04f 0300 	mov.w	r3, #0
 8000f28:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f32:	f107 0310 	add.w	r3, r7, #16
 8000f36:	4618      	mov	r0, r3
 8000f38:	f002 fa2c 	bl	8003394 <HAL_RCCEx_PeriphCLKConfig>
 8000f3c:	4603      	mov	r3, r0
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d001      	beq.n	8000f46 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f42:	f7ff ffb5 	bl	8000eb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f46:	4b21      	ldr	r3, [pc, #132]	@ (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f48:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f4c:	4a1f      	ldr	r2, [pc, #124]	@ (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f56:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f5c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f64:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6a:	4a18      	ldr	r2, [pc, #96]	@ (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f6c:	f043 0302 	orr.w	r3, r3, #2
 8000f70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f74:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_UART_MspInit+0xdc>)
 8000f76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7a:	f003 0302 	and.w	r3, r3, #2
 8000f7e:	60bb      	str	r3, [r7, #8]
 8000f80:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f82:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f86:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f96:	2300      	movs	r3, #0
 8000f98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f9c:	2307      	movs	r3, #7
 8000f9e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fa2:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <HAL_UART_MspInit+0xe0>)
 8000faa:	f001 f891 	bl	80020d0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2103      	movs	r1, #3
 8000fb2:	2027      	movs	r0, #39	@ 0x27
 8000fb4:	f000 fa7b 	bl	80014ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fb8:	2027      	movs	r0, #39	@ 0x27
 8000fba:	f000 fa92 	bl	80014e2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000fbe:	bf00      	nop
 8000fc0:	37e0      	adds	r7, #224	@ 0xe0
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40004800 	.word	0x40004800
 8000fcc:	58024400 	.word	0x58024400
 8000fd0:	58020400 	.word	0x58020400

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <NMI_Handler+0x4>

08000fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr
	...

08001028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800102c:	4807      	ldr	r0, [pc, #28]	@ (800104c <USART3_IRQHandler+0x24>)
 800102e:	f004 f89d 	bl	800516c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &data,1);
 8001032:	2201      	movs	r2, #1
 8001034:	4906      	ldr	r1, [pc, #24]	@ (8001050 <USART3_IRQHandler+0x28>)
 8001036:	4805      	ldr	r0, [pc, #20]	@ (800104c <USART3_IRQHandler+0x24>)
 8001038:	f004 f84c 	bl	80050d4 <HAL_UART_Receive_IT>
  U_Blox_Receive_Data(data);
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <USART3_IRQHandler+0x28>)
 800103e:	781b      	ldrb	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff fcd9 	bl	80009f8 <U_Blox_Receive_Data>
  /* USER CODE END USART3_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	24000a10 	.word	0x24000a10
 8001050:	24000abc 	.word	0x24000abc

08001054 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001058:	4b32      	ldr	r3, [pc, #200]	@ (8001124 <SystemInit+0xd0>)
 800105a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800105e:	4a31      	ldr	r2, [pc, #196]	@ (8001124 <SystemInit+0xd0>)
 8001060:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001064:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001068:	4b2f      	ldr	r3, [pc, #188]	@ (8001128 <SystemInit+0xd4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 030f 	and.w	r3, r3, #15
 8001070:	2b06      	cmp	r3, #6
 8001072:	d807      	bhi.n	8001084 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001074:	4b2c      	ldr	r3, [pc, #176]	@ (8001128 <SystemInit+0xd4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	f023 030f 	bic.w	r3, r3, #15
 800107c:	4a2a      	ldr	r2, [pc, #168]	@ (8001128 <SystemInit+0xd4>)
 800107e:	f043 0307 	orr.w	r3, r3, #7
 8001082:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001084:	4b29      	ldr	r3, [pc, #164]	@ (800112c <SystemInit+0xd8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a28      	ldr	r2, [pc, #160]	@ (800112c <SystemInit+0xd8>)
 800108a:	f043 0301 	orr.w	r3, r3, #1
 800108e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001090:	4b26      	ldr	r3, [pc, #152]	@ (800112c <SystemInit+0xd8>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001096:	4b25      	ldr	r3, [pc, #148]	@ (800112c <SystemInit+0xd8>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	4924      	ldr	r1, [pc, #144]	@ (800112c <SystemInit+0xd8>)
 800109c:	4b24      	ldr	r3, [pc, #144]	@ (8001130 <SystemInit+0xdc>)
 800109e:	4013      	ands	r3, r2
 80010a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010a2:	4b21      	ldr	r3, [pc, #132]	@ (8001128 <SystemInit+0xd4>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f003 0308 	and.w	r3, r3, #8
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d007      	beq.n	80010be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001128 <SystemInit+0xd4>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f023 030f 	bic.w	r3, r3, #15
 80010b6:	4a1c      	ldr	r2, [pc, #112]	@ (8001128 <SystemInit+0xd4>)
 80010b8:	f043 0307 	orr.w	r3, r3, #7
 80010bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010be:	4b1b      	ldr	r3, [pc, #108]	@ (800112c <SystemInit+0xd8>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010c4:	4b19      	ldr	r3, [pc, #100]	@ (800112c <SystemInit+0xd8>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ca:	4b18      	ldr	r3, [pc, #96]	@ (800112c <SystemInit+0xd8>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010d0:	4b16      	ldr	r3, [pc, #88]	@ (800112c <SystemInit+0xd8>)
 80010d2:	4a18      	ldr	r2, [pc, #96]	@ (8001134 <SystemInit+0xe0>)
 80010d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010d6:	4b15      	ldr	r3, [pc, #84]	@ (800112c <SystemInit+0xd8>)
 80010d8:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <SystemInit+0xe4>)
 80010da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010dc:	4b13      	ldr	r3, [pc, #76]	@ (800112c <SystemInit+0xd8>)
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <SystemInit+0xe8>)
 80010e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010e2:	4b12      	ldr	r3, [pc, #72]	@ (800112c <SystemInit+0xd8>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010e8:	4b10      	ldr	r3, [pc, #64]	@ (800112c <SystemInit+0xd8>)
 80010ea:	4a14      	ldr	r2, [pc, #80]	@ (800113c <SystemInit+0xe8>)
 80010ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	@ (800112c <SystemInit+0xd8>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010f4:	4b0d      	ldr	r3, [pc, #52]	@ (800112c <SystemInit+0xd8>)
 80010f6:	4a11      	ldr	r2, [pc, #68]	@ (800113c <SystemInit+0xe8>)
 80010f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010fa:	4b0c      	ldr	r3, [pc, #48]	@ (800112c <SystemInit+0xd8>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001100:	4b0a      	ldr	r3, [pc, #40]	@ (800112c <SystemInit+0xd8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a09      	ldr	r2, [pc, #36]	@ (800112c <SystemInit+0xd8>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800110a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800110c:	4b07      	ldr	r3, [pc, #28]	@ (800112c <SystemInit+0xd8>)
 800110e:	2200      	movs	r2, #0
 8001110:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001112:	4b0b      	ldr	r3, [pc, #44]	@ (8001140 <SystemInit+0xec>)
 8001114:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001118:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000ed00 	.word	0xe000ed00
 8001128:	52002000 	.word	0x52002000
 800112c:	58024400 	.word	0x58024400
 8001130:	eaf6ed7f 	.word	0xeaf6ed7f
 8001134:	02020200 	.word	0x02020200
 8001138:	01ff0000 	.word	0x01ff0000
 800113c:	01010280 	.word	0x01010280
 8001140:	52004000 	.word	0x52004000

08001144 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001144:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800117c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001148:	f7ff ff84 	bl	8001054 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800114c:	480c      	ldr	r0, [pc, #48]	@ (8001180 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800114e:	490d      	ldr	r1, [pc, #52]	@ (8001184 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001150:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001152:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001154:	e002      	b.n	800115c <LoopCopyDataInit>

08001156 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001156:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001158:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115a:	3304      	adds	r3, #4

0800115c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800115c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800115e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001160:	d3f9      	bcc.n	8001156 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001162:	4a0a      	ldr	r2, [pc, #40]	@ (800118c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001164:	4c0a      	ldr	r4, [pc, #40]	@ (8001190 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001168:	e001      	b.n	800116e <LoopFillZerobss>

0800116a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800116c:	3204      	adds	r2, #4

0800116e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800116e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001170:	d3fb      	bcc.n	800116a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001172:	f006 fc15 	bl	80079a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001176:	f7ff fd13 	bl	8000ba0 <main>
  bx  lr
 800117a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800117c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001180:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001184:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001188:	08007a64 	.word	0x08007a64
  ldr r2, =_sbss
 800118c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001190:	24000ac8 	.word	0x24000ac8

08001194 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001194:	e7fe      	b.n	8001194 <ADC3_IRQHandler>
	...

08001198 <SystickGetMs>:
#include "stm32h7xx.h"

static uint32_t ms;

 uint32_t SystickGetMs()
 {
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
   return ms;
 800119c:	4b03      	ldr	r3, [pc, #12]	@ (80011ac <SystickGetMs+0x14>)
 800119e:	681b      	ldr	r3, [r3, #0]
 }
 80011a0:	4618      	mov	r0, r3
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	24000ac0 	.word	0x24000ac0

080011b0 <SystickCheckMs>:


 uint8_t SystickCheckMs(uint32_t reference,uint32_t time_passed)
 {
 80011b0:	b480      	push	{r7}
 80011b2:	b083      	sub	sp, #12
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
 80011b8:	6039      	str	r1, [r7, #0]
   if((ms-reference)>=time_passed)
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <SystickCheckMs+0x2c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	683a      	ldr	r2, [r7, #0]
 80011c4:	429a      	cmp	r2, r3
 80011c6:	d801      	bhi.n	80011cc <SystickCheckMs+0x1c>
	   return 1;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e000      	b.n	80011ce <SystickCheckMs+0x1e>
   else
	  return 0;
 80011cc:	2300      	movs	r3, #0
 }
 80011ce:	4618      	mov	r0, r3
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	24000ac0 	.word	0x24000ac0

080011e0 <SysTick_Handler>:


 void SysTick_Handler(void)
 {
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN SysTick_IRQn 0 */
    ms++;
 80011e4:	4b04      	ldr	r3, [pc, #16]	@ (80011f8 <SysTick_Handler+0x18>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	3301      	adds	r3, #1
 80011ea:	4a03      	ldr	r2, [pc, #12]	@ (80011f8 <SysTick_Handler+0x18>)
 80011ec:	6013      	str	r3, [r2, #0]


   /* USER CODE BEGIN SysTick_IRQn 1 */

   /* USER CODE END SysTick_IRQn 1 */
 }
 80011ee:	bf00      	nop
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	24000ac0 	.word	0x24000ac0

080011fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001202:	2003      	movs	r0, #3
 8001204:	f000 f948 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001208:	f001 feee 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 800120c:	4602      	mov	r2, r0
 800120e:	4b15      	ldr	r3, [pc, #84]	@ (8001264 <HAL_Init+0x68>)
 8001210:	699b      	ldr	r3, [r3, #24]
 8001212:	0a1b      	lsrs	r3, r3, #8
 8001214:	f003 030f 	and.w	r3, r3, #15
 8001218:	4913      	ldr	r1, [pc, #76]	@ (8001268 <HAL_Init+0x6c>)
 800121a:	5ccb      	ldrb	r3, [r1, r3]
 800121c:	f003 031f 	and.w	r3, r3, #31
 8001220:	fa22 f303 	lsr.w	r3, r2, r3
 8001224:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001226:	4b0f      	ldr	r3, [pc, #60]	@ (8001264 <HAL_Init+0x68>)
 8001228:	699b      	ldr	r3, [r3, #24]
 800122a:	f003 030f 	and.w	r3, r3, #15
 800122e:	4a0e      	ldr	r2, [pc, #56]	@ (8001268 <HAL_Init+0x6c>)
 8001230:	5cd3      	ldrb	r3, [r2, r3]
 8001232:	f003 031f 	and.w	r3, r3, #31
 8001236:	687a      	ldr	r2, [r7, #4]
 8001238:	fa22 f303 	lsr.w	r3, r2, r3
 800123c:	4a0b      	ldr	r2, [pc, #44]	@ (800126c <HAL_Init+0x70>)
 800123e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001240:	4a0b      	ldr	r2, [pc, #44]	@ (8001270 <HAL_Init+0x74>)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001246:	200f      	movs	r0, #15
 8001248:	f000 f814 	bl	8001274 <HAL_InitTick>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e002      	b.n	800125c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001256:	f7ff fe31 	bl	8000ebc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800125a:	2300      	movs	r3, #0
}
 800125c:	4618      	mov	r0, r3
 800125e:	3708      	adds	r7, #8
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	58024400 	.word	0x58024400
 8001268:	08007a1c 	.word	0x08007a1c
 800126c:	24000004 	.word	0x24000004
 8001270:	24000000 	.word	0x24000000

08001274 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800127c:	4b15      	ldr	r3, [pc, #84]	@ (80012d4 <HAL_InitTick+0x60>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e021      	b.n	80012cc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001288:	4b13      	ldr	r3, [pc, #76]	@ (80012d8 <HAL_InitTick+0x64>)
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <HAL_InitTick+0x60>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4619      	mov	r1, r3
 8001292:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001296:	fbb3 f3f1 	udiv	r3, r3, r1
 800129a:	fbb2 f3f3 	udiv	r3, r2, r3
 800129e:	4618      	mov	r0, r3
 80012a0:	f000 f92d 	bl	80014fe <HAL_SYSTICK_Config>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00e      	b.n	80012cc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	2b0f      	cmp	r3, #15
 80012b2:	d80a      	bhi.n	80012ca <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012b4:	2200      	movs	r2, #0
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f000 f8f7 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c0:	4a06      	ldr	r2, [pc, #24]	@ (80012dc <HAL_InitTick+0x68>)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3708      	adds	r7, #8
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	2400000c 	.word	0x2400000c
 80012d8:	24000000 	.word	0x24000000
 80012dc:	24000008 	.word	0x24000008

080012e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012e0:	b480      	push	{r7}
 80012e2:	af00      	add	r7, sp, #0
  return uwTick;
 80012e4:	4b03      	ldr	r3, [pc, #12]	@ (80012f4 <HAL_GetTick+0x14>)
 80012e6:	681b      	ldr	r3, [r3, #0]
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr
 80012f2:	bf00      	nop
 80012f4:	24000ac4 	.word	0x24000ac4

080012f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	f003 0307 	and.w	r3, r3, #7
 8001306:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001308:	4b0b      	ldr	r3, [pc, #44]	@ (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800130e:	68ba      	ldr	r2, [r7, #8]
 8001310:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001314:	4013      	ands	r3, r2
 8001316:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001320:	4b06      	ldr	r3, [pc, #24]	@ (800133c <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	4313      	orrs	r3, r2
 8001324:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001326:	4a04      	ldr	r2, [pc, #16]	@ (8001338 <__NVIC_SetPriorityGrouping+0x40>)
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	60d3      	str	r3, [r2, #12]
}
 800132c:	bf00      	nop
 800132e:	3714      	adds	r7, #20
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	e000ed00 	.word	0xe000ed00
 800133c:	05fa0000 	.word	0x05fa0000

08001340 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001344:	4b04      	ldr	r3, [pc, #16]	@ (8001358 <__NVIC_GetPriorityGrouping+0x18>)
 8001346:	68db      	ldr	r3, [r3, #12]
 8001348:	0a1b      	lsrs	r3, r3, #8
 800134a:	f003 0307 	and.w	r3, r3, #7
}
 800134e:	4618      	mov	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000ed00 	.word	0xe000ed00

0800135c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	4603      	mov	r3, r0
 8001364:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001366:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	db0b      	blt.n	8001386 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800136e:	88fb      	ldrh	r3, [r7, #6]
 8001370:	f003 021f 	and.w	r2, r3, #31
 8001374:	4907      	ldr	r1, [pc, #28]	@ (8001394 <__NVIC_EnableIRQ+0x38>)
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	095b      	lsrs	r3, r3, #5
 800137c:	2001      	movs	r0, #1
 800137e:	fa00 f202 	lsl.w	r2, r0, r2
 8001382:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	e000e100 	.word	0xe000e100

08001398 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	6039      	str	r1, [r7, #0]
 80013a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	db0a      	blt.n	80013c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	490c      	ldr	r1, [pc, #48]	@ (80013e4 <__NVIC_SetPriority+0x4c>)
 80013b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013b6:	0112      	lsls	r2, r2, #4
 80013b8:	b2d2      	uxtb	r2, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c0:	e00a      	b.n	80013d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	b2da      	uxtb	r2, r3
 80013c6:	4908      	ldr	r1, [pc, #32]	@ (80013e8 <__NVIC_SetPriority+0x50>)
 80013c8:	88fb      	ldrh	r3, [r7, #6]
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	3b04      	subs	r3, #4
 80013d0:	0112      	lsls	r2, r2, #4
 80013d2:	b2d2      	uxtb	r2, r2
 80013d4:	440b      	add	r3, r1
 80013d6:	761a      	strb	r2, [r3, #24]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000e100 	.word	0xe000e100
 80013e8:	e000ed00 	.word	0xe000ed00

080013ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b089      	sub	sp, #36	@ 0x24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	f1c3 0307 	rsb	r3, r3, #7
 8001406:	2b04      	cmp	r3, #4
 8001408:	bf28      	it	cs
 800140a:	2304      	movcs	r3, #4
 800140c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3304      	adds	r3, #4
 8001412:	2b06      	cmp	r3, #6
 8001414:	d902      	bls.n	800141c <NVIC_EncodePriority+0x30>
 8001416:	69fb      	ldr	r3, [r7, #28]
 8001418:	3b03      	subs	r3, #3
 800141a:	e000      	b.n	800141e <NVIC_EncodePriority+0x32>
 800141c:	2300      	movs	r3, #0
 800141e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001420:	f04f 32ff 	mov.w	r2, #4294967295
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	68bb      	ldr	r3, [r7, #8]
 800142e:	401a      	ands	r2, r3
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001434:	f04f 31ff 	mov.w	r1, #4294967295
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	fa01 f303 	lsl.w	r3, r1, r3
 800143e:	43d9      	mvns	r1, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001444:	4313      	orrs	r3, r2
         );
}
 8001446:	4618      	mov	r0, r3
 8001448:	3724      	adds	r7, #36	@ 0x24
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
	...

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff8e 	bl	8001398 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff29 	bl	80012f8 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014bc:	f7ff ff40 	bl	8001340 <__NVIC_GetPriorityGrouping>
 80014c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c2:	687a      	ldr	r2, [r7, #4]
 80014c4:	68b9      	ldr	r1, [r7, #8]
 80014c6:	6978      	ldr	r0, [r7, #20]
 80014c8:	f7ff ff90 	bl	80013ec <NVIC_EncodePriority>
 80014cc:	4602      	mov	r2, r0
 80014ce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014d2:	4611      	mov	r1, r2
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff ff5f 	bl	8001398 <__NVIC_SetPriority>
}
 80014da:	bf00      	nop
 80014dc:	3718      	adds	r7, #24
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff33 	bl	800135c <__NVIC_EnableIRQ>
}
 80014f6:	bf00      	nop
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f7ff ffa4 	bl	8001454 <SysTick_Config>
 800150c:	4603      	mov	r3, r0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3708      	adds	r7, #8
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
	...

08001518 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800151c:	f3bf 8f5f 	dmb	sy
}
 8001520:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_MPU_Disable+0x28>)
 8001524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001526:	4a06      	ldr	r2, [pc, #24]	@ (8001540 <HAL_MPU_Disable+0x28>)
 8001528:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800152c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_MPU_Disable+0x2c>)
 8001530:	2200      	movs	r2, #0
 8001532:	605a      	str	r2, [r3, #4]
}
 8001534:	bf00      	nop
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
 800153e:	bf00      	nop
 8001540:	e000ed00 	.word	0xe000ed00
 8001544:	e000ed90 	.word	0xe000ed90

08001548 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001550:	4a0b      	ldr	r2, [pc, #44]	@ (8001580 <HAL_MPU_Enable+0x38>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f043 0301 	orr.w	r3, r3, #1
 8001558:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800155a:	4b0a      	ldr	r3, [pc, #40]	@ (8001584 <HAL_MPU_Enable+0x3c>)
 800155c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800155e:	4a09      	ldr	r2, [pc, #36]	@ (8001584 <HAL_MPU_Enable+0x3c>)
 8001560:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001564:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001566:	f3bf 8f4f 	dsb	sy
}
 800156a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800156c:	f3bf 8f6f 	isb	sy
}
 8001570:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000ed90 	.word	0xe000ed90
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	785a      	ldrb	r2, [r3, #1]
 8001594:	4b1b      	ldr	r3, [pc, #108]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
 8001596:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001598:	4b1a      	ldr	r3, [pc, #104]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
 800159a:	691b      	ldr	r3, [r3, #16]
 800159c:	4a19      	ldr	r2, [pc, #100]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
 800159e:	f023 0301 	bic.w	r3, r3, #1
 80015a2:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015a4:	4a17      	ldr	r2, [pc, #92]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	7b1b      	ldrb	r3, [r3, #12]
 80015b0:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	7adb      	ldrb	r3, [r3, #11]
 80015b6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015b8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	7a9b      	ldrb	r3, [r3, #10]
 80015be:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	7b5b      	ldrb	r3, [r3, #13]
 80015c6:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	7b9b      	ldrb	r3, [r3, #14]
 80015ce:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	7bdb      	ldrb	r3, [r3, #15]
 80015d6:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	7a5b      	ldrb	r3, [r3, #9]
 80015de:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	7a1b      	ldrb	r3, [r3, #8]
 80015e6:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015e8:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015ea:	687a      	ldr	r2, [r7, #4]
 80015ec:	7812      	ldrb	r2, [r2, #0]
 80015ee:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f0:	4a04      	ldr	r2, [pc, #16]	@ (8001604 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015f2:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015f4:	6113      	str	r3, [r2, #16]
}
 80015f6:	bf00      	nop
 80015f8:	370c      	adds	r7, #12
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr
 8001602:	bf00      	nop
 8001604:	e000ed90 	.word	0xe000ed90

08001608 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001610:	f7ff fe66 	bl	80012e0 <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d101      	bne.n	8001620 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800161c:	2301      	movs	r3, #1
 800161e:	e2dc      	b.n	8001bda <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001626:	b2db      	uxtb	r3, r3
 8001628:	2b02      	cmp	r3, #2
 800162a:	d008      	beq.n	800163e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2280      	movs	r2, #128	@ 0x80
 8001630:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2200      	movs	r2, #0
 8001636:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e2cd      	b.n	8001bda <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a76      	ldr	r2, [pc, #472]	@ (800181c <HAL_DMA_Abort+0x214>)
 8001644:	4293      	cmp	r3, r2
 8001646:	d04a      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a74      	ldr	r2, [pc, #464]	@ (8001820 <HAL_DMA_Abort+0x218>)
 800164e:	4293      	cmp	r3, r2
 8001650:	d045      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a73      	ldr	r2, [pc, #460]	@ (8001824 <HAL_DMA_Abort+0x21c>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d040      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a71      	ldr	r2, [pc, #452]	@ (8001828 <HAL_DMA_Abort+0x220>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d03b      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a70      	ldr	r2, [pc, #448]	@ (800182c <HAL_DMA_Abort+0x224>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d036      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a6e      	ldr	r2, [pc, #440]	@ (8001830 <HAL_DMA_Abort+0x228>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d031      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a6d      	ldr	r2, [pc, #436]	@ (8001834 <HAL_DMA_Abort+0x22c>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d02c      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6b      	ldr	r2, [pc, #428]	@ (8001838 <HAL_DMA_Abort+0x230>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d027      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6a      	ldr	r2, [pc, #424]	@ (800183c <HAL_DMA_Abort+0x234>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d022      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a68      	ldr	r2, [pc, #416]	@ (8001840 <HAL_DMA_Abort+0x238>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d01d      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a67      	ldr	r2, [pc, #412]	@ (8001844 <HAL_DMA_Abort+0x23c>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d018      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a65      	ldr	r2, [pc, #404]	@ (8001848 <HAL_DMA_Abort+0x240>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d013      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a64      	ldr	r2, [pc, #400]	@ (800184c <HAL_DMA_Abort+0x244>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d00e      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a62      	ldr	r2, [pc, #392]	@ (8001850 <HAL_DMA_Abort+0x248>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d009      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a61      	ldr	r2, [pc, #388]	@ (8001854 <HAL_DMA_Abort+0x24c>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d004      	beq.n	80016de <HAL_DMA_Abort+0xd6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a5f      	ldr	r2, [pc, #380]	@ (8001858 <HAL_DMA_Abort+0x250>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d101      	bne.n	80016e2 <HAL_DMA_Abort+0xda>
 80016de:	2301      	movs	r3, #1
 80016e0:	e000      	b.n	80016e4 <HAL_DMA_Abort+0xdc>
 80016e2:	2300      	movs	r3, #0
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d013      	beq.n	8001710 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	681a      	ldr	r2, [r3, #0]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f022 021e 	bic.w	r2, r2, #30
 80016f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	695a      	ldr	r2, [r3, #20]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001706:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e00a      	b.n	8001726 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 020e 	bic.w	r2, r2, #14
 800171e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a3c      	ldr	r2, [pc, #240]	@ (800181c <HAL_DMA_Abort+0x214>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d072      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a3a      	ldr	r2, [pc, #232]	@ (8001820 <HAL_DMA_Abort+0x218>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d06d      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a39      	ldr	r2, [pc, #228]	@ (8001824 <HAL_DMA_Abort+0x21c>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d068      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a37      	ldr	r2, [pc, #220]	@ (8001828 <HAL_DMA_Abort+0x220>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d063      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a36      	ldr	r2, [pc, #216]	@ (800182c <HAL_DMA_Abort+0x224>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d05e      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a34      	ldr	r2, [pc, #208]	@ (8001830 <HAL_DMA_Abort+0x228>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d059      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a33      	ldr	r2, [pc, #204]	@ (8001834 <HAL_DMA_Abort+0x22c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d054      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a31      	ldr	r2, [pc, #196]	@ (8001838 <HAL_DMA_Abort+0x230>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d04f      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a30      	ldr	r2, [pc, #192]	@ (800183c <HAL_DMA_Abort+0x234>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d04a      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a2e      	ldr	r2, [pc, #184]	@ (8001840 <HAL_DMA_Abort+0x238>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d045      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a2d      	ldr	r2, [pc, #180]	@ (8001844 <HAL_DMA_Abort+0x23c>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d040      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2b      	ldr	r2, [pc, #172]	@ (8001848 <HAL_DMA_Abort+0x240>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d03b      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a2a      	ldr	r2, [pc, #168]	@ (800184c <HAL_DMA_Abort+0x244>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d036      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a28      	ldr	r2, [pc, #160]	@ (8001850 <HAL_DMA_Abort+0x248>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d031      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a27      	ldr	r2, [pc, #156]	@ (8001854 <HAL_DMA_Abort+0x24c>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d02c      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a25      	ldr	r2, [pc, #148]	@ (8001858 <HAL_DMA_Abort+0x250>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d027      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a24      	ldr	r2, [pc, #144]	@ (800185c <HAL_DMA_Abort+0x254>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d022      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a22      	ldr	r2, [pc, #136]	@ (8001860 <HAL_DMA_Abort+0x258>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d01d      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a21      	ldr	r2, [pc, #132]	@ (8001864 <HAL_DMA_Abort+0x25c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d018      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a1f      	ldr	r2, [pc, #124]	@ (8001868 <HAL_DMA_Abort+0x260>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d013      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1e      	ldr	r2, [pc, #120]	@ (800186c <HAL_DMA_Abort+0x264>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d00e      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1c      	ldr	r2, [pc, #112]	@ (8001870 <HAL_DMA_Abort+0x268>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d009      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1b      	ldr	r2, [pc, #108]	@ (8001874 <HAL_DMA_Abort+0x26c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d004      	beq.n	8001816 <HAL_DMA_Abort+0x20e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a19      	ldr	r2, [pc, #100]	@ (8001878 <HAL_DMA_Abort+0x270>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d132      	bne.n	800187c <HAL_DMA_Abort+0x274>
 8001816:	2301      	movs	r3, #1
 8001818:	e031      	b.n	800187e <HAL_DMA_Abort+0x276>
 800181a:	bf00      	nop
 800181c:	40020010 	.word	0x40020010
 8001820:	40020028 	.word	0x40020028
 8001824:	40020040 	.word	0x40020040
 8001828:	40020058 	.word	0x40020058
 800182c:	40020070 	.word	0x40020070
 8001830:	40020088 	.word	0x40020088
 8001834:	400200a0 	.word	0x400200a0
 8001838:	400200b8 	.word	0x400200b8
 800183c:	40020410 	.word	0x40020410
 8001840:	40020428 	.word	0x40020428
 8001844:	40020440 	.word	0x40020440
 8001848:	40020458 	.word	0x40020458
 800184c:	40020470 	.word	0x40020470
 8001850:	40020488 	.word	0x40020488
 8001854:	400204a0 	.word	0x400204a0
 8001858:	400204b8 	.word	0x400204b8
 800185c:	58025408 	.word	0x58025408
 8001860:	5802541c 	.word	0x5802541c
 8001864:	58025430 	.word	0x58025430
 8001868:	58025444 	.word	0x58025444
 800186c:	58025458 	.word	0x58025458
 8001870:	5802546c 	.word	0x5802546c
 8001874:	58025480 	.word	0x58025480
 8001878:	58025494 	.word	0x58025494
 800187c:	2300      	movs	r3, #0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d007      	beq.n	8001892 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800188c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001890:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6d      	ldr	r2, [pc, #436]	@ (8001a4c <HAL_DMA_Abort+0x444>)
 8001898:	4293      	cmp	r3, r2
 800189a:	d04a      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a6b      	ldr	r2, [pc, #428]	@ (8001a50 <HAL_DMA_Abort+0x448>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d045      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6a      	ldr	r2, [pc, #424]	@ (8001a54 <HAL_DMA_Abort+0x44c>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d040      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a68      	ldr	r2, [pc, #416]	@ (8001a58 <HAL_DMA_Abort+0x450>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d03b      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a67      	ldr	r2, [pc, #412]	@ (8001a5c <HAL_DMA_Abort+0x454>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d036      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a65      	ldr	r2, [pc, #404]	@ (8001a60 <HAL_DMA_Abort+0x458>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d031      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a64      	ldr	r2, [pc, #400]	@ (8001a64 <HAL_DMA_Abort+0x45c>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d02c      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a62      	ldr	r2, [pc, #392]	@ (8001a68 <HAL_DMA_Abort+0x460>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d027      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a61      	ldr	r2, [pc, #388]	@ (8001a6c <HAL_DMA_Abort+0x464>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d022      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a5f      	ldr	r2, [pc, #380]	@ (8001a70 <HAL_DMA_Abort+0x468>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d01d      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a5e      	ldr	r2, [pc, #376]	@ (8001a74 <HAL_DMA_Abort+0x46c>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d018      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5c      	ldr	r2, [pc, #368]	@ (8001a78 <HAL_DMA_Abort+0x470>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d013      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5b      	ldr	r2, [pc, #364]	@ (8001a7c <HAL_DMA_Abort+0x474>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d00e      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a59      	ldr	r2, [pc, #356]	@ (8001a80 <HAL_DMA_Abort+0x478>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d009      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a58      	ldr	r2, [pc, #352]	@ (8001a84 <HAL_DMA_Abort+0x47c>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d004      	beq.n	8001932 <HAL_DMA_Abort+0x32a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a56      	ldr	r2, [pc, #344]	@ (8001a88 <HAL_DMA_Abort+0x480>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d108      	bne.n	8001944 <HAL_DMA_Abort+0x33c>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 0201 	bic.w	r2, r2, #1
 8001940:	601a      	str	r2, [r3, #0]
 8001942:	e007      	b.n	8001954 <HAL_DMA_Abort+0x34c>
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f022 0201 	bic.w	r2, r2, #1
 8001952:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001954:	e013      	b.n	800197e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001956:	f7ff fcc3 	bl	80012e0 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b05      	cmp	r3, #5
 8001962:	d90c      	bls.n	800197e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2220      	movs	r2, #32
 8001968:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e12d      	b.n	8001bda <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0301 	and.w	r3, r3, #1
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1e5      	bne.n	8001956 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a2f      	ldr	r2, [pc, #188]	@ (8001a4c <HAL_DMA_Abort+0x444>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d04a      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a2d      	ldr	r2, [pc, #180]	@ (8001a50 <HAL_DMA_Abort+0x448>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d045      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2c      	ldr	r2, [pc, #176]	@ (8001a54 <HAL_DMA_Abort+0x44c>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d040      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001a58 <HAL_DMA_Abort+0x450>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d03b      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a29      	ldr	r2, [pc, #164]	@ (8001a5c <HAL_DMA_Abort+0x454>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d036      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a27      	ldr	r2, [pc, #156]	@ (8001a60 <HAL_DMA_Abort+0x458>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d031      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a26      	ldr	r2, [pc, #152]	@ (8001a64 <HAL_DMA_Abort+0x45c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d02c      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a24      	ldr	r2, [pc, #144]	@ (8001a68 <HAL_DMA_Abort+0x460>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d027      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a23      	ldr	r2, [pc, #140]	@ (8001a6c <HAL_DMA_Abort+0x464>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d022      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a21      	ldr	r2, [pc, #132]	@ (8001a70 <HAL_DMA_Abort+0x468>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d01d      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a20      	ldr	r2, [pc, #128]	@ (8001a74 <HAL_DMA_Abort+0x46c>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d018      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001a78 <HAL_DMA_Abort+0x470>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d013      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a1d      	ldr	r2, [pc, #116]	@ (8001a7c <HAL_DMA_Abort+0x474>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d00e      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1b      	ldr	r2, [pc, #108]	@ (8001a80 <HAL_DMA_Abort+0x478>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d009      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8001a84 <HAL_DMA_Abort+0x47c>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d004      	beq.n	8001a2a <HAL_DMA_Abort+0x422>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a18      	ldr	r2, [pc, #96]	@ (8001a88 <HAL_DMA_Abort+0x480>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d101      	bne.n	8001a2e <HAL_DMA_Abort+0x426>
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e000      	b.n	8001a30 <HAL_DMA_Abort+0x428>
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d02b      	beq.n	8001a8c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a38:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	223f      	movs	r2, #63	@ 0x3f
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	e02a      	b.n	8001aa2 <HAL_DMA_Abort+0x49a>
 8001a4c:	40020010 	.word	0x40020010
 8001a50:	40020028 	.word	0x40020028
 8001a54:	40020040 	.word	0x40020040
 8001a58:	40020058 	.word	0x40020058
 8001a5c:	40020070 	.word	0x40020070
 8001a60:	40020088 	.word	0x40020088
 8001a64:	400200a0 	.word	0x400200a0
 8001a68:	400200b8 	.word	0x400200b8
 8001a6c:	40020410 	.word	0x40020410
 8001a70:	40020428 	.word	0x40020428
 8001a74:	40020440 	.word	0x40020440
 8001a78:	40020458 	.word	0x40020458
 8001a7c:	40020470 	.word	0x40020470
 8001a80:	40020488 	.word	0x40020488
 8001a84:	400204a0 	.word	0x400204a0
 8001a88:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a90:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a96:	f003 031f 	and.w	r3, r3, #31
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a4f      	ldr	r2, [pc, #316]	@ (8001be4 <HAL_DMA_Abort+0x5dc>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d072      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a4d      	ldr	r2, [pc, #308]	@ (8001be8 <HAL_DMA_Abort+0x5e0>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d06d      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a4c      	ldr	r2, [pc, #304]	@ (8001bec <HAL_DMA_Abort+0x5e4>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d068      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a4a      	ldr	r2, [pc, #296]	@ (8001bf0 <HAL_DMA_Abort+0x5e8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d063      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a49      	ldr	r2, [pc, #292]	@ (8001bf4 <HAL_DMA_Abort+0x5ec>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d05e      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a47      	ldr	r2, [pc, #284]	@ (8001bf8 <HAL_DMA_Abort+0x5f0>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d059      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a46      	ldr	r2, [pc, #280]	@ (8001bfc <HAL_DMA_Abort+0x5f4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d054      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a44      	ldr	r2, [pc, #272]	@ (8001c00 <HAL_DMA_Abort+0x5f8>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d04f      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a43      	ldr	r2, [pc, #268]	@ (8001c04 <HAL_DMA_Abort+0x5fc>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d04a      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a41      	ldr	r2, [pc, #260]	@ (8001c08 <HAL_DMA_Abort+0x600>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d045      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a40      	ldr	r2, [pc, #256]	@ (8001c0c <HAL_DMA_Abort+0x604>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d040      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a3e      	ldr	r2, [pc, #248]	@ (8001c10 <HAL_DMA_Abort+0x608>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d03b      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001c14 <HAL_DMA_Abort+0x60c>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d036      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a3b      	ldr	r2, [pc, #236]	@ (8001c18 <HAL_DMA_Abort+0x610>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d031      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a3a      	ldr	r2, [pc, #232]	@ (8001c1c <HAL_DMA_Abort+0x614>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d02c      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a38      	ldr	r2, [pc, #224]	@ (8001c20 <HAL_DMA_Abort+0x618>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d027      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a37      	ldr	r2, [pc, #220]	@ (8001c24 <HAL_DMA_Abort+0x61c>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d022      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a35      	ldr	r2, [pc, #212]	@ (8001c28 <HAL_DMA_Abort+0x620>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d01d      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a34      	ldr	r2, [pc, #208]	@ (8001c2c <HAL_DMA_Abort+0x624>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d018      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a32      	ldr	r2, [pc, #200]	@ (8001c30 <HAL_DMA_Abort+0x628>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d013      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a31      	ldr	r2, [pc, #196]	@ (8001c34 <HAL_DMA_Abort+0x62c>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d00e      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a2f      	ldr	r2, [pc, #188]	@ (8001c38 <HAL_DMA_Abort+0x630>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d009      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a2e      	ldr	r2, [pc, #184]	@ (8001c3c <HAL_DMA_Abort+0x634>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d004      	beq.n	8001b92 <HAL_DMA_Abort+0x58a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2c      	ldr	r2, [pc, #176]	@ (8001c40 <HAL_DMA_Abort+0x638>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d101      	bne.n	8001b96 <HAL_DMA_Abort+0x58e>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <HAL_DMA_Abort+0x590>
 8001b96:	2300      	movs	r3, #0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d015      	beq.n	8001bc8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001ba4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d00c      	beq.n	8001bc8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bb8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bbc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bc6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2201      	movs	r2, #1
 8001bcc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3718      	adds	r7, #24
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40020010 	.word	0x40020010
 8001be8:	40020028 	.word	0x40020028
 8001bec:	40020040 	.word	0x40020040
 8001bf0:	40020058 	.word	0x40020058
 8001bf4:	40020070 	.word	0x40020070
 8001bf8:	40020088 	.word	0x40020088
 8001bfc:	400200a0 	.word	0x400200a0
 8001c00:	400200b8 	.word	0x400200b8
 8001c04:	40020410 	.word	0x40020410
 8001c08:	40020428 	.word	0x40020428
 8001c0c:	40020440 	.word	0x40020440
 8001c10:	40020458 	.word	0x40020458
 8001c14:	40020470 	.word	0x40020470
 8001c18:	40020488 	.word	0x40020488
 8001c1c:	400204a0 	.word	0x400204a0
 8001c20:	400204b8 	.word	0x400204b8
 8001c24:	58025408 	.word	0x58025408
 8001c28:	5802541c 	.word	0x5802541c
 8001c2c:	58025430 	.word	0x58025430
 8001c30:	58025444 	.word	0x58025444
 8001c34:	58025458 	.word	0x58025458
 8001c38:	5802546c 	.word	0x5802546c
 8001c3c:	58025480 	.word	0x58025480
 8001c40:	58025494 	.word	0x58025494

08001c44 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e237      	b.n	80020c6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c5c:	b2db      	uxtb	r3, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d004      	beq.n	8001c6c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2280      	movs	r2, #128	@ 0x80
 8001c66:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e22c      	b.n	80020c6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a5c      	ldr	r2, [pc, #368]	@ (8001de4 <HAL_DMA_Abort_IT+0x1a0>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d04a      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4a5b      	ldr	r2, [pc, #364]	@ (8001de8 <HAL_DMA_Abort_IT+0x1a4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d045      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a59      	ldr	r2, [pc, #356]	@ (8001dec <HAL_DMA_Abort_IT+0x1a8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d040      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a58      	ldr	r2, [pc, #352]	@ (8001df0 <HAL_DMA_Abort_IT+0x1ac>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d03b      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a56      	ldr	r2, [pc, #344]	@ (8001df4 <HAL_DMA_Abort_IT+0x1b0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d036      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a55      	ldr	r2, [pc, #340]	@ (8001df8 <HAL_DMA_Abort_IT+0x1b4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d031      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a53      	ldr	r2, [pc, #332]	@ (8001dfc <HAL_DMA_Abort_IT+0x1b8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d02c      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a52      	ldr	r2, [pc, #328]	@ (8001e00 <HAL_DMA_Abort_IT+0x1bc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d027      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a50      	ldr	r2, [pc, #320]	@ (8001e04 <HAL_DMA_Abort_IT+0x1c0>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d022      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a4f      	ldr	r2, [pc, #316]	@ (8001e08 <HAL_DMA_Abort_IT+0x1c4>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d01d      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8001e0c <HAL_DMA_Abort_IT+0x1c8>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d018      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a4c      	ldr	r2, [pc, #304]	@ (8001e10 <HAL_DMA_Abort_IT+0x1cc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d013      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8001e14 <HAL_DMA_Abort_IT+0x1d0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00e      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a49      	ldr	r2, [pc, #292]	@ (8001e18 <HAL_DMA_Abort_IT+0x1d4>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d009      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a47      	ldr	r2, [pc, #284]	@ (8001e1c <HAL_DMA_Abort_IT+0x1d8>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_Abort_IT+0xc8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a46      	ldr	r2, [pc, #280]	@ (8001e20 <HAL_DMA_Abort_IT+0x1dc>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d101      	bne.n	8001d10 <HAL_DMA_Abort_IT+0xcc>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_DMA_Abort_IT+0xce>
 8001d10:	2300      	movs	r3, #0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8086 	beq.w	8001e24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2204      	movs	r2, #4
 8001d1c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a2f      	ldr	r2, [pc, #188]	@ (8001de4 <HAL_DMA_Abort_IT+0x1a0>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d04a      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a2e      	ldr	r2, [pc, #184]	@ (8001de8 <HAL_DMA_Abort_IT+0x1a4>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d045      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2c      	ldr	r2, [pc, #176]	@ (8001dec <HAL_DMA_Abort_IT+0x1a8>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d040      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2b      	ldr	r2, [pc, #172]	@ (8001df0 <HAL_DMA_Abort_IT+0x1ac>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d03b      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a29      	ldr	r2, [pc, #164]	@ (8001df4 <HAL_DMA_Abort_IT+0x1b0>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d036      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a28      	ldr	r2, [pc, #160]	@ (8001df8 <HAL_DMA_Abort_IT+0x1b4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d031      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a26      	ldr	r2, [pc, #152]	@ (8001dfc <HAL_DMA_Abort_IT+0x1b8>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02c      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a25      	ldr	r2, [pc, #148]	@ (8001e00 <HAL_DMA_Abort_IT+0x1bc>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d027      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a23      	ldr	r2, [pc, #140]	@ (8001e04 <HAL_DMA_Abort_IT+0x1c0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d022      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a22      	ldr	r2, [pc, #136]	@ (8001e08 <HAL_DMA_Abort_IT+0x1c4>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d01d      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a20      	ldr	r2, [pc, #128]	@ (8001e0c <HAL_DMA_Abort_IT+0x1c8>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d018      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a1f      	ldr	r2, [pc, #124]	@ (8001e10 <HAL_DMA_Abort_IT+0x1cc>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d013      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1d      	ldr	r2, [pc, #116]	@ (8001e14 <HAL_DMA_Abort_IT+0x1d0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d00e      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e18 <HAL_DMA_Abort_IT+0x1d4>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d009      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1a      	ldr	r2, [pc, #104]	@ (8001e1c <HAL_DMA_Abort_IT+0x1d8>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d004      	beq.n	8001dc0 <HAL_DMA_Abort_IT+0x17c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a19      	ldr	r2, [pc, #100]	@ (8001e20 <HAL_DMA_Abort_IT+0x1dc>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d108      	bne.n	8001dd2 <HAL_DMA_Abort_IT+0x18e>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f022 0201 	bic.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	e178      	b.n	80020c4 <HAL_DMA_Abort_IT+0x480>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f022 0201 	bic.w	r2, r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
 8001de2:	e16f      	b.n	80020c4 <HAL_DMA_Abort_IT+0x480>
 8001de4:	40020010 	.word	0x40020010
 8001de8:	40020028 	.word	0x40020028
 8001dec:	40020040 	.word	0x40020040
 8001df0:	40020058 	.word	0x40020058
 8001df4:	40020070 	.word	0x40020070
 8001df8:	40020088 	.word	0x40020088
 8001dfc:	400200a0 	.word	0x400200a0
 8001e00:	400200b8 	.word	0x400200b8
 8001e04:	40020410 	.word	0x40020410
 8001e08:	40020428 	.word	0x40020428
 8001e0c:	40020440 	.word	0x40020440
 8001e10:	40020458 	.word	0x40020458
 8001e14:	40020470 	.word	0x40020470
 8001e18:	40020488 	.word	0x40020488
 8001e1c:	400204a0 	.word	0x400204a0
 8001e20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f022 020e 	bic.w	r2, r2, #14
 8001e32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a6c      	ldr	r2, [pc, #432]	@ (8001fec <HAL_DMA_Abort_IT+0x3a8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d04a      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a6b      	ldr	r2, [pc, #428]	@ (8001ff0 <HAL_DMA_Abort_IT+0x3ac>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d045      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a69      	ldr	r2, [pc, #420]	@ (8001ff4 <HAL_DMA_Abort_IT+0x3b0>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d040      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a68      	ldr	r2, [pc, #416]	@ (8001ff8 <HAL_DMA_Abort_IT+0x3b4>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d03b      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a66      	ldr	r2, [pc, #408]	@ (8001ffc <HAL_DMA_Abort_IT+0x3b8>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d036      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a65      	ldr	r2, [pc, #404]	@ (8002000 <HAL_DMA_Abort_IT+0x3bc>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d031      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a63      	ldr	r2, [pc, #396]	@ (8002004 <HAL_DMA_Abort_IT+0x3c0>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d02c      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a62      	ldr	r2, [pc, #392]	@ (8002008 <HAL_DMA_Abort_IT+0x3c4>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d027      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a60      	ldr	r2, [pc, #384]	@ (800200c <HAL_DMA_Abort_IT+0x3c8>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d022      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a5f      	ldr	r2, [pc, #380]	@ (8002010 <HAL_DMA_Abort_IT+0x3cc>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d01d      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002014 <HAL_DMA_Abort_IT+0x3d0>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d018      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5c      	ldr	r2, [pc, #368]	@ (8002018 <HAL_DMA_Abort_IT+0x3d4>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d013      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5a      	ldr	r2, [pc, #360]	@ (800201c <HAL_DMA_Abort_IT+0x3d8>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d00e      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a59      	ldr	r2, [pc, #356]	@ (8002020 <HAL_DMA_Abort_IT+0x3dc>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d009      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a57      	ldr	r2, [pc, #348]	@ (8002024 <HAL_DMA_Abort_IT+0x3e0>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d004      	beq.n	8001ed4 <HAL_DMA_Abort_IT+0x290>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a56      	ldr	r2, [pc, #344]	@ (8002028 <HAL_DMA_Abort_IT+0x3e4>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d108      	bne.n	8001ee6 <HAL_DMA_Abort_IT+0x2a2>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
 8001ee4:	e007      	b.n	8001ef6 <HAL_DMA_Abort_IT+0x2b2>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f022 0201 	bic.w	r2, r2, #1
 8001ef4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a3c      	ldr	r2, [pc, #240]	@ (8001fec <HAL_DMA_Abort_IT+0x3a8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d072      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a3a      	ldr	r2, [pc, #232]	@ (8001ff0 <HAL_DMA_Abort_IT+0x3ac>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d06d      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a39      	ldr	r2, [pc, #228]	@ (8001ff4 <HAL_DMA_Abort_IT+0x3b0>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d068      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a37      	ldr	r2, [pc, #220]	@ (8001ff8 <HAL_DMA_Abort_IT+0x3b4>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d063      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a36      	ldr	r2, [pc, #216]	@ (8001ffc <HAL_DMA_Abort_IT+0x3b8>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d05e      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a34      	ldr	r2, [pc, #208]	@ (8002000 <HAL_DMA_Abort_IT+0x3bc>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d059      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a33      	ldr	r2, [pc, #204]	@ (8002004 <HAL_DMA_Abort_IT+0x3c0>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d054      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a31      	ldr	r2, [pc, #196]	@ (8002008 <HAL_DMA_Abort_IT+0x3c4>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d04f      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a30      	ldr	r2, [pc, #192]	@ (800200c <HAL_DMA_Abort_IT+0x3c8>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d04a      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a2e      	ldr	r2, [pc, #184]	@ (8002010 <HAL_DMA_Abort_IT+0x3cc>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d045      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002014 <HAL_DMA_Abort_IT+0x3d0>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d040      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2b      	ldr	r2, [pc, #172]	@ (8002018 <HAL_DMA_Abort_IT+0x3d4>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d03b      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2a      	ldr	r2, [pc, #168]	@ (800201c <HAL_DMA_Abort_IT+0x3d8>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d036      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a28      	ldr	r2, [pc, #160]	@ (8002020 <HAL_DMA_Abort_IT+0x3dc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d031      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a27      	ldr	r2, [pc, #156]	@ (8002024 <HAL_DMA_Abort_IT+0x3e0>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d02c      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a25      	ldr	r2, [pc, #148]	@ (8002028 <HAL_DMA_Abort_IT+0x3e4>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d027      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a24      	ldr	r2, [pc, #144]	@ (800202c <HAL_DMA_Abort_IT+0x3e8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d022      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a22      	ldr	r2, [pc, #136]	@ (8002030 <HAL_DMA_Abort_IT+0x3ec>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d01d      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a21      	ldr	r2, [pc, #132]	@ (8002034 <HAL_DMA_Abort_IT+0x3f0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d018      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002038 <HAL_DMA_Abort_IT+0x3f4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d013      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a1e      	ldr	r2, [pc, #120]	@ (800203c <HAL_DMA_Abort_IT+0x3f8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d00e      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002040 <HAL_DMA_Abort_IT+0x3fc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d009      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002044 <HAL_DMA_Abort_IT+0x400>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d004      	beq.n	8001fe6 <HAL_DMA_Abort_IT+0x3a2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a19      	ldr	r2, [pc, #100]	@ (8002048 <HAL_DMA_Abort_IT+0x404>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d132      	bne.n	800204c <HAL_DMA_Abort_IT+0x408>
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e031      	b.n	800204e <HAL_DMA_Abort_IT+0x40a>
 8001fea:	bf00      	nop
 8001fec:	40020010 	.word	0x40020010
 8001ff0:	40020028 	.word	0x40020028
 8001ff4:	40020040 	.word	0x40020040
 8001ff8:	40020058 	.word	0x40020058
 8001ffc:	40020070 	.word	0x40020070
 8002000:	40020088 	.word	0x40020088
 8002004:	400200a0 	.word	0x400200a0
 8002008:	400200b8 	.word	0x400200b8
 800200c:	40020410 	.word	0x40020410
 8002010:	40020428 	.word	0x40020428
 8002014:	40020440 	.word	0x40020440
 8002018:	40020458 	.word	0x40020458
 800201c:	40020470 	.word	0x40020470
 8002020:	40020488 	.word	0x40020488
 8002024:	400204a0 	.word	0x400204a0
 8002028:	400204b8 	.word	0x400204b8
 800202c:	58025408 	.word	0x58025408
 8002030:	5802541c 	.word	0x5802541c
 8002034:	58025430 	.word	0x58025430
 8002038:	58025444 	.word	0x58025444
 800203c:	58025458 	.word	0x58025458
 8002040:	5802546c 	.word	0x5802546c
 8002044:	58025480 	.word	0x58025480
 8002048:	58025494 	.word	0x58025494
 800204c:	2300      	movs	r3, #0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d028      	beq.n	80020a4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002056:	681a      	ldr	r2, [r3, #0]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800205c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002060:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002066:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800206c:	f003 031f 	and.w	r3, r3, #31
 8002070:	2201      	movs	r2, #1
 8002072:	409a      	lsls	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800207c:	687a      	ldr	r2, [r7, #4]
 800207e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002080:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002086:	2b00      	cmp	r3, #0
 8002088:	d00c      	beq.n	80020a4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002094:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002098:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020a2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020c4:	2300      	movs	r3, #0
}
 80020c6:	4618      	mov	r0, r3
 80020c8:	3710      	adds	r7, #16
 80020ca:	46bd      	mov	sp, r7
 80020cc:	bd80      	pop	{r7, pc}
 80020ce:	bf00      	nop

080020d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b089      	sub	sp, #36	@ 0x24
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
 80020d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020de:	4b86      	ldr	r3, [pc, #536]	@ (80022f8 <HAL_GPIO_Init+0x228>)
 80020e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020e2:	e18c      	b.n	80023fe <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	681a      	ldr	r2, [r3, #0]
 80020e8:	2101      	movs	r1, #1
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	4013      	ands	r3, r2
 80020f2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80020f4:	693b      	ldr	r3, [r7, #16]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f000 817e 	beq.w	80023f8 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	2b01      	cmp	r3, #1
 8002106:	d005      	beq.n	8002114 <HAL_GPIO_Init+0x44>
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	2b02      	cmp	r3, #2
 8002112:	d130      	bne.n	8002176 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	005b      	lsls	r3, r3, #1
 800211e:	2203      	movs	r2, #3
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	69fb      	ldr	r3, [r7, #28]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	4313      	orrs	r3, r2
 800213c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800214a:	2201      	movs	r2, #1
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	fa02 f303 	lsl.w	r3, r2, r3
 8002152:	43db      	mvns	r3, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4013      	ands	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	091b      	lsrs	r3, r3, #4
 8002160:	f003 0201 	and.w	r2, r3, #1
 8002164:	69fb      	ldr	r3, [r7, #28]
 8002166:	fa02 f303 	lsl.w	r3, r2, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4313      	orrs	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b03      	cmp	r3, #3
 8002180:	d017      	beq.n	80021b2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	689a      	ldr	r2, [r3, #8]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	f003 0303 	and.w	r3, r3, #3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d123      	bne.n	8002206 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021be:	69fb      	ldr	r3, [r7, #28]
 80021c0:	08da      	lsrs	r2, r3, #3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	3208      	adds	r2, #8
 80021c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	f003 0307 	and.w	r3, r3, #7
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	220f      	movs	r2, #15
 80021d6:	fa02 f303 	lsl.w	r3, r2, r3
 80021da:	43db      	mvns	r3, r3
 80021dc:	69ba      	ldr	r2, [r7, #24]
 80021de:	4013      	ands	r3, r2
 80021e0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	691a      	ldr	r2, [r3, #16]
 80021e6:	69fb      	ldr	r3, [r7, #28]
 80021e8:	f003 0307 	and.w	r3, r3, #7
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	69ba      	ldr	r2, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	08da      	lsrs	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	3208      	adds	r2, #8
 8002200:	69b9      	ldr	r1, [r7, #24]
 8002202:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	2203      	movs	r2, #3
 8002212:	fa02 f303 	lsl.w	r3, r2, r3
 8002216:	43db      	mvns	r3, r3
 8002218:	69ba      	ldr	r2, [r7, #24]
 800221a:	4013      	ands	r3, r2
 800221c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f003 0203 	and.w	r2, r3, #3
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	005b      	lsls	r3, r3, #1
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	69ba      	ldr	r2, [r7, #24]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002242:	2b00      	cmp	r3, #0
 8002244:	f000 80d8 	beq.w	80023f8 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002248:	4b2c      	ldr	r3, [pc, #176]	@ (80022fc <HAL_GPIO_Init+0x22c>)
 800224a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800224e:	4a2b      	ldr	r2, [pc, #172]	@ (80022fc <HAL_GPIO_Init+0x22c>)
 8002250:	f043 0302 	orr.w	r3, r3, #2
 8002254:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002258:	4b28      	ldr	r3, [pc, #160]	@ (80022fc <HAL_GPIO_Init+0x22c>)
 800225a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	60fb      	str	r3, [r7, #12]
 8002264:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002266:	4a26      	ldr	r2, [pc, #152]	@ (8002300 <HAL_GPIO_Init+0x230>)
 8002268:	69fb      	ldr	r3, [r7, #28]
 800226a:	089b      	lsrs	r3, r3, #2
 800226c:	3302      	adds	r3, #2
 800226e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002272:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	f003 0303 	and.w	r3, r3, #3
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	220f      	movs	r2, #15
 800227e:	fa02 f303 	lsl.w	r3, r2, r3
 8002282:	43db      	mvns	r3, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4013      	ands	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	4a1d      	ldr	r2, [pc, #116]	@ (8002304 <HAL_GPIO_Init+0x234>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d04a      	beq.n	8002328 <HAL_GPIO_Init+0x258>
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a1c      	ldr	r2, [pc, #112]	@ (8002308 <HAL_GPIO_Init+0x238>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d02b      	beq.n	80022f2 <HAL_GPIO_Init+0x222>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a1b      	ldr	r2, [pc, #108]	@ (800230c <HAL_GPIO_Init+0x23c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d025      	beq.n	80022ee <HAL_GPIO_Init+0x21e>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002310 <HAL_GPIO_Init+0x240>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d01f      	beq.n	80022ea <HAL_GPIO_Init+0x21a>
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	4a19      	ldr	r2, [pc, #100]	@ (8002314 <HAL_GPIO_Init+0x244>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d019      	beq.n	80022e6 <HAL_GPIO_Init+0x216>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a18      	ldr	r2, [pc, #96]	@ (8002318 <HAL_GPIO_Init+0x248>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d013      	beq.n	80022e2 <HAL_GPIO_Init+0x212>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a17      	ldr	r2, [pc, #92]	@ (800231c <HAL_GPIO_Init+0x24c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00d      	beq.n	80022de <HAL_GPIO_Init+0x20e>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a16      	ldr	r2, [pc, #88]	@ (8002320 <HAL_GPIO_Init+0x250>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d007      	beq.n	80022da <HAL_GPIO_Init+0x20a>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a15      	ldr	r2, [pc, #84]	@ (8002324 <HAL_GPIO_Init+0x254>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d101      	bne.n	80022d6 <HAL_GPIO_Init+0x206>
 80022d2:	2309      	movs	r3, #9
 80022d4:	e029      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022d6:	230a      	movs	r3, #10
 80022d8:	e027      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022da:	2307      	movs	r3, #7
 80022dc:	e025      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022de:	2306      	movs	r3, #6
 80022e0:	e023      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022e2:	2305      	movs	r3, #5
 80022e4:	e021      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022e6:	2304      	movs	r3, #4
 80022e8:	e01f      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e01d      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e01b      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e019      	b.n	800232a <HAL_GPIO_Init+0x25a>
 80022f6:	bf00      	nop
 80022f8:	58000080 	.word	0x58000080
 80022fc:	58024400 	.word	0x58024400
 8002300:	58000400 	.word	0x58000400
 8002304:	58020000 	.word	0x58020000
 8002308:	58020400 	.word	0x58020400
 800230c:	58020800 	.word	0x58020800
 8002310:	58020c00 	.word	0x58020c00
 8002314:	58021000 	.word	0x58021000
 8002318:	58021400 	.word	0x58021400
 800231c:	58021800 	.word	0x58021800
 8002320:	58021c00 	.word	0x58021c00
 8002324:	58022400 	.word	0x58022400
 8002328:	2300      	movs	r3, #0
 800232a:	69fa      	ldr	r2, [r7, #28]
 800232c:	f002 0203 	and.w	r2, r2, #3
 8002330:	0092      	lsls	r2, r2, #2
 8002332:	4093      	lsls	r3, r2
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	4313      	orrs	r3, r2
 8002338:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800233a:	4938      	ldr	r1, [pc, #224]	@ (800241c <HAL_GPIO_Init+0x34c>)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	089b      	lsrs	r3, r3, #2
 8002340:	3302      	adds	r3, #2
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002348:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d003      	beq.n	800236e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	4313      	orrs	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800236e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002376:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800237e:	693b      	ldr	r3, [r7, #16]
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002390:	2b00      	cmp	r3, #0
 8002392:	d003      	beq.n	800239c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	4313      	orrs	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800239c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	3301      	adds	r3, #1
 80023fc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa22 f303 	lsr.w	r3, r2, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	f47f ae6b 	bne.w	80020e4 <HAL_GPIO_Init+0x14>
  }
}
 800240e:	bf00      	nop
 8002410:	bf00      	nop
 8002412:	3724      	adds	r7, #36	@ 0x24
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	58000400 	.word	0x58000400

08002420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
 8002428:	460b      	mov	r3, r1
 800242a:	807b      	strh	r3, [r7, #2]
 800242c:	4613      	mov	r3, r2
 800242e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002430:	787b      	ldrb	r3, [r7, #1]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d003      	beq.n	800243e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002436:	887a      	ldrh	r2, [r7, #2]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800243c:	e003      	b.n	8002446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800243e:	887b      	ldrh	r3, [r7, #2]
 8002440:	041a      	lsls	r2, r3, #16
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	619a      	str	r2, [r3, #24]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
	...

08002454 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b084      	sub	sp, #16
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800245c:	4b19      	ldr	r3, [pc, #100]	@ (80024c4 <HAL_PWREx_ConfigSupply+0x70>)
 800245e:	68db      	ldr	r3, [r3, #12]
 8002460:	f003 0304 	and.w	r3, r3, #4
 8002464:	2b04      	cmp	r3, #4
 8002466:	d00a      	beq.n	800247e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002468:	4b16      	ldr	r3, [pc, #88]	@ (80024c4 <HAL_PWREx_ConfigSupply+0x70>)
 800246a:	68db      	ldr	r3, [r3, #12]
 800246c:	f003 0307 	and.w	r3, r3, #7
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	429a      	cmp	r2, r3
 8002474:	d001      	beq.n	800247a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e01f      	b.n	80024ba <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e01d      	b.n	80024ba <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800247e:	4b11      	ldr	r3, [pc, #68]	@ (80024c4 <HAL_PWREx_ConfigSupply+0x70>)
 8002480:	68db      	ldr	r3, [r3, #12]
 8002482:	f023 0207 	bic.w	r2, r3, #7
 8002486:	490f      	ldr	r1, [pc, #60]	@ (80024c4 <HAL_PWREx_ConfigSupply+0x70>)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	4313      	orrs	r3, r2
 800248c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800248e:	f7fe ff27 	bl	80012e0 <HAL_GetTick>
 8002492:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002494:	e009      	b.n	80024aa <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002496:	f7fe ff23 	bl	80012e0 <HAL_GetTick>
 800249a:	4602      	mov	r2, r0
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1ad3      	subs	r3, r2, r3
 80024a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024a4:	d901      	bls.n	80024aa <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e007      	b.n	80024ba <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024aa:	4b06      	ldr	r3, [pc, #24]	@ (80024c4 <HAL_PWREx_ConfigSupply+0x70>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024b6:	d1ee      	bne.n	8002496 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}
 80024c2:	bf00      	nop
 80024c4:	58024800 	.word	0x58024800

080024c8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b08c      	sub	sp, #48	@ 0x30
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d101      	bne.n	80024da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	e3c8      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	f000 8087 	beq.w	80025f6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024e8:	4b88      	ldr	r3, [pc, #544]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80024ea:	691b      	ldr	r3, [r3, #16]
 80024ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80024f2:	4b86      	ldr	r3, [pc, #536]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80024f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80024f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d007      	beq.n	800250e <HAL_RCC_OscConfig+0x46>
 80024fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002500:	2b18      	cmp	r3, #24
 8002502:	d110      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
 8002504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002506:	f003 0303 	and.w	r3, r3, #3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d10b      	bne.n	8002526 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800250e:	4b7f      	ldr	r3, [pc, #508]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d06c      	beq.n	80025f4 <HAL_RCC_OscConfig+0x12c>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d168      	bne.n	80025f4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e3a2      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800252e:	d106      	bne.n	800253e <HAL_RCC_OscConfig+0x76>
 8002530:	4b76      	ldr	r3, [pc, #472]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a75      	ldr	r2, [pc, #468]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002536:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800253a:	6013      	str	r3, [r2, #0]
 800253c:	e02e      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d10c      	bne.n	8002560 <HAL_RCC_OscConfig+0x98>
 8002546:	4b71      	ldr	r3, [pc, #452]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a70      	ldr	r2, [pc, #448]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800254c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	4b6e      	ldr	r3, [pc, #440]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a6d      	ldr	r2, [pc, #436]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002558:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800255c:	6013      	str	r3, [r2, #0]
 800255e:	e01d      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0xbc>
 800256a:	4b68      	ldr	r3, [pc, #416]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a67      	ldr	r2, [pc, #412]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002570:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	4b65      	ldr	r3, [pc, #404]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a64      	ldr	r2, [pc, #400]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800257c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002580:	6013      	str	r3, [r2, #0]
 8002582:	e00b      	b.n	800259c <HAL_RCC_OscConfig+0xd4>
 8002584:	4b61      	ldr	r3, [pc, #388]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a60      	ldr	r2, [pc, #384]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800258a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	4b5e      	ldr	r3, [pc, #376]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a5d      	ldr	r2, [pc, #372]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002596:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800259a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d013      	beq.n	80025cc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fe9c 	bl	80012e0 <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025ac:	f7fe fe98 	bl	80012e0 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	@ 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e356      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025be:	4b53      	ldr	r3, [pc, #332]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0xe4>
 80025ca:	e014      	b.n	80025f6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fe88 	bl	80012e0 <HAL_GetTick>
 80025d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025d4:	f7fe fe84 	bl	80012e0 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b64      	cmp	r3, #100	@ 0x64
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e342      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025e6:	4b49      	ldr	r3, [pc, #292]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x10c>
 80025f2:	e000      	b.n	80025f6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0302 	and.w	r3, r3, #2
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 808c 	beq.w	800271c <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002604:	4b41      	ldr	r3, [pc, #260]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002606:	691b      	ldr	r3, [r3, #16]
 8002608:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800260c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800260e:	4b3f      	ldr	r3, [pc, #252]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002612:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002614:	6a3b      	ldr	r3, [r7, #32]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_RCC_OscConfig+0x162>
 800261a:	6a3b      	ldr	r3, [r7, #32]
 800261c:	2b18      	cmp	r3, #24
 800261e:	d137      	bne.n	8002690 <HAL_RCC_OscConfig+0x1c8>
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f003 0303 	and.w	r3, r3, #3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d132      	bne.n	8002690 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800262a:	4b38      	ldr	r3, [pc, #224]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0304 	and.w	r3, r3, #4
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_RCC_OscConfig+0x17a>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e314      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002642:	4b32      	ldr	r3, [pc, #200]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f023 0219 	bic.w	r2, r3, #25
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	492f      	ldr	r1, [pc, #188]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002650:	4313      	orrs	r3, r2
 8002652:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002654:	f7fe fe44 	bl	80012e0 <HAL_GetTick>
 8002658:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800265c:	f7fe fe40 	bl	80012e0 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e2fe      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800266e:	4b27      	ldr	r3, [pc, #156]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0304 	and.w	r3, r3, #4
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800267a:	4b24      	ldr	r3, [pc, #144]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	691b      	ldr	r3, [r3, #16]
 8002686:	061b      	lsls	r3, r3, #24
 8002688:	4920      	ldr	r1, [pc, #128]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800268e:	e045      	b.n	800271c <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d026      	beq.n	80026e6 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002698:	4b1c      	ldr	r3, [pc, #112]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 0219 	bic.w	r2, r3, #25
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4919      	ldr	r1, [pc, #100]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026aa:	f7fe fe19 	bl	80012e0 <HAL_GetTick>
 80026ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b2:	f7fe fe15 	bl	80012e0 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e2d3      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c4:	4b11      	ldr	r3, [pc, #68]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b0e      	ldr	r3, [pc, #56]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80026d2:	685b      	ldr	r3, [r3, #4]
 80026d4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	061b      	lsls	r3, r3, #24
 80026de:	490b      	ldr	r1, [pc, #44]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	604b      	str	r3, [r1, #4]
 80026e4:	e01a      	b.n	800271c <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026e6:	4b09      	ldr	r3, [pc, #36]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a08      	ldr	r2, [pc, #32]	@ (800270c <HAL_RCC_OscConfig+0x244>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f2:	f7fe fdf5 	bl	80012e0 <HAL_GetTick>
 80026f6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80026f8:	e00a      	b.n	8002710 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fa:	f7fe fdf1 	bl	80012e0 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	2b02      	cmp	r3, #2
 8002706:	d903      	bls.n	8002710 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002708:	2303      	movs	r3, #3
 800270a:	e2af      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
 800270c:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002710:	4b96      	ldr	r3, [pc, #600]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	d1ee      	bne.n	80026fa <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0310 	and.w	r3, r3, #16
 8002724:	2b00      	cmp	r3, #0
 8002726:	d06a      	beq.n	80027fe <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002728:	4b90      	ldr	r3, [pc, #576]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 800272a:	691b      	ldr	r3, [r3, #16]
 800272c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002730:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002732:	4b8e      	ldr	r3, [pc, #568]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002734:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002736:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	2b08      	cmp	r3, #8
 800273c:	d007      	beq.n	800274e <HAL_RCC_OscConfig+0x286>
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b18      	cmp	r3, #24
 8002742:	d11b      	bne.n	800277c <HAL_RCC_OscConfig+0x2b4>
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d116      	bne.n	800277c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800274e:	4b87      	ldr	r3, [pc, #540]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d005      	beq.n	8002766 <HAL_RCC_OscConfig+0x29e>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	69db      	ldr	r3, [r3, #28]
 800275e:	2b80      	cmp	r3, #128	@ 0x80
 8002760:	d001      	beq.n	8002766 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e282      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002766:	4b81      	ldr	r3, [pc, #516]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6a1b      	ldr	r3, [r3, #32]
 8002772:	061b      	lsls	r3, r3, #24
 8002774:	497d      	ldr	r1, [pc, #500]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002776:	4313      	orrs	r3, r2
 8002778:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800277a:	e040      	b.n	80027fe <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	2b00      	cmp	r3, #0
 8002782:	d023      	beq.n	80027cc <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002784:	4b79      	ldr	r3, [pc, #484]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a78      	ldr	r2, [pc, #480]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 800278a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800278e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002790:	f7fe fda6 	bl	80012e0 <HAL_GetTick>
 8002794:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002798:	f7fe fda2 	bl	80012e0 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e260      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027aa:	4b70      	ldr	r3, [pc, #448]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027b6:	4b6d      	ldr	r3, [pc, #436]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6a1b      	ldr	r3, [r3, #32]
 80027c2:	061b      	lsls	r3, r3, #24
 80027c4:	4969      	ldr	r1, [pc, #420]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	60cb      	str	r3, [r1, #12]
 80027ca:	e018      	b.n	80027fe <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027cc:	4b67      	ldr	r3, [pc, #412]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a66      	ldr	r2, [pc, #408]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80027d2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe fd82 	bl	80012e0 <HAL_GetTick>
 80027dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027e0:	f7fe fd7e 	bl	80012e0 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e23c      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027f2:	4b5e      	ldr	r3, [pc, #376]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 0308 	and.w	r3, r3, #8
 8002806:	2b00      	cmp	r3, #0
 8002808:	d036      	beq.n	8002878 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	695b      	ldr	r3, [r3, #20]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d019      	beq.n	8002846 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002812:	4b56      	ldr	r3, [pc, #344]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002814:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002816:	4a55      	ldr	r2, [pc, #340]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800281e:	f7fe fd5f 	bl	80012e0 <HAL_GetTick>
 8002822:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002824:	e008      	b.n	8002838 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002826:	f7fe fd5b 	bl	80012e0 <HAL_GetTick>
 800282a:	4602      	mov	r2, r0
 800282c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282e:	1ad3      	subs	r3, r2, r3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d901      	bls.n	8002838 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002834:	2303      	movs	r3, #3
 8002836:	e219      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002838:	4b4c      	ldr	r3, [pc, #304]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 800283a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800283c:	f003 0302 	and.w	r3, r3, #2
 8002840:	2b00      	cmp	r3, #0
 8002842:	d0f0      	beq.n	8002826 <HAL_RCC_OscConfig+0x35e>
 8002844:	e018      	b.n	8002878 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002846:	4b49      	ldr	r3, [pc, #292]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002848:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800284a:	4a48      	ldr	r2, [pc, #288]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 800284c:	f023 0301 	bic.w	r3, r3, #1
 8002850:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002852:	f7fe fd45 	bl	80012e0 <HAL_GetTick>
 8002856:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002858:	e008      	b.n	800286c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800285a:	f7fe fd41 	bl	80012e0 <HAL_GetTick>
 800285e:	4602      	mov	r2, r0
 8002860:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	2b02      	cmp	r3, #2
 8002866:	d901      	bls.n	800286c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e1ff      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800286c:	4b3f      	ldr	r3, [pc, #252]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 800286e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002870:	f003 0302 	and.w	r3, r3, #2
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f0      	bne.n	800285a <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0320 	and.w	r3, r3, #32
 8002880:	2b00      	cmp	r3, #0
 8002882:	d036      	beq.n	80028f2 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d019      	beq.n	80028c0 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800288c:	4b37      	ldr	r3, [pc, #220]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a36      	ldr	r2, [pc, #216]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002892:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002896:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002898:	f7fe fd22 	bl	80012e0 <HAL_GetTick>
 800289c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800289e:	e008      	b.n	80028b2 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028a0:	f7fe fd1e 	bl	80012e0 <HAL_GetTick>
 80028a4:	4602      	mov	r2, r0
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	1ad3      	subs	r3, r2, r3
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d901      	bls.n	80028b2 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80028ae:	2303      	movs	r3, #3
 80028b0:	e1dc      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028b2:	4b2e      	ldr	r3, [pc, #184]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d0f0      	beq.n	80028a0 <HAL_RCC_OscConfig+0x3d8>
 80028be:	e018      	b.n	80028f2 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028c0:	4b2a      	ldr	r3, [pc, #168]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a29      	ldr	r2, [pc, #164]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80028c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028ca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028cc:	f7fe fd08 	bl	80012e0 <HAL_GetTick>
 80028d0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028d4:	f7fe fd04 	bl	80012e0 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e1c2      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028e6:	4b21      	ldr	r3, [pc, #132]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f0      	bne.n	80028d4 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0304 	and.w	r3, r3, #4
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f000 8086 	beq.w	8002a0c <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <HAL_RCC_OscConfig+0x4a8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a1a      	ldr	r2, [pc, #104]	@ (8002970 <HAL_RCC_OscConfig+0x4a8>)
 8002906:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800290c:	f7fe fce8 	bl	80012e0 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002914:	f7fe fce4 	bl	80012e0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b64      	cmp	r3, #100	@ 0x64
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e1a2      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002926:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <HAL_RCC_OscConfig+0x4a8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	689b      	ldr	r3, [r3, #8]
 8002936:	2b01      	cmp	r3, #1
 8002938:	d106      	bne.n	8002948 <HAL_RCC_OscConfig+0x480>
 800293a:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800293e:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002940:	f043 0301 	orr.w	r3, r3, #1
 8002944:	6713      	str	r3, [r2, #112]	@ 0x70
 8002946:	e032      	b.n	80029ae <HAL_RCC_OscConfig+0x4e6>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d111      	bne.n	8002974 <HAL_RCC_OscConfig+0x4ac>
 8002950:	4b06      	ldr	r3, [pc, #24]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002952:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002954:	4a05      	ldr	r2, [pc, #20]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002956:	f023 0301 	bic.w	r3, r3, #1
 800295a:	6713      	str	r3, [r2, #112]	@ 0x70
 800295c:	4b03      	ldr	r3, [pc, #12]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 800295e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002960:	4a02      	ldr	r2, [pc, #8]	@ (800296c <HAL_RCC_OscConfig+0x4a4>)
 8002962:	f023 0304 	bic.w	r3, r3, #4
 8002966:	6713      	str	r3, [r2, #112]	@ 0x70
 8002968:	e021      	b.n	80029ae <HAL_RCC_OscConfig+0x4e6>
 800296a:	bf00      	nop
 800296c:	58024400 	.word	0x58024400
 8002970:	58024800 	.word	0x58024800
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	2b05      	cmp	r3, #5
 800297a:	d10c      	bne.n	8002996 <HAL_RCC_OscConfig+0x4ce>
 800297c:	4b83      	ldr	r3, [pc, #524]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 800297e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002980:	4a82      	ldr	r2, [pc, #520]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002982:	f043 0304 	orr.w	r3, r3, #4
 8002986:	6713      	str	r3, [r2, #112]	@ 0x70
 8002988:	4b80      	ldr	r3, [pc, #512]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 800298a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298c:	4a7f      	ldr	r2, [pc, #508]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 800298e:	f043 0301 	orr.w	r3, r3, #1
 8002992:	6713      	str	r3, [r2, #112]	@ 0x70
 8002994:	e00b      	b.n	80029ae <HAL_RCC_OscConfig+0x4e6>
 8002996:	4b7d      	ldr	r3, [pc, #500]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299a:	4a7c      	ldr	r2, [pc, #496]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 800299c:	f023 0301 	bic.w	r3, r3, #1
 80029a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a2:	4b7a      	ldr	r3, [pc, #488]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 80029a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a6:	4a79      	ldr	r2, [pc, #484]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 80029a8:	f023 0304 	bic.w	r3, r3, #4
 80029ac:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d015      	beq.n	80029e2 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b6:	f7fe fc93 	bl	80012e0 <HAL_GetTick>
 80029ba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029bc:	e00a      	b.n	80029d4 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029be:	f7fe fc8f 	bl	80012e0 <HAL_GetTick>
 80029c2:	4602      	mov	r2, r0
 80029c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029c6:	1ad3      	subs	r3, r2, r3
 80029c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e14b      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d4:	4b6d      	ldr	r3, [pc, #436]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 80029d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d0ee      	beq.n	80029be <HAL_RCC_OscConfig+0x4f6>
 80029e0:	e014      	b.n	8002a0c <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029e2:	f7fe fc7d 	bl	80012e0 <HAL_GetTick>
 80029e6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ea:	f7fe fc79 	bl	80012e0 <HAL_GetTick>
 80029ee:	4602      	mov	r2, r0
 80029f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029f2:	1ad3      	subs	r3, r2, r3
 80029f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d901      	bls.n	8002a00 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80029fc:	2303      	movs	r3, #3
 80029fe:	e135      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a00:	4b62      	ldr	r3, [pc, #392]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002a02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a04:	f003 0302 	and.w	r3, r3, #2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ee      	bne.n	80029ea <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	f000 812a 	beq.w	8002c6a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a16:	4b5d      	ldr	r3, [pc, #372]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a1e:	2b18      	cmp	r3, #24
 8002a20:	f000 80ba 	beq.w	8002b98 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a28:	2b02      	cmp	r3, #2
 8002a2a:	f040 8095 	bne.w	8002b58 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a2e:	4b57      	ldr	r3, [pc, #348]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a56      	ldr	r2, [pc, #344]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002a34:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a3a:	f7fe fc51 	bl	80012e0 <HAL_GetTick>
 8002a3e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a40:	e008      	b.n	8002a54 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a42:	f7fe fc4d 	bl	80012e0 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d901      	bls.n	8002a54 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e10b      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a54:	4b4d      	ldr	r3, [pc, #308]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d1f0      	bne.n	8002a42 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a60:	4b4a      	ldr	r3, [pc, #296]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002a62:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a64:	4b4a      	ldr	r3, [pc, #296]	@ (8002b90 <HAL_RCC_OscConfig+0x6c8>)
 8002a66:	4013      	ands	r3, r2
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a70:	0112      	lsls	r2, r2, #4
 8002a72:	430a      	orrs	r2, r1
 8002a74:	4945      	ldr	r1, [pc, #276]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002a76:	4313      	orrs	r3, r2
 8002a78:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a88:	3b01      	subs	r3, #1
 8002a8a:	025b      	lsls	r3, r3, #9
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
 8002a98:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002a9c:	431a      	orrs	r2, r3
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002aa2:	3b01      	subs	r3, #1
 8002aa4:	061b      	lsls	r3, r3, #24
 8002aa6:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002aaa:	4938      	ldr	r1, [pc, #224]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ab0:	4b36      	ldr	r3, [pc, #216]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002ab2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ab4:	4a35      	ldr	r2, [pc, #212]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002ab6:	f023 0301 	bic.w	r3, r3, #1
 8002aba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002abc:	4b33      	ldr	r3, [pc, #204]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002abe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ac0:	4b34      	ldr	r3, [pc, #208]	@ (8002b94 <HAL_RCC_OscConfig+0x6cc>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002ac8:	00d2      	lsls	r2, r2, #3
 8002aca:	4930      	ldr	r1, [pc, #192]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002ad2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ad4:	f023 020c 	bic.w	r2, r3, #12
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002adc:	492b      	ldr	r1, [pc, #172]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002ae2:	4b2a      	ldr	r3, [pc, #168]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae6:	f023 0202 	bic.w	r2, r3, #2
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aee:	4927      	ldr	r1, [pc, #156]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002af4:	4b25      	ldr	r3, [pc, #148]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002af6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002af8:	4a24      	ldr	r2, [pc, #144]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002afa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002afe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b00:	4b22      	ldr	r3, [pc, #136]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b04:	4a21      	ldr	r2, [pc, #132]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b06:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b0a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b10:	4a1e      	ldr	r2, [pc, #120]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b12:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b16:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b18:	4b1c      	ldr	r3, [pc, #112]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b1c:	4a1b      	ldr	r2, [pc, #108]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b1e:	f043 0301 	orr.w	r3, r3, #1
 8002b22:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b24:	4b19      	ldr	r3, [pc, #100]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a18      	ldr	r2, [pc, #96]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b2a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b30:	f7fe fbd6 	bl	80012e0 <HAL_GetTick>
 8002b34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b36:	e008      	b.n	8002b4a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b38:	f7fe fbd2 	bl	80012e0 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	2b02      	cmp	r3, #2
 8002b44:	d901      	bls.n	8002b4a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b46:	2303      	movs	r3, #3
 8002b48:	e090      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b4a:	4b10      	ldr	r3, [pc, #64]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d0f0      	beq.n	8002b38 <HAL_RCC_OscConfig+0x670>
 8002b56:	e088      	b.n	8002c6a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a0b      	ldr	r2, [pc, #44]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b64:	f7fe fbbc 	bl	80012e0 <HAL_GetTick>
 8002b68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fbb8 	bl	80012e0 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e076      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7e:	4b03      	ldr	r3, [pc, #12]	@ (8002b8c <HAL_RCC_OscConfig+0x6c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x6a4>
 8002b8a:	e06e      	b.n	8002c6a <HAL_RCC_OscConfig+0x7a2>
 8002b8c:	58024400 	.word	0x58024400
 8002b90:	fffffc0c 	.word	0xfffffc0c
 8002b94:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002b98:	4b36      	ldr	r3, [pc, #216]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002b9e:	4b35      	ldr	r3, [pc, #212]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d031      	beq.n	8002c10 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f003 0203 	and.w	r2, r3, #3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d12a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	091b      	lsrs	r3, r3, #4
 8002bbe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc6:	429a      	cmp	r2, r3
 8002bc8:	d122      	bne.n	8002c10 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bd6:	429a      	cmp	r2, r3
 8002bd8:	d11a      	bne.n	8002c10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	0a5b      	lsrs	r3, r3, #9
 8002bde:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002be6:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d111      	bne.n	8002c10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	0c1b      	lsrs	r3, r3, #16
 8002bf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bfa:	429a      	cmp	r2, r3
 8002bfc:	d108      	bne.n	8002c10 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	0e1b      	lsrs	r3, r3, #24
 8002c02:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c0a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d001      	beq.n	8002c14 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e02b      	b.n	8002c6c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c14:	4b17      	ldr	r3, [pc, #92]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c18:	08db      	lsrs	r3, r3, #3
 8002c1a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c1e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c24:	693a      	ldr	r2, [r7, #16]
 8002c26:	429a      	cmp	r2, r3
 8002c28:	d01f      	beq.n	8002c6a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c2a:	4b12      	ldr	r3, [pc, #72]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2e:	4a11      	ldr	r2, [pc, #68]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002c30:	f023 0301 	bic.w	r3, r3, #1
 8002c34:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c36:	f7fe fb53 	bl	80012e0 <HAL_GetTick>
 8002c3a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c3c:	bf00      	nop
 8002c3e:	f7fe fb4f 	bl	80012e0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d0f9      	beq.n	8002c3e <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002c4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c4e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c78 <HAL_RCC_OscConfig+0x7b0>)
 8002c50:	4013      	ands	r3, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c56:	00d2      	lsls	r2, r2, #3
 8002c58:	4906      	ldr	r1, [pc, #24]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c5e:	4b05      	ldr	r3, [pc, #20]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c62:	4a04      	ldr	r2, [pc, #16]	@ (8002c74 <HAL_RCC_OscConfig+0x7ac>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c6a:	2300      	movs	r3, #0
}
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3730      	adds	r7, #48	@ 0x30
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	58024400 	.word	0x58024400
 8002c78:	ffff0007 	.word	0xffff0007

08002c7c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d101      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e19c      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c90:	4b8a      	ldr	r3, [pc, #552]	@ (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f003 030f 	and.w	r3, r3, #15
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d910      	bls.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c9e:	4b87      	ldr	r3, [pc, #540]	@ (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f023 020f 	bic.w	r2, r3, #15
 8002ca6:	4985      	ldr	r1, [pc, #532]	@ (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	4313      	orrs	r3, r2
 8002cac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cae:	4b83      	ldr	r3, [pc, #524]	@ (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f003 030f 	and.w	r3, r3, #15
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d001      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e184      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d010      	beq.n	8002cee <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	691a      	ldr	r2, [r3, #16]
 8002cd0:	4b7b      	ldr	r3, [pc, #492]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d908      	bls.n	8002cee <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cdc:	4b78      	ldr	r3, [pc, #480]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002cde:	699b      	ldr	r3, [r3, #24]
 8002ce0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	4975      	ldr	r1, [pc, #468]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d010      	beq.n	8002d1c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	695a      	ldr	r2, [r3, #20]
 8002cfe:	4b70      	ldr	r3, [pc, #448]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d00:	69db      	ldr	r3, [r3, #28]
 8002d02:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d908      	bls.n	8002d1c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d0c:	69db      	ldr	r3, [r3, #28]
 8002d0e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	695b      	ldr	r3, [r3, #20]
 8002d16:	496a      	ldr	r1, [pc, #424]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 0310 	and.w	r3, r3, #16
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d010      	beq.n	8002d4a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	699a      	ldr	r2, [r3, #24]
 8002d2c:	4b64      	ldr	r3, [pc, #400]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d2e:	69db      	ldr	r3, [r3, #28]
 8002d30:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d908      	bls.n	8002d4a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d38:	4b61      	ldr	r3, [pc, #388]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d3a:	69db      	ldr	r3, [r3, #28]
 8002d3c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	495e      	ldr	r1, [pc, #376]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0320 	and.w	r3, r3, #32
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d010      	beq.n	8002d78 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	69da      	ldr	r2, [r3, #28]
 8002d5a:	4b59      	ldr	r3, [pc, #356]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d908      	bls.n	8002d78 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d66:	4b56      	ldr	r3, [pc, #344]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d68:	6a1b      	ldr	r3, [r3, #32]
 8002d6a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	69db      	ldr	r3, [r3, #28]
 8002d72:	4953      	ldr	r1, [pc, #332]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d010      	beq.n	8002da6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4b4d      	ldr	r3, [pc, #308]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	699b      	ldr	r3, [r3, #24]
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d908      	bls.n	8002da6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d94:	4b4a      	ldr	r3, [pc, #296]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002d96:	699b      	ldr	r3, [r3, #24]
 8002d98:	f023 020f 	bic.w	r2, r3, #15
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	4947      	ldr	r1, [pc, #284]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0301 	and.w	r3, r3, #1
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d055      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002db2:	4b43      	ldr	r3, [pc, #268]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	4940      	ldr	r1, [pc, #256]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	2b02      	cmp	r3, #2
 8002dca:	d107      	bne.n	8002ddc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d121      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e0f6      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d107      	bne.n	8002df4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002de4:	4b36      	ldr	r3, [pc, #216]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d115      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002df0:	2301      	movs	r3, #1
 8002df2:	e0ea      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002dfc:	4b30      	ldr	r3, [pc, #192]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e0de      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0304 	and.w	r3, r3, #4
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d101      	bne.n	8002e1c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e0d6      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	f023 0207 	bic.w	r2, r3, #7
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	4925      	ldr	r1, [pc, #148]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e2e:	f7fe fa57 	bl	80012e0 <HAL_GetTick>
 8002e32:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e34:	e00a      	b.n	8002e4c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e36:	f7fe fa53 	bl	80012e0 <HAL_GetTick>
 8002e3a:	4602      	mov	r2, r0
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	1ad3      	subs	r3, r2, r3
 8002e40:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e44:	4293      	cmp	r3, r2
 8002e46:	d901      	bls.n	8002e4c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e48:	2303      	movs	r3, #3
 8002e4a:	e0be      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e4c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d1eb      	bne.n	8002e36 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	68da      	ldr	r2, [r3, #12]
 8002e6e:	4b14      	ldr	r3, [pc, #80]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	699b      	ldr	r3, [r3, #24]
 8002e72:	f003 030f 	and.w	r3, r3, #15
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d208      	bcs.n	8002e8c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e7a:	4b11      	ldr	r3, [pc, #68]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	699b      	ldr	r3, [r3, #24]
 8002e7e:	f023 020f 	bic.w	r2, r3, #15
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	490e      	ldr	r1, [pc, #56]	@ (8002ec0 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 030f 	and.w	r3, r3, #15
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d214      	bcs.n	8002ec4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e9a:	4b08      	ldr	r3, [pc, #32]	@ (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f023 020f 	bic.w	r2, r3, #15
 8002ea2:	4906      	ldr	r1, [pc, #24]	@ (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002eaa:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <HAL_RCC_ClockConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 030f 	and.w	r3, r3, #15
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d005      	beq.n	8002ec4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e086      	b.n	8002fca <HAL_RCC_ClockConfig+0x34e>
 8002ebc:	52002000 	.word	0x52002000
 8002ec0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f003 0304 	and.w	r3, r3, #4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d010      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	691a      	ldr	r2, [r3, #16]
 8002ed4:	4b3f      	ldr	r3, [pc, #252]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d208      	bcs.n	8002ef2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ee0:	4b3c      	ldr	r3, [pc, #240]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002ee2:	699b      	ldr	r3, [r3, #24]
 8002ee4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	4939      	ldr	r1, [pc, #228]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695a      	ldr	r2, [r3, #20]
 8002f02:	4b34      	ldr	r3, [pc, #208]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f04:	69db      	ldr	r3, [r3, #28]
 8002f06:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f0a:	429a      	cmp	r2, r3
 8002f0c:	d208      	bcs.n	8002f20 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f0e:	4b31      	ldr	r3, [pc, #196]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f10:	69db      	ldr	r3, [r3, #28]
 8002f12:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	492e      	ldr	r1, [pc, #184]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f1c:	4313      	orrs	r3, r2
 8002f1e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d010      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	699a      	ldr	r2, [r3, #24]
 8002f30:	4b28      	ldr	r3, [pc, #160]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d208      	bcs.n	8002f4e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f3c:	4b25      	ldr	r3, [pc, #148]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f3e:	69db      	ldr	r3, [r3, #28]
 8002f40:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	4922      	ldr	r1, [pc, #136]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f003 0320 	and.w	r3, r3, #32
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d010      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	69da      	ldr	r2, [r3, #28]
 8002f5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f66:	429a      	cmp	r2, r3
 8002f68:	d208      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f6a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	4917      	ldr	r1, [pc, #92]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f7c:	f000 f834 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 8002f80:	4602      	mov	r2, r0
 8002f82:	4b14      	ldr	r3, [pc, #80]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	4912      	ldr	r1, [pc, #72]	@ (8002fd8 <HAL_RCC_ClockConfig+0x35c>)
 8002f8e:	5ccb      	ldrb	r3, [r1, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa22 f303 	lsr.w	r3, r2, r3
 8002f98:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002f9a:	4b0e      	ldr	r3, [pc, #56]	@ (8002fd4 <HAL_RCC_ClockConfig+0x358>)
 8002f9c:	699b      	ldr	r3, [r3, #24]
 8002f9e:	f003 030f 	and.w	r3, r3, #15
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd8 <HAL_RCC_ClockConfig+0x35c>)
 8002fa4:	5cd3      	ldrb	r3, [r2, r3]
 8002fa6:	f003 031f 	and.w	r3, r3, #31
 8002faa:	693a      	ldr	r2, [r7, #16]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
 8002fb0:	4a0a      	ldr	r2, [pc, #40]	@ (8002fdc <HAL_RCC_ClockConfig+0x360>)
 8002fb2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fb4:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe0 <HAL_RCC_ClockConfig+0x364>)
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fba:	4b0a      	ldr	r3, [pc, #40]	@ (8002fe4 <HAL_RCC_ClockConfig+0x368>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f7fe f958 	bl	8001274 <HAL_InitTick>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	58024400 	.word	0x58024400
 8002fd8:	08007a1c 	.word	0x08007a1c
 8002fdc:	24000004 	.word	0x24000004
 8002fe0:	24000000 	.word	0x24000000
 8002fe4:	24000008 	.word	0x24000008

08002fe8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b089      	sub	sp, #36	@ 0x24
 8002fec:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fee:	4bb3      	ldr	r3, [pc, #716]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ff6:	2b18      	cmp	r3, #24
 8002ff8:	f200 8155 	bhi.w	80032a6 <HAL_RCC_GetSysClockFreq+0x2be>
 8002ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8003004 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003002:	bf00      	nop
 8003004:	08003069 	.word	0x08003069
 8003008:	080032a7 	.word	0x080032a7
 800300c:	080032a7 	.word	0x080032a7
 8003010:	080032a7 	.word	0x080032a7
 8003014:	080032a7 	.word	0x080032a7
 8003018:	080032a7 	.word	0x080032a7
 800301c:	080032a7 	.word	0x080032a7
 8003020:	080032a7 	.word	0x080032a7
 8003024:	0800308f 	.word	0x0800308f
 8003028:	080032a7 	.word	0x080032a7
 800302c:	080032a7 	.word	0x080032a7
 8003030:	080032a7 	.word	0x080032a7
 8003034:	080032a7 	.word	0x080032a7
 8003038:	080032a7 	.word	0x080032a7
 800303c:	080032a7 	.word	0x080032a7
 8003040:	080032a7 	.word	0x080032a7
 8003044:	08003095 	.word	0x08003095
 8003048:	080032a7 	.word	0x080032a7
 800304c:	080032a7 	.word	0x080032a7
 8003050:	080032a7 	.word	0x080032a7
 8003054:	080032a7 	.word	0x080032a7
 8003058:	080032a7 	.word	0x080032a7
 800305c:	080032a7 	.word	0x080032a7
 8003060:	080032a7 	.word	0x080032a7
 8003064:	0800309b 	.word	0x0800309b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003068:	4b94      	ldr	r3, [pc, #592]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0320 	and.w	r3, r3, #32
 8003070:	2b00      	cmp	r3, #0
 8003072:	d009      	beq.n	8003088 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003074:	4b91      	ldr	r3, [pc, #580]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	08db      	lsrs	r3, r3, #3
 800307a:	f003 0303 	and.w	r3, r3, #3
 800307e:	4a90      	ldr	r2, [pc, #576]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003080:	fa22 f303 	lsr.w	r3, r2, r3
 8003084:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003086:	e111      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003088:	4b8d      	ldr	r3, [pc, #564]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800308a:	61bb      	str	r3, [r7, #24]
      break;
 800308c:	e10e      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800308e:	4b8d      	ldr	r3, [pc, #564]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003090:	61bb      	str	r3, [r7, #24]
      break;
 8003092:	e10b      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003094:	4b8c      	ldr	r3, [pc, #560]	@ (80032c8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003096:	61bb      	str	r3, [r7, #24]
      break;
 8003098:	e108      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800309a:	4b88      	ldr	r3, [pc, #544]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800309c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309e:	f003 0303 	and.w	r3, r3, #3
 80030a2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030a4:	4b85      	ldr	r3, [pc, #532]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a8:	091b      	lsrs	r3, r3, #4
 80030aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030ae:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030b0:	4b82      	ldr	r3, [pc, #520]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	f003 0301 	and.w	r3, r3, #1
 80030b8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030ba:	4b80      	ldr	r3, [pc, #512]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030be:	08db      	lsrs	r3, r3, #3
 80030c0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	fb02 f303 	mul.w	r3, r2, r3
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030d2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80e1 	beq.w	80032a0 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	f000 8083 	beq.w	80031ec <HAL_RCC_GetSysClockFreq+0x204>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b02      	cmp	r3, #2
 80030ea:	f200 80a1 	bhi.w	8003230 <HAL_RCC_GetSysClockFreq+0x248>
 80030ee:	697b      	ldr	r3, [r7, #20]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_RCC_GetSysClockFreq+0x114>
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d056      	beq.n	80031a8 <HAL_RCC_GetSysClockFreq+0x1c0>
 80030fa:	e099      	b.n	8003230 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80030fc:	4b6f      	ldr	r3, [pc, #444]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0320 	and.w	r3, r3, #32
 8003104:	2b00      	cmp	r3, #0
 8003106:	d02d      	beq.n	8003164 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003108:	4b6c      	ldr	r3, [pc, #432]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	08db      	lsrs	r3, r3, #3
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	4a6b      	ldr	r2, [pc, #428]	@ (80032c0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
 8003118:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	ee07 3a90 	vmov	s15, r3
 8003120:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	ee07 3a90 	vmov	s15, r3
 800312a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800312e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003132:	4b62      	ldr	r3, [pc, #392]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003136:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003142:	ed97 6a02 	vldr	s12, [r7, #8]
 8003146:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800314a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800314e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003152:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003156:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800315a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800315e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003162:	e087      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003164:	693b      	ldr	r3, [r7, #16]
 8003166:	ee07 3a90 	vmov	s15, r3
 800316a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800316e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032d0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003172:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003176:	4b51      	ldr	r3, [pc, #324]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800317a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800317e:	ee07 3a90 	vmov	s15, r3
 8003182:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003186:	ed97 6a02 	vldr	s12, [r7, #8]
 800318a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800318e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003192:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003196:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800319a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800319e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031a2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031a6:	e065      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	ee07 3a90 	vmov	s15, r3
 80031ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031b2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ba:	4b40      	ldr	r3, [pc, #256]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031c2:	ee07 3a90 	vmov	s15, r3
 80031c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80031ce:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 80031d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ea:	e043      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	ee07 3a90 	vmov	s15, r3
 80031f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031f6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032d8 <HAL_RCC_GetSysClockFreq+0x2f0>
 80031fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031fe:	4b2f      	ldr	r3, [pc, #188]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003202:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800320e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003212:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 8003216:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800321a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800321e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003226:	ee67 7a27 	vmul.f32	s15, s14, s15
 800322a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800322e:	e021      	b.n	8003274 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	ee07 3a90 	vmov	s15, r3
 8003236:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800323a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032d4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800323e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003242:	4b1e      	ldr	r3, [pc, #120]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003246:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003252:	ed97 6a02 	vldr	s12, [r7, #8]
 8003256:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032cc <HAL_RCC_GetSysClockFreq+0x2e4>
 800325a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800325e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003262:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003266:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800326a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003272:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003274:	4b11      	ldr	r3, [pc, #68]	@ (80032bc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003278:	0a5b      	lsrs	r3, r3, #9
 800327a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800327e:	3301      	adds	r3, #1
 8003280:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	ee07 3a90 	vmov	s15, r3
 8003288:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800328c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003290:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003294:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003298:	ee17 3a90 	vmov	r3, s15
 800329c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800329e:	e005      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61bb      	str	r3, [r7, #24]
      break;
 80032a4:	e002      	b.n	80032ac <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032a6:	4b07      	ldr	r3, [pc, #28]	@ (80032c4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032a8:	61bb      	str	r3, [r7, #24]
      break;
 80032aa:	bf00      	nop
  }

  return sysclockfreq;
 80032ac:	69bb      	ldr	r3, [r7, #24]
}
 80032ae:	4618      	mov	r0, r3
 80032b0:	3724      	adds	r7, #36	@ 0x24
 80032b2:	46bd      	mov	sp, r7
 80032b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	58024400 	.word	0x58024400
 80032c0:	03d09000 	.word	0x03d09000
 80032c4:	003d0900 	.word	0x003d0900
 80032c8:	007a1200 	.word	0x007a1200
 80032cc:	46000000 	.word	0x46000000
 80032d0:	4c742400 	.word	0x4c742400
 80032d4:	4a742400 	.word	0x4a742400
 80032d8:	4af42400 	.word	0x4af42400

080032dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b082      	sub	sp, #8
 80032e0:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032e2:	f7ff fe81 	bl	8002fe8 <HAL_RCC_GetSysClockFreq>
 80032e6:	4602      	mov	r2, r0
 80032e8:	4b10      	ldr	r3, [pc, #64]	@ (800332c <HAL_RCC_GetHCLKFreq+0x50>)
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	0a1b      	lsrs	r3, r3, #8
 80032ee:	f003 030f 	and.w	r3, r3, #15
 80032f2:	490f      	ldr	r1, [pc, #60]	@ (8003330 <HAL_RCC_GetHCLKFreq+0x54>)
 80032f4:	5ccb      	ldrb	r3, [r1, r3]
 80032f6:	f003 031f 	and.w	r3, r3, #31
 80032fa:	fa22 f303 	lsr.w	r3, r2, r3
 80032fe:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003300:	4b0a      	ldr	r3, [pc, #40]	@ (800332c <HAL_RCC_GetHCLKFreq+0x50>)
 8003302:	699b      	ldr	r3, [r3, #24]
 8003304:	f003 030f 	and.w	r3, r3, #15
 8003308:	4a09      	ldr	r2, [pc, #36]	@ (8003330 <HAL_RCC_GetHCLKFreq+0x54>)
 800330a:	5cd3      	ldrb	r3, [r2, r3]
 800330c:	f003 031f 	and.w	r3, r3, #31
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a07      	ldr	r2, [pc, #28]	@ (8003334 <HAL_RCC_GetHCLKFreq+0x58>)
 8003318:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800331a:	4a07      	ldr	r2, [pc, #28]	@ (8003338 <HAL_RCC_GetHCLKFreq+0x5c>)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003320:	4b04      	ldr	r3, [pc, #16]	@ (8003334 <HAL_RCC_GetHCLKFreq+0x58>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	3708      	adds	r7, #8
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	58024400 	.word	0x58024400
 8003330:	08007a1c 	.word	0x08007a1c
 8003334:	24000004 	.word	0x24000004
 8003338:	24000000 	.word	0x24000000

0800333c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003340:	f7ff ffcc 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003344:	4602      	mov	r2, r0
 8003346:	4b06      	ldr	r3, [pc, #24]	@ (8003360 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003348:	69db      	ldr	r3, [r3, #28]
 800334a:	091b      	lsrs	r3, r3, #4
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	4904      	ldr	r1, [pc, #16]	@ (8003364 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003352:	5ccb      	ldrb	r3, [r1, r3]
 8003354:	f003 031f 	and.w	r3, r3, #31
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800335c:	4618      	mov	r0, r3
 800335e:	bd80      	pop	{r7, pc}
 8003360:	58024400 	.word	0x58024400
 8003364:	08007a1c 	.word	0x08007a1c

08003368 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800336c:	f7ff ffb6 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 8003370:	4602      	mov	r2, r0
 8003372:	4b06      	ldr	r3, [pc, #24]	@ (800338c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003374:	69db      	ldr	r3, [r3, #28]
 8003376:	0a1b      	lsrs	r3, r3, #8
 8003378:	f003 0307 	and.w	r3, r3, #7
 800337c:	4904      	ldr	r1, [pc, #16]	@ (8003390 <HAL_RCC_GetPCLK2Freq+0x28>)
 800337e:	5ccb      	ldrb	r3, [r1, r3]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003388:	4618      	mov	r0, r3
 800338a:	bd80      	pop	{r7, pc}
 800338c:	58024400 	.word	0x58024400
 8003390:	08007a1c 	.word	0x08007a1c

08003394 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003394:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003398:	b0c6      	sub	sp, #280	@ 0x118
 800339a:	af00      	add	r7, sp, #0
 800339c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033a0:	2300      	movs	r3, #0
 80033a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033a6:	2300      	movs	r3, #0
 80033a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b4:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033b8:	2500      	movs	r5, #0
 80033ba:	ea54 0305 	orrs.w	r3, r4, r5
 80033be:	d049      	beq.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033c6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033ca:	d02f      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033cc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033d0:	d828      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033d6:	d01a      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033d8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033dc:	d822      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d003      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033e6:	d007      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033e8:	e01c      	b.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033ea:	4bab      	ldr	r3, [pc, #684]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	4aaa      	ldr	r2, [pc, #680]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80033f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80033f6:	e01a      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80033f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033fc:	3308      	adds	r3, #8
 80033fe:	2102      	movs	r1, #2
 8003400:	4618      	mov	r0, r3
 8003402:	f001 fc25 	bl	8004c50 <RCCEx_PLL2_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800340c:	e00f      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800340e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003412:	3328      	adds	r3, #40	@ 0x28
 8003414:	2102      	movs	r1, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f001 fccc 	bl	8004db4 <RCCEx_PLL3_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003422:	e004      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800342a:	e000      	b.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800342c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800342e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003436:	4b98      	ldr	r3, [pc, #608]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800343e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003442:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003444:	4a94      	ldr	r2, [pc, #592]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003446:	430b      	orrs	r3, r1
 8003448:	6513      	str	r3, [r2, #80]	@ 0x50
 800344a:	e003      	b.n	8003454 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800344c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003450:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003454:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003458:	e9d3 2300 	ldrd	r2, r3, [r3]
 800345c:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003460:	f04f 0900 	mov.w	r9, #0
 8003464:	ea58 0309 	orrs.w	r3, r8, r9
 8003468:	d047      	beq.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800346a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003470:	2b04      	cmp	r3, #4
 8003472:	d82a      	bhi.n	80034ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003474:	a201      	add	r2, pc, #4	@ (adr r2, 800347c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800347a:	bf00      	nop
 800347c:	08003491 	.word	0x08003491
 8003480:	0800349f 	.word	0x0800349f
 8003484:	080034b5 	.word	0x080034b5
 8003488:	080034d3 	.word	0x080034d3
 800348c:	080034d3 	.word	0x080034d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003490:	4b81      	ldr	r3, [pc, #516]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003492:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003494:	4a80      	ldr	r2, [pc, #512]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003496:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800349a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800349c:	e01a      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800349e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034a2:	3308      	adds	r3, #8
 80034a4:	2100      	movs	r1, #0
 80034a6:	4618      	mov	r0, r3
 80034a8:	f001 fbd2 	bl	8004c50 <RCCEx_PLL2_Config>
 80034ac:	4603      	mov	r3, r0
 80034ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b2:	e00f      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b8:	3328      	adds	r3, #40	@ 0x28
 80034ba:	2100      	movs	r1, #0
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 fc79 	bl	8004db4 <RCCEx_PLL3_Config>
 80034c2:	4603      	mov	r3, r0
 80034c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034c8:	e004      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034d0:	e000      	b.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10a      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034dc:	4b6e      	ldr	r3, [pc, #440]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034e0:	f023 0107 	bic.w	r1, r3, #7
 80034e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034ec:	430b      	orrs	r3, r1
 80034ee:	6513      	str	r3, [r2, #80]	@ 0x50
 80034f0:	e003      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034f2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034f6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80034fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003502:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8003506:	f04f 0b00 	mov.w	fp, #0
 800350a:	ea5a 030b 	orrs.w	r3, sl, fp
 800350e:	d05b      	beq.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003510:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003514:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003518:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800351c:	d03b      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800351e:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003522:	d834      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003524:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003528:	d037      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x206>
 800352a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800352e:	d82e      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003530:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003534:	d033      	beq.n	800359e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003536:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800353a:	d828      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800353c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003540:	d01a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003546:	d822      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 800354c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003550:	d007      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003552:	e01c      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003554:	4b50      	ldr	r3, [pc, #320]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003558:	4a4f      	ldr	r2, [pc, #316]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800355a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800355e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003560:	e01e      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003562:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003566:	3308      	adds	r3, #8
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f001 fb70 	bl	8004c50 <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003576:	e013      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003578:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800357c:	3328      	adds	r3, #40	@ 0x28
 800357e:	2100      	movs	r1, #0
 8003580:	4618      	mov	r0, r3
 8003582:	f001 fc17 	bl	8004db4 <RCCEx_PLL3_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800358c:	e008      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003594:	e004      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003596:	bf00      	nop
 8003598:	e002      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800359a:	bf00      	nop
 800359c:	e000      	b.n	80035a0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800359e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10b      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035ac:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035b8:	4a37      	ldr	r2, [pc, #220]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035ba:	430b      	orrs	r3, r1
 80035bc:	6593      	str	r3, [r2, #88]	@ 0x58
 80035be:	e003      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035d4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035d8:	2300      	movs	r3, #0
 80035da:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035de:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035e2:	460b      	mov	r3, r1
 80035e4:	4313      	orrs	r3, r2
 80035e6:	d05d      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035ec:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035f0:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035f4:	d03b      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80035f6:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80035fa:	d834      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80035fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003600:	d037      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003602:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003606:	d82e      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003608:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800360c:	d033      	beq.n	8003676 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800360e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003612:	d828      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003614:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003618:	d01a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800361a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800361e:	d822      	bhi.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003628:	d007      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800362a:	e01c      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800362c:	4b1a      	ldr	r3, [pc, #104]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800362e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003630:	4a19      	ldr	r2, [pc, #100]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003638:	e01e      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800363a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800363e:	3308      	adds	r3, #8
 8003640:	2100      	movs	r1, #0
 8003642:	4618      	mov	r0, r3
 8003644:	f001 fb04 	bl	8004c50 <RCCEx_PLL2_Config>
 8003648:	4603      	mov	r3, r0
 800364a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800364e:	e013      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003654:	3328      	adds	r3, #40	@ 0x28
 8003656:	2100      	movs	r1, #0
 8003658:	4618      	mov	r0, r3
 800365a:	f001 fbab 	bl	8004db4 <RCCEx_PLL3_Config>
 800365e:	4603      	mov	r3, r0
 8003660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003664:	e008      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800366c:	e004      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800366e:	bf00      	nop
 8003670:	e002      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003672:	bf00      	nop
 8003674:	e000      	b.n	8003678 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800367c:	2b00      	cmp	r3, #0
 800367e:	d10d      	bne.n	800369c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003680:	4b05      	ldr	r3, [pc, #20]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003682:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003684:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003690:	4a01      	ldr	r2, [pc, #4]	@ (8003698 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003692:	430b      	orrs	r3, r1
 8003694:	6593      	str	r3, [r2, #88]	@ 0x58
 8003696:	e005      	b.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003698:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800369c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036a0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036ac:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036b0:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036b4:	2300      	movs	r3, #0
 80036b6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036ba:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036be:	460b      	mov	r3, r1
 80036c0:	4313      	orrs	r3, r2
 80036c2:	d03a      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ca:	2b30      	cmp	r3, #48	@ 0x30
 80036cc:	d01f      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80036ce:	2b30      	cmp	r3, #48	@ 0x30
 80036d0:	d819      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036d2:	2b20      	cmp	r3, #32
 80036d4:	d00c      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80036d6:	2b20      	cmp	r3, #32
 80036d8:	d815      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d019      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036de:	2b10      	cmp	r3, #16
 80036e0:	d111      	bne.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036e2:	4baa      	ldr	r3, [pc, #680]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e6:	4aa9      	ldr	r2, [pc, #676]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036ec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80036ee:	e011      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f4:	3308      	adds	r3, #8
 80036f6:	2102      	movs	r1, #2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 faa9 	bl	8004c50 <RCCEx_PLL2_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003704:	e006      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800370c:	e002      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003712:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800371c:	4b9b      	ldr	r3, [pc, #620]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800371e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003720:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372a:	4a98      	ldr	r2, [pc, #608]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800372c:	430b      	orrs	r3, r1
 800372e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003730:	e003      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003732:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003736:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800373a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003742:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003746:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800374a:	2300      	movs	r3, #0
 800374c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003750:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003754:	460b      	mov	r3, r1
 8003756:	4313      	orrs	r3, r2
 8003758:	d051      	beq.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800375a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800375e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003760:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003764:	d035      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003766:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800376a:	d82e      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 800376c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003770:	d031      	beq.n	80037d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003772:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003776:	d828      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003778:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800377c:	d01a      	beq.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800377e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003782:	d822      	bhi.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003784:	2b00      	cmp	r3, #0
 8003786:	d003      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003788:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800378c:	d007      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800378e:	e01c      	b.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003790:	4b7e      	ldr	r3, [pc, #504]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003794:	4a7d      	ldr	r2, [pc, #500]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800379a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800379c:	e01c      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800379e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037a2:	3308      	adds	r3, #8
 80037a4:	2100      	movs	r1, #0
 80037a6:	4618      	mov	r0, r3
 80037a8:	f001 fa52 	bl	8004c50 <RCCEx_PLL2_Config>
 80037ac:	4603      	mov	r3, r0
 80037ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037b2:	e011      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b8:	3328      	adds	r3, #40	@ 0x28
 80037ba:	2100      	movs	r1, #0
 80037bc:	4618      	mov	r0, r3
 80037be:	f001 faf9 	bl	8004db4 <RCCEx_PLL3_Config>
 80037c2:	4603      	mov	r3, r0
 80037c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c8:	e006      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037d0:	e002      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037d2:	bf00      	nop
 80037d4:	e000      	b.n	80037d8 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d10a      	bne.n	80037f6 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037e0:	4b6a      	ldr	r3, [pc, #424]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037e4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	4a67      	ldr	r2, [pc, #412]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037f0:	430b      	orrs	r3, r1
 80037f2:	6513      	str	r3, [r2, #80]	@ 0x50
 80037f4:	e003      	b.n	80037fe <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80037fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003806:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800380a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800380e:	2300      	movs	r3, #0
 8003810:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003814:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d053      	beq.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800381e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003828:	d033      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800382a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800382e:	d82c      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003830:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003834:	d02f      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8003836:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800383a:	d826      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800383c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003840:	d02b      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003842:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003846:	d820      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003848:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800384c:	d012      	beq.n	8003874 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 800384e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003852:	d81a      	bhi.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003854:	2b00      	cmp	r3, #0
 8003856:	d022      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8003858:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800385c:	d115      	bne.n	800388a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800385e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003862:	3308      	adds	r3, #8
 8003864:	2101      	movs	r1, #1
 8003866:	4618      	mov	r0, r3
 8003868:	f001 f9f2 	bl	8004c50 <RCCEx_PLL2_Config>
 800386c:	4603      	mov	r3, r0
 800386e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003872:	e015      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003874:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003878:	3328      	adds	r3, #40	@ 0x28
 800387a:	2101      	movs	r1, #1
 800387c:	4618      	mov	r0, r3
 800387e:	f001 fa99 	bl	8004db4 <RCCEx_PLL3_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003888:	e00a      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003890:	e006      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003892:	bf00      	nop
 8003894:	e004      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003896:	bf00      	nop
 8003898:	e002      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800389a:	bf00      	nop
 800389c:	e000      	b.n	80038a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800389e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10a      	bne.n	80038be <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038a8:	4b38      	ldr	r3, [pc, #224]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038ac:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038b6:	4a35      	ldr	r2, [pc, #212]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038b8:	430b      	orrs	r3, r1
 80038ba:	6513      	str	r3, [r2, #80]	@ 0x50
 80038bc:	e003      	b.n	80038c6 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038be:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038c2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ce:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038d6:	2300      	movs	r3, #0
 80038d8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038dc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038e0:	460b      	mov	r3, r1
 80038e2:	4313      	orrs	r3, r2
 80038e4:	d058      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80038ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f2:	d033      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80038f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f8:	d82c      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80038fa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038fe:	d02f      	beq.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003904:	d826      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003906:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800390a:	d02b      	beq.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 800390c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003910:	d820      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003912:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003916:	d012      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8003918:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800391c:	d81a      	bhi.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800391e:	2b00      	cmp	r3, #0
 8003920:	d022      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003922:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003926:	d115      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800392c:	3308      	adds	r3, #8
 800392e:	2101      	movs	r1, #1
 8003930:	4618      	mov	r0, r3
 8003932:	f001 f98d 	bl	8004c50 <RCCEx_PLL2_Config>
 8003936:	4603      	mov	r3, r0
 8003938:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800393c:	e015      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800393e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003942:	3328      	adds	r3, #40	@ 0x28
 8003944:	2101      	movs	r1, #1
 8003946:	4618      	mov	r0, r3
 8003948:	f001 fa34 	bl	8004db4 <RCCEx_PLL3_Config>
 800394c:	4603      	mov	r3, r0
 800394e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003952:	e00a      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800395a:	e006      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800395c:	bf00      	nop
 800395e:	e004      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003960:	bf00      	nop
 8003962:	e002      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003964:	bf00      	nop
 8003966:	e000      	b.n	800396a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003968:	bf00      	nop
    }

    if (ret == HAL_OK)
 800396a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800396e:	2b00      	cmp	r3, #0
 8003970:	d10e      	bne.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003972:	4b06      	ldr	r3, [pc, #24]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003976:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800397a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800397e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003982:	4a02      	ldr	r2, [pc, #8]	@ (800398c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003984:	430b      	orrs	r3, r1
 8003986:	6593      	str	r3, [r2, #88]	@ 0x58
 8003988:	e006      	b.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x604>
 800398a:	bf00      	nop
 800398c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003990:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003994:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003998:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800399c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039a8:	2300      	movs	r3, #0
 80039aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039ae:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4313      	orrs	r3, r2
 80039b6:	d037      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c2:	d00e      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039c4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039c8:	d816      	bhi.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d018      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80039ce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039d2:	d111      	bne.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039d4:	4bc4      	ldr	r3, [pc, #784]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d8:	4ac3      	ldr	r2, [pc, #780]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039e0:	e00f      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e6:	3308      	adds	r3, #8
 80039e8:	2101      	movs	r1, #1
 80039ea:	4618      	mov	r0, r3
 80039ec:	f001 f930 	bl	8004c50 <RCCEx_PLL2_Config>
 80039f0:	4603      	mov	r3, r0
 80039f2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039f6:	e004      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f8:	2301      	movs	r3, #1
 80039fa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039fe:	e000      	b.n	8003a02 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a00:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a02:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d10a      	bne.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a0a:	4bb7      	ldr	r3, [pc, #732]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a0e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a18:	4ab3      	ldr	r2, [pc, #716]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a1a:	430b      	orrs	r3, r1
 8003a1c:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a1e:	e003      	b.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a30:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a34:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a38:	2300      	movs	r3, #0
 8003a3a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a3e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a42:	460b      	mov	r3, r1
 8003a44:	4313      	orrs	r3, r2
 8003a46:	d039      	beq.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a48:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a4e:	2b03      	cmp	r3, #3
 8003a50:	d81c      	bhi.n	8003a8c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a52:	a201      	add	r2, pc, #4	@ (adr r2, 8003a58 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a58:	08003a95 	.word	0x08003a95
 8003a5c:	08003a69 	.word	0x08003a69
 8003a60:	08003a77 	.word	0x08003a77
 8003a64:	08003a95 	.word	0x08003a95
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a68:	4b9f      	ldr	r3, [pc, #636]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6c:	4a9e      	ldr	r2, [pc, #632]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a6e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a74:	e00f      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a7a:	3308      	adds	r3, #8
 8003a7c:	2102      	movs	r1, #2
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f001 f8e6 	bl	8004c50 <RCCEx_PLL2_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a8a:	e004      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a92:	e000      	b.n	8003a96 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003a94:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d10a      	bne.n	8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003a9e:	4b92      	ldr	r3, [pc, #584]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa2:	f023 0103 	bic.w	r1, r3, #3
 8003aa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aaa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aac:	4a8e      	ldr	r2, [pc, #568]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aae:	430b      	orrs	r3, r1
 8003ab0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ab2:	e003      	b.n	8003abc <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ab4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ab8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003abc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003ac8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003acc:	2300      	movs	r3, #0
 8003ace:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ad2:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ad6:	460b      	mov	r3, r1
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	f000 8099 	beq.w	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ade:	4b83      	ldr	r3, [pc, #524]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a82      	ldr	r2, [pc, #520]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ae8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003aea:	f7fd fbf9 	bl	80012e0 <HAL_GetTick>
 8003aee:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003af2:	e00b      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003af4:	f7fd fbf4 	bl	80012e0 <HAL_GetTick>
 8003af8:	4602      	mov	r2, r0
 8003afa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003afe:	1ad3      	subs	r3, r2, r3
 8003b00:	2b64      	cmp	r3, #100	@ 0x64
 8003b02:	d903      	bls.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b0a:	e005      	b.n	8003b18 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b0c:	4b77      	ldr	r3, [pc, #476]	@ (8003cec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0ed      	beq.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d173      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b20:	4b71      	ldr	r3, [pc, #452]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b22:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b28:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b2c:	4053      	eors	r3, r2
 8003b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d015      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b36:	4b6c      	ldr	r3, [pc, #432]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b3a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b3e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b42:	4b69      	ldr	r3, [pc, #420]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b46:	4a68      	ldr	r2, [pc, #416]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b4c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b4e:	4b66      	ldr	r3, [pc, #408]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b52:	4a65      	ldr	r2, [pc, #404]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b54:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b58:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b5a:	4a63      	ldr	r2, [pc, #396]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b5c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b62:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b66:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b6a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b6e:	d118      	bne.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fd fbb6 	bl	80012e0 <HAL_GetTick>
 8003b74:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b78:	e00d      	b.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b7a:	f7fd fbb1 	bl	80012e0 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b84:	1ad2      	subs	r2, r2, r3
 8003b86:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d903      	bls.n	8003b96 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003b94:	e005      	b.n	8003ba2 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b96:	4b54      	ldr	r3, [pc, #336]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b9a:	f003 0302 	and.w	r3, r3, #2
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d0eb      	beq.n	8003b7a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003ba2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d129      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003baa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bb6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bba:	d10e      	bne.n	8003bda <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003bbc:	4b4a      	ldr	r3, [pc, #296]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bcc:	091a      	lsrs	r2, r3, #4
 8003bce:	4b48      	ldr	r3, [pc, #288]	@ (8003cf0 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003bd0:	4013      	ands	r3, r2
 8003bd2:	4a45      	ldr	r2, [pc, #276]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd4:	430b      	orrs	r3, r1
 8003bd6:	6113      	str	r3, [r2, #16]
 8003bd8:	e005      	b.n	8003be6 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003bda:	4b43      	ldr	r3, [pc, #268]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bdc:	691b      	ldr	r3, [r3, #16]
 8003bde:	4a42      	ldr	r2, [pc, #264]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003be4:	6113      	str	r3, [r2, #16]
 8003be6:	4b40      	ldr	r3, [pc, #256]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003bf6:	4a3c      	ldr	r2, [pc, #240]	@ (8003ce8 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf8:	430b      	orrs	r3, r1
 8003bfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8003bfc:	e008      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003bfe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c02:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003c06:	e003      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c0c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f002 0301 	and.w	r3, r2, #1
 8003c1c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c26:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f000 808f 	beq.w	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c32:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c36:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c38:	2b28      	cmp	r3, #40	@ 0x28
 8003c3a:	d871      	bhi.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c3c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c44 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c42:	bf00      	nop
 8003c44:	08003d29 	.word	0x08003d29
 8003c48:	08003d21 	.word	0x08003d21
 8003c4c:	08003d21 	.word	0x08003d21
 8003c50:	08003d21 	.word	0x08003d21
 8003c54:	08003d21 	.word	0x08003d21
 8003c58:	08003d21 	.word	0x08003d21
 8003c5c:	08003d21 	.word	0x08003d21
 8003c60:	08003d21 	.word	0x08003d21
 8003c64:	08003cf5 	.word	0x08003cf5
 8003c68:	08003d21 	.word	0x08003d21
 8003c6c:	08003d21 	.word	0x08003d21
 8003c70:	08003d21 	.word	0x08003d21
 8003c74:	08003d21 	.word	0x08003d21
 8003c78:	08003d21 	.word	0x08003d21
 8003c7c:	08003d21 	.word	0x08003d21
 8003c80:	08003d21 	.word	0x08003d21
 8003c84:	08003d0b 	.word	0x08003d0b
 8003c88:	08003d21 	.word	0x08003d21
 8003c8c:	08003d21 	.word	0x08003d21
 8003c90:	08003d21 	.word	0x08003d21
 8003c94:	08003d21 	.word	0x08003d21
 8003c98:	08003d21 	.word	0x08003d21
 8003c9c:	08003d21 	.word	0x08003d21
 8003ca0:	08003d21 	.word	0x08003d21
 8003ca4:	08003d29 	.word	0x08003d29
 8003ca8:	08003d21 	.word	0x08003d21
 8003cac:	08003d21 	.word	0x08003d21
 8003cb0:	08003d21 	.word	0x08003d21
 8003cb4:	08003d21 	.word	0x08003d21
 8003cb8:	08003d21 	.word	0x08003d21
 8003cbc:	08003d21 	.word	0x08003d21
 8003cc0:	08003d21 	.word	0x08003d21
 8003cc4:	08003d29 	.word	0x08003d29
 8003cc8:	08003d21 	.word	0x08003d21
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d21 	.word	0x08003d21
 8003cd4:	08003d21 	.word	0x08003d21
 8003cd8:	08003d21 	.word	0x08003d21
 8003cdc:	08003d21 	.word	0x08003d21
 8003ce0:	08003d21 	.word	0x08003d21
 8003ce4:	08003d29 	.word	0x08003d29
 8003ce8:	58024400 	.word	0x58024400
 8003cec:	58024800 	.word	0x58024800
 8003cf0:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003cf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cf8:	3308      	adds	r3, #8
 8003cfa:	2101      	movs	r1, #1
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f000 ffa7 	bl	8004c50 <RCCEx_PLL2_Config>
 8003d02:	4603      	mov	r3, r0
 8003d04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d08:	e00f      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d0a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0e:	3328      	adds	r3, #40	@ 0x28
 8003d10:	2101      	movs	r1, #1
 8003d12:	4618      	mov	r0, r3
 8003d14:	f001 f84e 	bl	8004db4 <RCCEx_PLL3_Config>
 8003d18:	4603      	mov	r3, r0
 8003d1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d1e:	e004      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d26:	e000      	b.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d2a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d10a      	bne.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d32:	4bbf      	ldr	r3, [pc, #764]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d36:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d3e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d40:	4abb      	ldr	r2, [pc, #748]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d42:	430b      	orrs	r3, r1
 8003d44:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d46:	e003      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d48:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d4c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d58:	f002 0302 	and.w	r3, r2, #2
 8003d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d60:	2300      	movs	r3, #0
 8003d62:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d6a:	460b      	mov	r3, r1
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	d041      	beq.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d70:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d824      	bhi.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d7a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d80 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003d7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d80:	08003dcd 	.word	0x08003dcd
 8003d84:	08003d99 	.word	0x08003d99
 8003d88:	08003daf 	.word	0x08003daf
 8003d8c:	08003dcd 	.word	0x08003dcd
 8003d90:	08003dcd 	.word	0x08003dcd
 8003d94:	08003dcd 	.word	0x08003dcd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d9c:	3308      	adds	r3, #8
 8003d9e:	2101      	movs	r1, #1
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 ff55 	bl	8004c50 <RCCEx_PLL2_Config>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dac:	e00f      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db2:	3328      	adds	r3, #40	@ 0x28
 8003db4:	2101      	movs	r1, #1
 8003db6:	4618      	mov	r0, r3
 8003db8:	f000 fffc 	bl	8004db4 <RCCEx_PLL3_Config>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dc2:	e004      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc4:	2301      	movs	r3, #1
 8003dc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dca:	e000      	b.n	8003dce <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003dcc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d10a      	bne.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dd6:	4b96      	ldr	r3, [pc, #600]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dda:	f023 0107 	bic.w	r1, r3, #7
 8003dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003de4:	4a92      	ldr	r2, [pc, #584]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003de6:	430b      	orrs	r3, r1
 8003de8:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dea:	e003      	b.n	8003df4 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003dec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003df0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003df4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dfc:	f002 0304 	and.w	r3, r2, #4
 8003e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e04:	2300      	movs	r3, #0
 8003e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e0a:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e0e:	460b      	mov	r3, r1
 8003e10:	4313      	orrs	r3, r2
 8003e12:	d044      	beq.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e1c:	2b05      	cmp	r3, #5
 8003e1e:	d825      	bhi.n	8003e6c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003e20:	a201      	add	r2, pc, #4	@ (adr r2, 8003e28 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e26:	bf00      	nop
 8003e28:	08003e75 	.word	0x08003e75
 8003e2c:	08003e41 	.word	0x08003e41
 8003e30:	08003e57 	.word	0x08003e57
 8003e34:	08003e75 	.word	0x08003e75
 8003e38:	08003e75 	.word	0x08003e75
 8003e3c:	08003e75 	.word	0x08003e75
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e44:	3308      	adds	r3, #8
 8003e46:	2101      	movs	r1, #1
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f000 ff01 	bl	8004c50 <RCCEx_PLL2_Config>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e54:	e00f      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e5a:	3328      	adds	r3, #40	@ 0x28
 8003e5c:	2101      	movs	r1, #1
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 ffa8 	bl	8004db4 <RCCEx_PLL3_Config>
 8003e64:	4603      	mov	r3, r0
 8003e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e6a:	e004      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e72:	e000      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003e74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e7e:	4b6c      	ldr	r3, [pc, #432]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e82:	f023 0107 	bic.w	r1, r3, #7
 8003e86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e8e:	4a68      	ldr	r2, [pc, #416]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e90:	430b      	orrs	r3, r1
 8003e92:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e94:	e003      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e96:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e9a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea6:	f002 0320 	and.w	r3, r2, #32
 8003eaa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003eae:	2300      	movs	r3, #0
 8003eb0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003eb4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	d055      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ebe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ec6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003eca:	d033      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ed0:	d82c      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed6:	d02f      	beq.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003ed8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003edc:	d826      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ede:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ee2:	d02b      	beq.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ee4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ee8:	d820      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003eea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003eee:	d012      	beq.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003ef0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003ef4:	d81a      	bhi.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d022      	beq.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003efa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003efe:	d115      	bne.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f04:	3308      	adds	r3, #8
 8003f06:	2100      	movs	r1, #0
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f000 fea1 	bl	8004c50 <RCCEx_PLL2_Config>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f14:	e015      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f1a:	3328      	adds	r3, #40	@ 0x28
 8003f1c:	2102      	movs	r1, #2
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f000 ff48 	bl	8004db4 <RCCEx_PLL3_Config>
 8003f24:	4603      	mov	r3, r0
 8003f26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f2a:	e00a      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f32:	e006      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f34:	bf00      	nop
 8003f36:	e004      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f38:	bf00      	nop
 8003f3a:	e002      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f3c:	bf00      	nop
 8003f3e:	e000      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10b      	bne.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f4a:	4b39      	ldr	r3, [pc, #228]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f4e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f52:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f56:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f5a:	4a35      	ldr	r2, [pc, #212]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f5c:	430b      	orrs	r3, r1
 8003f5e:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f60:	e003      	b.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f62:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f66:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f80:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f84:	460b      	mov	r3, r1
 8003f86:	4313      	orrs	r3, r2
 8003f88:	d058      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003f92:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f96:	d033      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003f98:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003f9c:	d82c      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003f9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa2:	d02f      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fa4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fa8:	d826      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003faa:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fae:	d02b      	beq.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003fb0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fb4:	d820      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fb6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fba:	d012      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003fbc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fc0:	d81a      	bhi.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d022      	beq.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fca:	d115      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fd0:	3308      	adds	r3, #8
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f000 fe3b 	bl	8004c50 <RCCEx_PLL2_Config>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003fe0:	e015      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fe2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe6:	3328      	adds	r3, #40	@ 0x28
 8003fe8:	2102      	movs	r1, #2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f000 fee2 	bl	8004db4 <RCCEx_PLL3_Config>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ff6:	e00a      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003ffe:	e006      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004000:	bf00      	nop
 8004002:	e004      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004004:	bf00      	nop
 8004006:	e002      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004008:	bf00      	nop
 800400a:	e000      	b.n	800400e <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800400c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800400e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10e      	bne.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004016:	4b06      	ldr	r3, [pc, #24]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004018:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800401a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800401e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004022:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004026:	4a02      	ldr	r2, [pc, #8]	@ (8004030 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8004028:	430b      	orrs	r3, r1
 800402a:	6593      	str	r3, [r2, #88]	@ 0x58
 800402c:	e006      	b.n	800403c <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800402e:	bf00      	nop
 8004030:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004034:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004038:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800403c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004044:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8004048:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800404c:	2300      	movs	r3, #0
 800404e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004052:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004056:	460b      	mov	r3, r1
 8004058:	4313      	orrs	r3, r2
 800405a:	d055      	beq.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800405c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004060:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004064:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004068:	d033      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800406a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800406e:	d82c      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004074:	d02f      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004076:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800407a:	d826      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800407c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004080:	d02b      	beq.n	80040da <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004082:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004086:	d820      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004088:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800408c:	d012      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800408e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004092:	d81a      	bhi.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004094:	2b00      	cmp	r3, #0
 8004096:	d022      	beq.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004098:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800409c:	d115      	bne.n	80040ca <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800409e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040a2:	3308      	adds	r3, #8
 80040a4:	2100      	movs	r1, #0
 80040a6:	4618      	mov	r0, r3
 80040a8:	f000 fdd2 	bl	8004c50 <RCCEx_PLL2_Config>
 80040ac:	4603      	mov	r3, r0
 80040ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040b2:	e015      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b8:	3328      	adds	r3, #40	@ 0x28
 80040ba:	2102      	movs	r1, #2
 80040bc:	4618      	mov	r0, r3
 80040be:	f000 fe79 	bl	8004db4 <RCCEx_PLL3_Config>
 80040c2:	4603      	mov	r3, r0
 80040c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040c8:	e00a      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040ca:	2301      	movs	r3, #1
 80040cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040d0:	e006      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040d2:	bf00      	nop
 80040d4:	e004      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10b      	bne.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040e8:	4ba0      	ldr	r3, [pc, #640]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ec:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80040f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80040f8:	4a9c      	ldr	r2, [pc, #624]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040fa:	430b      	orrs	r3, r1
 80040fc:	6593      	str	r3, [r2, #88]	@ 0x58
 80040fe:	e003      	b.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004100:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004104:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8004108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800410c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004110:	f002 0308 	and.w	r3, r2, #8
 8004114:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004118:	2300      	movs	r3, #0
 800411a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800411e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004122:	460b      	mov	r3, r1
 8004124:	4313      	orrs	r3, r2
 8004126:	d01e      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8004128:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800412c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004130:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004134:	d10c      	bne.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004136:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800413a:	3328      	adds	r3, #40	@ 0x28
 800413c:	2102      	movs	r1, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fe38 	bl	8004db4 <RCCEx_PLL3_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d002      	beq.n	8004150 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004150:	4b86      	ldr	r3, [pc, #536]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004152:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004154:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004158:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800415c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004160:	4a82      	ldr	r2, [pc, #520]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004162:	430b      	orrs	r3, r1
 8004164:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800416a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800416e:	f002 0310 	and.w	r3, r2, #16
 8004172:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004176:	2300      	movs	r3, #0
 8004178:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800417c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004180:	460b      	mov	r3, r1
 8004182:	4313      	orrs	r3, r2
 8004184:	d01e      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800418a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800418e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004192:	d10c      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004194:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004198:	3328      	adds	r3, #40	@ 0x28
 800419a:	2102      	movs	r1, #2
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fe09 	bl	8004db4 <RCCEx_PLL3_Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d002      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041ae:	4b6f      	ldr	r3, [pc, #444]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041b2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041be:	4a6b      	ldr	r2, [pc, #428]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041c0:	430b      	orrs	r3, r1
 80041c2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041cc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041d2:	2300      	movs	r3, #0
 80041d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041da:	460b      	mov	r3, r1
 80041dc:	4313      	orrs	r3, r2
 80041de:	d03e      	beq.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041e4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ec:	d022      	beq.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80041ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041f2:	d81b      	bhi.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d003      	beq.n	8004200 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80041f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041fc:	d00b      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80041fe:	e015      	b.n	800422c <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004200:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004204:	3308      	adds	r3, #8
 8004206:	2100      	movs	r1, #0
 8004208:	4618      	mov	r0, r3
 800420a:	f000 fd21 	bl	8004c50 <RCCEx_PLL2_Config>
 800420e:	4603      	mov	r3, r0
 8004210:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004214:	e00f      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004216:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800421a:	3328      	adds	r3, #40	@ 0x28
 800421c:	2102      	movs	r1, #2
 800421e:	4618      	mov	r0, r3
 8004220:	f000 fdc8 	bl	8004db4 <RCCEx_PLL3_Config>
 8004224:	4603      	mov	r3, r0
 8004226:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800422a:	e004      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004232:	e000      	b.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004234:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004236:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800423a:	2b00      	cmp	r3, #0
 800423c:	d10b      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800423e:	4b4b      	ldr	r3, [pc, #300]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004240:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004242:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8004246:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800424a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800424e:	4a47      	ldr	r2, [pc, #284]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004250:	430b      	orrs	r3, r1
 8004252:	6593      	str	r3, [r2, #88]	@ 0x58
 8004254:	e003      	b.n	800425e <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004256:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800425a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800425e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004266:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800426a:	673b      	str	r3, [r7, #112]	@ 0x70
 800426c:	2300      	movs	r3, #0
 800426e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004270:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004274:	460b      	mov	r3, r1
 8004276:	4313      	orrs	r3, r2
 8004278:	d03b      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800427a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800427e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004282:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004286:	d01f      	beq.n	80042c8 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004288:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800428c:	d818      	bhi.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800428e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004292:	d003      	beq.n	800429c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004294:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004298:	d007      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800429a:	e011      	b.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800429c:	4b33      	ldr	r3, [pc, #204]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800429e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042a0:	4a32      	ldr	r2, [pc, #200]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042a6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042a8:	e00f      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ae:	3328      	adds	r3, #40	@ 0x28
 80042b0:	2101      	movs	r1, #1
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 fd7e 	bl	8004db4 <RCCEx_PLL3_Config>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80042be:	e004      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042c6:	e000      	b.n	80042ca <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80042c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d10b      	bne.n	80042ea <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042d2:	4b26      	ldr	r3, [pc, #152]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042e2:	4a22      	ldr	r2, [pc, #136]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6553      	str	r3, [r2, #84]	@ 0x54
 80042e8:	e003      	b.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042ee:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80042f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80042fe:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004300:	2300      	movs	r3, #0
 8004302:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004304:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004308:	460b      	mov	r3, r1
 800430a:	4313      	orrs	r3, r2
 800430c:	d034      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800430e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004312:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004314:	2b00      	cmp	r3, #0
 8004316:	d003      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8004318:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800431c:	d007      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800431e:	e011      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004320:	4b12      	ldr	r3, [pc, #72]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004322:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004324:	4a11      	ldr	r2, [pc, #68]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800432a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800432c:	e00e      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800432e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004332:	3308      	adds	r3, #8
 8004334:	2102      	movs	r1, #2
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fc8a 	bl	8004c50 <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004342:	e003      	b.n	800434c <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800434a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800434c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004350:	2b00      	cmp	r3, #0
 8004352:	d10d      	bne.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004354:	4b05      	ldr	r3, [pc, #20]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004356:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004358:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800435c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004362:	4a02      	ldr	r2, [pc, #8]	@ (800436c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004364:	430b      	orrs	r3, r1
 8004366:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004368:	e006      	b.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800436a:	bf00      	nop
 800436c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004370:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004374:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004378:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004380:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004384:	663b      	str	r3, [r7, #96]	@ 0x60
 8004386:	2300      	movs	r3, #0
 8004388:	667b      	str	r3, [r7, #100]	@ 0x64
 800438a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800438e:	460b      	mov	r3, r1
 8004390:	4313      	orrs	r3, r2
 8004392:	d00c      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004398:	3328      	adds	r3, #40	@ 0x28
 800439a:	2102      	movs	r1, #2
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fd09 	bl	8004db4 <RCCEx_PLL3_Config>
 80043a2:	4603      	mov	r3, r0
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80043a8:	2301      	movs	r3, #1
 80043aa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043bc:	2300      	movs	r3, #0
 80043be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043c0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043c4:	460b      	mov	r3, r1
 80043c6:	4313      	orrs	r3, r2
 80043c8:	d036      	beq.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043d0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043d4:	d018      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80043d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043da:	d811      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e0:	d014      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80043e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043e6:	d80b      	bhi.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d011      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80043ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043f0:	d106      	bne.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f2:	4bb7      	ldr	r3, [pc, #732]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	4ab6      	ldr	r2, [pc, #728]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80043f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80043fe:	e008      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004406:	e004      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004408:	bf00      	nop
 800440a:	e002      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800440c:	bf00      	nop
 800440e:	e000      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004410:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004412:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004416:	2b00      	cmp	r3, #0
 8004418:	d10a      	bne.n	8004430 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800441a:	4bad      	ldr	r3, [pc, #692]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800441c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800441e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004426:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004428:	4aa9      	ldr	r2, [pc, #676]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800442a:	430b      	orrs	r3, r1
 800442c:	6553      	str	r3, [r2, #84]	@ 0x54
 800442e:	e003      	b.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004430:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004434:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004438:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004440:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004444:	653b      	str	r3, [r7, #80]	@ 0x50
 8004446:	2300      	movs	r3, #0
 8004448:	657b      	str	r3, [r7, #84]	@ 0x54
 800444a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800444e:	460b      	mov	r3, r1
 8004450:	4313      	orrs	r3, r2
 8004452:	d009      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004454:	4b9e      	ldr	r3, [pc, #632]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004458:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800445c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004460:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004462:	4a9b      	ldr	r2, [pc, #620]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004464:	430b      	orrs	r3, r1
 8004466:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004474:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004476:	2300      	movs	r3, #0
 8004478:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800447a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800447e:	460b      	mov	r3, r1
 8004480:	4313      	orrs	r3, r2
 8004482:	d009      	beq.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004484:	4b92      	ldr	r3, [pc, #584]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004488:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800448c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004490:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004492:	4a8f      	ldr	r2, [pc, #572]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004494:	430b      	orrs	r3, r1
 8004496:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800449c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a0:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80044a6:	2300      	movs	r3, #0
 80044a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044aa:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044ae:	460b      	mov	r3, r1
 80044b0:	4313      	orrs	r3, r2
 80044b2:	d00e      	beq.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044b4:	4b86      	ldr	r3, [pc, #536]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	4a85      	ldr	r2, [pc, #532]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ba:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044be:	6113      	str	r3, [r2, #16]
 80044c0:	4b83      	ldr	r3, [pc, #524]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044c2:	6919      	ldr	r1, [r3, #16]
 80044c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044cc:	4a80      	ldr	r2, [pc, #512]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ce:	430b      	orrs	r3, r1
 80044d0:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044da:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044de:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044e0:	2300      	movs	r3, #0
 80044e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044e4:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044e8:	460b      	mov	r3, r1
 80044ea:	4313      	orrs	r3, r2
 80044ec:	d009      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80044ee:	4b78      	ldr	r3, [pc, #480]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80044f2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80044f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044fc:	4a74      	ldr	r2, [pc, #464]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004502:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800450a:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800450e:	633b      	str	r3, [r7, #48]	@ 0x30
 8004510:	2300      	movs	r3, #0
 8004512:	637b      	str	r3, [r7, #52]	@ 0x34
 8004514:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8004518:	460b      	mov	r3, r1
 800451a:	4313      	orrs	r3, r2
 800451c:	d00a      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800451e:	4b6c      	ldr	r3, [pc, #432]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8004526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800452a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800452e:	4a68      	ldr	r2, [pc, #416]	@ (80046d0 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004530:	430b      	orrs	r3, r1
 8004532:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004534:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800453c:	2100      	movs	r1, #0
 800453e:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004540:	f003 0301 	and.w	r3, r3, #1
 8004544:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004546:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800454a:	460b      	mov	r3, r1
 800454c:	4313      	orrs	r3, r2
 800454e:	d011      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004550:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004554:	3308      	adds	r3, #8
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fb79 	bl	8004c50 <RCCEx_PLL2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004564:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004568:	2b00      	cmp	r3, #0
 800456a:	d003      	beq.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800456c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004570:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457c:	2100      	movs	r1, #0
 800457e:	6239      	str	r1, [r7, #32]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	627b      	str	r3, [r7, #36]	@ 0x24
 8004586:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800458a:	460b      	mov	r3, r1
 800458c:	4313      	orrs	r3, r2
 800458e:	d011      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004590:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004594:	3308      	adds	r3, #8
 8004596:	2101      	movs	r1, #1
 8004598:	4618      	mov	r0, r3
 800459a:	f000 fb59 	bl	8004c50 <RCCEx_PLL2_Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d003      	beq.n	80045b4 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045bc:	2100      	movs	r1, #0
 80045be:	61b9      	str	r1, [r7, #24]
 80045c0:	f003 0304 	and.w	r3, r3, #4
 80045c4:	61fb      	str	r3, [r7, #28]
 80045c6:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045ca:	460b      	mov	r3, r1
 80045cc:	4313      	orrs	r3, r2
 80045ce:	d011      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d4:	3308      	adds	r3, #8
 80045d6:	2102      	movs	r1, #2
 80045d8:	4618      	mov	r0, r3
 80045da:	f000 fb39 	bl	8004c50 <RCCEx_PLL2_Config>
 80045de:	4603      	mov	r3, r0
 80045e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80045f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	2100      	movs	r1, #0
 80045fe:	6139      	str	r1, [r7, #16]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800460a:	460b      	mov	r3, r1
 800460c:	4313      	orrs	r3, r2
 800460e:	d011      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004610:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004614:	3328      	adds	r3, #40	@ 0x28
 8004616:	2100      	movs	r1, #0
 8004618:	4618      	mov	r0, r3
 800461a:	f000 fbcb 	bl	8004db4 <RCCEx_PLL3_Config>
 800461e:	4603      	mov	r3, r0
 8004620:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004624:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800462c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004630:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463c:	2100      	movs	r1, #0
 800463e:	60b9      	str	r1, [r7, #8]
 8004640:	f003 0310 	and.w	r3, r3, #16
 8004644:	60fb      	str	r3, [r7, #12]
 8004646:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800464a:	460b      	mov	r3, r1
 800464c:	4313      	orrs	r3, r2
 800464e:	d011      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004654:	3328      	adds	r3, #40	@ 0x28
 8004656:	2101      	movs	r1, #1
 8004658:	4618      	mov	r0, r3
 800465a:	f000 fbab 	bl	8004db4 <RCCEx_PLL3_Config>
 800465e:	4603      	mov	r3, r0
 8004660:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004664:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004668:	2b00      	cmp	r3, #0
 800466a:	d003      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800466c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004670:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800467c:	2100      	movs	r1, #0
 800467e:	6039      	str	r1, [r7, #0]
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	607b      	str	r3, [r7, #4]
 8004686:	e9d7 1200 	ldrd	r1, r2, [r7]
 800468a:	460b      	mov	r3, r1
 800468c:	4313      	orrs	r3, r2
 800468e:	d011      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004694:	3328      	adds	r3, #40	@ 0x28
 8004696:	2102      	movs	r1, #2
 8004698:	4618      	mov	r0, r3
 800469a:	f000 fb8b 	bl	8004db4 <RCCEx_PLL3_Config>
 800469e:	4603      	mov	r3, r0
 80046a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80046a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d003      	beq.n	80046b4 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80046b4:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d101      	bne.n	80046c0 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80046bc:	2300      	movs	r3, #0
 80046be:	e000      	b.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80046c8:	46bd      	mov	sp, r7
 80046ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046ce:	bf00      	nop
 80046d0:	58024400 	.word	0x58024400

080046d4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046d8:	f7fe fe00 	bl	80032dc <HAL_RCC_GetHCLKFreq>
 80046dc:	4602      	mov	r2, r0
 80046de:	4b06      	ldr	r3, [pc, #24]	@ (80046f8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046e0:	6a1b      	ldr	r3, [r3, #32]
 80046e2:	091b      	lsrs	r3, r3, #4
 80046e4:	f003 0307 	and.w	r3, r3, #7
 80046e8:	4904      	ldr	r1, [pc, #16]	@ (80046fc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046ea:	5ccb      	ldrb	r3, [r1, r3]
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	58024400 	.word	0x58024400
 80046fc:	08007a1c 	.word	0x08007a1c

08004700 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004700:	b480      	push	{r7}
 8004702:	b089      	sub	sp, #36	@ 0x24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004708:	4ba1      	ldr	r3, [pc, #644]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800470a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800470c:	f003 0303 	and.w	r3, r3, #3
 8004710:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004712:	4b9f      	ldr	r3, [pc, #636]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	0b1b      	lsrs	r3, r3, #12
 8004718:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800471c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800471e:	4b9c      	ldr	r3, [pc, #624]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004722:	091b      	lsrs	r3, r3, #4
 8004724:	f003 0301 	and.w	r3, r3, #1
 8004728:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800472a:	4b99      	ldr	r3, [pc, #612]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800472c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472e:	08db      	lsrs	r3, r3, #3
 8004730:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	fb02 f303 	mul.w	r3, r2, r3
 800473a:	ee07 3a90 	vmov	s15, r3
 800473e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004742:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	2b00      	cmp	r3, #0
 800474a:	f000 8111 	beq.w	8004970 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	2b02      	cmp	r3, #2
 8004752:	f000 8083 	beq.w	800485c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	2b02      	cmp	r3, #2
 800475a:	f200 80a1 	bhi.w	80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004764:	69bb      	ldr	r3, [r7, #24]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d056      	beq.n	8004818 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800476a:	e099      	b.n	80048a0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800476c:	4b88      	ldr	r3, [pc, #544]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0320 	and.w	r3, r3, #32
 8004774:	2b00      	cmp	r3, #0
 8004776:	d02d      	beq.n	80047d4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004778:	4b85      	ldr	r3, [pc, #532]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	08db      	lsrs	r3, r3, #3
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	4a84      	ldr	r2, [pc, #528]	@ (8004994 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004784:	fa22 f303 	lsr.w	r3, r2, r3
 8004788:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	ee07 3a90 	vmov	s15, r3
 8004790:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	ee07 3a90 	vmov	s15, r3
 800479a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800479e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047a2:	4b7b      	ldr	r3, [pc, #492]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80047b6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047ce:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047d2:	e087      	b.n	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	ee07 3a90 	vmov	s15, r3
 80047da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047de:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800499c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047e6:	4b6a      	ldr	r3, [pc, #424]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047ee:	ee07 3a90 	vmov	s15, r3
 80047f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047fa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004802:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004806:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800480a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800480e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004816:	e065      	b.n	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	ee07 3a90 	vmov	s15, r3
 800481e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004822:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004826:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800482a:	4b59      	ldr	r3, [pc, #356]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800482c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004832:	ee07 3a90 	vmov	s15, r3
 8004836:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800483a:	ed97 6a03 	vldr	s12, [r7, #12]
 800483e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004842:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004846:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800484a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800484e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004852:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004856:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800485a:	e043      	b.n	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	ee07 3a90 	vmov	s15, r3
 8004862:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004866:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800486a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800486e:	4b48      	ldr	r3, [pc, #288]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004870:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004872:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800487e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004882:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004886:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800488a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800488e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004892:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004896:	ee67 7a27 	vmul.f32	s15, s14, s15
 800489a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800489e:	e021      	b.n	80048e4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048aa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049a0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048b2:	4b37      	ldr	r3, [pc, #220]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048c2:	ed97 6a03 	vldr	s12, [r7, #12]
 80048c6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004998 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048de:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048e2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048e4:	4b2a      	ldr	r3, [pc, #168]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048e8:	0a5b      	lsrs	r3, r3, #9
 80048ea:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048ee:	ee07 3a90 	vmov	s15, r3
 80048f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80048fa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80048fe:	edd7 6a07 	vldr	s13, [r7, #28]
 8004902:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004906:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800490a:	ee17 2a90 	vmov	r2, s15
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004912:	4b1f      	ldr	r3, [pc, #124]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004916:	0c1b      	lsrs	r3, r3, #16
 8004918:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800491c:	ee07 3a90 	vmov	s15, r3
 8004920:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004924:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004928:	ee37 7a87 	vadd.f32	s14, s15, s14
 800492c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004930:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004934:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004938:	ee17 2a90 	vmov	r2, s15
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004940:	4b13      	ldr	r3, [pc, #76]	@ (8004990 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004944:	0e1b      	lsrs	r3, r3, #24
 8004946:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800494a:	ee07 3a90 	vmov	s15, r3
 800494e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004952:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004956:	ee37 7a87 	vadd.f32	s14, s15, s14
 800495a:	edd7 6a07 	vldr	s13, [r7, #28]
 800495e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004966:	ee17 2a90 	vmov	r2, s15
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800496e:	e008      	b.n	8004982 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	609a      	str	r2, [r3, #8]
}
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	@ 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	58024400 	.word	0x58024400
 8004994:	03d09000 	.word	0x03d09000
 8004998:	46000000 	.word	0x46000000
 800499c:	4c742400 	.word	0x4c742400
 80049a0:	4a742400 	.word	0x4a742400
 80049a4:	4af42400 	.word	0x4af42400

080049a8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b089      	sub	sp, #36	@ 0x24
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049b0:	4ba1      	ldr	r3, [pc, #644]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b4:	f003 0303 	and.w	r3, r3, #3
 80049b8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049ba:	4b9f      	ldr	r3, [pc, #636]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049be:	0d1b      	lsrs	r3, r3, #20
 80049c0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049c4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049c6:	4b9c      	ldr	r3, [pc, #624]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ca:	0a1b      	lsrs	r3, r3, #8
 80049cc:	f003 0301 	and.w	r3, r3, #1
 80049d0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049d2:	4b99      	ldr	r3, [pc, #612]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049d6:	08db      	lsrs	r3, r3, #3
 80049d8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049dc:	693a      	ldr	r2, [r7, #16]
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	ee07 3a90 	vmov	s15, r3
 80049e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ea:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8111 	beq.w	8004c18 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80049f6:	69bb      	ldr	r3, [r7, #24]
 80049f8:	2b02      	cmp	r3, #2
 80049fa:	f000 8083 	beq.w	8004b04 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80049fe:	69bb      	ldr	r3, [r7, #24]
 8004a00:	2b02      	cmp	r3, #2
 8004a02:	f200 80a1 	bhi.w	8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d003      	beq.n	8004a14 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a0c:	69bb      	ldr	r3, [r7, #24]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d056      	beq.n	8004ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a12:	e099      	b.n	8004b48 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a14:	4b88      	ldr	r3, [pc, #544]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0320 	and.w	r3, r3, #32
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d02d      	beq.n	8004a7c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a20:	4b85      	ldr	r3, [pc, #532]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	08db      	lsrs	r3, r3, #3
 8004a26:	f003 0303 	and.w	r3, r3, #3
 8004a2a:	4a84      	ldr	r2, [pc, #528]	@ (8004c3c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a2c:	fa22 f303 	lsr.w	r3, r2, r3
 8004a30:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a32:	68bb      	ldr	r3, [r7, #8]
 8004a34:	ee07 3a90 	vmov	s15, r3
 8004a38:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	ee07 3a90 	vmov	s15, r3
 8004a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a4a:	4b7b      	ldr	r3, [pc, #492]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a5e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a76:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a7a:	e087      	b.n	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	ee07 3a90 	vmov	s15, r3
 8004a82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a86:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c44 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a96:	ee07 3a90 	vmov	s15, r3
 8004a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004aa2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004abe:	e065      	b.n	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ac0:	697b      	ldr	r3, [r7, #20]
 8004ac2:	ee07 3a90 	vmov	s15, r3
 8004ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aca:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ad2:	4b59      	ldr	r3, [pc, #356]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ada:	ee07 3a90 	vmov	s15, r3
 8004ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ae2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ae6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004afe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b02:	e043      	b.n	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	ee07 3a90 	vmov	s15, r3
 8004b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b0e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b16:	4b48      	ldr	r3, [pc, #288]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b2a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b46:	e021      	b.n	8004b8c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	ee07 3a90 	vmov	s15, r3
 8004b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b52:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c48 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b5a:	4b37      	ldr	r3, [pc, #220]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b6e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c40 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b8a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004b8c:	4b2a      	ldr	r3, [pc, #168]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b90:	0a5b      	lsrs	r3, r3, #9
 8004b92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b96:	ee07 3a90 	vmov	s15, r3
 8004b9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b9e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ba2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ba6:	edd7 6a07 	vldr	s13, [r7, #28]
 8004baa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bb2:	ee17 2a90 	vmov	r2, s15
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bba:	4b1f      	ldr	r3, [pc, #124]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bbe:	0c1b      	lsrs	r3, r3, #16
 8004bc0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bc4:	ee07 3a90 	vmov	s15, r3
 8004bc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bcc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bd0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bd4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bd8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bdc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004be0:	ee17 2a90 	vmov	r2, s15
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004be8:	4b13      	ldr	r3, [pc, #76]	@ (8004c38 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bec:	0e1b      	lsrs	r3, r3, #24
 8004bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bf2:	ee07 3a90 	vmov	s15, r3
 8004bf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c02:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c0e:	ee17 2a90 	vmov	r2, s15
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c16:	e008      	b.n	8004c2a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2200      	movs	r2, #0
 8004c28:	609a      	str	r2, [r3, #8]
}
 8004c2a:	bf00      	nop
 8004c2c:	3724      	adds	r7, #36	@ 0x24
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr
 8004c36:	bf00      	nop
 8004c38:	58024400 	.word	0x58024400
 8004c3c:	03d09000 	.word	0x03d09000
 8004c40:	46000000 	.word	0x46000000
 8004c44:	4c742400 	.word	0x4c742400
 8004c48:	4a742400 	.word	0x4a742400
 8004c4c:	4af42400 	.word	0x4af42400

08004c50 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c5e:	4b53      	ldr	r3, [pc, #332]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c62:	f003 0303 	and.w	r3, r3, #3
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d101      	bne.n	8004c6e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e099      	b.n	8004da2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c6e:	4b4f      	ldr	r3, [pc, #316]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a4e      	ldr	r2, [pc, #312]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004c74:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c7a:	f7fc fb31 	bl	80012e0 <HAL_GetTick>
 8004c7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c80:	e008      	b.n	8004c94 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c82:	f7fc fb2d 	bl	80012e0 <HAL_GetTick>
 8004c86:	4602      	mov	r2, r0
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	1ad3      	subs	r3, r2, r3
 8004c8c:	2b02      	cmp	r3, #2
 8004c8e:	d901      	bls.n	8004c94 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e086      	b.n	8004da2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c94:	4b45      	ldr	r3, [pc, #276]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1f0      	bne.n	8004c82 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004ca0:	4b42      	ldr	r3, [pc, #264]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ca4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	031b      	lsls	r3, r3, #12
 8004cae:	493f      	ldr	r1, [pc, #252]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	3b01      	subs	r3, #1
 8004cc4:	025b      	lsls	r3, r3, #9
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	68db      	ldr	r3, [r3, #12]
 8004cce:	3b01      	subs	r3, #1
 8004cd0:	041b      	lsls	r3, r3, #16
 8004cd2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cd6:	431a      	orrs	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	3b01      	subs	r3, #1
 8004cde:	061b      	lsls	r3, r3, #24
 8004ce0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ce4:	4931      	ldr	r1, [pc, #196]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cea:	4b30      	ldr	r3, [pc, #192]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004cec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	492d      	ldr	r1, [pc, #180]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004cfc:	4b2b      	ldr	r3, [pc, #172]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d00:	f023 0220 	bic.w	r2, r3, #32
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	4928      	ldr	r1, [pc, #160]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d0a:	4313      	orrs	r3, r2
 8004d0c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d0e:	4b27      	ldr	r3, [pc, #156]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d12:	4a26      	ldr	r2, [pc, #152]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d14:	f023 0310 	bic.w	r3, r3, #16
 8004d18:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d1a:	4b24      	ldr	r3, [pc, #144]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d1c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d1e:	4b24      	ldr	r3, [pc, #144]	@ (8004db0 <RCCEx_PLL2_Config+0x160>)
 8004d20:	4013      	ands	r3, r2
 8004d22:	687a      	ldr	r2, [r7, #4]
 8004d24:	69d2      	ldr	r2, [r2, #28]
 8004d26:	00d2      	lsls	r2, r2, #3
 8004d28:	4920      	ldr	r1, [pc, #128]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d2a:	4313      	orrs	r3, r2
 8004d2c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d2e:	4b1f      	ldr	r3, [pc, #124]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	4a1e      	ldr	r2, [pc, #120]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d34:	f043 0310 	orr.w	r3, r3, #16
 8004d38:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d106      	bne.n	8004d4e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d40:	4b1a      	ldr	r3, [pc, #104]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	4a19      	ldr	r2, [pc, #100]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d46:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d4a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d4c:	e00f      	b.n	8004d6e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d106      	bne.n	8004d62 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d54:	4b15      	ldr	r3, [pc, #84]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	4a14      	ldr	r2, [pc, #80]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d5a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d60:	e005      	b.n	8004d6e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d62:	4b12      	ldr	r3, [pc, #72]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d66:	4a11      	ldr	r2, [pc, #68]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d6c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d6e:	4b0f      	ldr	r3, [pc, #60]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a0e      	ldr	r2, [pc, #56]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d74:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7a:	f7fc fab1 	bl	80012e0 <HAL_GetTick>
 8004d7e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d80:	e008      	b.n	8004d94 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d82:	f7fc faad 	bl	80012e0 <HAL_GetTick>
 8004d86:	4602      	mov	r2, r0
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	1ad3      	subs	r3, r2, r3
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d901      	bls.n	8004d94 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004d90:	2303      	movs	r3, #3
 8004d92:	e006      	b.n	8004da2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d94:	4b05      	ldr	r3, [pc, #20]	@ (8004dac <RCCEx_PLL2_Config+0x15c>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d0f0      	beq.n	8004d82 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	58024400 	.word	0x58024400
 8004db0:	ffff0007 	.word	0xffff0007

08004db4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dc2:	4b53      	ldr	r3, [pc, #332]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc6:	f003 0303 	and.w	r3, r3, #3
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d101      	bne.n	8004dd2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	e099      	b.n	8004f06 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004dd2:	4b4f      	ldr	r3, [pc, #316]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a4e      	ldr	r2, [pc, #312]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004ddc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004dde:	f7fc fa7f 	bl	80012e0 <HAL_GetTick>
 8004de2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004de4:	e008      	b.n	8004df8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004de6:	f7fc fa7b 	bl	80012e0 <HAL_GetTick>
 8004dea:	4602      	mov	r2, r0
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	1ad3      	subs	r3, r2, r3
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d901      	bls.n	8004df8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004df4:	2303      	movs	r3, #3
 8004df6:	e086      	b.n	8004f06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004df8:	4b45      	ldr	r3, [pc, #276]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d1f0      	bne.n	8004de6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e04:	4b42      	ldr	r3, [pc, #264]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	051b      	lsls	r3, r3, #20
 8004e12:	493f      	ldr	r1, [pc, #252]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e14:	4313      	orrs	r3, r2
 8004e16:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	3b01      	subs	r3, #1
 8004e1e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	3b01      	subs	r3, #1
 8004e28:	025b      	lsls	r3, r3, #9
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	041b      	lsls	r3, r3, #16
 8004e36:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e3a:	431a      	orrs	r2, r3
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	691b      	ldr	r3, [r3, #16]
 8004e40:	3b01      	subs	r3, #1
 8004e42:	061b      	lsls	r3, r3, #24
 8004e44:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e48:	4931      	ldr	r1, [pc, #196]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e4e:	4b30      	ldr	r3, [pc, #192]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e52:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	695b      	ldr	r3, [r3, #20]
 8004e5a:	492d      	ldr	r1, [pc, #180]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e60:	4b2b      	ldr	r3, [pc, #172]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e64:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	4928      	ldr	r1, [pc, #160]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e72:	4b27      	ldr	r3, [pc, #156]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e76:	4a26      	ldr	r2, [pc, #152]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e7e:	4b24      	ldr	r3, [pc, #144]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e82:	4b24      	ldr	r3, [pc, #144]	@ (8004f14 <RCCEx_PLL3_Config+0x160>)
 8004e84:	4013      	ands	r3, r2
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	69d2      	ldr	r2, [r2, #28]
 8004e8a:	00d2      	lsls	r2, r2, #3
 8004e8c:	4920      	ldr	r1, [pc, #128]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004e92:	4b1f      	ldr	r3, [pc, #124]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	4a1e      	ldr	r2, [pc, #120]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004e98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e9c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ea8:	4a19      	ldr	r2, [pc, #100]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004eaa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004eae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004eb0:	e00f      	b.n	8004ed2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d106      	bne.n	8004ec6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004eb8:	4b15      	ldr	r3, [pc, #84]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	4a14      	ldr	r2, [pc, #80]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004ebe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ec4:	e005      	b.n	8004ed2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004ec6:	4b12      	ldr	r3, [pc, #72]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eca:	4a11      	ldr	r2, [pc, #68]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004ecc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ed0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a0e      	ldr	r2, [pc, #56]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004edc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ede:	f7fc f9ff 	bl	80012e0 <HAL_GetTick>
 8004ee2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ee4:	e008      	b.n	8004ef8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004ee6:	f7fc f9fb 	bl	80012e0 <HAL_GetTick>
 8004eea:	4602      	mov	r2, r0
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	1ad3      	subs	r3, r2, r3
 8004ef0:	2b02      	cmp	r3, #2
 8004ef2:	d901      	bls.n	8004ef8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e006      	b.n	8004f06 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ef8:	4b05      	ldr	r3, [pc, #20]	@ (8004f10 <RCCEx_PLL3_Config+0x15c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d0f0      	beq.n	8004ee6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	58024400 	.word	0x58024400
 8004f14:	ffff0007 	.word	0xffff0007

08004f18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b082      	sub	sp, #8
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d101      	bne.n	8004f2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e042      	b.n	8004fb0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d106      	bne.n	8004f42 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f7fb ffd7 	bl	8000ef0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2224      	movs	r2, #36	@ 0x24
 8004f46:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0201 	bic.w	r2, r2, #1
 8004f58:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d002      	beq.n	8004f68 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f001 fb52 	bl	800660c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f000 fce3 	bl	8005934 <UART_SetConfig>
 8004f6e:	4603      	mov	r3, r0
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d101      	bne.n	8004f78 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e01b      	b.n	8004fb0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	685a      	ldr	r2, [r3, #4]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f86:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004f96:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0201 	orr.w	r2, r2, #1
 8004fa6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fa8:	6878      	ldr	r0, [r7, #4]
 8004faa:	f001 fbd1 	bl	8006750 <UART_CheckIdleState>
 8004fae:	4603      	mov	r3, r0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3708      	adds	r7, #8
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b08a      	sub	sp, #40	@ 0x28
 8004fbc:	af02      	add	r7, sp, #8
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	603b      	str	r3, [r7, #0]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fce:	2b20      	cmp	r3, #32
 8004fd0:	d17b      	bne.n	80050ca <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d002      	beq.n	8004fde <HAL_UART_Transmit+0x26>
 8004fd8:	88fb      	ldrh	r3, [r7, #6]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e074      	b.n	80050cc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	2221      	movs	r2, #33	@ 0x21
 8004fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ff2:	f7fc f975 	bl	80012e0 <HAL_GetTick>
 8004ff6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	88fa      	ldrh	r2, [r7, #6]
 8004ffc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	88fa      	ldrh	r2, [r7, #6]
 8005004:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005010:	d108      	bne.n	8005024 <HAL_UART_Transmit+0x6c>
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d104      	bne.n	8005024 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800501e:	68bb      	ldr	r3, [r7, #8]
 8005020:	61bb      	str	r3, [r7, #24]
 8005022:	e003      	b.n	800502c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005028:	2300      	movs	r3, #0
 800502a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800502c:	e030      	b.n	8005090 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	2200      	movs	r2, #0
 8005036:	2180      	movs	r1, #128	@ 0x80
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f001 fc33 	bl	80068a4 <UART_WaitOnFlagUntilTimeout>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	d005      	beq.n	8005050 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	2220      	movs	r2, #32
 8005048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800504c:	2303      	movs	r3, #3
 800504e:	e03d      	b.n	80050cc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10b      	bne.n	800506e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	881b      	ldrh	r3, [r3, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005064:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	3302      	adds	r3, #2
 800506a:	61bb      	str	r3, [r7, #24]
 800506c:	e007      	b.n	800507e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	781a      	ldrb	r2, [r3, #0]
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	3301      	adds	r3, #1
 800507c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005084:	b29b      	uxth	r3, r3
 8005086:	3b01      	subs	r3, #1
 8005088:	b29a      	uxth	r2, r3
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005096:	b29b      	uxth	r3, r3
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1c8      	bne.n	800502e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	9300      	str	r3, [sp, #0]
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2200      	movs	r2, #0
 80050a4:	2140      	movs	r1, #64	@ 0x40
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f001 fbfc 	bl	80068a4 <UART_WaitOnFlagUntilTimeout>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d005      	beq.n	80050be <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e006      	b.n	80050cc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2220      	movs	r2, #32
 80050c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e000      	b.n	80050cc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050ca:	2302      	movs	r3, #2
  }
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3720      	adds	r7, #32
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b08a      	sub	sp, #40	@ 0x28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	4613      	mov	r3, r2
 80050e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050e8:	2b20      	cmp	r3, #32
 80050ea:	d137      	bne.n	800515c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d002      	beq.n	80050f8 <HAL_UART_Receive_IT+0x24>
 80050f2:	88fb      	ldrh	r3, [r7, #6]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e030      	b.n	800515e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	2200      	movs	r2, #0
 8005100:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a18      	ldr	r2, [pc, #96]	@ (8005168 <HAL_UART_Receive_IT+0x94>)
 8005108:	4293      	cmp	r3, r2
 800510a:	d01f      	beq.n	800514c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d018      	beq.n	800514c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	e853 3f00 	ldrex	r3, [r3]
 8005126:	613b      	str	r3, [r7, #16]
   return(result);
 8005128:	693b      	ldr	r3, [r7, #16]
 800512a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	461a      	mov	r2, r3
 8005136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005138:	623b      	str	r3, [r7, #32]
 800513a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513c:	69f9      	ldr	r1, [r7, #28]
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	e841 2300 	strex	r3, r2, [r1]
 8005144:	61bb      	str	r3, [r7, #24]
   return(result);
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d1e6      	bne.n	800511a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800514c:	88fb      	ldrh	r3, [r7, #6]
 800514e:	461a      	mov	r2, r3
 8005150:	68b9      	ldr	r1, [r7, #8]
 8005152:	68f8      	ldr	r0, [r7, #12]
 8005154:	f001 fc14 	bl	8006980 <UART_Start_Receive_IT>
 8005158:	4603      	mov	r3, r0
 800515a:	e000      	b.n	800515e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3728      	adds	r7, #40	@ 0x28
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	58000c00 	.word	0x58000c00

0800516c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	b0ba      	sub	sp, #232	@ 0xe8
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	69db      	ldr	r3, [r3, #28]
 800517a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005192:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005196:	f640 030f 	movw	r3, #2063	@ 0x80f
 800519a:	4013      	ands	r3, r2
 800519c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80051a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d11b      	bne.n	80051e0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051ac:	f003 0320 	and.w	r3, r3, #32
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d015      	beq.n	80051e0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d105      	bne.n	80051cc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051c0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d009      	beq.n	80051e0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	f000 8377 	beq.w	80058c4 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	4798      	blx	r3
      }
      return;
 80051de:	e371      	b.n	80058c4 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051e0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8123 	beq.w	8005430 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051ea:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80051ee:	4b8d      	ldr	r3, [pc, #564]	@ (8005424 <HAL_UART_IRQHandler+0x2b8>)
 80051f0:	4013      	ands	r3, r2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d106      	bne.n	8005204 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80051f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80051fa:	4b8b      	ldr	r3, [pc, #556]	@ (8005428 <HAL_UART_IRQHandler+0x2bc>)
 80051fc:	4013      	ands	r3, r2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	f000 8116 	beq.w	8005430 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d011      	beq.n	8005234 <HAL_UART_IRQHandler+0xc8>
 8005210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00b      	beq.n	8005234 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	2201      	movs	r2, #1
 8005222:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005234:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d011      	beq.n	8005264 <HAL_UART_IRQHandler+0xf8>
 8005240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00b      	beq.n	8005264 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2202      	movs	r2, #2
 8005252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800525a:	f043 0204 	orr.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005268:	f003 0304 	and.w	r3, r3, #4
 800526c:	2b00      	cmp	r3, #0
 800526e:	d011      	beq.n	8005294 <HAL_UART_IRQHandler+0x128>
 8005270:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005274:	f003 0301 	and.w	r3, r3, #1
 8005278:	2b00      	cmp	r3, #0
 800527a:	d00b      	beq.n	8005294 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2204      	movs	r2, #4
 8005282:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800528a:	f043 0202 	orr.w	r2, r3, #2
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005294:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b00      	cmp	r3, #0
 800529e:	d017      	beq.n	80052d0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d105      	bne.n	80052b8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052ac:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005424 <HAL_UART_IRQHandler+0x2b8>)
 80052b2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d00b      	beq.n	80052d0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	2208      	movs	r2, #8
 80052be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052c6:	f043 0208 	orr.w	r2, r3, #8
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d012      	beq.n	8005302 <HAL_UART_IRQHandler+0x196>
 80052dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052e0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d00c      	beq.n	8005302 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80052f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052f8:	f043 0220 	orr.w	r2, r3, #32
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 82dd 	beq.w	80058c8 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800530e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005312:	f003 0320 	and.w	r3, r3, #32
 8005316:	2b00      	cmp	r3, #0
 8005318:	d013      	beq.n	8005342 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800531a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800531e:	f003 0320 	and.w	r3, r3, #32
 8005322:	2b00      	cmp	r3, #0
 8005324:	d105      	bne.n	8005332 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005326:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800532a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532e:	2b00      	cmp	r3, #0
 8005330:	d007      	beq.n	8005342 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005336:	2b00      	cmp	r3, #0
 8005338:	d003      	beq.n	8005342 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005348:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005356:	2b40      	cmp	r3, #64	@ 0x40
 8005358:	d005      	beq.n	8005366 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800535a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800535e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005362:	2b00      	cmp	r3, #0
 8005364:	d054      	beq.n	8005410 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f001 fc2c 	bl	8006bc4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	689b      	ldr	r3, [r3, #8]
 8005372:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005376:	2b40      	cmp	r3, #64	@ 0x40
 8005378:	d146      	bne.n	8005408 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3308      	adds	r3, #8
 8005380:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005384:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005388:	e853 3f00 	ldrex	r3, [r3]
 800538c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005390:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005394:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005398:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	3308      	adds	r3, #8
 80053a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053a6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053aa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053b6:	e841 2300 	strex	r3, r2, [r1]
 80053ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d1d9      	bne.n	800537a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d017      	beq.n	8005400 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053d6:	4a15      	ldr	r2, [pc, #84]	@ (800542c <HAL_UART_IRQHandler+0x2c0>)
 80053d8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fc fc2f 	bl	8001c44 <HAL_DMA_Abort_IT>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d019      	beq.n	8005420 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80053fa:	4610      	mov	r0, r2
 80053fc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053fe:	e00f      	b.n	8005420 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005400:	6878      	ldr	r0, [r7, #4]
 8005402:	f000 fa81 	bl	8005908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005406:	e00b      	b.n	8005420 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f000 fa7d 	bl	8005908 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540e:	e007      	b.n	8005420 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f000 fa79 	bl	8005908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2200      	movs	r2, #0
 800541a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800541e:	e253      	b.n	80058c8 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005420:	bf00      	nop
    return;
 8005422:	e251      	b.n	80058c8 <HAL_UART_IRQHandler+0x75c>
 8005424:	10000001 	.word	0x10000001
 8005428:	04000120 	.word	0x04000120
 800542c:	08006c91 	.word	0x08006c91

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005434:	2b01      	cmp	r3, #1
 8005436:	f040 81e7 	bne.w	8005808 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800543a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800543e:	f003 0310 	and.w	r3, r3, #16
 8005442:	2b00      	cmp	r3, #0
 8005444:	f000 81e0 	beq.w	8005808 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005448:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800544c:	f003 0310 	and.w	r3, r3, #16
 8005450:	2b00      	cmp	r3, #0
 8005452:	f000 81d9 	beq.w	8005808 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	2210      	movs	r2, #16
 800545c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005468:	2b40      	cmp	r3, #64	@ 0x40
 800546a:	f040 8151 	bne.w	8005710 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	4a96      	ldr	r2, [pc, #600]	@ (80056d0 <HAL_UART_IRQHandler+0x564>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d068      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a93      	ldr	r2, [pc, #588]	@ (80056d4 <HAL_UART_IRQHandler+0x568>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d061      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a91      	ldr	r2, [pc, #580]	@ (80056d8 <HAL_UART_IRQHandler+0x56c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d05a      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a8e      	ldr	r2, [pc, #568]	@ (80056dc <HAL_UART_IRQHandler+0x570>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d053      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a8c      	ldr	r2, [pc, #560]	@ (80056e0 <HAL_UART_IRQHandler+0x574>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d04c      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	4a89      	ldr	r2, [pc, #548]	@ (80056e4 <HAL_UART_IRQHandler+0x578>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d045      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	4a87      	ldr	r2, [pc, #540]	@ (80056e8 <HAL_UART_IRQHandler+0x57c>)
 80054cc:	4293      	cmp	r3, r2
 80054ce:	d03e      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a84      	ldr	r2, [pc, #528]	@ (80056ec <HAL_UART_IRQHandler+0x580>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d037      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a82      	ldr	r2, [pc, #520]	@ (80056f0 <HAL_UART_IRQHandler+0x584>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d030      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4a7f      	ldr	r2, [pc, #508]	@ (80056f4 <HAL_UART_IRQHandler+0x588>)
 80054f6:	4293      	cmp	r3, r2
 80054f8:	d029      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a7d      	ldr	r2, [pc, #500]	@ (80056f8 <HAL_UART_IRQHandler+0x58c>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d022      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a7a      	ldr	r2, [pc, #488]	@ (80056fc <HAL_UART_IRQHandler+0x590>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d01b      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4a78      	ldr	r2, [pc, #480]	@ (8005700 <HAL_UART_IRQHandler+0x594>)
 8005520:	4293      	cmp	r3, r2
 8005522:	d014      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a75      	ldr	r2, [pc, #468]	@ (8005704 <HAL_UART_IRQHandler+0x598>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d00d      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a73      	ldr	r2, [pc, #460]	@ (8005708 <HAL_UART_IRQHandler+0x59c>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d006      	beq.n	800554e <HAL_UART_IRQHandler+0x3e2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4a70      	ldr	r2, [pc, #448]	@ (800570c <HAL_UART_IRQHandler+0x5a0>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d106      	bne.n	800555c <HAL_UART_IRQHandler+0x3f0>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	b29b      	uxth	r3, r3
 800555a:	e005      	b.n	8005568 <HAL_UART_IRQHandler+0x3fc>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	b29b      	uxth	r3, r3
 8005568:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800556c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005570:	2b00      	cmp	r3, #0
 8005572:	f000 81ab 	beq.w	80058cc <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800557c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005580:	429a      	cmp	r2, r3
 8005582:	f080 81a3 	bcs.w	80058cc <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800558c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005596:	69db      	ldr	r3, [r3, #28]
 8005598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800559c:	f000 8087 	beq.w	80056ae <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055ac:	e853 3f00 	ldrex	r3, [r3]
 80055b0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055bc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	461a      	mov	r2, r3
 80055c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055ca:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055ce:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055da:	e841 2300 	strex	r3, r2, [r1]
 80055de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1da      	bne.n	80055a0 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	3308      	adds	r3, #8
 80055f0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055f2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055f4:	e853 3f00 	ldrex	r3, [r3]
 80055f8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80055fa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	3308      	adds	r3, #8
 800560a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800560e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005612:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005614:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005616:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005620:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e1      	bne.n	80055ea <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	3308      	adds	r3, #8
 800562c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800562e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005630:	e853 3f00 	ldrex	r3, [r3]
 8005634:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800563c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	3308      	adds	r3, #8
 8005646:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800564a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800564c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800564e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005650:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005652:	e841 2300 	strex	r3, r2, [r1]
 8005656:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800565a:	2b00      	cmp	r3, #0
 800565c:	d1e3      	bne.n	8005626 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2220      	movs	r2, #32
 8005662:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005672:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005674:	e853 3f00 	ldrex	r3, [r3]
 8005678:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800567a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800567c:	f023 0310 	bic.w	r3, r3, #16
 8005680:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	461a      	mov	r2, r3
 800568a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800568e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005690:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005692:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005694:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005696:	e841 2300 	strex	r3, r2, [r1]
 800569a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800569c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1e4      	bne.n	800566c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056a8:	4618      	mov	r0, r3
 80056aa:	f7fb ffad 	bl	8001608 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2202      	movs	r2, #2
 80056b2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	1ad3      	subs	r3, r2, r3
 80056c4:	b29b      	uxth	r3, r3
 80056c6:	4619      	mov	r1, r3
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f927 	bl	800591c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056ce:	e0fd      	b.n	80058cc <HAL_UART_IRQHandler+0x760>
 80056d0:	40020010 	.word	0x40020010
 80056d4:	40020028 	.word	0x40020028
 80056d8:	40020040 	.word	0x40020040
 80056dc:	40020058 	.word	0x40020058
 80056e0:	40020070 	.word	0x40020070
 80056e4:	40020088 	.word	0x40020088
 80056e8:	400200a0 	.word	0x400200a0
 80056ec:	400200b8 	.word	0x400200b8
 80056f0:	40020410 	.word	0x40020410
 80056f4:	40020428 	.word	0x40020428
 80056f8:	40020440 	.word	0x40020440
 80056fc:	40020458 	.word	0x40020458
 8005700:	40020470 	.word	0x40020470
 8005704:	40020488 	.word	0x40020488
 8005708:	400204a0 	.word	0x400204a0
 800570c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800571c:	b29b      	uxth	r3, r3
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800572a:	b29b      	uxth	r3, r3
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80cf 	beq.w	80058d0 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005732:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 80ca 	beq.w	80058d0 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800574a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800574c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005750:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	461a      	mov	r2, r3
 800575a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800575e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005760:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005762:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005764:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800576c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e4      	bne.n	800573c <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	623b      	str	r3, [r7, #32]
   return(result);
 8005782:	6a3a      	ldr	r2, [r7, #32]
 8005784:	4b55      	ldr	r3, [pc, #340]	@ (80058dc <HAL_UART_IRQHandler+0x770>)
 8005786:	4013      	ands	r3, r2
 8005788:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005796:	633a      	str	r2, [r7, #48]	@ 0x30
 8005798:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800579c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e3      	bne.n	8005772 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	e853 3f00 	ldrex	r3, [r3]
 80057ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f023 0310 	bic.w	r3, r3, #16
 80057d2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	461a      	mov	r2, r3
 80057dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e4:	69b9      	ldr	r1, [r7, #24]
 80057e6:	69fa      	ldr	r2, [r7, #28]
 80057e8:	e841 2300 	strex	r3, r2, [r1]
 80057ec:	617b      	str	r3, [r7, #20]
   return(result);
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d1e4      	bne.n	80057be <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2202      	movs	r2, #2
 80057f8:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80057fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057fe:	4619      	mov	r1, r3
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f000 f88b 	bl	800591c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005806:	e063      	b.n	80058d0 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005808:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800580c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00e      	beq.n	8005832 <HAL_UART_IRQHandler+0x6c6>
 8005814:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005818:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800581c:	2b00      	cmp	r3, #0
 800581e:	d008      	beq.n	8005832 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8005828:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f001 ff8e 	bl	800774c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005830:	e051      	b.n	80058d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005832:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005836:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800583a:	2b00      	cmp	r3, #0
 800583c:	d014      	beq.n	8005868 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800583e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005842:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005846:	2b00      	cmp	r3, #0
 8005848:	d105      	bne.n	8005856 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800584a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800584e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005852:	2b00      	cmp	r3, #0
 8005854:	d008      	beq.n	8005868 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800585a:	2b00      	cmp	r3, #0
 800585c:	d03a      	beq.n	80058d4 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	4798      	blx	r3
    }
    return;
 8005866:	e035      	b.n	80058d4 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005868:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005870:	2b00      	cmp	r3, #0
 8005872:	d009      	beq.n	8005888 <HAL_UART_IRQHandler+0x71c>
 8005874:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005878:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f001 fa1b 	bl	8006cbc <UART_EndTransmit_IT>
    return;
 8005886:	e026      	b.n	80058d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005888:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800588c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <HAL_UART_IRQHandler+0x73c>
 8005894:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005898:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f001 ff67 	bl	8007774 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058a6:	e016      	b.n	80058d6 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d010      	beq.n	80058d6 <HAL_UART_IRQHandler+0x76a>
 80058b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	da0c      	bge.n	80058d6 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f001 ff4f 	bl	8007760 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058c2:	e008      	b.n	80058d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80058c4:	bf00      	nop
 80058c6:	e006      	b.n	80058d6 <HAL_UART_IRQHandler+0x76a>
    return;
 80058c8:	bf00      	nop
 80058ca:	e004      	b.n	80058d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80058cc:	bf00      	nop
 80058ce:	e002      	b.n	80058d6 <HAL_UART_IRQHandler+0x76a>
      return;
 80058d0:	bf00      	nop
 80058d2:	e000      	b.n	80058d6 <HAL_UART_IRQHandler+0x76a>
    return;
 80058d4:	bf00      	nop
  }
}
 80058d6:	37e8      	adds	r7, #232	@ 0xe8
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	effffffe 	.word	0xeffffffe

080058e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
 8005924:	460b      	mov	r3, r1
 8005926:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005928:	bf00      	nop
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005934:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005938:	b092      	sub	sp, #72	@ 0x48
 800593a:	af00      	add	r7, sp, #0
 800593c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800593e:	2300      	movs	r3, #0
 8005940:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005944:	697b      	ldr	r3, [r7, #20]
 8005946:	689a      	ldr	r2, [r3, #8]
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	691b      	ldr	r3, [r3, #16]
 800594c:	431a      	orrs	r2, r3
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	695b      	ldr	r3, [r3, #20]
 8005952:	431a      	orrs	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	69db      	ldr	r3, [r3, #28]
 8005958:	4313      	orrs	r3, r2
 800595a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4bbe      	ldr	r3, [pc, #760]	@ (8005c5c <UART_SetConfig+0x328>)
 8005964:	4013      	ands	r3, r2
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800596c:	430b      	orrs	r3, r1
 800596e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	68da      	ldr	r2, [r3, #12]
 800597e:	697b      	ldr	r3, [r7, #20]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4ab3      	ldr	r2, [pc, #716]	@ (8005c60 <UART_SetConfig+0x32c>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d004      	beq.n	80059a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800599c:	4313      	orrs	r3, r2
 800599e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689a      	ldr	r2, [r3, #8]
 80059a6:	4baf      	ldr	r3, [pc, #700]	@ (8005c64 <UART_SetConfig+0x330>)
 80059a8:	4013      	ands	r3, r2
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	6812      	ldr	r2, [r2, #0]
 80059ae:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059b0:	430b      	orrs	r3, r1
 80059b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ba:	f023 010f 	bic.w	r1, r3, #15
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4aa6      	ldr	r2, [pc, #664]	@ (8005c68 <UART_SetConfig+0x334>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d177      	bne.n	8005ac4 <UART_SetConfig+0x190>
 80059d4:	4ba5      	ldr	r3, [pc, #660]	@ (8005c6c <UART_SetConfig+0x338>)
 80059d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059d8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059dc:	2b28      	cmp	r3, #40	@ 0x28
 80059de:	d86d      	bhi.n	8005abc <UART_SetConfig+0x188>
 80059e0:	a201      	add	r2, pc, #4	@ (adr r2, 80059e8 <UART_SetConfig+0xb4>)
 80059e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e6:	bf00      	nop
 80059e8:	08005a8d 	.word	0x08005a8d
 80059ec:	08005abd 	.word	0x08005abd
 80059f0:	08005abd 	.word	0x08005abd
 80059f4:	08005abd 	.word	0x08005abd
 80059f8:	08005abd 	.word	0x08005abd
 80059fc:	08005abd 	.word	0x08005abd
 8005a00:	08005abd 	.word	0x08005abd
 8005a04:	08005abd 	.word	0x08005abd
 8005a08:	08005a95 	.word	0x08005a95
 8005a0c:	08005abd 	.word	0x08005abd
 8005a10:	08005abd 	.word	0x08005abd
 8005a14:	08005abd 	.word	0x08005abd
 8005a18:	08005abd 	.word	0x08005abd
 8005a1c:	08005abd 	.word	0x08005abd
 8005a20:	08005abd 	.word	0x08005abd
 8005a24:	08005abd 	.word	0x08005abd
 8005a28:	08005a9d 	.word	0x08005a9d
 8005a2c:	08005abd 	.word	0x08005abd
 8005a30:	08005abd 	.word	0x08005abd
 8005a34:	08005abd 	.word	0x08005abd
 8005a38:	08005abd 	.word	0x08005abd
 8005a3c:	08005abd 	.word	0x08005abd
 8005a40:	08005abd 	.word	0x08005abd
 8005a44:	08005abd 	.word	0x08005abd
 8005a48:	08005aa5 	.word	0x08005aa5
 8005a4c:	08005abd 	.word	0x08005abd
 8005a50:	08005abd 	.word	0x08005abd
 8005a54:	08005abd 	.word	0x08005abd
 8005a58:	08005abd 	.word	0x08005abd
 8005a5c:	08005abd 	.word	0x08005abd
 8005a60:	08005abd 	.word	0x08005abd
 8005a64:	08005abd 	.word	0x08005abd
 8005a68:	08005aad 	.word	0x08005aad
 8005a6c:	08005abd 	.word	0x08005abd
 8005a70:	08005abd 	.word	0x08005abd
 8005a74:	08005abd 	.word	0x08005abd
 8005a78:	08005abd 	.word	0x08005abd
 8005a7c:	08005abd 	.word	0x08005abd
 8005a80:	08005abd 	.word	0x08005abd
 8005a84:	08005abd 	.word	0x08005abd
 8005a88:	08005ab5 	.word	0x08005ab5
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a92:	e326      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005a94:	2304      	movs	r3, #4
 8005a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a9a:	e322      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005a9c:	2308      	movs	r3, #8
 8005a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa2:	e31e      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005aa4:	2310      	movs	r3, #16
 8005aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aaa:	e31a      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005aac:	2320      	movs	r3, #32
 8005aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab2:	e316      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005ab4:	2340      	movs	r3, #64	@ 0x40
 8005ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aba:	e312      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005abc:	2380      	movs	r3, #128	@ 0x80
 8005abe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac2:	e30e      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a69      	ldr	r2, [pc, #420]	@ (8005c70 <UART_SetConfig+0x33c>)
 8005aca:	4293      	cmp	r3, r2
 8005acc:	d130      	bne.n	8005b30 <UART_SetConfig+0x1fc>
 8005ace:	4b67      	ldr	r3, [pc, #412]	@ (8005c6c <UART_SetConfig+0x338>)
 8005ad0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ad2:	f003 0307 	and.w	r3, r3, #7
 8005ad6:	2b05      	cmp	r3, #5
 8005ad8:	d826      	bhi.n	8005b28 <UART_SetConfig+0x1f4>
 8005ada:	a201      	add	r2, pc, #4	@ (adr r2, 8005ae0 <UART_SetConfig+0x1ac>)
 8005adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ae0:	08005af9 	.word	0x08005af9
 8005ae4:	08005b01 	.word	0x08005b01
 8005ae8:	08005b09 	.word	0x08005b09
 8005aec:	08005b11 	.word	0x08005b11
 8005af0:	08005b19 	.word	0x08005b19
 8005af4:	08005b21 	.word	0x08005b21
 8005af8:	2300      	movs	r3, #0
 8005afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005afe:	e2f0      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b00:	2304      	movs	r3, #4
 8005b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b06:	e2ec      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b08:	2308      	movs	r3, #8
 8005b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b0e:	e2e8      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b10:	2310      	movs	r3, #16
 8005b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b16:	e2e4      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b18:	2320      	movs	r3, #32
 8005b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1e:	e2e0      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b20:	2340      	movs	r3, #64	@ 0x40
 8005b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b26:	e2dc      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b28:	2380      	movs	r3, #128	@ 0x80
 8005b2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2e:	e2d8      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a4f      	ldr	r2, [pc, #316]	@ (8005c74 <UART_SetConfig+0x340>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d130      	bne.n	8005b9c <UART_SetConfig+0x268>
 8005b3a:	4b4c      	ldr	r3, [pc, #304]	@ (8005c6c <UART_SetConfig+0x338>)
 8005b3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3e:	f003 0307 	and.w	r3, r3, #7
 8005b42:	2b05      	cmp	r3, #5
 8005b44:	d826      	bhi.n	8005b94 <UART_SetConfig+0x260>
 8005b46:	a201      	add	r2, pc, #4	@ (adr r2, 8005b4c <UART_SetConfig+0x218>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005b65 	.word	0x08005b65
 8005b50:	08005b6d 	.word	0x08005b6d
 8005b54:	08005b75 	.word	0x08005b75
 8005b58:	08005b7d 	.word	0x08005b7d
 8005b5c:	08005b85 	.word	0x08005b85
 8005b60:	08005b8d 	.word	0x08005b8d
 8005b64:	2300      	movs	r3, #0
 8005b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b6a:	e2ba      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b6c:	2304      	movs	r3, #4
 8005b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b72:	e2b6      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b74:	2308      	movs	r3, #8
 8005b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7a:	e2b2      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b7c:	2310      	movs	r3, #16
 8005b7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b82:	e2ae      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b84:	2320      	movs	r3, #32
 8005b86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8a:	e2aa      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b8c:	2340      	movs	r3, #64	@ 0x40
 8005b8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b92:	e2a6      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b94:	2380      	movs	r3, #128	@ 0x80
 8005b96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9a:	e2a2      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	4a35      	ldr	r2, [pc, #212]	@ (8005c78 <UART_SetConfig+0x344>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d130      	bne.n	8005c08 <UART_SetConfig+0x2d4>
 8005ba6:	4b31      	ldr	r3, [pc, #196]	@ (8005c6c <UART_SetConfig+0x338>)
 8005ba8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	2b05      	cmp	r3, #5
 8005bb0:	d826      	bhi.n	8005c00 <UART_SetConfig+0x2cc>
 8005bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005bb8 <UART_SetConfig+0x284>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bd1 	.word	0x08005bd1
 8005bbc:	08005bd9 	.word	0x08005bd9
 8005bc0:	08005be1 	.word	0x08005be1
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bd6:	e284      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005bd8:	2304      	movs	r3, #4
 8005bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bde:	e280      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005be0:	2308      	movs	r3, #8
 8005be2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005be6:	e27c      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005be8:	2310      	movs	r3, #16
 8005bea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bee:	e278      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005bf0:	2320      	movs	r3, #32
 8005bf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf6:	e274      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005bf8:	2340      	movs	r3, #64	@ 0x40
 8005bfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfe:	e270      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c00:	2380      	movs	r3, #128	@ 0x80
 8005c02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c06:	e26c      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005c7c <UART_SetConfig+0x348>)
 8005c0e:	4293      	cmp	r3, r2
 8005c10:	d142      	bne.n	8005c98 <UART_SetConfig+0x364>
 8005c12:	4b16      	ldr	r3, [pc, #88]	@ (8005c6c <UART_SetConfig+0x338>)
 8005c14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c16:	f003 0307 	and.w	r3, r3, #7
 8005c1a:	2b05      	cmp	r3, #5
 8005c1c:	d838      	bhi.n	8005c90 <UART_SetConfig+0x35c>
 8005c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c24 <UART_SetConfig+0x2f0>)
 8005c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c24:	08005c3d 	.word	0x08005c3d
 8005c28:	08005c45 	.word	0x08005c45
 8005c2c:	08005c4d 	.word	0x08005c4d
 8005c30:	08005c55 	.word	0x08005c55
 8005c34:	08005c81 	.word	0x08005c81
 8005c38:	08005c89 	.word	0x08005c89
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c42:	e24e      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c44:	2304      	movs	r3, #4
 8005c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c4a:	e24a      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c4c:	2308      	movs	r3, #8
 8005c4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c52:	e246      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c54:	2310      	movs	r3, #16
 8005c56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5a:	e242      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c5c:	cfff69f3 	.word	0xcfff69f3
 8005c60:	58000c00 	.word	0x58000c00
 8005c64:	11fff4ff 	.word	0x11fff4ff
 8005c68:	40011000 	.word	0x40011000
 8005c6c:	58024400 	.word	0x58024400
 8005c70:	40004400 	.word	0x40004400
 8005c74:	40004800 	.word	0x40004800
 8005c78:	40004c00 	.word	0x40004c00
 8005c7c:	40005000 	.word	0x40005000
 8005c80:	2320      	movs	r3, #32
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e22c      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c88:	2340      	movs	r3, #64	@ 0x40
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e228      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c90:	2380      	movs	r3, #128	@ 0x80
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e224      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005c98:	697b      	ldr	r3, [r7, #20]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4ab1      	ldr	r2, [pc, #708]	@ (8005f64 <UART_SetConfig+0x630>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d176      	bne.n	8005d90 <UART_SetConfig+0x45c>
 8005ca2:	4bb1      	ldr	r3, [pc, #708]	@ (8005f68 <UART_SetConfig+0x634>)
 8005ca4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ca6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005caa:	2b28      	cmp	r3, #40	@ 0x28
 8005cac:	d86c      	bhi.n	8005d88 <UART_SetConfig+0x454>
 8005cae:	a201      	add	r2, pc, #4	@ (adr r2, 8005cb4 <UART_SetConfig+0x380>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005d59 	.word	0x08005d59
 8005cb8:	08005d89 	.word	0x08005d89
 8005cbc:	08005d89 	.word	0x08005d89
 8005cc0:	08005d89 	.word	0x08005d89
 8005cc4:	08005d89 	.word	0x08005d89
 8005cc8:	08005d89 	.word	0x08005d89
 8005ccc:	08005d89 	.word	0x08005d89
 8005cd0:	08005d89 	.word	0x08005d89
 8005cd4:	08005d61 	.word	0x08005d61
 8005cd8:	08005d89 	.word	0x08005d89
 8005cdc:	08005d89 	.word	0x08005d89
 8005ce0:	08005d89 	.word	0x08005d89
 8005ce4:	08005d89 	.word	0x08005d89
 8005ce8:	08005d89 	.word	0x08005d89
 8005cec:	08005d89 	.word	0x08005d89
 8005cf0:	08005d89 	.word	0x08005d89
 8005cf4:	08005d69 	.word	0x08005d69
 8005cf8:	08005d89 	.word	0x08005d89
 8005cfc:	08005d89 	.word	0x08005d89
 8005d00:	08005d89 	.word	0x08005d89
 8005d04:	08005d89 	.word	0x08005d89
 8005d08:	08005d89 	.word	0x08005d89
 8005d0c:	08005d89 	.word	0x08005d89
 8005d10:	08005d89 	.word	0x08005d89
 8005d14:	08005d71 	.word	0x08005d71
 8005d18:	08005d89 	.word	0x08005d89
 8005d1c:	08005d89 	.word	0x08005d89
 8005d20:	08005d89 	.word	0x08005d89
 8005d24:	08005d89 	.word	0x08005d89
 8005d28:	08005d89 	.word	0x08005d89
 8005d2c:	08005d89 	.word	0x08005d89
 8005d30:	08005d89 	.word	0x08005d89
 8005d34:	08005d79 	.word	0x08005d79
 8005d38:	08005d89 	.word	0x08005d89
 8005d3c:	08005d89 	.word	0x08005d89
 8005d40:	08005d89 	.word	0x08005d89
 8005d44:	08005d89 	.word	0x08005d89
 8005d48:	08005d89 	.word	0x08005d89
 8005d4c:	08005d89 	.word	0x08005d89
 8005d50:	08005d89 	.word	0x08005d89
 8005d54:	08005d81 	.word	0x08005d81
 8005d58:	2301      	movs	r3, #1
 8005d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d5e:	e1c0      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005d60:	2304      	movs	r3, #4
 8005d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d66:	e1bc      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005d68:	2308      	movs	r3, #8
 8005d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d6e:	e1b8      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005d70:	2310      	movs	r3, #16
 8005d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d76:	e1b4      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005d78:	2320      	movs	r3, #32
 8005d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7e:	e1b0      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005d80:	2340      	movs	r3, #64	@ 0x40
 8005d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d86:	e1ac      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005d88:	2380      	movs	r3, #128	@ 0x80
 8005d8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8e:	e1a8      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a75      	ldr	r2, [pc, #468]	@ (8005f6c <UART_SetConfig+0x638>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d130      	bne.n	8005dfc <UART_SetConfig+0x4c8>
 8005d9a:	4b73      	ldr	r3, [pc, #460]	@ (8005f68 <UART_SetConfig+0x634>)
 8005d9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d9e:	f003 0307 	and.w	r3, r3, #7
 8005da2:	2b05      	cmp	r3, #5
 8005da4:	d826      	bhi.n	8005df4 <UART_SetConfig+0x4c0>
 8005da6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dac <UART_SetConfig+0x478>)
 8005da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dac:	08005dc5 	.word	0x08005dc5
 8005db0:	08005dcd 	.word	0x08005dcd
 8005db4:	08005dd5 	.word	0x08005dd5
 8005db8:	08005ddd 	.word	0x08005ddd
 8005dbc:	08005de5 	.word	0x08005de5
 8005dc0:	08005ded 	.word	0x08005ded
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dca:	e18a      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005dcc:	2304      	movs	r3, #4
 8005dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dd2:	e186      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005dd4:	2308      	movs	r3, #8
 8005dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dda:	e182      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005ddc:	2310      	movs	r3, #16
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de2:	e17e      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005de4:	2320      	movs	r3, #32
 8005de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dea:	e17a      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005dec:	2340      	movs	r3, #64	@ 0x40
 8005dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df2:	e176      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005df4:	2380      	movs	r3, #128	@ 0x80
 8005df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfa:	e172      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	4a5b      	ldr	r2, [pc, #364]	@ (8005f70 <UART_SetConfig+0x63c>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d130      	bne.n	8005e68 <UART_SetConfig+0x534>
 8005e06:	4b58      	ldr	r3, [pc, #352]	@ (8005f68 <UART_SetConfig+0x634>)
 8005e08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e0a:	f003 0307 	and.w	r3, r3, #7
 8005e0e:	2b05      	cmp	r3, #5
 8005e10:	d826      	bhi.n	8005e60 <UART_SetConfig+0x52c>
 8005e12:	a201      	add	r2, pc, #4	@ (adr r2, 8005e18 <UART_SetConfig+0x4e4>)
 8005e14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e18:	08005e31 	.word	0x08005e31
 8005e1c:	08005e39 	.word	0x08005e39
 8005e20:	08005e41 	.word	0x08005e41
 8005e24:	08005e49 	.word	0x08005e49
 8005e28:	08005e51 	.word	0x08005e51
 8005e2c:	08005e59 	.word	0x08005e59
 8005e30:	2300      	movs	r3, #0
 8005e32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e36:	e154      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005e38:	2304      	movs	r3, #4
 8005e3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e3e:	e150      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005e40:	2308      	movs	r3, #8
 8005e42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e46:	e14c      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005e48:	2310      	movs	r3, #16
 8005e4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4e:	e148      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005e50:	2320      	movs	r3, #32
 8005e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e56:	e144      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005e58:	2340      	movs	r3, #64	@ 0x40
 8005e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5e:	e140      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005e60:	2380      	movs	r3, #128	@ 0x80
 8005e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e66:	e13c      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a41      	ldr	r2, [pc, #260]	@ (8005f74 <UART_SetConfig+0x640>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	f040 8082 	bne.w	8005f78 <UART_SetConfig+0x644>
 8005e74:	4b3c      	ldr	r3, [pc, #240]	@ (8005f68 <UART_SetConfig+0x634>)
 8005e76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e7c:	2b28      	cmp	r3, #40	@ 0x28
 8005e7e:	d86d      	bhi.n	8005f5c <UART_SetConfig+0x628>
 8005e80:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <UART_SetConfig+0x554>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08005f2d 	.word	0x08005f2d
 8005e8c:	08005f5d 	.word	0x08005f5d
 8005e90:	08005f5d 	.word	0x08005f5d
 8005e94:	08005f5d 	.word	0x08005f5d
 8005e98:	08005f5d 	.word	0x08005f5d
 8005e9c:	08005f5d 	.word	0x08005f5d
 8005ea0:	08005f5d 	.word	0x08005f5d
 8005ea4:	08005f5d 	.word	0x08005f5d
 8005ea8:	08005f35 	.word	0x08005f35
 8005eac:	08005f5d 	.word	0x08005f5d
 8005eb0:	08005f5d 	.word	0x08005f5d
 8005eb4:	08005f5d 	.word	0x08005f5d
 8005eb8:	08005f5d 	.word	0x08005f5d
 8005ebc:	08005f5d 	.word	0x08005f5d
 8005ec0:	08005f5d 	.word	0x08005f5d
 8005ec4:	08005f5d 	.word	0x08005f5d
 8005ec8:	08005f3d 	.word	0x08005f3d
 8005ecc:	08005f5d 	.word	0x08005f5d
 8005ed0:	08005f5d 	.word	0x08005f5d
 8005ed4:	08005f5d 	.word	0x08005f5d
 8005ed8:	08005f5d 	.word	0x08005f5d
 8005edc:	08005f5d 	.word	0x08005f5d
 8005ee0:	08005f5d 	.word	0x08005f5d
 8005ee4:	08005f5d 	.word	0x08005f5d
 8005ee8:	08005f45 	.word	0x08005f45
 8005eec:	08005f5d 	.word	0x08005f5d
 8005ef0:	08005f5d 	.word	0x08005f5d
 8005ef4:	08005f5d 	.word	0x08005f5d
 8005ef8:	08005f5d 	.word	0x08005f5d
 8005efc:	08005f5d 	.word	0x08005f5d
 8005f00:	08005f5d 	.word	0x08005f5d
 8005f04:	08005f5d 	.word	0x08005f5d
 8005f08:	08005f4d 	.word	0x08005f4d
 8005f0c:	08005f5d 	.word	0x08005f5d
 8005f10:	08005f5d 	.word	0x08005f5d
 8005f14:	08005f5d 	.word	0x08005f5d
 8005f18:	08005f5d 	.word	0x08005f5d
 8005f1c:	08005f5d 	.word	0x08005f5d
 8005f20:	08005f5d 	.word	0x08005f5d
 8005f24:	08005f5d 	.word	0x08005f5d
 8005f28:	08005f55 	.word	0x08005f55
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f32:	e0d6      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005f34:	2304      	movs	r3, #4
 8005f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f3a:	e0d2      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005f3c:	2308      	movs	r3, #8
 8005f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f42:	e0ce      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005f44:	2310      	movs	r3, #16
 8005f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4a:	e0ca      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005f4c:	2320      	movs	r3, #32
 8005f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f52:	e0c6      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005f54:	2340      	movs	r3, #64	@ 0x40
 8005f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5a:	e0c2      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005f5c:	2380      	movs	r3, #128	@ 0x80
 8005f5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f62:	e0be      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8005f64:	40011400 	.word	0x40011400
 8005f68:	58024400 	.word	0x58024400
 8005f6c:	40007800 	.word	0x40007800
 8005f70:	40007c00 	.word	0x40007c00
 8005f74:	40011800 	.word	0x40011800
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4aad      	ldr	r2, [pc, #692]	@ (8006234 <UART_SetConfig+0x900>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d176      	bne.n	8006070 <UART_SetConfig+0x73c>
 8005f82:	4bad      	ldr	r3, [pc, #692]	@ (8006238 <UART_SetConfig+0x904>)
 8005f84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f86:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f8a:	2b28      	cmp	r3, #40	@ 0x28
 8005f8c:	d86c      	bhi.n	8006068 <UART_SetConfig+0x734>
 8005f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005f94 <UART_SetConfig+0x660>)
 8005f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f94:	08006039 	.word	0x08006039
 8005f98:	08006069 	.word	0x08006069
 8005f9c:	08006069 	.word	0x08006069
 8005fa0:	08006069 	.word	0x08006069
 8005fa4:	08006069 	.word	0x08006069
 8005fa8:	08006069 	.word	0x08006069
 8005fac:	08006069 	.word	0x08006069
 8005fb0:	08006069 	.word	0x08006069
 8005fb4:	08006041 	.word	0x08006041
 8005fb8:	08006069 	.word	0x08006069
 8005fbc:	08006069 	.word	0x08006069
 8005fc0:	08006069 	.word	0x08006069
 8005fc4:	08006069 	.word	0x08006069
 8005fc8:	08006069 	.word	0x08006069
 8005fcc:	08006069 	.word	0x08006069
 8005fd0:	08006069 	.word	0x08006069
 8005fd4:	08006049 	.word	0x08006049
 8005fd8:	08006069 	.word	0x08006069
 8005fdc:	08006069 	.word	0x08006069
 8005fe0:	08006069 	.word	0x08006069
 8005fe4:	08006069 	.word	0x08006069
 8005fe8:	08006069 	.word	0x08006069
 8005fec:	08006069 	.word	0x08006069
 8005ff0:	08006069 	.word	0x08006069
 8005ff4:	08006051 	.word	0x08006051
 8005ff8:	08006069 	.word	0x08006069
 8005ffc:	08006069 	.word	0x08006069
 8006000:	08006069 	.word	0x08006069
 8006004:	08006069 	.word	0x08006069
 8006008:	08006069 	.word	0x08006069
 800600c:	08006069 	.word	0x08006069
 8006010:	08006069 	.word	0x08006069
 8006014:	08006059 	.word	0x08006059
 8006018:	08006069 	.word	0x08006069
 800601c:	08006069 	.word	0x08006069
 8006020:	08006069 	.word	0x08006069
 8006024:	08006069 	.word	0x08006069
 8006028:	08006069 	.word	0x08006069
 800602c:	08006069 	.word	0x08006069
 8006030:	08006069 	.word	0x08006069
 8006034:	08006061 	.word	0x08006061
 8006038:	2301      	movs	r3, #1
 800603a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800603e:	e050      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8006040:	2304      	movs	r3, #4
 8006042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006046:	e04c      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8006048:	2308      	movs	r3, #8
 800604a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800604e:	e048      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8006050:	2310      	movs	r3, #16
 8006052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006056:	e044      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8006058:	2320      	movs	r3, #32
 800605a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605e:	e040      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8006060:	2340      	movs	r3, #64	@ 0x40
 8006062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006066:	e03c      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8006068:	2380      	movs	r3, #128	@ 0x80
 800606a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606e:	e038      	b.n	80060e2 <UART_SetConfig+0x7ae>
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4a71      	ldr	r2, [pc, #452]	@ (800623c <UART_SetConfig+0x908>)
 8006076:	4293      	cmp	r3, r2
 8006078:	d130      	bne.n	80060dc <UART_SetConfig+0x7a8>
 800607a:	4b6f      	ldr	r3, [pc, #444]	@ (8006238 <UART_SetConfig+0x904>)
 800607c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800607e:	f003 0307 	and.w	r3, r3, #7
 8006082:	2b05      	cmp	r3, #5
 8006084:	d826      	bhi.n	80060d4 <UART_SetConfig+0x7a0>
 8006086:	a201      	add	r2, pc, #4	@ (adr r2, 800608c <UART_SetConfig+0x758>)
 8006088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800608c:	080060a5 	.word	0x080060a5
 8006090:	080060ad 	.word	0x080060ad
 8006094:	080060b5 	.word	0x080060b5
 8006098:	080060bd 	.word	0x080060bd
 800609c:	080060c5 	.word	0x080060c5
 80060a0:	080060cd 	.word	0x080060cd
 80060a4:	2302      	movs	r3, #2
 80060a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060aa:	e01a      	b.n	80060e2 <UART_SetConfig+0x7ae>
 80060ac:	2304      	movs	r3, #4
 80060ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060b2:	e016      	b.n	80060e2 <UART_SetConfig+0x7ae>
 80060b4:	2308      	movs	r3, #8
 80060b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ba:	e012      	b.n	80060e2 <UART_SetConfig+0x7ae>
 80060bc:	2310      	movs	r3, #16
 80060be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c2:	e00e      	b.n	80060e2 <UART_SetConfig+0x7ae>
 80060c4:	2320      	movs	r3, #32
 80060c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ca:	e00a      	b.n	80060e2 <UART_SetConfig+0x7ae>
 80060cc:	2340      	movs	r3, #64	@ 0x40
 80060ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d2:	e006      	b.n	80060e2 <UART_SetConfig+0x7ae>
 80060d4:	2380      	movs	r3, #128	@ 0x80
 80060d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060da:	e002      	b.n	80060e2 <UART_SetConfig+0x7ae>
 80060dc:	2380      	movs	r3, #128	@ 0x80
 80060de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060e2:	697b      	ldr	r3, [r7, #20]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	4a55      	ldr	r2, [pc, #340]	@ (800623c <UART_SetConfig+0x908>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	f040 80f8 	bne.w	80062de <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80060ee:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060f2:	2b20      	cmp	r3, #32
 80060f4:	dc46      	bgt.n	8006184 <UART_SetConfig+0x850>
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	db75      	blt.n	80061e6 <UART_SetConfig+0x8b2>
 80060fa:	3b02      	subs	r3, #2
 80060fc:	2b1e      	cmp	r3, #30
 80060fe:	d872      	bhi.n	80061e6 <UART_SetConfig+0x8b2>
 8006100:	a201      	add	r2, pc, #4	@ (adr r2, 8006108 <UART_SetConfig+0x7d4>)
 8006102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006106:	bf00      	nop
 8006108:	0800618b 	.word	0x0800618b
 800610c:	080061e7 	.word	0x080061e7
 8006110:	08006193 	.word	0x08006193
 8006114:	080061e7 	.word	0x080061e7
 8006118:	080061e7 	.word	0x080061e7
 800611c:	080061e7 	.word	0x080061e7
 8006120:	080061a3 	.word	0x080061a3
 8006124:	080061e7 	.word	0x080061e7
 8006128:	080061e7 	.word	0x080061e7
 800612c:	080061e7 	.word	0x080061e7
 8006130:	080061e7 	.word	0x080061e7
 8006134:	080061e7 	.word	0x080061e7
 8006138:	080061e7 	.word	0x080061e7
 800613c:	080061e7 	.word	0x080061e7
 8006140:	080061b3 	.word	0x080061b3
 8006144:	080061e7 	.word	0x080061e7
 8006148:	080061e7 	.word	0x080061e7
 800614c:	080061e7 	.word	0x080061e7
 8006150:	080061e7 	.word	0x080061e7
 8006154:	080061e7 	.word	0x080061e7
 8006158:	080061e7 	.word	0x080061e7
 800615c:	080061e7 	.word	0x080061e7
 8006160:	080061e7 	.word	0x080061e7
 8006164:	080061e7 	.word	0x080061e7
 8006168:	080061e7 	.word	0x080061e7
 800616c:	080061e7 	.word	0x080061e7
 8006170:	080061e7 	.word	0x080061e7
 8006174:	080061e7 	.word	0x080061e7
 8006178:	080061e7 	.word	0x080061e7
 800617c:	080061e7 	.word	0x080061e7
 8006180:	080061d9 	.word	0x080061d9
 8006184:	2b40      	cmp	r3, #64	@ 0x40
 8006186:	d02a      	beq.n	80061de <UART_SetConfig+0x8aa>
 8006188:	e02d      	b.n	80061e6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800618a:	f7fe faa3 	bl	80046d4 <HAL_RCCEx_GetD3PCLK1Freq>
 800618e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006190:	e02f      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fab2 	bl	8004700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800619c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800619e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061a0:	e027      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061a2:	f107 0318 	add.w	r3, r7, #24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f7fe fbfe 	bl	80049a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061ac:	69fb      	ldr	r3, [r7, #28]
 80061ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b0:	e01f      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061b2:	4b21      	ldr	r3, [pc, #132]	@ (8006238 <UART_SetConfig+0x904>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0320 	and.w	r3, r3, #32
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d009      	beq.n	80061d2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061be:	4b1e      	ldr	r3, [pc, #120]	@ (8006238 <UART_SetConfig+0x904>)
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	08db      	lsrs	r3, r3, #3
 80061c4:	f003 0303 	and.w	r3, r3, #3
 80061c8:	4a1d      	ldr	r2, [pc, #116]	@ (8006240 <UART_SetConfig+0x90c>)
 80061ca:	fa22 f303 	lsr.w	r3, r2, r3
 80061ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061d0:	e00f      	b.n	80061f2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80061d2:	4b1b      	ldr	r3, [pc, #108]	@ (8006240 <UART_SetConfig+0x90c>)
 80061d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061d6:	e00c      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061d8:	4b1a      	ldr	r3, [pc, #104]	@ (8006244 <UART_SetConfig+0x910>)
 80061da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061dc:	e009      	b.n	80061f2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061e4:	e005      	b.n	80061f2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061e6:	2300      	movs	r3, #0
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061ea:	2301      	movs	r3, #1
 80061ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80061f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80061f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f000 81ee 	beq.w	80065d6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fe:	4a12      	ldr	r2, [pc, #72]	@ (8006248 <UART_SetConfig+0x914>)
 8006200:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006204:	461a      	mov	r2, r3
 8006206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006208:	fbb3 f3f2 	udiv	r3, r3, r2
 800620c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	685a      	ldr	r2, [r3, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	005b      	lsls	r3, r3, #1
 8006216:	4413      	add	r3, r2
 8006218:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800621a:	429a      	cmp	r2, r3
 800621c:	d305      	bcc.n	800622a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006224:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006226:	429a      	cmp	r2, r3
 8006228:	d910      	bls.n	800624c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800622a:	2301      	movs	r3, #1
 800622c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006230:	e1d1      	b.n	80065d6 <UART_SetConfig+0xca2>
 8006232:	bf00      	nop
 8006234:	40011c00 	.word	0x40011c00
 8006238:	58024400 	.word	0x58024400
 800623c:	58000c00 	.word	0x58000c00
 8006240:	03d09000 	.word	0x03d09000
 8006244:	003d0900 	.word	0x003d0900
 8006248:	08007a2c 	.word	0x08007a2c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800624c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800624e:	2200      	movs	r2, #0
 8006250:	60bb      	str	r3, [r7, #8]
 8006252:	60fa      	str	r2, [r7, #12]
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006258:	4ac0      	ldr	r2, [pc, #768]	@ (800655c <UART_SetConfig+0xc28>)
 800625a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800625e:	b29b      	uxth	r3, r3
 8006260:	2200      	movs	r2, #0
 8006262:	603b      	str	r3, [r7, #0]
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	e9d7 2300 	ldrd	r2, r3, [r7]
 800626a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800626e:	f7fa f84d 	bl	800030c <__aeabi_uldivmod>
 8006272:	4602      	mov	r2, r0
 8006274:	460b      	mov	r3, r1
 8006276:	4610      	mov	r0, r2
 8006278:	4619      	mov	r1, r3
 800627a:	f04f 0200 	mov.w	r2, #0
 800627e:	f04f 0300 	mov.w	r3, #0
 8006282:	020b      	lsls	r3, r1, #8
 8006284:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006288:	0202      	lsls	r2, r0, #8
 800628a:	6979      	ldr	r1, [r7, #20]
 800628c:	6849      	ldr	r1, [r1, #4]
 800628e:	0849      	lsrs	r1, r1, #1
 8006290:	2000      	movs	r0, #0
 8006292:	460c      	mov	r4, r1
 8006294:	4605      	mov	r5, r0
 8006296:	eb12 0804 	adds.w	r8, r2, r4
 800629a:	eb43 0905 	adc.w	r9, r3, r5
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	469a      	mov	sl, r3
 80062a6:	4693      	mov	fp, r2
 80062a8:	4652      	mov	r2, sl
 80062aa:	465b      	mov	r3, fp
 80062ac:	4640      	mov	r0, r8
 80062ae:	4649      	mov	r1, r9
 80062b0:	f7fa f82c 	bl	800030c <__aeabi_uldivmod>
 80062b4:	4602      	mov	r2, r0
 80062b6:	460b      	mov	r3, r1
 80062b8:	4613      	mov	r3, r2
 80062ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062c2:	d308      	bcc.n	80062d6 <UART_SetConfig+0x9a2>
 80062c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062c6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062ca:	d204      	bcs.n	80062d6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062d2:	60da      	str	r2, [r3, #12]
 80062d4:	e17f      	b.n	80065d6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062dc:	e17b      	b.n	80065d6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062de:	697b      	ldr	r3, [r7, #20]
 80062e0:	69db      	ldr	r3, [r3, #28]
 80062e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062e6:	f040 80bd 	bne.w	8006464 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80062ea:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80062ee:	2b20      	cmp	r3, #32
 80062f0:	dc48      	bgt.n	8006384 <UART_SetConfig+0xa50>
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	db7b      	blt.n	80063ee <UART_SetConfig+0xaba>
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d879      	bhi.n	80063ee <UART_SetConfig+0xaba>
 80062fa:	a201      	add	r2, pc, #4	@ (adr r2, 8006300 <UART_SetConfig+0x9cc>)
 80062fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006300:	0800638b 	.word	0x0800638b
 8006304:	08006393 	.word	0x08006393
 8006308:	080063ef 	.word	0x080063ef
 800630c:	080063ef 	.word	0x080063ef
 8006310:	0800639b 	.word	0x0800639b
 8006314:	080063ef 	.word	0x080063ef
 8006318:	080063ef 	.word	0x080063ef
 800631c:	080063ef 	.word	0x080063ef
 8006320:	080063ab 	.word	0x080063ab
 8006324:	080063ef 	.word	0x080063ef
 8006328:	080063ef 	.word	0x080063ef
 800632c:	080063ef 	.word	0x080063ef
 8006330:	080063ef 	.word	0x080063ef
 8006334:	080063ef 	.word	0x080063ef
 8006338:	080063ef 	.word	0x080063ef
 800633c:	080063ef 	.word	0x080063ef
 8006340:	080063bb 	.word	0x080063bb
 8006344:	080063ef 	.word	0x080063ef
 8006348:	080063ef 	.word	0x080063ef
 800634c:	080063ef 	.word	0x080063ef
 8006350:	080063ef 	.word	0x080063ef
 8006354:	080063ef 	.word	0x080063ef
 8006358:	080063ef 	.word	0x080063ef
 800635c:	080063ef 	.word	0x080063ef
 8006360:	080063ef 	.word	0x080063ef
 8006364:	080063ef 	.word	0x080063ef
 8006368:	080063ef 	.word	0x080063ef
 800636c:	080063ef 	.word	0x080063ef
 8006370:	080063ef 	.word	0x080063ef
 8006374:	080063ef 	.word	0x080063ef
 8006378:	080063ef 	.word	0x080063ef
 800637c:	080063ef 	.word	0x080063ef
 8006380:	080063e1 	.word	0x080063e1
 8006384:	2b40      	cmp	r3, #64	@ 0x40
 8006386:	d02e      	beq.n	80063e6 <UART_SetConfig+0xab2>
 8006388:	e031      	b.n	80063ee <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800638a:	f7fc ffd7 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 800638e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006390:	e033      	b.n	80063fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006392:	f7fc ffe9 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8006396:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006398:	e02f      	b.n	80063fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800639a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fe f9ae 	bl	8004700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063a8:	e027      	b.n	80063fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063aa:	f107 0318 	add.w	r3, r7, #24
 80063ae:	4618      	mov	r0, r3
 80063b0:	f7fe fafa 	bl	80049a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063b4:	69fb      	ldr	r3, [r7, #28]
 80063b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063b8:	e01f      	b.n	80063fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ba:	4b69      	ldr	r3, [pc, #420]	@ (8006560 <UART_SetConfig+0xc2c>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f003 0320 	and.w	r3, r3, #32
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d009      	beq.n	80063da <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063c6:	4b66      	ldr	r3, [pc, #408]	@ (8006560 <UART_SetConfig+0xc2c>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	08db      	lsrs	r3, r3, #3
 80063cc:	f003 0303 	and.w	r3, r3, #3
 80063d0:	4a64      	ldr	r2, [pc, #400]	@ (8006564 <UART_SetConfig+0xc30>)
 80063d2:	fa22 f303 	lsr.w	r3, r2, r3
 80063d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063d8:	e00f      	b.n	80063fa <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80063da:	4b62      	ldr	r3, [pc, #392]	@ (8006564 <UART_SetConfig+0xc30>)
 80063dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063de:	e00c      	b.n	80063fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063e0:	4b61      	ldr	r3, [pc, #388]	@ (8006568 <UART_SetConfig+0xc34>)
 80063e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063e4:	e009      	b.n	80063fa <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063ec:	e005      	b.n	80063fa <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80063f2:	2301      	movs	r3, #1
 80063f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80063f8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f000 80ea 	beq.w	80065d6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006406:	4a55      	ldr	r2, [pc, #340]	@ (800655c <UART_SetConfig+0xc28>)
 8006408:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800640c:	461a      	mov	r2, r3
 800640e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006410:	fbb3 f3f2 	udiv	r3, r3, r2
 8006414:	005a      	lsls	r2, r3, #1
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	085b      	lsrs	r3, r3, #1
 800641c:	441a      	add	r2, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	fbb2 f3f3 	udiv	r3, r2, r3
 8006426:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800642a:	2b0f      	cmp	r3, #15
 800642c:	d916      	bls.n	800645c <UART_SetConfig+0xb28>
 800642e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006430:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006434:	d212      	bcs.n	800645c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	b29b      	uxth	r3, r3
 800643a:	f023 030f 	bic.w	r3, r3, #15
 800643e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006440:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006442:	085b      	lsrs	r3, r3, #1
 8006444:	b29b      	uxth	r3, r3
 8006446:	f003 0307 	and.w	r3, r3, #7
 800644a:	b29a      	uxth	r2, r3
 800644c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800644e:	4313      	orrs	r3, r2
 8006450:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006458:	60da      	str	r2, [r3, #12]
 800645a:	e0bc      	b.n	80065d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006462:	e0b8      	b.n	80065d6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006464:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006468:	2b20      	cmp	r3, #32
 800646a:	dc4b      	bgt.n	8006504 <UART_SetConfig+0xbd0>
 800646c:	2b00      	cmp	r3, #0
 800646e:	f2c0 8087 	blt.w	8006580 <UART_SetConfig+0xc4c>
 8006472:	2b20      	cmp	r3, #32
 8006474:	f200 8084 	bhi.w	8006580 <UART_SetConfig+0xc4c>
 8006478:	a201      	add	r2, pc, #4	@ (adr r2, 8006480 <UART_SetConfig+0xb4c>)
 800647a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800647e:	bf00      	nop
 8006480:	0800650b 	.word	0x0800650b
 8006484:	08006513 	.word	0x08006513
 8006488:	08006581 	.word	0x08006581
 800648c:	08006581 	.word	0x08006581
 8006490:	0800651b 	.word	0x0800651b
 8006494:	08006581 	.word	0x08006581
 8006498:	08006581 	.word	0x08006581
 800649c:	08006581 	.word	0x08006581
 80064a0:	0800652b 	.word	0x0800652b
 80064a4:	08006581 	.word	0x08006581
 80064a8:	08006581 	.word	0x08006581
 80064ac:	08006581 	.word	0x08006581
 80064b0:	08006581 	.word	0x08006581
 80064b4:	08006581 	.word	0x08006581
 80064b8:	08006581 	.word	0x08006581
 80064bc:	08006581 	.word	0x08006581
 80064c0:	0800653b 	.word	0x0800653b
 80064c4:	08006581 	.word	0x08006581
 80064c8:	08006581 	.word	0x08006581
 80064cc:	08006581 	.word	0x08006581
 80064d0:	08006581 	.word	0x08006581
 80064d4:	08006581 	.word	0x08006581
 80064d8:	08006581 	.word	0x08006581
 80064dc:	08006581 	.word	0x08006581
 80064e0:	08006581 	.word	0x08006581
 80064e4:	08006581 	.word	0x08006581
 80064e8:	08006581 	.word	0x08006581
 80064ec:	08006581 	.word	0x08006581
 80064f0:	08006581 	.word	0x08006581
 80064f4:	08006581 	.word	0x08006581
 80064f8:	08006581 	.word	0x08006581
 80064fc:	08006581 	.word	0x08006581
 8006500:	08006573 	.word	0x08006573
 8006504:	2b40      	cmp	r3, #64	@ 0x40
 8006506:	d037      	beq.n	8006578 <UART_SetConfig+0xc44>
 8006508:	e03a      	b.n	8006580 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800650a:	f7fc ff17 	bl	800333c <HAL_RCC_GetPCLK1Freq>
 800650e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006510:	e03c      	b.n	800658c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006512:	f7fc ff29 	bl	8003368 <HAL_RCC_GetPCLK2Freq>
 8006516:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006518:	e038      	b.n	800658c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800651a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f8ee 	bl	8004700 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006528:	e030      	b.n	800658c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800652a:	f107 0318 	add.w	r3, r7, #24
 800652e:	4618      	mov	r0, r3
 8006530:	f7fe fa3a 	bl	80049a8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006534:	69fb      	ldr	r3, [r7, #28]
 8006536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006538:	e028      	b.n	800658c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800653a:	4b09      	ldr	r3, [pc, #36]	@ (8006560 <UART_SetConfig+0xc2c>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f003 0320 	and.w	r3, r3, #32
 8006542:	2b00      	cmp	r3, #0
 8006544:	d012      	beq.n	800656c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006546:	4b06      	ldr	r3, [pc, #24]	@ (8006560 <UART_SetConfig+0xc2c>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	08db      	lsrs	r3, r3, #3
 800654c:	f003 0303 	and.w	r3, r3, #3
 8006550:	4a04      	ldr	r2, [pc, #16]	@ (8006564 <UART_SetConfig+0xc30>)
 8006552:	fa22 f303 	lsr.w	r3, r2, r3
 8006556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006558:	e018      	b.n	800658c <UART_SetConfig+0xc58>
 800655a:	bf00      	nop
 800655c:	08007a2c 	.word	0x08007a2c
 8006560:	58024400 	.word	0x58024400
 8006564:	03d09000 	.word	0x03d09000
 8006568:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800656c:	4b24      	ldr	r3, [pc, #144]	@ (8006600 <UART_SetConfig+0xccc>)
 800656e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006570:	e00c      	b.n	800658c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006572:	4b24      	ldr	r3, [pc, #144]	@ (8006604 <UART_SetConfig+0xcd0>)
 8006574:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006576:	e009      	b.n	800658c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006578:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800657c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800657e:	e005      	b.n	800658c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006580:	2300      	movs	r3, #0
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800658a:	bf00      	nop
    }

    if (pclk != 0U)
 800658c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658e:	2b00      	cmp	r3, #0
 8006590:	d021      	beq.n	80065d6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006596:	4a1c      	ldr	r2, [pc, #112]	@ (8006608 <UART_SetConfig+0xcd4>)
 8006598:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800659c:	461a      	mov	r2, r3
 800659e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a0:	fbb3 f2f2 	udiv	r2, r3, r2
 80065a4:	697b      	ldr	r3, [r7, #20]
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	085b      	lsrs	r3, r3, #1
 80065aa:	441a      	add	r2, r3
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80065b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b8:	2b0f      	cmp	r3, #15
 80065ba:	d909      	bls.n	80065d0 <UART_SetConfig+0xc9c>
 80065bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065c2:	d205      	bcs.n	80065d0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c6:	b29a      	uxth	r2, r3
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	60da      	str	r2, [r3, #12]
 80065ce:	e002      	b.n	80065d6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80065d0:	2301      	movs	r3, #1
 80065d2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	2201      	movs	r2, #1
 80065da:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2200      	movs	r2, #0
 80065ea:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	2200      	movs	r2, #0
 80065f0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80065f2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3748      	adds	r7, #72	@ 0x48
 80065fa:	46bd      	mov	sp, r7
 80065fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006600:	03d09000 	.word	0x03d09000
 8006604:	003d0900 	.word	0x003d0900
 8006608:	08007a2c 	.word	0x08007a2c

0800660c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800660c:	b480      	push	{r7}
 800660e:	b083      	sub	sp, #12
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006618:	f003 0308 	and.w	r3, r3, #8
 800661c:	2b00      	cmp	r3, #0
 800661e:	d00a      	beq.n	8006636 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	430a      	orrs	r2, r1
 8006634:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800663a:	f003 0301 	and.w	r3, r3, #1
 800663e:	2b00      	cmp	r3, #0
 8006640:	d00a      	beq.n	8006658 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800665c:	f003 0302 	and.w	r3, r3, #2
 8006660:	2b00      	cmp	r3, #0
 8006662:	d00a      	beq.n	800667a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800667e:	f003 0304 	and.w	r3, r3, #4
 8006682:	2b00      	cmp	r3, #0
 8006684:	d00a      	beq.n	800669c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066a0:	f003 0310 	and.w	r3, r3, #16
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d00a      	beq.n	80066be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	430a      	orrs	r2, r1
 80066bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d00a      	beq.n	80066e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d01a      	beq.n	8006722 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006706:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800670a:	d10a      	bne.n	8006722 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	430a      	orrs	r2, r1
 8006720:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006726:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800672a:	2b00      	cmp	r3, #0
 800672c:	d00a      	beq.n	8006744 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	430a      	orrs	r2, r1
 8006742:	605a      	str	r2, [r3, #4]
  }
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr

08006750 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b098      	sub	sp, #96	@ 0x60
 8006754:	af02      	add	r7, sp, #8
 8006756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006760:	f7fa fdbe 	bl	80012e0 <HAL_GetTick>
 8006764:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f003 0308 	and.w	r3, r3, #8
 8006770:	2b08      	cmp	r3, #8
 8006772:	d12f      	bne.n	80067d4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006774:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006778:	9300      	str	r3, [sp, #0]
 800677a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800677c:	2200      	movs	r2, #0
 800677e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006782:	6878      	ldr	r0, [r7, #4]
 8006784:	f000 f88e 	bl	80068a4 <UART_WaitOnFlagUntilTimeout>
 8006788:	4603      	mov	r3, r0
 800678a:	2b00      	cmp	r3, #0
 800678c:	d022      	beq.n	80067d4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006796:	e853 3f00 	ldrex	r3, [r3]
 800679a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800679c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800679e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067a2:	653b      	str	r3, [r7, #80]	@ 0x50
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	461a      	mov	r2, r3
 80067aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80067ae:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067b0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067b4:	e841 2300 	strex	r3, r2, [r1]
 80067b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d1e6      	bne.n	800678e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2220      	movs	r2, #32
 80067c4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067d0:	2303      	movs	r3, #3
 80067d2:	e063      	b.n	800689c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f003 0304 	and.w	r3, r3, #4
 80067de:	2b04      	cmp	r3, #4
 80067e0:	d149      	bne.n	8006876 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067e2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067ea:	2200      	movs	r2, #0
 80067ec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80067f0:	6878      	ldr	r0, [r7, #4]
 80067f2:	f000 f857 	bl	80068a4 <UART_WaitOnFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d03c      	beq.n	8006876 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006804:	e853 3f00 	ldrex	r3, [r3]
 8006808:	623b      	str	r3, [r7, #32]
   return(result);
 800680a:	6a3b      	ldr	r3, [r7, #32]
 800680c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006810:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	461a      	mov	r2, r3
 8006818:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800681a:	633b      	str	r3, [r7, #48]	@ 0x30
 800681c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006820:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006822:	e841 2300 	strex	r3, r2, [r1]
 8006826:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1e6      	bne.n	80067fc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3308      	adds	r3, #8
 8006834:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	693b      	ldr	r3, [r7, #16]
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	60fb      	str	r3, [r7, #12]
   return(result);
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	f023 0301 	bic.w	r3, r3, #1
 8006844:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3308      	adds	r3, #8
 800684c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800684e:	61fa      	str	r2, [r7, #28]
 8006850:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006852:	69b9      	ldr	r1, [r7, #24]
 8006854:	69fa      	ldr	r2, [r7, #28]
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	617b      	str	r3, [r7, #20]
   return(result);
 800685c:	697b      	ldr	r3, [r7, #20]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e5      	bne.n	800682e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2220      	movs	r2, #32
 8006866:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006872:	2303      	movs	r3, #3
 8006874:	e012      	b.n	800689c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2220      	movs	r2, #32
 8006882:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	2200      	movs	r2, #0
 800688a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2200      	movs	r2, #0
 8006896:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800689a:	2300      	movs	r3, #0
}
 800689c:	4618      	mov	r0, r3
 800689e:	3758      	adds	r7, #88	@ 0x58
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	60f8      	str	r0, [r7, #12]
 80068ac:	60b9      	str	r1, [r7, #8]
 80068ae:	603b      	str	r3, [r7, #0]
 80068b0:	4613      	mov	r3, r2
 80068b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b4:	e04f      	b.n	8006956 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068b6:	69bb      	ldr	r3, [r7, #24]
 80068b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068bc:	d04b      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068be:	f7fa fd0f 	bl	80012e0 <HAL_GetTick>
 80068c2:	4602      	mov	r2, r0
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	69ba      	ldr	r2, [r7, #24]
 80068ca:	429a      	cmp	r2, r3
 80068cc:	d302      	bcc.n	80068d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d101      	bne.n	80068d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e04e      	b.n	8006976 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0304 	and.w	r3, r3, #4
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d037      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	2b80      	cmp	r3, #128	@ 0x80
 80068ea:	d034      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0xb2>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	2b40      	cmp	r3, #64	@ 0x40
 80068f0:	d031      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	f003 0308 	and.w	r3, r3, #8
 80068fc:	2b08      	cmp	r3, #8
 80068fe:	d110      	bne.n	8006922 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	2208      	movs	r2, #8
 8006906:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 f95b 	bl	8006bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	2208      	movs	r2, #8
 8006912:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	2200      	movs	r2, #0
 800691a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800691e:	2301      	movs	r3, #1
 8006920:	e029      	b.n	8006976 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	69db      	ldr	r3, [r3, #28]
 8006928:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800692c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006930:	d111      	bne.n	8006956 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800693a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800693c:	68f8      	ldr	r0, [r7, #12]
 800693e:	f000 f941 	bl	8006bc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	2220      	movs	r2, #32
 8006946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	2200      	movs	r2, #0
 800694e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006952:	2303      	movs	r3, #3
 8006954:	e00f      	b.n	8006976 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	69da      	ldr	r2, [r3, #28]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	4013      	ands	r3, r2
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	429a      	cmp	r2, r3
 8006964:	bf0c      	ite	eq
 8006966:	2301      	moveq	r3, #1
 8006968:	2300      	movne	r3, #0
 800696a:	b2db      	uxtb	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	79fb      	ldrb	r3, [r7, #7]
 8006970:	429a      	cmp	r2, r3
 8006972:	d0a0      	beq.n	80068b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3710      	adds	r7, #16
 800697a:	46bd      	mov	sp, r7
 800697c:	bd80      	pop	{r7, pc}
	...

08006980 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006980:	b480      	push	{r7}
 8006982:	b0a3      	sub	sp, #140	@ 0x8c
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	4613      	mov	r3, r2
 800698c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	68ba      	ldr	r2, [r7, #8]
 8006992:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	88fa      	ldrh	r2, [r7, #6]
 8006998:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	88fa      	ldrh	r2, [r7, #6]
 80069a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	689b      	ldr	r3, [r3, #8]
 80069ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069b2:	d10e      	bne.n	80069d2 <UART_Start_Receive_IT+0x52>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d105      	bne.n	80069c8 <UART_Start_Receive_IT+0x48>
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80069c2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069c6:	e02d      	b.n	8006a24 <UART_Start_Receive_IT+0xa4>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	22ff      	movs	r2, #255	@ 0xff
 80069cc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069d0:	e028      	b.n	8006a24 <UART_Start_Receive_IT+0xa4>
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d10d      	bne.n	80069f6 <UART_Start_Receive_IT+0x76>
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d104      	bne.n	80069ec <UART_Start_Receive_IT+0x6c>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	22ff      	movs	r2, #255	@ 0xff
 80069e6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069ea:	e01b      	b.n	8006a24 <UART_Start_Receive_IT+0xa4>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	227f      	movs	r2, #127	@ 0x7f
 80069f0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069f4:	e016      	b.n	8006a24 <UART_Start_Receive_IT+0xa4>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80069fe:	d10d      	bne.n	8006a1c <UART_Start_Receive_IT+0x9c>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d104      	bne.n	8006a12 <UART_Start_Receive_IT+0x92>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	227f      	movs	r2, #127	@ 0x7f
 8006a0c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a10:	e008      	b.n	8006a24 <UART_Start_Receive_IT+0xa4>
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	223f      	movs	r2, #63	@ 0x3f
 8006a16:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a1a:	e003      	b.n	8006a24 <UART_Start_Receive_IT+0xa4>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2200      	movs	r2, #0
 8006a20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2222      	movs	r2, #34	@ 0x22
 8006a30:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	3308      	adds	r3, #8
 8006a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a3e:	e853 3f00 	ldrex	r3, [r3]
 8006a42:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006a44:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3308      	adds	r3, #8
 8006a54:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006a58:	673a      	str	r2, [r7, #112]	@ 0x70
 8006a5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a5c:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006a5e:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006a60:	e841 2300 	strex	r3, r2, [r1]
 8006a64:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006a66:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1e3      	bne.n	8006a34 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a74:	d14f      	bne.n	8006b16 <UART_Start_Receive_IT+0x196>
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d349      	bcc.n	8006b16 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	689b      	ldr	r3, [r3, #8]
 8006a86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a8a:	d107      	bne.n	8006a9c <UART_Start_Receive_IT+0x11c>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	691b      	ldr	r3, [r3, #16]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d103      	bne.n	8006a9c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4a47      	ldr	r2, [pc, #284]	@ (8006bb4 <UART_Start_Receive_IT+0x234>)
 8006a98:	675a      	str	r2, [r3, #116]	@ 0x74
 8006a9a:	e002      	b.n	8006aa2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	4a46      	ldr	r2, [pc, #280]	@ (8006bb8 <UART_Start_Receive_IT+0x238>)
 8006aa0:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d01a      	beq.n	8006ae0 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006ab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006aba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006abe:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	461a      	mov	r2, r3
 8006ac8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ace:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ad2:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006ada:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e4      	bne.n	8006aaa <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006af6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006b00:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006b02:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e5      	bne.n	8006ae0 <UART_Start_Receive_IT+0x160>
 8006b14:	e046      	b.n	8006ba4 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b1e:	d107      	bne.n	8006b30 <UART_Start_Receive_IT+0x1b0>
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d103      	bne.n	8006b30 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4a24      	ldr	r2, [pc, #144]	@ (8006bbc <UART_Start_Receive_IT+0x23c>)
 8006b2c:	675a      	str	r2, [r3, #116]	@ 0x74
 8006b2e:	e002      	b.n	8006b36 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	4a23      	ldr	r2, [pc, #140]	@ (8006bc0 <UART_Start_Receive_IT+0x240>)
 8006b34:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	691b      	ldr	r3, [r3, #16]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d019      	beq.n	8006b72 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b4e:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006b52:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b5e:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b62:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <UART_Start_Receive_IT+0x1be>
 8006b70:	e018      	b.n	8006ba4 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b78:	697b      	ldr	r3, [r7, #20]
 8006b7a:	e853 3f00 	ldrex	r3, [r3]
 8006b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f043 0320 	orr.w	r3, r3, #32
 8006b86:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006b90:	623b      	str	r3, [r7, #32]
 8006b92:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b94:	69f9      	ldr	r1, [r7, #28]
 8006b96:	6a3a      	ldr	r2, [r7, #32]
 8006b98:	e841 2300 	strex	r3, r2, [r1]
 8006b9c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1e6      	bne.n	8006b72 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006ba4:	2300      	movs	r3, #0
}
 8006ba6:	4618      	mov	r0, r3
 8006ba8:	378c      	adds	r7, #140	@ 0x8c
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
 8006bb2:	bf00      	nop
 8006bb4:	080073e5 	.word	0x080073e5
 8006bb8:	08007085 	.word	0x08007085
 8006bbc:	08006ecd 	.word	0x08006ecd
 8006bc0:	08006d15 	.word	0x08006d15

08006bc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b095      	sub	sp, #84	@ 0x54
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bd4:	e853 3f00 	ldrex	r3, [r3]
 8006bd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006be0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	461a      	mov	r2, r3
 8006be8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8006bec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006bf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006bf2:	e841 2300 	strex	r3, r2, [r1]
 8006bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d1e6      	bne.n	8006bcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3308      	adds	r3, #8
 8006c04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c06:	6a3b      	ldr	r3, [r7, #32]
 8006c08:	e853 3f00 	ldrex	r3, [r3]
 8006c0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c0e:	69fa      	ldr	r2, [r7, #28]
 8006c10:	4b1e      	ldr	r3, [pc, #120]	@ (8006c8c <UART_EndRxTransfer+0xc8>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	3308      	adds	r3, #8
 8006c1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c26:	e841 2300 	strex	r3, r2, [r1]
 8006c2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d1e5      	bne.n	8006bfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d118      	bne.n	8006c6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	e853 3f00 	ldrex	r3, [r3]
 8006c46:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	f023 0310 	bic.w	r3, r3, #16
 8006c4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	461a      	mov	r2, r3
 8006c56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c58:	61bb      	str	r3, [r7, #24]
 8006c5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c5c:	6979      	ldr	r1, [r7, #20]
 8006c5e:	69ba      	ldr	r2, [r7, #24]
 8006c60:	e841 2300 	strex	r3, r2, [r1]
 8006c64:	613b      	str	r3, [r7, #16]
   return(result);
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1e6      	bne.n	8006c3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	2200      	movs	r2, #0
 8006c78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c80:	bf00      	nop
 8006c82:	3754      	adds	r7, #84	@ 0x54
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	effffffe 	.word	0xeffffffe

08006c90 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cae:	68f8      	ldr	r0, [r7, #12]
 8006cb0:	f7fe fe2a 	bl	8005908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cb4:	bf00      	nop
 8006cb6:	3710      	adds	r7, #16
 8006cb8:	46bd      	mov	sp, r7
 8006cba:	bd80      	pop	{r7, pc}

08006cbc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cbc:	b580      	push	{r7, lr}
 8006cbe:	b088      	sub	sp, #32
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	e853 3f00 	ldrex	r3, [r3]
 8006cd0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd8:	61fb      	str	r3, [r7, #28]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	461a      	mov	r2, r3
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ce6:	6979      	ldr	r1, [r7, #20]
 8006ce8:	69ba      	ldr	r2, [r7, #24]
 8006cea:	e841 2300 	strex	r3, r2, [r1]
 8006cee:	613b      	str	r3, [r7, #16]
   return(result);
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1e6      	bne.n	8006cc4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2220      	movs	r2, #32
 8006cfa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2200      	movs	r2, #0
 8006d02:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f7fe fdeb 	bl	80058e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d0a:	bf00      	nop
 8006d0c:	3720      	adds	r7, #32
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
	...

08006d14 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b09c      	sub	sp, #112	@ 0x70
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d22:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d2c:	2b22      	cmp	r3, #34	@ 0x22
 8006d2e:	f040 80be 	bne.w	8006eae <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d38:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d3c:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d40:	b2d9      	uxtb	r1, r3
 8006d42:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d4c:	400a      	ands	r2, r1
 8006d4e:	b2d2      	uxtb	r2, r2
 8006d50:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d56:	1c5a      	adds	r2, r3, #1
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	3b01      	subs	r3, #1
 8006d66:	b29a      	uxth	r2, r3
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d74:	b29b      	uxth	r3, r3
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	f040 80a1 	bne.w	8006ebe <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d82:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d84:	e853 3f00 	ldrex	r3, [r3]
 8006d88:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d8c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006d90:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	461a      	mov	r2, r3
 8006d98:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006d9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006d9c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006da0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006da2:	e841 2300 	strex	r3, r2, [r1]
 8006da6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d1e6      	bne.n	8006d7c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	3308      	adds	r3, #8
 8006db4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006db8:	e853 3f00 	ldrex	r3, [r3]
 8006dbc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dc0:	f023 0301 	bic.w	r3, r3, #1
 8006dc4:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	3308      	adds	r3, #8
 8006dcc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006dce:	647a      	str	r2, [r7, #68]	@ 0x44
 8006dd0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006dd4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006ddc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e5      	bne.n	8006dae <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2200      	movs	r2, #0
 8006df4:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	4a33      	ldr	r2, [pc, #204]	@ (8006ec8 <UART_RxISR_8BIT+0x1b4>)
 8006dfc:	4293      	cmp	r3, r2
 8006dfe:	d01f      	beq.n	8006e40 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d018      	beq.n	8006e40 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e16:	e853 3f00 	ldrex	r3, [r3]
 8006e1a:	623b      	str	r3, [r7, #32]
   return(result);
 8006e1c:	6a3b      	ldr	r3, [r7, #32]
 8006e1e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e22:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	461a      	mov	r2, r3
 8006e2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e2e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e34:	e841 2300 	strex	r3, r2, [r1]
 8006e38:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d1e6      	bne.n	8006e0e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d12e      	bne.n	8006ea6 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	e853 3f00 	ldrex	r3, [r3]
 8006e5a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 0310 	bic.w	r3, r3, #16
 8006e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	461a      	mov	r2, r3
 8006e6a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e6c:	61fb      	str	r3, [r7, #28]
 8006e6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e70:	69b9      	ldr	r1, [r7, #24]
 8006e72:	69fa      	ldr	r2, [r7, #28]
 8006e74:	e841 2300 	strex	r3, r2, [r1]
 8006e78:	617b      	str	r3, [r7, #20]
   return(result);
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d1e6      	bne.n	8006e4e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	69db      	ldr	r3, [r3, #28]
 8006e86:	f003 0310 	and.w	r3, r3, #16
 8006e8a:	2b10      	cmp	r3, #16
 8006e8c:	d103      	bne.n	8006e96 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2210      	movs	r2, #16
 8006e94:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fe fd3c 	bl	800591c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006ea4:	e00b      	b.n	8006ebe <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f7fe fd24 	bl	80058f4 <HAL_UART_RxCpltCallback>
}
 8006eac:	e007      	b.n	8006ebe <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	699a      	ldr	r2, [r3, #24]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f042 0208 	orr.w	r2, r2, #8
 8006ebc:	619a      	str	r2, [r3, #24]
}
 8006ebe:	bf00      	nop
 8006ec0:	3770      	adds	r7, #112	@ 0x70
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	58000c00 	.word	0x58000c00

08006ecc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b09c      	sub	sp, #112	@ 0x70
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006eda:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ee4:	2b22      	cmp	r3, #34	@ 0x22
 8006ee6:	f040 80be 	bne.w	8007066 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ef8:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006efa:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006efe:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f02:	4013      	ands	r3, r2
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f08:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f0e:	1c9a      	adds	r2, r3, #2
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	3b01      	subs	r3, #1
 8006f1e:	b29a      	uxth	r2, r3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	f040 80a1 	bne.w	8007076 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f3c:	e853 3f00 	ldrex	r3, [r3]
 8006f40:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f48:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	461a      	mov	r2, r3
 8006f50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f52:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f54:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f58:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f5a:	e841 2300 	strex	r3, r2, [r1]
 8006f5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d1e6      	bne.n	8006f34 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	3308      	adds	r3, #8
 8006f6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f70:	e853 3f00 	ldrex	r3, [r3]
 8006f74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f78:	f023 0301 	bic.w	r3, r3, #1
 8006f7c:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	3308      	adds	r3, #8
 8006f84:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f86:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f8e:	e841 2300 	strex	r3, r2, [r1]
 8006f92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1e5      	bne.n	8006f66 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2220      	movs	r2, #32
 8006f9e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	4a33      	ldr	r2, [pc, #204]	@ (8007080 <UART_RxISR_16BIT+0x1b4>)
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d01f      	beq.n	8006ff8 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d018      	beq.n	8006ff8 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	e853 3f00 	ldrex	r3, [r3]
 8006fd2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006fe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006fe6:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006fec:	e841 2300 	strex	r3, r2, [r1]
 8006ff0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d1e6      	bne.n	8006fc6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d12e      	bne.n	800705e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2200      	movs	r2, #0
 8007004:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	e853 3f00 	ldrex	r3, [r3]
 8007012:	60bb      	str	r3, [r7, #8]
   return(result);
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 0310 	bic.w	r3, r3, #16
 800701a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	461a      	mov	r2, r3
 8007022:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007024:	61bb      	str	r3, [r7, #24]
 8007026:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6979      	ldr	r1, [r7, #20]
 800702a:	69ba      	ldr	r2, [r7, #24]
 800702c:	e841 2300 	strex	r3, r2, [r1]
 8007030:	613b      	str	r3, [r7, #16]
   return(result);
 8007032:	693b      	ldr	r3, [r7, #16]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d1e6      	bne.n	8007006 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	69db      	ldr	r3, [r3, #28]
 800703e:	f003 0310 	and.w	r3, r3, #16
 8007042:	2b10      	cmp	r3, #16
 8007044:	d103      	bne.n	800704e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	2210      	movs	r2, #16
 800704c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7fe fc60 	bl	800591c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800705c:	e00b      	b.n	8007076 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f7fe fc48 	bl	80058f4 <HAL_UART_RxCpltCallback>
}
 8007064:	e007      	b.n	8007076 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	699a      	ldr	r2, [r3, #24]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f042 0208 	orr.w	r2, r2, #8
 8007074:	619a      	str	r2, [r3, #24]
}
 8007076:	bf00      	nop
 8007078:	3770      	adds	r7, #112	@ 0x70
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	58000c00 	.word	0x58000c00

08007084 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b0ac      	sub	sp, #176	@ 0xb0
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007092:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ba:	2b22      	cmp	r3, #34	@ 0x22
 80070bc:	f040 8180 	bne.w	80073c0 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070c6:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070ca:	e123      	b.n	8007314 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d2:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070d6:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80070da:	b2d9      	uxtb	r1, r3
 80070dc:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070e6:	400a      	ands	r2, r1
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070f0:	1c5a      	adds	r2, r3, #1
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	3b01      	subs	r3, #1
 8007100:	b29a      	uxth	r2, r3
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	69db      	ldr	r3, [r3, #28]
 800710e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007112:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007116:	f003 0307 	and.w	r3, r3, #7
 800711a:	2b00      	cmp	r3, #0
 800711c:	d053      	beq.n	80071c6 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800711e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007122:	f003 0301 	and.w	r3, r3, #1
 8007126:	2b00      	cmp	r3, #0
 8007128:	d011      	beq.n	800714e <UART_RxISR_8BIT_FIFOEN+0xca>
 800712a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800712e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	2201      	movs	r2, #1
 800713c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007144:	f043 0201 	orr.w	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800714e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007152:	f003 0302 	and.w	r3, r3, #2
 8007156:	2b00      	cmp	r3, #0
 8007158:	d011      	beq.n	800717e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800715a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800715e:	f003 0301 	and.w	r3, r3, #1
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00b      	beq.n	800717e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	2202      	movs	r2, #2
 800716c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007174:	f043 0204 	orr.w	r2, r3, #4
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800717e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007182:	f003 0304 	and.w	r3, r3, #4
 8007186:	2b00      	cmp	r3, #0
 8007188:	d011      	beq.n	80071ae <UART_RxISR_8BIT_FIFOEN+0x12a>
 800718a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800718e:	f003 0301 	and.w	r3, r3, #1
 8007192:	2b00      	cmp	r3, #0
 8007194:	d00b      	beq.n	80071ae <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	2204      	movs	r2, #4
 800719c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071a4:	f043 0202 	orr.w	r2, r3, #2
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d006      	beq.n	80071c6 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f7fe fba5 	bl	8005908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2200      	movs	r2, #0
 80071c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071cc:	b29b      	uxth	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	f040 80a0 	bne.w	8007314 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071dc:	e853 3f00 	ldrex	r3, [r3]
 80071e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80071e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071e8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	461a      	mov	r2, r3
 80071f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80071f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80071f8:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fa:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80071fc:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80071fe:	e841 2300 	strex	r3, r2, [r1]
 8007202:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007204:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007206:	2b00      	cmp	r3, #0
 8007208:	d1e4      	bne.n	80071d4 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	3308      	adds	r3, #8
 8007210:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007212:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007214:	e853 3f00 	ldrex	r3, [r3]
 8007218:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800721a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800721c:	4b6e      	ldr	r3, [pc, #440]	@ (80073d8 <UART_RxISR_8BIT_FIFOEN+0x354>)
 800721e:	4013      	ands	r3, r2
 8007220:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	3308      	adds	r3, #8
 800722a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800722e:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007230:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007232:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007234:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007236:	e841 2300 	strex	r3, r2, [r1]
 800723a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 800723c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800723e:	2b00      	cmp	r3, #0
 8007240:	d1e3      	bne.n	800720a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2220      	movs	r2, #32
 8007246:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2200      	movs	r2, #0
 8007254:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a60      	ldr	r2, [pc, #384]	@ (80073dc <UART_RxISR_8BIT_FIFOEN+0x358>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d021      	beq.n	80072a4 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	685b      	ldr	r3, [r3, #4]
 8007266:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800726a:	2b00      	cmp	r3, #0
 800726c:	d01a      	beq.n	80072a4 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007274:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007276:	e853 3f00 	ldrex	r3, [r3]
 800727a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800727c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800727e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007282:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	461a      	mov	r2, r3
 800728c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007290:	657b      	str	r3, [r7, #84]	@ 0x54
 8007292:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007294:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007296:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007298:	e841 2300 	strex	r3, r2, [r1]
 800729c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800729e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d1e4      	bne.n	800726e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072a8:	2b01      	cmp	r3, #1
 80072aa:	d130      	bne.n	800730e <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2200      	movs	r2, #0
 80072b0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	461a      	mov	r2, r3
 80072d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80072d6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e4      	bne.n	80072b2 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	69db      	ldr	r3, [r3, #28]
 80072ee:	f003 0310 	and.w	r3, r3, #16
 80072f2:	2b10      	cmp	r3, #16
 80072f4:	d103      	bne.n	80072fe <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2210      	movs	r2, #16
 80072fc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007304:	4619      	mov	r1, r3
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7fe fb08 	bl	800591c <HAL_UARTEx_RxEventCallback>
 800730c:	e002      	b.n	8007314 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f7fe faf0 	bl	80058f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007314:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007318:	2b00      	cmp	r3, #0
 800731a:	d006      	beq.n	800732a <UART_RxISR_8BIT_FIFOEN+0x2a6>
 800731c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007320:	f003 0320 	and.w	r3, r3, #32
 8007324:	2b00      	cmp	r3, #0
 8007326:	f47f aed1 	bne.w	80070cc <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007330:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007334:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8007338:	2b00      	cmp	r3, #0
 800733a:	d049      	beq.n	80073d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007342:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8007346:	429a      	cmp	r2, r3
 8007348:	d242      	bcs.n	80073d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3308      	adds	r3, #8
 8007350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007352:	6a3b      	ldr	r3, [r7, #32]
 8007354:	e853 3f00 	ldrex	r3, [r3]
 8007358:	61fb      	str	r3, [r7, #28]
   return(result);
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007360:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800736e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007370:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007374:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007376:	e841 2300 	strex	r3, r2, [r1]
 800737a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800737c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1e3      	bne.n	800734a <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	4a16      	ldr	r2, [pc, #88]	@ (80073e0 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007386:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	e853 3f00 	ldrex	r3, [r3]
 8007394:	60bb      	str	r3, [r7, #8]
   return(result);
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	f043 0320 	orr.w	r3, r3, #32
 800739c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	461a      	mov	r2, r3
 80073a6:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073aa:	61bb      	str	r3, [r7, #24]
 80073ac:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ae:	6979      	ldr	r1, [r7, #20]
 80073b0:	69ba      	ldr	r2, [r7, #24]
 80073b2:	e841 2300 	strex	r3, r2, [r1]
 80073b6:	613b      	str	r3, [r7, #16]
   return(result);
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d1e4      	bne.n	8007388 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073be:	e007      	b.n	80073d0 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f042 0208 	orr.w	r2, r2, #8
 80073ce:	619a      	str	r2, [r3, #24]
}
 80073d0:	bf00      	nop
 80073d2:	37b0      	adds	r7, #176	@ 0xb0
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}
 80073d8:	effffffe 	.word	0xeffffffe
 80073dc:	58000c00 	.word	0x58000c00
 80073e0:	08006d15 	.word	0x08006d15

080073e4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b0ae      	sub	sp, #184	@ 0xb8
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80073f2:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	69db      	ldr	r3, [r3, #28]
 80073fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800741a:	2b22      	cmp	r3, #34	@ 0x22
 800741c:	f040 8184 	bne.w	8007728 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007426:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800742a:	e127      	b.n	800767c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007432:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800743a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800743e:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007442:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007446:	4013      	ands	r3, r2
 8007448:	b29a      	uxth	r2, r3
 800744a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800744e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007454:	1c9a      	adds	r2, r3, #2
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007460:	b29b      	uxth	r3, r3
 8007462:	3b01      	subs	r3, #1
 8007464:	b29a      	uxth	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	69db      	ldr	r3, [r3, #28]
 8007472:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007476:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800747a:	f003 0307 	and.w	r3, r3, #7
 800747e:	2b00      	cmp	r3, #0
 8007480:	d053      	beq.n	800752a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007482:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007486:	f003 0301 	and.w	r3, r3, #1
 800748a:	2b00      	cmp	r3, #0
 800748c:	d011      	beq.n	80074b2 <UART_RxISR_16BIT_FIFOEN+0xce>
 800748e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007492:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007496:	2b00      	cmp	r3, #0
 8007498:	d00b      	beq.n	80074b2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2201      	movs	r2, #1
 80074a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074a8:	f043 0201 	orr.w	r2, r3, #1
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074b6:	f003 0302 	and.w	r3, r3, #2
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d011      	beq.n	80074e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80074be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	2202      	movs	r2, #2
 80074d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074d8:	f043 0204 	orr.w	r2, r3, #4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074e2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074e6:	f003 0304 	and.w	r3, r3, #4
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d011      	beq.n	8007512 <UART_RxISR_16BIT_FIFOEN+0x12e>
 80074ee:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d00b      	beq.n	8007512 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2204      	movs	r2, #4
 8007500:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007508:	f043 0202 	orr.w	r2, r3, #2
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007518:	2b00      	cmp	r3, #0
 800751a:	d006      	beq.n	800752a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f7fe f9f3 	bl	8005908 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007530:	b29b      	uxth	r3, r3
 8007532:	2b00      	cmp	r3, #0
 8007534:	f040 80a2 	bne.w	800767c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007540:	e853 3f00 	ldrex	r3, [r3]
 8007544:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007546:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007548:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800754c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	461a      	mov	r2, r3
 8007556:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800755a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800755e:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007560:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007562:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007566:	e841 2300 	strex	r3, r2, [r1]
 800756a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800756c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800756e:	2b00      	cmp	r3, #0
 8007570:	d1e2      	bne.n	8007538 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3308      	adds	r3, #8
 8007578:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007582:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007584:	4b6e      	ldr	r3, [pc, #440]	@ (8007740 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007586:	4013      	ands	r3, r2
 8007588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	3308      	adds	r3, #8
 8007592:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007596:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007598:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800759a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800759c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800759e:	e841 2300 	strex	r3, r2, [r1]
 80075a2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075a4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1e3      	bne.n	8007572 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	4a60      	ldr	r2, [pc, #384]	@ (8007744 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80075c4:	4293      	cmp	r3, r2
 80075c6:	d021      	beq.n	800760c <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d01a      	beq.n	800760c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075de:	e853 3f00 	ldrex	r3, [r3]
 80075e2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075e4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075e6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075ea:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80075f8:	65bb      	str	r3, [r7, #88]	@ 0x58
 80075fa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80075fe:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007600:	e841 2300 	strex	r3, r2, [r1]
 8007604:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007606:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007608:	2b00      	cmp	r3, #0
 800760a:	d1e4      	bne.n	80075d6 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007610:	2b01      	cmp	r3, #1
 8007612:	d130      	bne.n	8007676 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2200      	movs	r2, #0
 8007618:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007622:	e853 3f00 	ldrex	r3, [r3]
 8007626:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762a:	f023 0310 	bic.w	r3, r3, #16
 800762e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	461a      	mov	r2, r3
 8007638:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800763c:	647b      	str	r3, [r7, #68]	@ 0x44
 800763e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007644:	e841 2300 	strex	r3, r2, [r1]
 8007648:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800764a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800764c:	2b00      	cmp	r3, #0
 800764e:	d1e4      	bne.n	800761a <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	69db      	ldr	r3, [r3, #28]
 8007656:	f003 0310 	and.w	r3, r3, #16
 800765a:	2b10      	cmp	r3, #16
 800765c:	d103      	bne.n	8007666 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2210      	movs	r2, #16
 8007664:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800766c:	4619      	mov	r1, r3
 800766e:	6878      	ldr	r0, [r7, #4]
 8007670:	f7fe f954 	bl	800591c <HAL_UARTEx_RxEventCallback>
 8007674:	e002      	b.n	800767c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7fe f93c 	bl	80058f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800767c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007680:	2b00      	cmp	r3, #0
 8007682:	d006      	beq.n	8007692 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007684:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	f47f aecd 	bne.w	800742c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007698:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800769c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d049      	beq.n	8007738 <UART_RxISR_16BIT_FIFOEN+0x354>
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80076aa:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d242      	bcs.n	8007738 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	3308      	adds	r3, #8
 80076b8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076bc:	e853 3f00 	ldrex	r3, [r3]
 80076c0:	623b      	str	r3, [r7, #32]
   return(result);
 80076c2:	6a3b      	ldr	r3, [r7, #32]
 80076c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	3308      	adds	r3, #8
 80076d2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076d6:	633a      	str	r2, [r7, #48]	@ 0x30
 80076d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076da:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076de:	e841 2300 	strex	r3, r2, [r1]
 80076e2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1e3      	bne.n	80076b2 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	4a16      	ldr	r2, [pc, #88]	@ (8007748 <UART_RxISR_16BIT_FIFOEN+0x364>)
 80076ee:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	e853 3f00 	ldrex	r3, [r3]
 80076fc:	60fb      	str	r3, [r7, #12]
   return(result);
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f043 0320 	orr.w	r3, r3, #32
 8007704:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	461a      	mov	r2, r3
 800770e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007712:	61fb      	str	r3, [r7, #28]
 8007714:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	69b9      	ldr	r1, [r7, #24]
 8007718:	69fa      	ldr	r2, [r7, #28]
 800771a:	e841 2300 	strex	r3, r2, [r1]
 800771e:	617b      	str	r3, [r7, #20]
   return(result);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d1e4      	bne.n	80076f0 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007726:	e007      	b.n	8007738 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	699a      	ldr	r2, [r3, #24]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	f042 0208 	orr.w	r2, r2, #8
 8007736:	619a      	str	r2, [r3, #24]
}
 8007738:	bf00      	nop
 800773a:	37b8      	adds	r7, #184	@ 0xb8
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	effffffe 	.word	0xeffffffe
 8007744:	58000c00 	.word	0x58000c00
 8007748:	08006ecd 	.word	0x08006ecd

0800774c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800774c:	b480      	push	{r7}
 800774e:	b083      	sub	sp, #12
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007754:	bf00      	nop
 8007756:	370c      	adds	r7, #12
 8007758:	46bd      	mov	sp, r7
 800775a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775e:	4770      	bx	lr

08007760 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007788:	b480      	push	{r7}
 800778a:	b085      	sub	sp, #20
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007796:	2b01      	cmp	r3, #1
 8007798:	d101      	bne.n	800779e <HAL_UARTEx_DisableFifoMode+0x16>
 800779a:	2302      	movs	r3, #2
 800779c:	e027      	b.n	80077ee <HAL_UARTEx_DisableFifoMode+0x66>
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2201      	movs	r2, #1
 80077a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2224      	movs	r2, #36	@ 0x24
 80077aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f022 0201 	bic.w	r2, r2, #1
 80077c4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077cc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2200      	movs	r2, #0
 80077d2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	68fa      	ldr	r2, [r7, #12]
 80077da:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2220      	movs	r2, #32
 80077e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80077ec:	2300      	movs	r3, #0
}
 80077ee:	4618      	mov	r0, r3
 80077f0:	3714      	adds	r7, #20
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr

080077fa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b084      	sub	sp, #16
 80077fe:	af00      	add	r7, sp, #0
 8007800:	6078      	str	r0, [r7, #4]
 8007802:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800780a:	2b01      	cmp	r3, #1
 800780c:	d101      	bne.n	8007812 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800780e:	2302      	movs	r3, #2
 8007810:	e02d      	b.n	800786e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	2201      	movs	r2, #1
 8007816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2224      	movs	r2, #36	@ 0x24
 800781e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f022 0201 	bic.w	r2, r2, #1
 8007838:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	683a      	ldr	r2, [r7, #0]
 800784a:	430a      	orrs	r2, r1
 800784c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f850 	bl	80078f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	68fa      	ldr	r2, [r7, #12]
 800785a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2220      	movs	r2, #32
 8007860:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2200      	movs	r2, #0
 8007868:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
 800787e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007886:	2b01      	cmp	r3, #1
 8007888:	d101      	bne.n	800788e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800788a:	2302      	movs	r3, #2
 800788c:	e02d      	b.n	80078ea <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	2224      	movs	r2, #36	@ 0x24
 800789a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	f022 0201 	bic.w	r2, r2, #1
 80078b4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	689b      	ldr	r3, [r3, #8]
 80078bc:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	683a      	ldr	r2, [r7, #0]
 80078c6:	430a      	orrs	r2, r1
 80078c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f000 f812 	bl	80078f4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68fa      	ldr	r2, [r7, #12]
 80078d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2220      	movs	r2, #32
 80078dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2200      	movs	r2, #0
 80078e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078e8:	2300      	movs	r3, #0
}
 80078ea:	4618      	mov	r0, r3
 80078ec:	3710      	adds	r7, #16
 80078ee:	46bd      	mov	sp, r7
 80078f0:	bd80      	pop	{r7, pc}
	...

080078f4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80078f4:	b480      	push	{r7}
 80078f6:	b085      	sub	sp, #20
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007900:	2b00      	cmp	r3, #0
 8007902:	d108      	bne.n	8007916 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007914:	e031      	b.n	800797a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007916:	2310      	movs	r3, #16
 8007918:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800791a:	2310      	movs	r3, #16
 800791c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	0e5b      	lsrs	r3, r3, #25
 8007926:	b2db      	uxtb	r3, r3
 8007928:	f003 0307 	and.w	r3, r3, #7
 800792c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	0f5b      	lsrs	r3, r3, #29
 8007936:	b2db      	uxtb	r3, r3
 8007938:	f003 0307 	and.w	r3, r3, #7
 800793c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800793e:	7bbb      	ldrb	r3, [r7, #14]
 8007940:	7b3a      	ldrb	r2, [r7, #12]
 8007942:	4911      	ldr	r1, [pc, #68]	@ (8007988 <UARTEx_SetNbDataToProcess+0x94>)
 8007944:	5c8a      	ldrb	r2, [r1, r2]
 8007946:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800794a:	7b3a      	ldrb	r2, [r7, #12]
 800794c:	490f      	ldr	r1, [pc, #60]	@ (800798c <UARTEx_SetNbDataToProcess+0x98>)
 800794e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007950:	fb93 f3f2 	sdiv	r3, r3, r2
 8007954:	b29a      	uxth	r2, r3
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800795c:	7bfb      	ldrb	r3, [r7, #15]
 800795e:	7b7a      	ldrb	r2, [r7, #13]
 8007960:	4909      	ldr	r1, [pc, #36]	@ (8007988 <UARTEx_SetNbDataToProcess+0x94>)
 8007962:	5c8a      	ldrb	r2, [r1, r2]
 8007964:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007968:	7b7a      	ldrb	r2, [r7, #13]
 800796a:	4908      	ldr	r1, [pc, #32]	@ (800798c <UARTEx_SetNbDataToProcess+0x98>)
 800796c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800796e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007972:	b29a      	uxth	r2, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800797a:	bf00      	nop
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	08007a44 	.word	0x08007a44
 800798c:	08007a4c 	.word	0x08007a4c

08007990 <memset>:
 8007990:	4402      	add	r2, r0
 8007992:	4603      	mov	r3, r0
 8007994:	4293      	cmp	r3, r2
 8007996:	d100      	bne.n	800799a <memset+0xa>
 8007998:	4770      	bx	lr
 800799a:	f803 1b01 	strb.w	r1, [r3], #1
 800799e:	e7f9      	b.n	8007994 <memset+0x4>

080079a0 <__libc_init_array>:
 80079a0:	b570      	push	{r4, r5, r6, lr}
 80079a2:	4d0d      	ldr	r5, [pc, #52]	@ (80079d8 <__libc_init_array+0x38>)
 80079a4:	4c0d      	ldr	r4, [pc, #52]	@ (80079dc <__libc_init_array+0x3c>)
 80079a6:	1b64      	subs	r4, r4, r5
 80079a8:	10a4      	asrs	r4, r4, #2
 80079aa:	2600      	movs	r6, #0
 80079ac:	42a6      	cmp	r6, r4
 80079ae:	d109      	bne.n	80079c4 <__libc_init_array+0x24>
 80079b0:	4d0b      	ldr	r5, [pc, #44]	@ (80079e0 <__libc_init_array+0x40>)
 80079b2:	4c0c      	ldr	r4, [pc, #48]	@ (80079e4 <__libc_init_array+0x44>)
 80079b4:	f000 f826 	bl	8007a04 <_init>
 80079b8:	1b64      	subs	r4, r4, r5
 80079ba:	10a4      	asrs	r4, r4, #2
 80079bc:	2600      	movs	r6, #0
 80079be:	42a6      	cmp	r6, r4
 80079c0:	d105      	bne.n	80079ce <__libc_init_array+0x2e>
 80079c2:	bd70      	pop	{r4, r5, r6, pc}
 80079c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c8:	4798      	blx	r3
 80079ca:	3601      	adds	r6, #1
 80079cc:	e7ee      	b.n	80079ac <__libc_init_array+0xc>
 80079ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80079d2:	4798      	blx	r3
 80079d4:	3601      	adds	r6, #1
 80079d6:	e7f2      	b.n	80079be <__libc_init_array+0x1e>
 80079d8:	08007a5c 	.word	0x08007a5c
 80079dc:	08007a5c 	.word	0x08007a5c
 80079e0:	08007a5c 	.word	0x08007a5c
 80079e4:	08007a60 	.word	0x08007a60

080079e8 <memcpy>:
 80079e8:	440a      	add	r2, r1
 80079ea:	4291      	cmp	r1, r2
 80079ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80079f0:	d100      	bne.n	80079f4 <memcpy+0xc>
 80079f2:	4770      	bx	lr
 80079f4:	b510      	push	{r4, lr}
 80079f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079fe:	4291      	cmp	r1, r2
 8007a00:	d1f9      	bne.n	80079f6 <memcpy+0xe>
 8007a02:	bd10      	pop	{r4, pc}

08007a04 <_init>:
 8007a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a06:	bf00      	nop
 8007a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a0a:	bc08      	pop	{r3}
 8007a0c:	469e      	mov	lr, r3
 8007a0e:	4770      	bx	lr

08007a10 <_fini>:
 8007a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a12:	bf00      	nop
 8007a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a16:	bc08      	pop	{r3}
 8007a18:	469e      	mov	lr, r3
 8007a1a:	4770      	bx	lr
