
GNSS_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f0  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007abc  08007abc  00008abc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007af4  08007af4  00008af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007afc  08007afc  00008afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007b00  08007b00  00008b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007b04  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000abc  24000010  08007b14  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000acc  08007b14  00009acc  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012015  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000259b  00000000  00000000  0001b053  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ba8  00000000  00000000  0001d5f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008ee  00000000  00000000  0001e198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031984  00000000  00000000  0001ea86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000122aa  00000000  00000000  0005040a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fafd  00000000  00000000  000626b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a21b1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f3c  00000000  00000000  001a21f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001a5130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007aa4 	.word	0x08007aa4

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08007aa4 	.word	0x08007aa4

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <GNSS_Tanimla>:
#include "SysTick_Timer.h"
U_Blox_frame_high_layer U_Blox_frame_tx;
U_Blox_frame_high_layer U_Blox_frame_rx;
int b = 0;
static uint32_t zaman;
void GNSS_Tanimla(GNSS *GNSS_t) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	U_Blox_Init();
 8000604:	f000 f95e 	bl	80008c4 <U_Blox_Init>
	for (int i = 0; i < 26; i++) {
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e008      	b.n	8000620 <GNSS_Tanimla+0x24>
		U_Blox_frame_tx.payload.data[i] = 0;
 800060e:	4a2c      	ldr	r2, [pc, #176]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	3304      	adds	r3, #4
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b19      	cmp	r3, #25
 8000624:	ddf3      	ble.n	800060e <GNSS_Tanimla+0x12>
	}
	U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000628:	2206      	movs	r2, #6
 800062a:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800062e:	2200      	movs	r2, #0
 8000630:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000632:	4a23      	ldr	r2, [pc, #140]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000634:	7d13      	ldrb	r3, [r2, #20]
 8000636:	f36f 0341 	bfc	r3, #1, #1
 800063a:	7513      	strb	r3, [r2, #20]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 800063c:	4a20      	ldr	r2, [pc, #128]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800063e:	7a13      	ldrb	r3, [r2, #8]
 8000640:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000644:	7213      	strb	r3, [r2, #8]
			3;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 8000646:	4a1e      	ldr	r2, [pc, #120]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000648:	7a13      	ldrb	r3, [r2, #8]
 800064a:	2110      	movs	r1, #16
 800064c:	f361 0305 	bfi	r3, r1, #0, #6
 8000650:	7213      	strb	r3, [r2, #8]
			16;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000652:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000654:	7a53      	ldrb	r3, [r2, #9]
 8000656:	f36f 1305 	bfc	r3, #4, #2
 800065a:	7253      	strb	r3, [r2, #9]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 800065c:	4a18      	ldr	r2, [pc, #96]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800065e:	7a53      	ldrb	r3, [r2, #9]
 8000660:	2104      	movs	r1, #4
 8000662:	f361 0343 	bfi	r3, r1, #1, #3
 8000666:	7253      	strb	r3, [r2, #9]
			4;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800066a:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800066e:	60da      	str	r2, [r3, #12]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000672:	2200      	movs	r2, #0
 8000674:	80da      	strh	r2, [r3, #6]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 8000676:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000678:	7c13      	ldrb	r3, [r2, #16]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	7413      	strb	r3, [r2, #16]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 8000680:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000682:	7c93      	ldrb	r3, [r2, #18]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	7493      	strb	r3, [r2, #18]
		1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800068c:	2201      	movs	r2, #1
 800068e:	711a      	strb	r2, [r3, #4]
	U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000692:	2214      	movs	r2, #20
 8000694:	805a      	strh	r2, [r3, #2]
	U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000696:	480a      	ldr	r0, [pc, #40]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000698:	f000 f9a2 	bl	80009e0 <U_Blox_Set_Frame>
	U_Blox_Send_Frame();
 800069c:	f000 f9de 	bl	8000a5c <U_Blox_Send_Frame>
	//while(!U_Blox_Is_Packet_Ready());
	GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2201      	movs	r2, #1
 80006a4:	741a      	strb	r2, [r3, #16]
	GNSS_t->onceki_durum = SM_GNSS_IDLE;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	745a      	strb	r2, [r3, #17]
	zaman = SystickGetMs();
 80006ac:	f000 fdc4 	bl	8001238 <SystickGetMs>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <GNSS_Tanimla+0xc8>)
 80006b4:	6013      	str	r3, [r2, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2400002c 	.word	0x2400002c
 80006c4:	2400041c 	.word	0x2400041c

080006c8 <GNSS_Gorev>:
	} else {
		return 0;
	}
}

void GNSS_Gorev(GNSS *GNSS_t) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	U_Blox_Task();
 80006d0:	f000 f90a 	bl	80008e8 <U_Blox_Task>
	switch (GNSS_t->SM) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7c1b      	ldrb	r3, [r3, #16]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	f200 80e9 	bhi.w	80008b0 <GNSS_Gorev+0x1e8>
 80006de:	a201      	add	r2, pc, #4	@ (adr r2, 80006e4 <GNSS_Gorev+0x1c>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	080007a3 	.word	0x080007a3
 80006ec:	08000787 	.word	0x08000787
 80006f0:	0800087b 	.word	0x0800087b
	case SM_GNSS_IDLE:
		U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 80006f4:	4b70      	ldr	r3, [pc, #448]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 80006f6:	2206      	movs	r2, #6
 80006f8:	701a      	strb	r2, [r3, #0]
		U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 80006fa:	4b6f      	ldr	r3, [pc, #444]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	705a      	strb	r2, [r3, #1]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000700:	4a6d      	ldr	r2, [pc, #436]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000702:	7d13      	ldrb	r3, [r2, #20]
 8000704:	f36f 0341 	bfc	r3, #1, #1
 8000708:	7513      	strb	r3, [r2, #20]
				0;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 800070a:	4a6b      	ldr	r2, [pc, #428]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 800070c:	7a13      	ldrb	r3, [r2, #8]
 800070e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000712:	7213      	strb	r3, [r2, #8]
				3;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 8000714:	4a68      	ldr	r2, [pc, #416]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000716:	7a13      	ldrb	r3, [r2, #8]
 8000718:	2110      	movs	r1, #16
 800071a:	f361 0305 	bfi	r3, r1, #0, #6
 800071e:	7213      	strb	r3, [r2, #8]
				16;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000720:	4a65      	ldr	r2, [pc, #404]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000722:	7a53      	ldrb	r3, [r2, #9]
 8000724:	f36f 1305 	bfc	r3, #4, #2
 8000728:	7253      	strb	r3, [r2, #9]
				0;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 800072a:	4a63      	ldr	r2, [pc, #396]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 800072c:	7a53      	ldrb	r3, [r2, #9]
 800072e:	2104      	movs	r1, #4
 8000730:	f361 0343 	bfi	r3, r1, #1, #3
 8000734:	7253      	strb	r3, [r2, #9]
				4;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 8000736:	4b60      	ldr	r3, [pc, #384]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000738:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800073c:	60da      	str	r2, [r3, #12]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 800073e:	4b5e      	ldr	r3, [pc, #376]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000740:	2200      	movs	r2, #0
 8000742:	80da      	strh	r2, [r3, #6]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 8000744:	4a5c      	ldr	r2, [pc, #368]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000746:	7c13      	ldrb	r3, [r2, #16]
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	7413      	strb	r3, [r2, #16]
				1;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 800074e:	4a5a      	ldr	r2, [pc, #360]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000750:	7c93      	ldrb	r3, [r2, #18]
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	7493      	strb	r3, [r2, #18]
				1;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 8000758:	4b57      	ldr	r3, [pc, #348]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 800075a:	2201      	movs	r2, #1
 800075c:	711a      	strb	r2, [r3, #4]
		U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 800075e:	4b56      	ldr	r3, [pc, #344]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000760:	2214      	movs	r2, #20
 8000762:	805a      	strh	r2, [r3, #2]
		U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000764:	4854      	ldr	r0, [pc, #336]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000766:	f000 f93b 	bl	80009e0 <U_Blox_Set_Frame>
        U_Blox_Send_Frame();
 800076a:	f000 f977 	bl	8000a5c <U_Blox_Send_Frame>
		static uint32_t zamanlama;
		zamanlama = SystickGetMs();
 800076e:	f000 fd63 	bl	8001238 <SystickGetMs>
 8000772:	4603      	mov	r3, r0
 8000774:	4a51      	ldr	r2, [pc, #324]	@ (80008bc <GNSS_Gorev+0x1f4>)
 8000776:	6013      	str	r3, [r2, #0]
		GNSS_t->SM=SM_GNSS_WAIT_FOR_REPLY;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	741a      	strb	r2, [r3, #16]
		GNSS_t->onceki_durum=SM_GNSS_IDLE;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	745a      	strb	r2, [r3, #17]
		break;
 8000784:	e094      	b.n	80008b0 <GNSS_Gorev+0x1e8>
	case SM_GNSS_NO_REPLY:

		GNSS_t->İstatistikler_t.veri_gelmedi++;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	615a      	str	r2, [r3, #20]
		GNSS_t->SM = SM_GNSS_IDLE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	741a      	strb	r2, [r3, #16]
		zamanlama = SystickGetMs();
 8000796:	f000 fd4f 	bl	8001238 <SystickGetMs>
 800079a:	4603      	mov	r3, r0
 800079c:	4a47      	ldr	r2, [pc, #284]	@ (80008bc <GNSS_Gorev+0x1f4>)
 800079e:	6013      	str	r3, [r2, #0]
		break;
 80007a0:	e086      	b.n	80008b0 <GNSS_Gorev+0x1e8>
	case SM_GNSS_WAIT_FOR_REPLY:

		if (GNSS_t->onceki_durum == SM_GNSS_IDLE) {
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	7c5b      	ldrb	r3, [r3, #17]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d121      	bne.n	80007ee <GNSS_Gorev+0x126>
			if (U_Blox_Is_Packet_Ready()) {
 80007aa:	f000 f9cd 	bl	8000b48 <U_Blox_Is_Packet_Ready>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <GNSS_Gorev+0x10a>
				U_Blox_Get_Package(&U_Blox_frame_rx);
 80007b4:	4842      	ldr	r0, [pc, #264]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 80007b6:	f000 f9e9 	bl	8000b8c <U_Blox_Get_Package>
				if ((U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_ACK)
 80007ba:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d175      	bne.n	80008ae <GNSS_Gorev+0x1e6>
						&& (U_Blox_frame_rx.message_id == UBX_MESSAGE_ID_ACK)) {
 80007c2:	4b3f      	ldr	r3, [pc, #252]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d171      	bne.n	80008ae <GNSS_Gorev+0x1e6>
					//Acknowledgement alındı.
					GNSS_t->SM = SM_GNSS_SEND;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2203      	movs	r2, #3
 80007ce:	741a      	strb	r2, [r3, #16]
				}
			} else if (SystickCheckMs(zamanlama, 1500)) {
				GNSS_t->SM = SM_GNSS_NO_REPLY;
			}
		}
		break;
 80007d0:	e06d      	b.n	80008ae <GNSS_Gorev+0x1e6>
			} else if (SystickCheckMs(zamanlama, 1500)) {
 80007d2:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <GNSS_Gorev+0x1f4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fd38 	bl	8001250 <SystickCheckMs>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d063      	beq.n	80008ae <GNSS_Gorev+0x1e6>
				GNSS_t->SM = SM_GNSS_NO_REPLY;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2202      	movs	r2, #2
 80007ea:	741a      	strb	r2, [r3, #16]
		break;
 80007ec:	e05f      	b.n	80008ae <GNSS_Gorev+0x1e6>
		} else if (GNSS_t->onceki_durum == SM_GNSS_SEND) {
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7c5b      	ldrb	r3, [r3, #17]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d15b      	bne.n	80008ae <GNSS_Gorev+0x1e6>
			if (U_Blox_Is_Packet_Ready()) {
 80007f6:	f000 f9a7 	bl	8000b48 <U_Blox_Is_Packet_Ready>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d02e      	beq.n	800085e <GNSS_Gorev+0x196>
				U_Blox_Get_Package(&U_Blox_frame_rx);
 8000800:	482f      	ldr	r0, [pc, #188]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000802:	f000 f9c3 	bl	8000b8c <U_Blox_Get_Package>
				if ((U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_NAV)
 8000806:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d14f      	bne.n	80008ae <GNSS_Gorev+0x1e6>
						&& (U_Blox_frame_rx.message_id == UBX_MESSAGE_ID_PVT)) {
 800080e:	4b2c      	ldr	r3, [pc, #176]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	2b07      	cmp	r3, #7
 8000814:	d14b      	bne.n	80008ae <GNSS_Gorev+0x1e6>
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.month;
 8000816:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000818:	7a9a      	ldrb	r2, [r3, #10]
					GNSS_t->ay =
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	709a      	strb	r2, [r3, #2]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lon;
 800081e:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000820:	69da      	ldr	r2, [r3, #28]
					GNSS_t->boylam =
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	609a      	str	r2, [r3, #8]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lat;
 8000826:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000828:	6a1a      	ldr	r2, [r3, #32]
					GNSS_t->enlem =
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60da      	str	r2, [r3, #12]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.day;
 800082e:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000830:	7ada      	ldrb	r2, [r3, #11]
					GNSS_t->gun =
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	70da      	strb	r2, [r3, #3]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.min;
 8000836:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000838:	7b5a      	ldrb	r2, [r3, #13]
					GNSS_t->dakika =
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	715a      	strb	r2, [r3, #5]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.year;
 800083e:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000840:	891a      	ldrh	r2, [r3, #8]
					GNSS_t->yil =
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	801a      	strh	r2, [r3, #0]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.sec;
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000848:	7b9a      	ldrb	r2, [r3, #14]
					GNSS_t->saniye =
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	719a      	strb	r2, [r3, #6]
					GNSS_t->saat=U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.hour;
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000850:	7b1a      	ldrb	r2, [r3, #12]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	711a      	strb	r2, [r3, #4]
					GNSS_t->SM = SM_GNSS_SEND;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2203      	movs	r2, #3
 800085a:	741a      	strb	r2, [r3, #16]
		break;
 800085c:	e027      	b.n	80008ae <GNSS_Gorev+0x1e6>
			} else if (SystickCheckMs(zamanlama, 1500)) {
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <GNSS_Gorev+0x1f4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fcf2 	bl	8001250 <SystickCheckMs>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d01d      	beq.n	80008ae <GNSS_Gorev+0x1e6>
				GNSS_t->SM = SM_GNSS_NO_REPLY;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2202      	movs	r2, #2
 8000876:	741a      	strb	r2, [r3, #16]
		break;
 8000878:	e019      	b.n	80008ae <GNSS_Gorev+0x1e6>
	case SM_GNSS_SEND:
		GNSS_t->onceki_durum = SM_GNSS_SEND;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2203      	movs	r2, #3
 800087e:	745a      	strb	r2, [r3, #17]
		U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_NAV;
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
		U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PVT;
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000888:	2207      	movs	r2, #7
 800088a:	705a      	strb	r2, [r3, #1]
		U_Blox_frame_tx.length = 0;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 800088e:	2200      	movs	r2, #0
 8000890:	805a      	strh	r2, [r3, #2]
		U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000892:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000894:	f000 f8a4 	bl	80009e0 <U_Blox_Set_Frame>
		U_Blox_Send_Frame();
 8000898:	f000 f8e0 	bl	8000a5c <U_Blox_Send_Frame>
		GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2201      	movs	r2, #1
 80008a0:	741a      	strb	r2, [r3, #16]
		zamanlama = SystickGetMs();
 80008a2:	f000 fcc9 	bl	8001238 <SystickGetMs>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <GNSS_Gorev+0x1f4>)
 80008aa:	6013      	str	r3, [r2, #0]
		break;
 80008ac:	e000      	b.n	80008b0 <GNSS_Gorev+0x1e8>
		break;
 80008ae:	bf00      	nop
	}
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2400002c 	.word	0x2400002c
 80008bc:	24000420 	.word	0x24000420
 80008c0:	24000224 	.word	0x24000224

080008c4 <U_Blox_Init>:
	} Sm;
	uint8_t Buffer[500];
	uint16_t buffer_index;
} U_Blox_Tx;

void U_Blox_Init() {
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
	U_Blox_Rx.Sm = SM_RX_IDLE;
 80008c8:	4b05      	ldr	r3, [pc, #20]	@ (80008e0 <U_Blox_Init+0x1c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	U_Blox_Tx.Sm = SM_TX_IDLE;
 80008ce:	4b05      	ldr	r3, [pc, #20]	@ (80008e4 <U_Blox_Init+0x20>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
}
 80008d4:	bf00      	nop
 80008d6:	46bd      	mov	sp, r7
 80008d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008dc:	4770      	bx	lr
 80008de:	bf00      	nop
 80008e0:	24000620 	.word	0x24000620
 80008e4:	24000818 	.word	0x24000818

080008e8 <U_Blox_Task>:
void U_Blox_Task() {
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b083      	sub	sp, #12
 80008ec:	af00      	add	r7, sp, #0
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t;
	switch (U_Blox_Tx.Sm) {
 80008ee:	4b38      	ldr	r3, [pc, #224]	@ (80009d0 <U_Blox_Task+0xe8>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	2b02      	cmp	r3, #2
 80008f4:	d005      	beq.n	8000902 <U_Blox_Task+0x1a>
 80008f6:	2b02      	cmp	r3, #2
 80008f8:	dc27      	bgt.n	800094a <U_Blox_Task+0x62>
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d022      	beq.n	8000944 <U_Blox_Task+0x5c>
 80008fe:	2b01      	cmp	r3, #1
	case SM_TX_IDLE:
		break;
	case SM_TX_PREPARE:
		break;
 8000900:	e023      	b.n	800094a <U_Blox_Task+0x62>
	case SM_TX_SEND:
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Tx.Buffer;
 8000902:	4b34      	ldr	r3, [pc, #208]	@ (80009d4 <U_Blox_Task+0xec>)
 8000904:	607b      	str	r3, [r7, #4]
		while (U_Blox_Tx.buffer_index < U_Blox_frame_low_layer_t->length + 8) {
 8000906:	e009      	b.n	800091c <U_Blox_Task+0x34>
			U_Blox_Send_Data(U_Blox_Tx.Buffer[U_Blox_Tx.buffer_index]);
 8000908:	4b31      	ldr	r3, [pc, #196]	@ (80009d0 <U_Blox_Task+0xe8>)
 800090a:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 800090e:	461a      	mov	r2, r3
 8000910:	4b2f      	ldr	r3, [pc, #188]	@ (80009d0 <U_Blox_Task+0xe8>)
 8000912:	4413      	add	r3, r2
 8000914:	785b      	ldrb	r3, [r3, #1]
 8000916:	4618      	mov	r0, r3
 8000918:	f000 f926 	bl	8000b68 <U_Blox_Send_Data>
		while (U_Blox_Tx.buffer_index < U_Blox_frame_low_layer_t->length + 8) {
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	889b      	ldrh	r3, [r3, #4]
 8000920:	3307      	adds	r3, #7
 8000922:	4a2b      	ldr	r2, [pc, #172]	@ (80009d0 <U_Blox_Task+0xe8>)
 8000924:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 8000928:	4293      	cmp	r3, r2
 800092a:	daed      	bge.n	8000908 <U_Blox_Task+0x20>
		}
		if (U_Blox_Tx.buffer_index >= U_Blox_frame_low_layer_t->length + 8) {
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	889b      	ldrh	r3, [r3, #4]
 8000930:	3307      	adds	r3, #7
 8000932:	4a27      	ldr	r2, [pc, #156]	@ (80009d0 <U_Blox_Task+0xe8>)
 8000934:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 8000938:	4293      	cmp	r3, r2
 800093a:	da05      	bge.n	8000948 <U_Blox_Task+0x60>
			U_Blox_Tx.Sm = SM_TX_IDLE;
 800093c:	4b24      	ldr	r3, [pc, #144]	@ (80009d0 <U_Blox_Task+0xe8>)
 800093e:	2200      	movs	r2, #0
 8000940:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000942:	e001      	b.n	8000948 <U_Blox_Task+0x60>
		break;
 8000944:	bf00      	nop
 8000946:	e000      	b.n	800094a <U_Blox_Task+0x62>
		break;
 8000948:	bf00      	nop
	}
	switch (U_Blox_Rx.Sm) {
 800094a:	4b23      	ldr	r3, [pc, #140]	@ (80009d8 <U_Blox_Task+0xf0>)
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <U_Blox_Task+0x6e>
 8000952:	2b01      	cmp	r3, #1
				}
			}
		}
		break;
	case SM_RX_PROCESS:
		break;
 8000954:	e037      	b.n	80009c6 <U_Blox_Task+0xde>
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;
 8000956:	4b21      	ldr	r3, [pc, #132]	@ (80009dc <U_Blox_Task+0xf4>)
 8000958:	607b      	str	r3, [r7, #4]
		if (U_Blox_Rx.buffer_index >= 2) {
 800095a:	4b1f      	ldr	r3, [pc, #124]	@ (80009d8 <U_Blox_Task+0xf0>)
 800095c:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000960:	2b01      	cmp	r3, #1
 8000962:	d92f      	bls.n	80009c4 <U_Blox_Task+0xdc>
			if (!((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2bb5      	cmp	r3, #181	@ 0xb5
 800096a:	d103      	bne.n	8000974 <U_Blox_Task+0x8c>
					&& (U_Blox_frame_low_layer_t->sync_char_2 == 0x62))) {
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	785b      	ldrb	r3, [r3, #1]
			if (!((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 8000970:	2b62      	cmp	r3, #98	@ 0x62
 8000972:	d003      	beq.n	800097c <U_Blox_Task+0x94>
				RxBufferMove(1);
 8000974:	2001      	movs	r0, #1
 8000976:	f000 f93d 	bl	8000bf4 <RxBufferMove>
		break;
 800097a:	e023      	b.n	80009c4 <U_Blox_Task+0xdc>
					>= (U_Blox_frame_low_layer_t->length + 8)) {
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	889b      	ldrh	r3, [r3, #4]
 8000980:	3307      	adds	r3, #7
			} else if (U_Blox_Rx.buffer_index
 8000982:	4a15      	ldr	r2, [pc, #84]	@ (80009d8 <U_Blox_Task+0xf0>)
 8000984:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 8000988:	4293      	cmp	r3, r2
 800098a:	da1b      	bge.n	80009c4 <U_Blox_Task+0xdc>
				if ((*(uint16_t*) &U_Blox_frame_low_layer_t->payload[U_Blox_frame_low_layer_t->length])
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	889b      	ldrh	r3, [r3, #4]
 8000990:	461a      	mov	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	3306      	adds	r3, #6
 8000998:	881c      	ldrh	r4, [r3, #0]
						!= U_Blox_Calculate_Checksum(
 800099a:	6878      	ldr	r0, [r7, #4]
 800099c:	f000 f878 	bl	8000a90 <U_Blox_Calculate_Checksum>
 80009a0:	4603      	mov	r3, r0
				if ((*(uint16_t*) &U_Blox_frame_low_layer_t->payload[U_Blox_frame_low_layer_t->length])
 80009a2:	429c      	cmp	r4, r3
 80009a4:	d007      	beq.n	80009b6 <U_Blox_Task+0xce>
					RxBufferMove(U_Blox_frame_low_layer_t->length + 8);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	889b      	ldrh	r3, [r3, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	4618      	mov	r0, r3
 80009b0:	f000 f920 	bl	8000bf4 <RxBufferMove>
		break;
 80009b4:	e006      	b.n	80009c4 <U_Blox_Task+0xdc>
					U_Blox_Rx.Sm = SM_RX_PROCESS;
 80009b6:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <U_Blox_Task+0xf0>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
					U_Blox_Rx.buffer_index = 0;
 80009bc:	4b06      	ldr	r3, [pc, #24]	@ (80009d8 <U_Blox_Task+0xf0>)
 80009be:	2200      	movs	r2, #0
 80009c0:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		break;
 80009c4:	bf00      	nop
	}
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	24000818 	.word	0x24000818
 80009d4:	24000819 	.word	0x24000819
 80009d8:	24000620 	.word	0x24000620
 80009dc:	24000621 	.word	0x24000621

080009e0 <U_Blox_Set_Frame>:

void U_Blox_Set_Frame(U_Blox_frame_high_layer *U_blox_Frame) {
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer_transmit.sync_char_1 = 0xB5;
 80009e8:	4b19      	ldr	r3, [pc, #100]	@ (8000a50 <U_Blox_Set_Frame+0x70>)
 80009ea:	22b5      	movs	r2, #181	@ 0xb5
 80009ec:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_low_layer_transmit.sync_char_2 = 0x62;
 80009ee:	4b18      	ldr	r3, [pc, #96]	@ (8000a50 <U_Blox_Set_Frame+0x70>)
 80009f0:	2262      	movs	r2, #98	@ 0x62
 80009f2:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_low_layer_transmit.length = U_blox_Frame->length;
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	885a      	ldrh	r2, [r3, #2]
 80009f8:	4b15      	ldr	r3, [pc, #84]	@ (8000a50 <U_Blox_Set_Frame+0x70>)
 80009fa:	809a      	strh	r2, [r3, #4]
	U_Blox_frame_low_layer_transmit.message_class = U_blox_Frame->message_class;
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	781a      	ldrb	r2, [r3, #0]
 8000a00:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <U_Blox_Set_Frame+0x70>)
 8000a02:	709a      	strb	r2, [r3, #2]
	U_Blox_frame_low_layer_transmit.message_id = U_blox_Frame->message_id;
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	785a      	ldrb	r2, [r3, #1]
 8000a08:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <U_Blox_Set_Frame+0x70>)
 8000a0a:	70da      	strb	r2, [r3, #3]
	memcpy(&U_Blox_frame_low_layer_transmit.payload, U_blox_Frame->payload.data,
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	1d19      	adds	r1, r3, #4
			U_blox_Frame->length);
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	885b      	ldrh	r3, [r3, #2]
	memcpy(&U_Blox_frame_low_layer_transmit.payload, U_blox_Frame->payload.data,
 8000a14:	461a      	mov	r2, r3
 8000a16:	480f      	ldr	r0, [pc, #60]	@ (8000a54 <U_Blox_Set_Frame+0x74>)
 8000a18:	f007 f836 	bl	8007a88 <memcpy>
	(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <U_Blox_Set_Frame+0x70>)
 8000a1e:	889b      	ldrh	r3, [r3, #4]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <U_Blox_Set_Frame+0x70>)
 8000a24:	4413      	add	r3, r2
 8000a26:	1d9c      	adds	r4, r3, #6
			U_Blox_Calculate_Checksum(&U_Blox_frame_low_layer_transmit);
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <U_Blox_Set_Frame+0x70>)
 8000a2a:	f000 f831 	bl	8000a90 <U_Blox_Calculate_Checksum>
 8000a2e:	4603      	mov	r3, r0
	(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000a30:	8023      	strh	r3, [r4, #0]
	memset(&U_blox_Frame->payload, 0, 500);
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	3304      	adds	r3, #4
 8000a36:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f006 fff7 	bl	8007a30 <memset>
	U_Blox_Tx.Sm = SM_TX_PREPARE;
 8000a42:	4b05      	ldr	r3, [pc, #20]	@ (8000a58 <U_Blox_Set_Frame+0x78>)
 8000a44:	2201      	movs	r2, #1
 8000a46:	701a      	strb	r2, [r3, #0]
}
 8000a48:	bf00      	nop
 8000a4a:	370c      	adds	r7, #12
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	24000424 	.word	0x24000424
 8000a54:	2400042a 	.word	0x2400042a
 8000a58:	24000818 	.word	0x24000818

08000a5c <U_Blox_Send_Frame>:
uint8_t U_Blox_Send_Frame() {
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
	//paket hazır mı kontrolu gerek
	HAL_UART_Transmit(&huart3,
 8000a60:	2364      	movs	r3, #100	@ 0x64
 8000a62:	2206      	movs	r2, #6
 8000a64:	4907      	ldr	r1, [pc, #28]	@ (8000a84 <U_Blox_Send_Frame+0x28>)
 8000a66:	4808      	ldr	r0, [pc, #32]	@ (8000a88 <U_Blox_Send_Frame+0x2c>)
 8000a68:	f004 faf6 	bl	8005058 <HAL_UART_Transmit>
			(uint8_t*) &U_Blox_frame_low_layer_transmit.sync_char_1, 6, 100);
	HAL_UART_Transmit(&huart3,
			(uint8_t*) &U_Blox_frame_low_layer_transmit.payload,
			U_Blox_frame_low_layer_transmit.length + 2, 100);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <U_Blox_Send_Frame+0x28>)
 8000a6e:	889b      	ldrh	r3, [r3, #4]
	HAL_UART_Transmit(&huart3,
 8000a70:	3302      	adds	r3, #2
 8000a72:	b29a      	uxth	r2, r3
 8000a74:	2364      	movs	r3, #100	@ 0x64
 8000a76:	4905      	ldr	r1, [pc, #20]	@ (8000a8c <U_Blox_Send_Frame+0x30>)
 8000a78:	4803      	ldr	r0, [pc, #12]	@ (8000a88 <U_Blox_Send_Frame+0x2c>)
 8000a7a:	f004 faed 	bl	8005058 <HAL_UART_Transmit>
	return 1;
 8000a7e:	2301      	movs	r3, #1
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	bd80      	pop	{r7, pc}
 8000a84:	24000424 	.word	0x24000424
 8000a88:	24000a10 	.word	0x24000a10
 8000a8c:	2400042a 	.word	0x2400042a

08000a90 <U_Blox_Calculate_Checksum>:
uint16_t U_Blox_Calculate_Checksum(U_Blox_frame_low_layer *U_blox_Frame) {
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
	uint8_t ck_a = 0;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	75fb      	strb	r3, [r7, #23]
	uint8_t ck_b = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	75bb      	strb	r3, [r7, #22]
	uint8_t *data = (uint8_t*) &U_blox_Frame->message_class;
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	3302      	adds	r3, #2
 8000aa4:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	e00e      	b.n	8000aca <U_Blox_Calculate_Checksum+0x3a>
		ck_a = ck_a + *data;
 8000aac:	693b      	ldr	r3, [r7, #16]
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	4413      	add	r3, r2
 8000ab4:	75fb      	strb	r3, [r7, #23]
		ck_b = ck_b + ck_a;
 8000ab6:	7dba      	ldrb	r2, [r7, #22]
 8000ab8:	7dfb      	ldrb	r3, [r7, #23]
 8000aba:	4413      	add	r3, r2
 8000abc:	75bb      	strb	r3, [r7, #22]
		data++;
 8000abe:	693b      	ldr	r3, [r7, #16]
 8000ac0:	3301      	adds	r3, #1
 8000ac2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3301      	adds	r3, #1
 8000ac8:	60fb      	str	r3, [r7, #12]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	889b      	ldrh	r3, [r3, #4]
 8000ace:	3303      	adds	r3, #3
 8000ad0:	68fa      	ldr	r2, [r7, #12]
 8000ad2:	429a      	cmp	r2, r3
 8000ad4:	ddea      	ble.n	8000aac <U_Blox_Calculate_Checksum+0x1c>
	}
	return (uint16_t) (ck_a + (uint16_t) ((uint16_t) ck_b << 8));
 8000ad6:	7dfb      	ldrb	r3, [r7, #23]
 8000ad8:	b29a      	uxth	r2, r3
 8000ada:	7dbb      	ldrb	r3, [r7, #22]
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	021b      	lsls	r3, r3, #8
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	4413      	add	r3, r2
 8000ae4:	b29b      	uxth	r3, r3
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	371c      	adds	r7, #28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af0:	4770      	bx	lr
	...

08000af4 <U_Blox_Receive_Data>:
void U_Blox_Receive_Data(uint8_t data) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	4603      	mov	r3, r0
 8000afc:	71fb      	strb	r3, [r7, #7]
	if (U_Blox_Rx.buffer_index > 498) {
 8000afe:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <U_Blox_Receive_Data+0x50>)
 8000b00:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000b04:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 8000b08:	d907      	bls.n	8000b1a <U_Blox_Receive_Data+0x26>
		U_Blox_Rx.buffer_index = 0;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <U_Blox_Receive_Data+0x50>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		RxBufferMove(400);
 8000b12:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000b16:	f000 f86d 	bl	8000bf4 <RxBufferMove>
	}
	U_Blox_Rx.Buffer[U_Blox_Rx.buffer_index] = data;
 8000b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8000b44 <U_Blox_Receive_Data+0x50>)
 8000b1c:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000b20:	461a      	mov	r2, r3
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <U_Blox_Receive_Data+0x50>)
 8000b24:	4413      	add	r3, r2
 8000b26:	79fa      	ldrb	r2, [r7, #7]
 8000b28:	705a      	strb	r2, [r3, #1]
	U_Blox_Rx.buffer_index++;
 8000b2a:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <U_Blox_Receive_Data+0x50>)
 8000b2c:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000b30:	3301      	adds	r3, #1
 8000b32:	b29a      	uxth	r2, r3
 8000b34:	4b03      	ldr	r3, [pc, #12]	@ (8000b44 <U_Blox_Receive_Data+0x50>)
 8000b36:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
}
 8000b3a:	bf00      	nop
 8000b3c:	3708      	adds	r7, #8
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	24000620 	.word	0x24000620

08000b48 <U_Blox_Is_Packet_Ready>:

uint8_t U_Blox_Is_Packet_Ready() {
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
	return (U_Blox_Rx.Sm == SM_RX_PROCESS);
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <U_Blox_Is_Packet_Ready+0x1c>)
 8000b4e:	781b      	ldrb	r3, [r3, #0]
 8000b50:	2b01      	cmp	r3, #1
 8000b52:	bf0c      	ite	eq
 8000b54:	2301      	moveq	r3, #1
 8000b56:	2300      	movne	r3, #0
 8000b58:	b2db      	uxtb	r3, r3
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	24000620 	.word	0x24000620

08000b68 <U_Blox_Send_Data>:
	if (U_Blox_Tx.Sm == SM_TX_PREPARE) {
		U_Blox_Tx.buffer_index = 0;
		U_Blox_Tx.Sm = SM_TX_SEND;
	}
}
void U_Blox_Send_Data(uint8_t data) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &data, 1, 10);
 8000b72:	1df9      	adds	r1, r7, #7
 8000b74:	230a      	movs	r3, #10
 8000b76:	2201      	movs	r2, #1
 8000b78:	4803      	ldr	r0, [pc, #12]	@ (8000b88 <U_Blox_Send_Data+0x20>)
 8000b7a:	f004 fa6d 	bl	8005058 <HAL_UART_Transmit>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	24000a10 	.word	0x24000a10

08000b8c <U_Blox_Get_Package>:
void U_Blox_Get_Package(U_Blox_frame_high_layer *U_Blox_frame_high_layer_t) {
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t =
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <U_Blox_Get_Package+0x60>)
 8000b96:	60bb      	str	r3, [r7, #8]
			(U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;

	U_Blox_frame_high_layer_t->length = U_Blox_frame_low_layer_t->length;
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	889a      	ldrh	r2, [r3, #4]
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	805a      	strh	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
			U_Blox_frame_low_layer_t->message_class;
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	789a      	ldrb	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_high_layer_t->message_id =
			U_Blox_frame_low_layer_t->message_id;
 8000ba8:	68bb      	ldr	r3, [r7, #8]
 8000baa:	78da      	ldrb	r2, [r3, #3]
	U_Blox_frame_high_layer_t->message_id =
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 500; i++) {
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	e00d      	b.n	8000bd2 <U_Blox_Get_Package+0x46>
		U_Blox_frame_high_layer_t->payload.data[i] =
				U_Blox_frame_low_layer_t->payload[i];
 8000bb6:	68ba      	ldr	r2, [r7, #8]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	4413      	add	r3, r2
 8000bbc:	3306      	adds	r3, #6
 8000bbe:	7819      	ldrb	r1, [r3, #0]
		U_Blox_frame_high_layer_t->payload.data[i] =
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	3304      	adds	r3, #4
 8000bc8:	460a      	mov	r2, r1
 8000bca:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 500; i++) {
 8000bcc:	68fb      	ldr	r3, [r7, #12]
 8000bce:	3301      	adds	r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000bd8:	dbed      	blt.n	8000bb6 <U_Blox_Get_Package+0x2a>
	}
	U_Blox_Rx.Sm = SM_RX_IDLE;
 8000bda:	4b05      	ldr	r3, [pc, #20]	@ (8000bf0 <U_Blox_Get_Package+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	701a      	strb	r2, [r3, #0]
}
 8000be0:	bf00      	nop
 8000be2:	3714      	adds	r7, #20
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	24000621 	.word	0x24000621
 8000bf0:	24000620 	.word	0x24000620

08000bf4 <RxBufferMove>:
void RxBufferMove(uint16_t move) {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	80fb      	strh	r3, [r7, #6]
	int tempMove = move;
 8000bfe:	88fb      	ldrh	r3, [r7, #6]
 8000c00:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
	while (move < U_Blox_Rx.buffer_index) {
 8000c06:	e00d      	b.n	8000c24 <RxBufferMove+0x30>
		U_Blox_Rx.Buffer[index++] = U_Blox_Rx.Buffer[move++];
 8000c08:	88fb      	ldrh	r3, [r7, #6]
 8000c0a:	1c5a      	adds	r2, r3, #1
 8000c0c:	80fa      	strh	r2, [r7, #6]
 8000c0e:	4619      	mov	r1, r3
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	60fa      	str	r2, [r7, #12]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	@ (8000c50 <RxBufferMove+0x5c>)
 8000c18:	440a      	add	r2, r1
 8000c1a:	7851      	ldrb	r1, [r2, #1]
 8000c1c:	4a0c      	ldr	r2, [pc, #48]	@ (8000c50 <RxBufferMove+0x5c>)
 8000c1e:	4413      	add	r3, r2
 8000c20:	460a      	mov	r2, r1
 8000c22:	705a      	strb	r2, [r3, #1]
	while (move < U_Blox_Rx.buffer_index) {
 8000c24:	4b0a      	ldr	r3, [pc, #40]	@ (8000c50 <RxBufferMove+0x5c>)
 8000c26:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000c2a:	88fa      	ldrh	r2, [r7, #6]
 8000c2c:	429a      	cmp	r2, r3
 8000c2e:	d3eb      	bcc.n	8000c08 <RxBufferMove+0x14>
	}
	U_Blox_Rx.buffer_index -= tempMove;
 8000c30:	4b07      	ldr	r3, [pc, #28]	@ (8000c50 <RxBufferMove+0x5c>)
 8000c32:	f8b3 21f6 	ldrh.w	r2, [r3, #502]	@ 0x1f6
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	b29a      	uxth	r2, r3
 8000c3e:	4b04      	ldr	r3, [pc, #16]	@ (8000c50 <RxBufferMove+0x5c>)
 8000c40:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	24000620 	.word	0x24000620

08000c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c58:	f000 f94e 	bl	8000ef8 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c5c:	f000 fb1e 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c60:	f000 f826 	bl	8000cb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c64:	f000 f8de 	bl	8000e24 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c68:	f000 f890 	bl	8000d8c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &data,1);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	490b      	ldr	r1, [pc, #44]	@ (8000c9c <main+0x48>)
 8000c70:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <main+0x4c>)
 8000c72:	f004 fa7f 	bl	8005174 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 8000c76:	2201      	movs	r2, #1
 8000c78:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c7c:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <main+0x50>)
 8000c7e:	f001 fc1f 	bl	80024c0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	2102      	movs	r1, #2
 8000c86:	4808      	ldr	r0, [pc, #32]	@ (8000ca8 <main+0x54>)
 8000c88:	f001 fc1a 	bl	80024c0 <HAL_GPIO_WritePin>
  GNSS_Tanimla(&GNSS_t);
 8000c8c:	4807      	ldr	r0, [pc, #28]	@ (8000cac <main+0x58>)
 8000c8e:	f7ff fcb5 	bl	80005fc <GNSS_Tanimla>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    GNSS_Gorev(&GNSS_t);
 8000c92:	4806      	ldr	r0, [pc, #24]	@ (8000cac <main+0x58>)
 8000c94:	f7ff fd18 	bl	80006c8 <GNSS_Gorev>
 8000c98:	e7fb      	b.n	8000c92 <main+0x3e>
 8000c9a:	bf00      	nop
 8000c9c:	24000ac0 	.word	0x24000ac0
 8000ca0:	24000a10 	.word	0x24000a10
 8000ca4:	58020400 	.word	0x58020400
 8000ca8:	58021000 	.word	0x58021000
 8000cac:	24000aa4 	.word	0x24000aa4

08000cb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b09c      	sub	sp, #112	@ 0x70
 8000cb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cba:	224c      	movs	r2, #76	@ 0x4c
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f006 feb6 	bl	8007a30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2220      	movs	r2, #32
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4618      	mov	r0, r3
 8000ccc:	f006 feb0 	bl	8007a30 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000cd0:	2002      	movs	r0, #2
 8000cd2:	f001 fc0f 	bl	80024f4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	603b      	str	r3, [r7, #0]
 8000cda:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <SystemClock_Config+0xd8>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4a2a      	ldr	r2, [pc, #168]	@ (8000d88 <SystemClock_Config+0xd8>)
 8000ce0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000ce4:	6193      	str	r3, [r2, #24]
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <SystemClock_Config+0xd8>)
 8000ce8:	699b      	ldr	r3, [r3, #24]
 8000cea:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cee:	603b      	str	r3, [r7, #0]
 8000cf0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cf2:	bf00      	nop
 8000cf4:	4b24      	ldr	r3, [pc, #144]	@ (8000d88 <SystemClock_Config+0xd8>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cfc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d00:	d1f8      	bne.n	8000cf4 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d02:	2301      	movs	r3, #1
 8000d04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000d06:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d10:	2302      	movs	r3, #2
 8000d12:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000d18:	2322      	movs	r3, #34	@ 0x22
 8000d1a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000d20:	2302      	movs	r3, #2
 8000d22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d24:	2302      	movs	r3, #2
 8000d26:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d28:	230c      	movs	r3, #12
 8000d2a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000d30:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f001 fc14 	bl	8002568 <HAL_RCC_OscConfig>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d46:	f000 f903 	bl	8000f50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d4a:	233f      	movs	r3, #63	@ 0x3f
 8000d4c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d4e:	2303      	movs	r3, #3
 8000d50:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d5a:	2340      	movs	r3, #64	@ 0x40
 8000d5c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d5e:	2340      	movs	r3, #64	@ 0x40
 8000d60:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d66:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d68:	2340      	movs	r3, #64	@ 0x40
 8000d6a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2103      	movs	r1, #3
 8000d70:	4618      	mov	r0, r3
 8000d72:	f001 ffd3 	bl	8002d1c <HAL_RCC_ClockConfig>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d7c:	f000 f8e8 	bl	8000f50 <Error_Handler>
  }
}
 8000d80:	bf00      	nop
 8000d82:	3770      	adds	r7, #112	@ 0x70
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	58024800 	.word	0x58024800

08000d8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d90:	4b22      	ldr	r3, [pc, #136]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000d92:	4a23      	ldr	r2, [pc, #140]	@ (8000e20 <MX_USART3_UART_Init+0x94>)
 8000d94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d96:	4b21      	ldr	r3, [pc, #132]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000d98:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000da4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000daa:	4b1c      	ldr	r3, [pc, #112]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dac:	2200      	movs	r2, #0
 8000dae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000db0:	4b1a      	ldr	r3, [pc, #104]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000db2:	220c      	movs	r2, #12
 8000db4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000db6:	4b19      	ldr	r3, [pc, #100]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dbc:	4b17      	ldr	r3, [pc, #92]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dc2:	4b16      	ldr	r3, [pc, #88]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000dc8:	4b14      	ldr	r3, [pc, #80]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dce:	4b13      	ldr	r3, [pc, #76]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dd4:	4811      	ldr	r0, [pc, #68]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dd6:	f004 f8ef 	bl	8004fb8 <HAL_UART_Init>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d001      	beq.n	8000de4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000de0:	f000 f8b6 	bl	8000f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000de4:	2100      	movs	r1, #0
 8000de6:	480d      	ldr	r0, [pc, #52]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000de8:	f006 fd57 	bl	800789a <HAL_UARTEx_SetTxFifoThreshold>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000df2:	f000 f8ad 	bl	8000f50 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000df6:	2100      	movs	r1, #0
 8000df8:	4808      	ldr	r0, [pc, #32]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000dfa:	f006 fd8c 	bl	8007916 <HAL_UARTEx_SetRxFifoThreshold>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000e04:	f000 f8a4 	bl	8000f50 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000e08:	4804      	ldr	r0, [pc, #16]	@ (8000e1c <MX_USART3_UART_Init+0x90>)
 8000e0a:	f006 fd0d 	bl	8007828 <HAL_UARTEx_DisableFifoMode>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000e14:	f000 f89c 	bl	8000f50 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e18:	bf00      	nop
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24000a10 	.word	0x24000a10
 8000e20:	40004800 	.word	0x40004800

08000e24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b088      	sub	sp, #32
 8000e28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e2a:	f107 030c 	add.w	r3, r7, #12
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
 8000e36:	60da      	str	r2, [r3, #12]
 8000e38:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e40:	4a2a      	ldr	r2, [pc, #168]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e4a:	4b28      	ldr	r3, [pc, #160]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e54:	60bb      	str	r3, [r7, #8]
 8000e56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e58:	4b24      	ldr	r3, [pc, #144]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e5e:	4a23      	ldr	r2, [pc, #140]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e68:	4b20      	ldr	r3, [pc, #128]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e6e:	f003 0302 	and.w	r3, r3, #2
 8000e72:	607b      	str	r3, [r7, #4]
 8000e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e76:	4b1d      	ldr	r3, [pc, #116]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e7e:	f043 0310 	orr.w	r3, r3, #16
 8000e82:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e86:	4b19      	ldr	r3, [pc, #100]	@ (8000eec <MX_GPIO_Init+0xc8>)
 8000e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	603b      	str	r3, [r7, #0]
 8000e92:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e9a:	4815      	ldr	r0, [pc, #84]	@ (8000ef0 <MX_GPIO_Init+0xcc>)
 8000e9c:	f001 fb10 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	2102      	movs	r1, #2
 8000ea4:	4813      	ldr	r0, [pc, #76]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000ea6:	f001 fb0b 	bl	80024c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000eaa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000eae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480b      	ldr	r0, [pc, #44]	@ (8000ef0 <MX_GPIO_Init+0xcc>)
 8000ec4:	f001 f954 	bl	8002170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed8:	f107 030c 	add.w	r3, r7, #12
 8000edc:	4619      	mov	r1, r3
 8000ede:	4805      	ldr	r0, [pc, #20]	@ (8000ef4 <MX_GPIO_Init+0xd0>)
 8000ee0:	f001 f946 	bl	8002170 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3720      	adds	r7, #32
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58020400 	.word	0x58020400
 8000ef4:	58021000 	.word	0x58021000

08000ef8 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000efe:	463b      	mov	r3, r7
 8000f00:	2200      	movs	r2, #0
 8000f02:	601a      	str	r2, [r3, #0]
 8000f04:	605a      	str	r2, [r3, #4]
 8000f06:	609a      	str	r2, [r3, #8]
 8000f08:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f0a:	f000 fb55 	bl	80015b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f1a:	231f      	movs	r3, #31
 8000f1c:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f1e:	2387      	movs	r3, #135	@ 0x87
 8000f20:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f22:	2300      	movs	r3, #0
 8000f24:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f26:	2300      	movs	r3, #0
 8000f28:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f36:	2300      	movs	r3, #0
 8000f38:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f3a:	463b      	mov	r3, r7
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	f000 fb73 	bl	8001628 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f42:	2004      	movs	r0, #4
 8000f44:	f000 fb50 	bl	80015e8 <HAL_MPU_Enable>

}
 8000f48:	bf00      	nop
 8000f4a:	3710      	adds	r7, #16
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f54:	b672      	cpsid	i
}
 8000f56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <Error_Handler+0x8>

08000f5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f62:	4b0a      	ldr	r3, [pc, #40]	@ (8000f8c <HAL_MspInit+0x30>)
 8000f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f68:	4a08      	ldr	r2, [pc, #32]	@ (8000f8c <HAL_MspInit+0x30>)
 8000f6a:	f043 0302 	orr.w	r3, r3, #2
 8000f6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f72:	4b06      	ldr	r3, [pc, #24]	@ (8000f8c <HAL_MspInit+0x30>)
 8000f74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f78:	f003 0302 	and.w	r3, r3, #2
 8000f7c:	607b      	str	r3, [r7, #4]
 8000f7e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f80:	bf00      	nop
 8000f82:	370c      	adds	r7, #12
 8000f84:	46bd      	mov	sp, r7
 8000f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8a:	4770      	bx	lr
 8000f8c:	58024400 	.word	0x58024400

08000f90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b0b8      	sub	sp, #224	@ 0xe0
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f98:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
 8000fa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fa8:	f107 0310 	add.w	r3, r7, #16
 8000fac:	22b8      	movs	r2, #184	@ 0xb8
 8000fae:	2100      	movs	r1, #0
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f006 fd3d 	bl	8007a30 <memset>
  if(huart->Instance==USART3)
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a2b      	ldr	r2, [pc, #172]	@ (8001068 <HAL_UART_MspInit+0xd8>)
 8000fbc:	4293      	cmp	r3, r2
 8000fbe:	d14e      	bne.n	800105e <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fc0:	f04f 0202 	mov.w	r2, #2
 8000fc4:	f04f 0300 	mov.w	r3, #0
 8000fc8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f002 fa2c 	bl	8003434 <HAL_RCCEx_PeriphCLKConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fe2:	f7ff ffb5 	bl	8000f50 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fe6:	4b21      	ldr	r3, [pc, #132]	@ (800106c <HAL_UART_MspInit+0xdc>)
 8000fe8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fec:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <HAL_UART_MspInit+0xdc>)
 8000fee:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000ff2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800106c <HAL_UART_MspInit+0xdc>)
 8000ff8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ffc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001004:	4b19      	ldr	r3, [pc, #100]	@ (800106c <HAL_UART_MspInit+0xdc>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	4a18      	ldr	r2, [pc, #96]	@ (800106c <HAL_UART_MspInit+0xdc>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001014:	4b15      	ldr	r3, [pc, #84]	@ (800106c <HAL_UART_MspInit+0xdc>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001022:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001026:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800103c:	2307      	movs	r3, #7
 800103e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001046:	4619      	mov	r1, r3
 8001048:	4809      	ldr	r0, [pc, #36]	@ (8001070 <HAL_UART_MspInit+0xe0>)
 800104a:	f001 f891 	bl	8002170 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2103      	movs	r1, #3
 8001052:	2027      	movs	r0, #39	@ 0x27
 8001054:	f000 fa7b 	bl	800154e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001058:	2027      	movs	r0, #39	@ 0x27
 800105a:	f000 fa92 	bl	8001582 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 800105e:	bf00      	nop
 8001060:	37e0      	adds	r7, #224	@ 0xe0
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40004800 	.word	0x40004800
 800106c:	58024400 	.word	0x58024400
 8001070:	58020400 	.word	0x58020400

08001074 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <NMI_Handler+0x4>

0800107c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <HardFault_Handler+0x4>

08001084 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <MemManage_Handler+0x4>

0800108c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001090:	bf00      	nop
 8001092:	e7fd      	b.n	8001090 <BusFault_Handler+0x4>

08001094 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <UsageFault_Handler+0x4>

0800109c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010a0:	bf00      	nop
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010aa:	b480      	push	{r7}
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010ae:	bf00      	nop
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
	...

080010c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010cc:	4807      	ldr	r0, [pc, #28]	@ (80010ec <USART3_IRQHandler+0x24>)
 80010ce:	f004 f89d 	bl	800520c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &data,1);
 80010d2:	2201      	movs	r2, #1
 80010d4:	4906      	ldr	r1, [pc, #24]	@ (80010f0 <USART3_IRQHandler+0x28>)
 80010d6:	4805      	ldr	r0, [pc, #20]	@ (80010ec <USART3_IRQHandler+0x24>)
 80010d8:	f004 f84c 	bl	8005174 <HAL_UART_Receive_IT>
  U_Blox_Receive_Data(data);
 80010dc:	4b04      	ldr	r3, [pc, #16]	@ (80010f0 <USART3_IRQHandler+0x28>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fd07 	bl	8000af4 <U_Blox_Receive_Data>
  /* USER CODE END USART3_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	24000a10 	.word	0x24000a10
 80010f0:	24000ac0 	.word	0x24000ac0

080010f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010f8:	4b32      	ldr	r3, [pc, #200]	@ (80011c4 <SystemInit+0xd0>)
 80010fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010fe:	4a31      	ldr	r2, [pc, #196]	@ (80011c4 <SystemInit+0xd0>)
 8001100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001108:	4b2f      	ldr	r3, [pc, #188]	@ (80011c8 <SystemInit+0xd4>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 030f 	and.w	r3, r3, #15
 8001110:	2b06      	cmp	r3, #6
 8001112:	d807      	bhi.n	8001124 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001114:	4b2c      	ldr	r3, [pc, #176]	@ (80011c8 <SystemInit+0xd4>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f023 030f 	bic.w	r3, r3, #15
 800111c:	4a2a      	ldr	r2, [pc, #168]	@ (80011c8 <SystemInit+0xd4>)
 800111e:	f043 0307 	orr.w	r3, r3, #7
 8001122:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001124:	4b29      	ldr	r3, [pc, #164]	@ (80011cc <SystemInit+0xd8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a28      	ldr	r2, [pc, #160]	@ (80011cc <SystemInit+0xd8>)
 800112a:	f043 0301 	orr.w	r3, r3, #1
 800112e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001130:	4b26      	ldr	r3, [pc, #152]	@ (80011cc <SystemInit+0xd8>)
 8001132:	2200      	movs	r2, #0
 8001134:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001136:	4b25      	ldr	r3, [pc, #148]	@ (80011cc <SystemInit+0xd8>)
 8001138:	681a      	ldr	r2, [r3, #0]
 800113a:	4924      	ldr	r1, [pc, #144]	@ (80011cc <SystemInit+0xd8>)
 800113c:	4b24      	ldr	r3, [pc, #144]	@ (80011d0 <SystemInit+0xdc>)
 800113e:	4013      	ands	r3, r2
 8001140:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001142:	4b21      	ldr	r3, [pc, #132]	@ (80011c8 <SystemInit+0xd4>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d007      	beq.n	800115e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800114e:	4b1e      	ldr	r3, [pc, #120]	@ (80011c8 <SystemInit+0xd4>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f023 030f 	bic.w	r3, r3, #15
 8001156:	4a1c      	ldr	r2, [pc, #112]	@ (80011c8 <SystemInit+0xd4>)
 8001158:	f043 0307 	orr.w	r3, r3, #7
 800115c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800115e:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <SystemInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001164:	4b19      	ldr	r3, [pc, #100]	@ (80011cc <SystemInit+0xd8>)
 8001166:	2200      	movs	r2, #0
 8001168:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800116a:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <SystemInit+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <SystemInit+0xd8>)
 8001172:	4a18      	ldr	r2, [pc, #96]	@ (80011d4 <SystemInit+0xe0>)
 8001174:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001176:	4b15      	ldr	r3, [pc, #84]	@ (80011cc <SystemInit+0xd8>)
 8001178:	4a17      	ldr	r2, [pc, #92]	@ (80011d8 <SystemInit+0xe4>)
 800117a:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800117c:	4b13      	ldr	r3, [pc, #76]	@ (80011cc <SystemInit+0xd8>)
 800117e:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <SystemInit+0xe8>)
 8001180:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001182:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <SystemInit+0xd8>)
 8001184:	2200      	movs	r2, #0
 8001186:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001188:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <SystemInit+0xd8>)
 800118a:	4a14      	ldr	r2, [pc, #80]	@ (80011dc <SystemInit+0xe8>)
 800118c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800118e:	4b0f      	ldr	r3, [pc, #60]	@ (80011cc <SystemInit+0xd8>)
 8001190:	2200      	movs	r2, #0
 8001192:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001194:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <SystemInit+0xd8>)
 8001196:	4a11      	ldr	r2, [pc, #68]	@ (80011dc <SystemInit+0xe8>)
 8001198:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800119a:	4b0c      	ldr	r3, [pc, #48]	@ (80011cc <SystemInit+0xd8>)
 800119c:	2200      	movs	r2, #0
 800119e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	@ (80011cc <SystemInit+0xd8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a09      	ldr	r2, [pc, #36]	@ (80011cc <SystemInit+0xd8>)
 80011a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80011aa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80011ac:	4b07      	ldr	r3, [pc, #28]	@ (80011cc <SystemInit+0xd8>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80011b2:	4b0b      	ldr	r3, [pc, #44]	@ (80011e0 <SystemInit+0xec>)
 80011b4:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80011b8:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80011ba:	bf00      	nop
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	e000ed00 	.word	0xe000ed00
 80011c8:	52002000 	.word	0x52002000
 80011cc:	58024400 	.word	0x58024400
 80011d0:	eaf6ed7f 	.word	0xeaf6ed7f
 80011d4:	02020200 	.word	0x02020200
 80011d8:	01ff0000 	.word	0x01ff0000
 80011dc:	01010280 	.word	0x01010280
 80011e0:	52004000 	.word	0x52004000

080011e4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800121c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011e8:	f7ff ff84 	bl	80010f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ec:	480c      	ldr	r0, [pc, #48]	@ (8001220 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ee:	490d      	ldr	r1, [pc, #52]	@ (8001224 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001228 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011f4:	e002      	b.n	80011fc <LoopCopyDataInit>

080011f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011fa:	3304      	adds	r3, #4

080011fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001200:	d3f9      	bcc.n	80011f6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001202:	4a0a      	ldr	r2, [pc, #40]	@ (800122c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001204:	4c0a      	ldr	r4, [pc, #40]	@ (8001230 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001206:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001208:	e001      	b.n	800120e <LoopFillZerobss>

0800120a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800120a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800120c:	3204      	adds	r2, #4

0800120e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800120e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001210:	d3fb      	bcc.n	800120a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001212:	f006 fc15 	bl	8007a40 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001216:	f7ff fd1d 	bl	8000c54 <main>
  bx  lr
 800121a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800121c:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001220:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001224:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001228:	08007b04 	.word	0x08007b04
  ldr r2, =_sbss
 800122c:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001230:	24000acc 	.word	0x24000acc

08001234 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001234:	e7fe      	b.n	8001234 <ADC3_IRQHandler>
	...

08001238 <SystickGetMs>:
#include "stm32h7xx.h"

static uint32_t ms;

 uint32_t SystickGetMs()
 {
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
   return ms;
 800123c:	4b03      	ldr	r3, [pc, #12]	@ (800124c <SystickGetMs+0x14>)
 800123e:	681b      	ldr	r3, [r3, #0]
 }
 8001240:	4618      	mov	r0, r3
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr
 800124a:	bf00      	nop
 800124c:	24000ac4 	.word	0x24000ac4

08001250 <SystickCheckMs>:


 uint8_t SystickCheckMs(uint32_t reference,uint32_t time_passed)
 {
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
   if((ms-reference)>=time_passed)
 800125a:	4b08      	ldr	r3, [pc, #32]	@ (800127c <SystickCheckMs+0x2c>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	683a      	ldr	r2, [r7, #0]
 8001264:	429a      	cmp	r2, r3
 8001266:	d801      	bhi.n	800126c <SystickCheckMs+0x1c>
	   return 1;
 8001268:	2301      	movs	r3, #1
 800126a:	e000      	b.n	800126e <SystickCheckMs+0x1e>
   else
	  return 0;
 800126c:	2300      	movs	r3, #0
 }
 800126e:	4618      	mov	r0, r3
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	24000ac4 	.word	0x24000ac4

08001280 <SysTick_Handler>:


 void SysTick_Handler(void)
 {
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN SysTick_IRQn 0 */
    ms++;
 8001284:	4b04      	ldr	r3, [pc, #16]	@ (8001298 <SysTick_Handler+0x18>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	3301      	adds	r3, #1
 800128a:	4a03      	ldr	r2, [pc, #12]	@ (8001298 <SysTick_Handler+0x18>)
 800128c:	6013      	str	r3, [r2, #0]


   /* USER CODE BEGIN SysTick_IRQn 1 */

   /* USER CODE END SysTick_IRQn 1 */
 }
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	24000ac4 	.word	0x24000ac4

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012a2:	2003      	movs	r0, #3
 80012a4:	f000 f948 	bl	8001538 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012a8:	f001 feee 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 80012ac:	4602      	mov	r2, r0
 80012ae:	4b15      	ldr	r3, [pc, #84]	@ (8001304 <HAL_Init+0x68>)
 80012b0:	699b      	ldr	r3, [r3, #24]
 80012b2:	0a1b      	lsrs	r3, r3, #8
 80012b4:	f003 030f 	and.w	r3, r3, #15
 80012b8:	4913      	ldr	r1, [pc, #76]	@ (8001308 <HAL_Init+0x6c>)
 80012ba:	5ccb      	ldrb	r3, [r1, r3]
 80012bc:	f003 031f 	and.w	r3, r3, #31
 80012c0:	fa22 f303 	lsr.w	r3, r2, r3
 80012c4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012c6:	4b0f      	ldr	r3, [pc, #60]	@ (8001304 <HAL_Init+0x68>)
 80012c8:	699b      	ldr	r3, [r3, #24]
 80012ca:	f003 030f 	and.w	r3, r3, #15
 80012ce:	4a0e      	ldr	r2, [pc, #56]	@ (8001308 <HAL_Init+0x6c>)
 80012d0:	5cd3      	ldrb	r3, [r2, r3]
 80012d2:	f003 031f 	and.w	r3, r3, #31
 80012d6:	687a      	ldr	r2, [r7, #4]
 80012d8:	fa22 f303 	lsr.w	r3, r2, r3
 80012dc:	4a0b      	ldr	r2, [pc, #44]	@ (800130c <HAL_Init+0x70>)
 80012de:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012e0:	4a0b      	ldr	r2, [pc, #44]	@ (8001310 <HAL_Init+0x74>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012e6:	200f      	movs	r0, #15
 80012e8:	f000 f814 	bl	8001314 <HAL_InitTick>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e002      	b.n	80012fc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012f6:	f7ff fe31 	bl	8000f5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012fa:	2300      	movs	r3, #0
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	3708      	adds	r7, #8
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	58024400 	.word	0x58024400
 8001308:	08007abc 	.word	0x08007abc
 800130c:	24000004 	.word	0x24000004
 8001310:	24000000 	.word	0x24000000

08001314 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800131c:	4b15      	ldr	r3, [pc, #84]	@ (8001374 <HAL_InitTick+0x60>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d101      	bne.n	8001328 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	e021      	b.n	800136c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001328:	4b13      	ldr	r3, [pc, #76]	@ (8001378 <HAL_InitTick+0x64>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4b11      	ldr	r3, [pc, #68]	@ (8001374 <HAL_InitTick+0x60>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4619      	mov	r1, r3
 8001332:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001336:	fbb3 f3f1 	udiv	r3, r3, r1
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	4618      	mov	r0, r3
 8001340:	f000 f92d 	bl	800159e <HAL_SYSTICK_Config>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800134a:	2301      	movs	r3, #1
 800134c:	e00e      	b.n	800136c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b0f      	cmp	r3, #15
 8001352:	d80a      	bhi.n	800136a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001354:	2200      	movs	r2, #0
 8001356:	6879      	ldr	r1, [r7, #4]
 8001358:	f04f 30ff 	mov.w	r0, #4294967295
 800135c:	f000 f8f7 	bl	800154e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001360:	4a06      	ldr	r2, [pc, #24]	@ (800137c <HAL_InitTick+0x68>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001366:	2300      	movs	r3, #0
 8001368:	e000      	b.n	800136c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800136a:	2301      	movs	r3, #1
}
 800136c:	4618      	mov	r0, r3
 800136e:	3708      	adds	r7, #8
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2400000c 	.word	0x2400000c
 8001378:	24000000 	.word	0x24000000
 800137c:	24000008 	.word	0x24000008

08001380 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  return uwTick;
 8001384:	4b03      	ldr	r3, [pc, #12]	@ (8001394 <HAL_GetTick+0x14>)
 8001386:	681b      	ldr	r3, [r3, #0]
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	24000ac8 	.word	0x24000ac8

08001398 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f003 0307 	and.w	r3, r3, #7
 80013a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013a8:	4b0b      	ldr	r3, [pc, #44]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x40>)
 80013aa:	68db      	ldr	r3, [r3, #12]
 80013ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013b4:	4013      	ands	r3, r2
 80013b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <__NVIC_SetPriorityGrouping+0x44>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013c6:	4a04      	ldr	r2, [pc, #16]	@ (80013d8 <__NVIC_SetPriorityGrouping+0x40>)
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	60d3      	str	r3, [r2, #12]
}
 80013cc:	bf00      	nop
 80013ce:	3714      	adds	r7, #20
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000ed00 	.word	0xe000ed00
 80013dc:	05fa0000 	.word	0x05fa0000

080013e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013e4:	4b04      	ldr	r3, [pc, #16]	@ (80013f8 <__NVIC_GetPriorityGrouping+0x18>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	0a1b      	lsrs	r3, r3, #8
 80013ea:	f003 0307 	and.w	r3, r3, #7
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000ed00 	.word	0xe000ed00

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001406:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800140a:	2b00      	cmp	r3, #0
 800140c:	db0b      	blt.n	8001426 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800140e:	88fb      	ldrh	r3, [r7, #6]
 8001410:	f003 021f 	and.w	r2, r3, #31
 8001414:	4907      	ldr	r1, [pc, #28]	@ (8001434 <__NVIC_EnableIRQ+0x38>)
 8001416:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800141a:	095b      	lsrs	r3, r3, #5
 800141c:	2001      	movs	r0, #1
 800141e:	fa00 f202 	lsl.w	r2, r0, r2
 8001422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001426:	bf00      	nop
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	e000e100 	.word	0xe000e100

08001438 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	6039      	str	r1, [r7, #0]
 8001442:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001444:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db0a      	blt.n	8001462 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	b2da      	uxtb	r2, r3
 8001450:	490c      	ldr	r1, [pc, #48]	@ (8001484 <__NVIC_SetPriority+0x4c>)
 8001452:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001456:	0112      	lsls	r2, r2, #4
 8001458:	b2d2      	uxtb	r2, r2
 800145a:	440b      	add	r3, r1
 800145c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001460:	e00a      	b.n	8001478 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	b2da      	uxtb	r2, r3
 8001466:	4908      	ldr	r1, [pc, #32]	@ (8001488 <__NVIC_SetPriority+0x50>)
 8001468:	88fb      	ldrh	r3, [r7, #6]
 800146a:	f003 030f 	and.w	r3, r3, #15
 800146e:	3b04      	subs	r3, #4
 8001470:	0112      	lsls	r2, r2, #4
 8001472:	b2d2      	uxtb	r2, r2
 8001474:	440b      	add	r3, r1
 8001476:	761a      	strb	r2, [r3, #24]
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000e100 	.word	0xe000e100
 8001488:	e000ed00 	.word	0xe000ed00

0800148c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	60f8      	str	r0, [r7, #12]
 8001494:	60b9      	str	r1, [r7, #8]
 8001496:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014a0:	69fb      	ldr	r3, [r7, #28]
 80014a2:	f1c3 0307 	rsb	r3, r3, #7
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	bf28      	it	cs
 80014aa:	2304      	movcs	r3, #4
 80014ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ae:	69fb      	ldr	r3, [r7, #28]
 80014b0:	3304      	adds	r3, #4
 80014b2:	2b06      	cmp	r3, #6
 80014b4:	d902      	bls.n	80014bc <NVIC_EncodePriority+0x30>
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	3b03      	subs	r3, #3
 80014ba:	e000      	b.n	80014be <NVIC_EncodePriority+0x32>
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	f04f 32ff 	mov.w	r2, #4294967295
 80014c4:	69bb      	ldr	r3, [r7, #24]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43da      	mvns	r2, r3
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	401a      	ands	r2, r3
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014d4:	f04f 31ff 	mov.w	r1, #4294967295
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	fa01 f303 	lsl.w	r3, r1, r3
 80014de:	43d9      	mvns	r1, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e4:	4313      	orrs	r3, r2
         );
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3724      	adds	r7, #36	@ 0x24
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	3b01      	subs	r3, #1
 8001500:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001504:	d301      	bcc.n	800150a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001506:	2301      	movs	r3, #1
 8001508:	e00f      	b.n	800152a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150a:	4a0a      	ldr	r2, [pc, #40]	@ (8001534 <SysTick_Config+0x40>)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001512:	210f      	movs	r1, #15
 8001514:	f04f 30ff 	mov.w	r0, #4294967295
 8001518:	f7ff ff8e 	bl	8001438 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800151c:	4b05      	ldr	r3, [pc, #20]	@ (8001534 <SysTick_Config+0x40>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001522:	4b04      	ldr	r3, [pc, #16]	@ (8001534 <SysTick_Config+0x40>)
 8001524:	2207      	movs	r2, #7
 8001526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001528:	2300      	movs	r3, #0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
 8001532:	bf00      	nop
 8001534:	e000e010 	.word	0xe000e010

08001538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001540:	6878      	ldr	r0, [r7, #4]
 8001542:	f7ff ff29 	bl	8001398 <__NVIC_SetPriorityGrouping>
}
 8001546:	bf00      	nop
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b086      	sub	sp, #24
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	60b9      	str	r1, [r7, #8]
 8001558:	607a      	str	r2, [r7, #4]
 800155a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800155c:	f7ff ff40 	bl	80013e0 <__NVIC_GetPriorityGrouping>
 8001560:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	6978      	ldr	r0, [r7, #20]
 8001568:	f7ff ff90 	bl	800148c <NVIC_EncodePriority>
 800156c:	4602      	mov	r2, r0
 800156e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001572:	4611      	mov	r1, r2
 8001574:	4618      	mov	r0, r3
 8001576:	f7ff ff5f 	bl	8001438 <__NVIC_SetPriority>
}
 800157a:	bf00      	nop
 800157c:	3718      	adds	r7, #24
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}

08001582 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001582:	b580      	push	{r7, lr}
 8001584:	b082      	sub	sp, #8
 8001586:	af00      	add	r7, sp, #0
 8001588:	4603      	mov	r3, r0
 800158a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff ff33 	bl	80013fc <__NVIC_EnableIRQ>
}
 8001596:	bf00      	nop
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ffa4 	bl	80014f4 <SysTick_Config>
 80015ac:	4603      	mov	r3, r0
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
	...

080015b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80015bc:	f3bf 8f5f 	dmb	sy
}
 80015c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80015c2:	4b07      	ldr	r3, [pc, #28]	@ (80015e0 <HAL_MPU_Disable+0x28>)
 80015c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c6:	4a06      	ldr	r2, [pc, #24]	@ (80015e0 <HAL_MPU_Disable+0x28>)
 80015c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_MPU_Disable+0x2c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	605a      	str	r2, [r3, #4]
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
 80015de:	bf00      	nop
 80015e0:	e000ed00 	.word	0xe000ed00
 80015e4:	e000ed90 	.word	0xe000ed90

080015e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b083      	sub	sp, #12
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001620 <HAL_MPU_Enable+0x38>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001624 <HAL_MPU_Enable+0x3c>)
 80015fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015fe:	4a09      	ldr	r2, [pc, #36]	@ (8001624 <HAL_MPU_Enable+0x3c>)
 8001600:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001604:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8001606:	f3bf 8f4f 	dsb	sy
}
 800160a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800160c:	f3bf 8f6f 	isb	sy
}
 8001610:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	e000ed90 	.word	0xe000ed90
 8001624:	e000ed00 	.word	0xe000ed00

08001628 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	785a      	ldrb	r2, [r3, #1]
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <HAL_MPU_ConfigRegion+0x7c>)
 8001636:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001638:	4b1a      	ldr	r3, [pc, #104]	@ (80016a4 <HAL_MPU_ConfigRegion+0x7c>)
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	4a19      	ldr	r2, [pc, #100]	@ (80016a4 <HAL_MPU_ConfigRegion+0x7c>)
 800163e:	f023 0301 	bic.w	r3, r3, #1
 8001642:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001644:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <HAL_MPU_ConfigRegion+0x7c>)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	7b1b      	ldrb	r3, [r3, #12]
 8001650:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	7adb      	ldrb	r3, [r3, #11]
 8001656:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001658:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	7a9b      	ldrb	r3, [r3, #10]
 800165e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001660:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	7b5b      	ldrb	r3, [r3, #13]
 8001666:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001668:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	7b9b      	ldrb	r3, [r3, #14]
 800166e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001670:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	7bdb      	ldrb	r3, [r3, #15]
 8001676:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001678:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	7a5b      	ldrb	r3, [r3, #9]
 800167e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001680:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	7a1b      	ldrb	r3, [r3, #8]
 8001686:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001688:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	7812      	ldrb	r2, [r2, #0]
 800168e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001690:	4a04      	ldr	r2, [pc, #16]	@ (80016a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001692:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001694:	6113      	str	r3, [r2, #16]
}
 8001696:	bf00      	nop
 8001698:	370c      	adds	r7, #12
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	e000ed90 	.word	0xe000ed90

080016a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80016b0:	f7ff fe66 	bl	8001380 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80016bc:	2301      	movs	r3, #1
 80016be:	e2dc      	b.n	8001c7a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d008      	beq.n	80016de <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2280      	movs	r2, #128	@ 0x80
 80016d0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e2cd      	b.n	8001c7a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a76      	ldr	r2, [pc, #472]	@ (80018bc <HAL_DMA_Abort+0x214>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d04a      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a74      	ldr	r2, [pc, #464]	@ (80018c0 <HAL_DMA_Abort+0x218>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d045      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a73      	ldr	r2, [pc, #460]	@ (80018c4 <HAL_DMA_Abort+0x21c>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d040      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a71      	ldr	r2, [pc, #452]	@ (80018c8 <HAL_DMA_Abort+0x220>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d03b      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a70      	ldr	r2, [pc, #448]	@ (80018cc <HAL_DMA_Abort+0x224>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d036      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a6e      	ldr	r2, [pc, #440]	@ (80018d0 <HAL_DMA_Abort+0x228>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d031      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a6d      	ldr	r2, [pc, #436]	@ (80018d4 <HAL_DMA_Abort+0x22c>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d02c      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a6b      	ldr	r2, [pc, #428]	@ (80018d8 <HAL_DMA_Abort+0x230>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d027      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a6a      	ldr	r2, [pc, #424]	@ (80018dc <HAL_DMA_Abort+0x234>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d022      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a68      	ldr	r2, [pc, #416]	@ (80018e0 <HAL_DMA_Abort+0x238>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d01d      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a67      	ldr	r2, [pc, #412]	@ (80018e4 <HAL_DMA_Abort+0x23c>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d018      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a65      	ldr	r2, [pc, #404]	@ (80018e8 <HAL_DMA_Abort+0x240>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d013      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a64      	ldr	r2, [pc, #400]	@ (80018ec <HAL_DMA_Abort+0x244>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d00e      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a62      	ldr	r2, [pc, #392]	@ (80018f0 <HAL_DMA_Abort+0x248>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d009      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a61      	ldr	r2, [pc, #388]	@ (80018f4 <HAL_DMA_Abort+0x24c>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d004      	beq.n	800177e <HAL_DMA_Abort+0xd6>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a5f      	ldr	r2, [pc, #380]	@ (80018f8 <HAL_DMA_Abort+0x250>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d101      	bne.n	8001782 <HAL_DMA_Abort+0xda>
 800177e:	2301      	movs	r3, #1
 8001780:	e000      	b.n	8001784 <HAL_DMA_Abort+0xdc>
 8001782:	2300      	movs	r3, #0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d013      	beq.n	80017b0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	681a      	ldr	r2, [r3, #0]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f022 021e 	bic.w	r2, r2, #30
 8001796:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	695a      	ldr	r2, [r3, #20]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017a6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	617b      	str	r3, [r7, #20]
 80017ae:	e00a      	b.n	80017c6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 020e 	bic.w	r2, r2, #14
 80017be:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a3c      	ldr	r2, [pc, #240]	@ (80018bc <HAL_DMA_Abort+0x214>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d072      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a3a      	ldr	r2, [pc, #232]	@ (80018c0 <HAL_DMA_Abort+0x218>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d06d      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a39      	ldr	r2, [pc, #228]	@ (80018c4 <HAL_DMA_Abort+0x21c>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d068      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a37      	ldr	r2, [pc, #220]	@ (80018c8 <HAL_DMA_Abort+0x220>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d063      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a36      	ldr	r2, [pc, #216]	@ (80018cc <HAL_DMA_Abort+0x224>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d05e      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_DMA_Abort+0x228>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d059      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a33      	ldr	r2, [pc, #204]	@ (80018d4 <HAL_DMA_Abort+0x22c>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d054      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a31      	ldr	r2, [pc, #196]	@ (80018d8 <HAL_DMA_Abort+0x230>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d04f      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a30      	ldr	r2, [pc, #192]	@ (80018dc <HAL_DMA_Abort+0x234>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d04a      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2e      	ldr	r2, [pc, #184]	@ (80018e0 <HAL_DMA_Abort+0x238>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d045      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <HAL_DMA_Abort+0x23c>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d040      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2b      	ldr	r2, [pc, #172]	@ (80018e8 <HAL_DMA_Abort+0x240>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d03b      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2a      	ldr	r2, [pc, #168]	@ (80018ec <HAL_DMA_Abort+0x244>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d036      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <HAL_DMA_Abort+0x248>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d031      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a27      	ldr	r2, [pc, #156]	@ (80018f4 <HAL_DMA_Abort+0x24c>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d02c      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a25      	ldr	r2, [pc, #148]	@ (80018f8 <HAL_DMA_Abort+0x250>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d027      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_DMA_Abort+0x254>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d022      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <HAL_DMA_Abort+0x258>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d01d      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	@ (8001904 <HAL_DMA_Abort+0x25c>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d018      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a1f      	ldr	r2, [pc, #124]	@ (8001908 <HAL_DMA_Abort+0x260>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d013      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a1e      	ldr	r2, [pc, #120]	@ (800190c <HAL_DMA_Abort+0x264>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d00e      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a1c      	ldr	r2, [pc, #112]	@ (8001910 <HAL_DMA_Abort+0x268>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d009      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001914 <HAL_DMA_Abort+0x26c>)
 80018a8:	4293      	cmp	r3, r2
 80018aa:	d004      	beq.n	80018b6 <HAL_DMA_Abort+0x20e>
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a19      	ldr	r2, [pc, #100]	@ (8001918 <HAL_DMA_Abort+0x270>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d132      	bne.n	800191c <HAL_DMA_Abort+0x274>
 80018b6:	2301      	movs	r3, #1
 80018b8:	e031      	b.n	800191e <HAL_DMA_Abort+0x276>
 80018ba:	bf00      	nop
 80018bc:	40020010 	.word	0x40020010
 80018c0:	40020028 	.word	0x40020028
 80018c4:	40020040 	.word	0x40020040
 80018c8:	40020058 	.word	0x40020058
 80018cc:	40020070 	.word	0x40020070
 80018d0:	40020088 	.word	0x40020088
 80018d4:	400200a0 	.word	0x400200a0
 80018d8:	400200b8 	.word	0x400200b8
 80018dc:	40020410 	.word	0x40020410
 80018e0:	40020428 	.word	0x40020428
 80018e4:	40020440 	.word	0x40020440
 80018e8:	40020458 	.word	0x40020458
 80018ec:	40020470 	.word	0x40020470
 80018f0:	40020488 	.word	0x40020488
 80018f4:	400204a0 	.word	0x400204a0
 80018f8:	400204b8 	.word	0x400204b8
 80018fc:	58025408 	.word	0x58025408
 8001900:	5802541c 	.word	0x5802541c
 8001904:	58025430 	.word	0x58025430
 8001908:	58025444 	.word	0x58025444
 800190c:	58025458 	.word	0x58025458
 8001910:	5802546c 	.word	0x5802546c
 8001914:	58025480 	.word	0x58025480
 8001918:	58025494 	.word	0x58025494
 800191c:	2300      	movs	r3, #0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800192c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001930:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a6d      	ldr	r2, [pc, #436]	@ (8001aec <HAL_DMA_Abort+0x444>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d04a      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a6b      	ldr	r2, [pc, #428]	@ (8001af0 <HAL_DMA_Abort+0x448>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d045      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6a      	ldr	r2, [pc, #424]	@ (8001af4 <HAL_DMA_Abort+0x44c>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d040      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a68      	ldr	r2, [pc, #416]	@ (8001af8 <HAL_DMA_Abort+0x450>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d03b      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a67      	ldr	r2, [pc, #412]	@ (8001afc <HAL_DMA_Abort+0x454>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d036      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a65      	ldr	r2, [pc, #404]	@ (8001b00 <HAL_DMA_Abort+0x458>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d031      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a64      	ldr	r2, [pc, #400]	@ (8001b04 <HAL_DMA_Abort+0x45c>)
 8001974:	4293      	cmp	r3, r2
 8001976:	d02c      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a62      	ldr	r2, [pc, #392]	@ (8001b08 <HAL_DMA_Abort+0x460>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d027      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a61      	ldr	r2, [pc, #388]	@ (8001b0c <HAL_DMA_Abort+0x464>)
 8001988:	4293      	cmp	r3, r2
 800198a:	d022      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a5f      	ldr	r2, [pc, #380]	@ (8001b10 <HAL_DMA_Abort+0x468>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d01d      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a5e      	ldr	r2, [pc, #376]	@ (8001b14 <HAL_DMA_Abort+0x46c>)
 800199c:	4293      	cmp	r3, r2
 800199e:	d018      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a5c      	ldr	r2, [pc, #368]	@ (8001b18 <HAL_DMA_Abort+0x470>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d013      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4a5b      	ldr	r2, [pc, #364]	@ (8001b1c <HAL_DMA_Abort+0x474>)
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d00e      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a59      	ldr	r2, [pc, #356]	@ (8001b20 <HAL_DMA_Abort+0x478>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d009      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a58      	ldr	r2, [pc, #352]	@ (8001b24 <HAL_DMA_Abort+0x47c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d004      	beq.n	80019d2 <HAL_DMA_Abort+0x32a>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a56      	ldr	r2, [pc, #344]	@ (8001b28 <HAL_DMA_Abort+0x480>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d108      	bne.n	80019e4 <HAL_DMA_Abort+0x33c>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 0201 	bic.w	r2, r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e007      	b.n	80019f4 <HAL_DMA_Abort+0x34c>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0201 	bic.w	r2, r2, #1
 80019f2:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80019f4:	e013      	b.n	8001a1e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f6:	f7ff fcc3 	bl	8001380 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b05      	cmp	r3, #5
 8001a02:	d90c      	bls.n	8001a1e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2220      	movs	r2, #32
 8001a08:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2200      	movs	r2, #0
 8001a16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	e12d      	b.n	8001c7a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d1e5      	bne.n	80019f6 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a2f      	ldr	r2, [pc, #188]	@ (8001aec <HAL_DMA_Abort+0x444>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d04a      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a2d      	ldr	r2, [pc, #180]	@ (8001af0 <HAL_DMA_Abort+0x448>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d045      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a2c      	ldr	r2, [pc, #176]	@ (8001af4 <HAL_DMA_Abort+0x44c>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d040      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	4a2a      	ldr	r2, [pc, #168]	@ (8001af8 <HAL_DMA_Abort+0x450>)
 8001a4e:	4293      	cmp	r3, r2
 8001a50:	d03b      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4a29      	ldr	r2, [pc, #164]	@ (8001afc <HAL_DMA_Abort+0x454>)
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d036      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	4a27      	ldr	r2, [pc, #156]	@ (8001b00 <HAL_DMA_Abort+0x458>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d031      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a26      	ldr	r2, [pc, #152]	@ (8001b04 <HAL_DMA_Abort+0x45c>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d02c      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a24      	ldr	r2, [pc, #144]	@ (8001b08 <HAL_DMA_Abort+0x460>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d027      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a23      	ldr	r2, [pc, #140]	@ (8001b0c <HAL_DMA_Abort+0x464>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d022      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	4a21      	ldr	r2, [pc, #132]	@ (8001b10 <HAL_DMA_Abort+0x468>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d01d      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a20      	ldr	r2, [pc, #128]	@ (8001b14 <HAL_DMA_Abort+0x46c>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d018      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <HAL_DMA_Abort+0x470>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d013      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4a1d      	ldr	r2, [pc, #116]	@ (8001b1c <HAL_DMA_Abort+0x474>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00e      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b20 <HAL_DMA_Abort+0x478>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d009      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a1a      	ldr	r2, [pc, #104]	@ (8001b24 <HAL_DMA_Abort+0x47c>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d004      	beq.n	8001aca <HAL_DMA_Abort+0x422>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a18      	ldr	r2, [pc, #96]	@ (8001b28 <HAL_DMA_Abort+0x480>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_DMA_Abort+0x426>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_DMA_Abort+0x428>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d02b      	beq.n	8001b2c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ad8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001ade:	f003 031f 	and.w	r3, r3, #31
 8001ae2:	223f      	movs	r2, #63	@ 0x3f
 8001ae4:	409a      	lsls	r2, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	609a      	str	r2, [r3, #8]
 8001aea:	e02a      	b.n	8001b42 <HAL_DMA_Abort+0x49a>
 8001aec:	40020010 	.word	0x40020010
 8001af0:	40020028 	.word	0x40020028
 8001af4:	40020040 	.word	0x40020040
 8001af8:	40020058 	.word	0x40020058
 8001afc:	40020070 	.word	0x40020070
 8001b00:	40020088 	.word	0x40020088
 8001b04:	400200a0 	.word	0x400200a0
 8001b08:	400200b8 	.word	0x400200b8
 8001b0c:	40020410 	.word	0x40020410
 8001b10:	40020428 	.word	0x40020428
 8001b14:	40020440 	.word	0x40020440
 8001b18:	40020458 	.word	0x40020458
 8001b1c:	40020470 	.word	0x40020470
 8001b20:	40020488 	.word	0x40020488
 8001b24:	400204a0 	.word	0x400204a0
 8001b28:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b30:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b36:	f003 031f 	and.w	r3, r3, #31
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	409a      	lsls	r2, r3
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a4f      	ldr	r2, [pc, #316]	@ (8001c84 <HAL_DMA_Abort+0x5dc>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d072      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a4d      	ldr	r2, [pc, #308]	@ (8001c88 <HAL_DMA_Abort+0x5e0>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d06d      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c8c <HAL_DMA_Abort+0x5e4>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d068      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a4a      	ldr	r2, [pc, #296]	@ (8001c90 <HAL_DMA_Abort+0x5e8>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d063      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a49      	ldr	r2, [pc, #292]	@ (8001c94 <HAL_DMA_Abort+0x5ec>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d05e      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a47      	ldr	r2, [pc, #284]	@ (8001c98 <HAL_DMA_Abort+0x5f0>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d059      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a46      	ldr	r2, [pc, #280]	@ (8001c9c <HAL_DMA_Abort+0x5f4>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d054      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a44      	ldr	r2, [pc, #272]	@ (8001ca0 <HAL_DMA_Abort+0x5f8>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d04f      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a43      	ldr	r2, [pc, #268]	@ (8001ca4 <HAL_DMA_Abort+0x5fc>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d04a      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a41      	ldr	r2, [pc, #260]	@ (8001ca8 <HAL_DMA_Abort+0x600>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d045      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4a40      	ldr	r2, [pc, #256]	@ (8001cac <HAL_DMA_Abort+0x604>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d040      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8001cb0 <HAL_DMA_Abort+0x608>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d03b      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	4a3d      	ldr	r2, [pc, #244]	@ (8001cb4 <HAL_DMA_Abort+0x60c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d036      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a3b      	ldr	r2, [pc, #236]	@ (8001cb8 <HAL_DMA_Abort+0x610>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d031      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a3a      	ldr	r2, [pc, #232]	@ (8001cbc <HAL_DMA_Abort+0x614>)
 8001bd4:	4293      	cmp	r3, r2
 8001bd6:	d02c      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	4a38      	ldr	r2, [pc, #224]	@ (8001cc0 <HAL_DMA_Abort+0x618>)
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d027      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a37      	ldr	r2, [pc, #220]	@ (8001cc4 <HAL_DMA_Abort+0x61c>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d022      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	4a35      	ldr	r2, [pc, #212]	@ (8001cc8 <HAL_DMA_Abort+0x620>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d01d      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4a34      	ldr	r2, [pc, #208]	@ (8001ccc <HAL_DMA_Abort+0x624>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d018      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a32      	ldr	r2, [pc, #200]	@ (8001cd0 <HAL_DMA_Abort+0x628>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d013      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a31      	ldr	r2, [pc, #196]	@ (8001cd4 <HAL_DMA_Abort+0x62c>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00e      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a2f      	ldr	r2, [pc, #188]	@ (8001cd8 <HAL_DMA_Abort+0x630>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d009      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a2e      	ldr	r2, [pc, #184]	@ (8001cdc <HAL_DMA_Abort+0x634>)
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d004      	beq.n	8001c32 <HAL_DMA_Abort+0x58a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a2c      	ldr	r2, [pc, #176]	@ (8001ce0 <HAL_DMA_Abort+0x638>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d101      	bne.n	8001c36 <HAL_DMA_Abort+0x58e>
 8001c32:	2301      	movs	r3, #1
 8001c34:	e000      	b.n	8001c38 <HAL_DMA_Abort+0x590>
 8001c36:	2300      	movs	r3, #0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d015      	beq.n	8001c68 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c44:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00c      	beq.n	8001c68 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c5c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c66:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001c78:	2300      	movs	r3, #0
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	3718      	adds	r7, #24
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	bd80      	pop	{r7, pc}
 8001c82:	bf00      	nop
 8001c84:	40020010 	.word	0x40020010
 8001c88:	40020028 	.word	0x40020028
 8001c8c:	40020040 	.word	0x40020040
 8001c90:	40020058 	.word	0x40020058
 8001c94:	40020070 	.word	0x40020070
 8001c98:	40020088 	.word	0x40020088
 8001c9c:	400200a0 	.word	0x400200a0
 8001ca0:	400200b8 	.word	0x400200b8
 8001ca4:	40020410 	.word	0x40020410
 8001ca8:	40020428 	.word	0x40020428
 8001cac:	40020440 	.word	0x40020440
 8001cb0:	40020458 	.word	0x40020458
 8001cb4:	40020470 	.word	0x40020470
 8001cb8:	40020488 	.word	0x40020488
 8001cbc:	400204a0 	.word	0x400204a0
 8001cc0:	400204b8 	.word	0x400204b8
 8001cc4:	58025408 	.word	0x58025408
 8001cc8:	5802541c 	.word	0x5802541c
 8001ccc:	58025430 	.word	0x58025430
 8001cd0:	58025444 	.word	0x58025444
 8001cd4:	58025458 	.word	0x58025458
 8001cd8:	5802546c 	.word	0x5802546c
 8001cdc:	58025480 	.word	0x58025480
 8001ce0:	58025494 	.word	0x58025494

08001ce4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b084      	sub	sp, #16
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e237      	b.n	8002166 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d004      	beq.n	8001d0c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2280      	movs	r2, #128	@ 0x80
 8001d06:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
 8001d0a:	e22c      	b.n	8002166 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a5c      	ldr	r2, [pc, #368]	@ (8001e84 <HAL_DMA_Abort_IT+0x1a0>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d04a      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a5b      	ldr	r2, [pc, #364]	@ (8001e88 <HAL_DMA_Abort_IT+0x1a4>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d045      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a59      	ldr	r2, [pc, #356]	@ (8001e8c <HAL_DMA_Abort_IT+0x1a8>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d040      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a58      	ldr	r2, [pc, #352]	@ (8001e90 <HAL_DMA_Abort_IT+0x1ac>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d03b      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a56      	ldr	r2, [pc, #344]	@ (8001e94 <HAL_DMA_Abort_IT+0x1b0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d036      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a55      	ldr	r2, [pc, #340]	@ (8001e98 <HAL_DMA_Abort_IT+0x1b4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d031      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a53      	ldr	r2, [pc, #332]	@ (8001e9c <HAL_DMA_Abort_IT+0x1b8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d02c      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a52      	ldr	r2, [pc, #328]	@ (8001ea0 <HAL_DMA_Abort_IT+0x1bc>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d027      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a50      	ldr	r2, [pc, #320]	@ (8001ea4 <HAL_DMA_Abort_IT+0x1c0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d022      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a4f      	ldr	r2, [pc, #316]	@ (8001ea8 <HAL_DMA_Abort_IT+0x1c4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d01d      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4d      	ldr	r2, [pc, #308]	@ (8001eac <HAL_DMA_Abort_IT+0x1c8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d018      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a4c      	ldr	r2, [pc, #304]	@ (8001eb0 <HAL_DMA_Abort_IT+0x1cc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a4a      	ldr	r2, [pc, #296]	@ (8001eb4 <HAL_DMA_Abort_IT+0x1d0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00e      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a49      	ldr	r2, [pc, #292]	@ (8001eb8 <HAL_DMA_Abort_IT+0x1d4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d009      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a47      	ldr	r2, [pc, #284]	@ (8001ebc <HAL_DMA_Abort_IT+0x1d8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_DMA_Abort_IT+0xc8>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a46      	ldr	r2, [pc, #280]	@ (8001ec0 <HAL_DMA_Abort_IT+0x1dc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d101      	bne.n	8001db0 <HAL_DMA_Abort_IT+0xcc>
 8001dac:	2301      	movs	r3, #1
 8001dae:	e000      	b.n	8001db2 <HAL_DMA_Abort_IT+0xce>
 8001db0:	2300      	movs	r3, #0
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	f000 8086 	beq.w	8001ec4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2204      	movs	r2, #4
 8001dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a2f      	ldr	r2, [pc, #188]	@ (8001e84 <HAL_DMA_Abort_IT+0x1a0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d04a      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a2e      	ldr	r2, [pc, #184]	@ (8001e88 <HAL_DMA_Abort_IT+0x1a4>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d045      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a2c      	ldr	r2, [pc, #176]	@ (8001e8c <HAL_DMA_Abort_IT+0x1a8>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d040      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a2b      	ldr	r2, [pc, #172]	@ (8001e90 <HAL_DMA_Abort_IT+0x1ac>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d03b      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a29      	ldr	r2, [pc, #164]	@ (8001e94 <HAL_DMA_Abort_IT+0x1b0>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d036      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a28      	ldr	r2, [pc, #160]	@ (8001e98 <HAL_DMA_Abort_IT+0x1b4>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d031      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a26      	ldr	r2, [pc, #152]	@ (8001e9c <HAL_DMA_Abort_IT+0x1b8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d02c      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a25      	ldr	r2, [pc, #148]	@ (8001ea0 <HAL_DMA_Abort_IT+0x1bc>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d027      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <HAL_DMA_Abort_IT+0x1c0>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d022      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a22      	ldr	r2, [pc, #136]	@ (8001ea8 <HAL_DMA_Abort_IT+0x1c4>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d01d      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a20      	ldr	r2, [pc, #128]	@ (8001eac <HAL_DMA_Abort_IT+0x1c8>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d018      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb0 <HAL_DMA_Abort_IT+0x1cc>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d013      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	@ (8001eb4 <HAL_DMA_Abort_IT+0x1d0>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d00e      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb8 <HAL_DMA_Abort_IT+0x1d4>)
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d009      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a1a      	ldr	r2, [pc, #104]	@ (8001ebc <HAL_DMA_Abort_IT+0x1d8>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d004      	beq.n	8001e60 <HAL_DMA_Abort_IT+0x17c>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a19      	ldr	r2, [pc, #100]	@ (8001ec0 <HAL_DMA_Abort_IT+0x1dc>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d108      	bne.n	8001e72 <HAL_DMA_Abort_IT+0x18e>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]
 8001e70:	e178      	b.n	8002164 <HAL_DMA_Abort_IT+0x480>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f022 0201 	bic.w	r2, r2, #1
 8001e80:	601a      	str	r2, [r3, #0]
 8001e82:	e16f      	b.n	8002164 <HAL_DMA_Abort_IT+0x480>
 8001e84:	40020010 	.word	0x40020010
 8001e88:	40020028 	.word	0x40020028
 8001e8c:	40020040 	.word	0x40020040
 8001e90:	40020058 	.word	0x40020058
 8001e94:	40020070 	.word	0x40020070
 8001e98:	40020088 	.word	0x40020088
 8001e9c:	400200a0 	.word	0x400200a0
 8001ea0:	400200b8 	.word	0x400200b8
 8001ea4:	40020410 	.word	0x40020410
 8001ea8:	40020428 	.word	0x40020428
 8001eac:	40020440 	.word	0x40020440
 8001eb0:	40020458 	.word	0x40020458
 8001eb4:	40020470 	.word	0x40020470
 8001eb8:	40020488 	.word	0x40020488
 8001ebc:	400204a0 	.word	0x400204a0
 8001ec0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 020e 	bic.w	r2, r2, #14
 8001ed2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a6c      	ldr	r2, [pc, #432]	@ (800208c <HAL_DMA_Abort_IT+0x3a8>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d04a      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a6b      	ldr	r2, [pc, #428]	@ (8002090 <HAL_DMA_Abort_IT+0x3ac>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d045      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a69      	ldr	r2, [pc, #420]	@ (8002094 <HAL_DMA_Abort_IT+0x3b0>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d040      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a68      	ldr	r2, [pc, #416]	@ (8002098 <HAL_DMA_Abort_IT+0x3b4>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d03b      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a66      	ldr	r2, [pc, #408]	@ (800209c <HAL_DMA_Abort_IT+0x3b8>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d036      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a65      	ldr	r2, [pc, #404]	@ (80020a0 <HAL_DMA_Abort_IT+0x3bc>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d031      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a63      	ldr	r2, [pc, #396]	@ (80020a4 <HAL_DMA_Abort_IT+0x3c0>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02c      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a62      	ldr	r2, [pc, #392]	@ (80020a8 <HAL_DMA_Abort_IT+0x3c4>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d027      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a60      	ldr	r2, [pc, #384]	@ (80020ac <HAL_DMA_Abort_IT+0x3c8>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d022      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a5f      	ldr	r2, [pc, #380]	@ (80020b0 <HAL_DMA_Abort_IT+0x3cc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d01d      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a5d      	ldr	r2, [pc, #372]	@ (80020b4 <HAL_DMA_Abort_IT+0x3d0>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d018      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a5c      	ldr	r2, [pc, #368]	@ (80020b8 <HAL_DMA_Abort_IT+0x3d4>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a5a      	ldr	r2, [pc, #360]	@ (80020bc <HAL_DMA_Abort_IT+0x3d8>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00e      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a59      	ldr	r2, [pc, #356]	@ (80020c0 <HAL_DMA_Abort_IT+0x3dc>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a57      	ldr	r2, [pc, #348]	@ (80020c4 <HAL_DMA_Abort_IT+0x3e0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d004      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x290>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a56      	ldr	r2, [pc, #344]	@ (80020c8 <HAL_DMA_Abort_IT+0x3e4>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d108      	bne.n	8001f86 <HAL_DMA_Abort_IT+0x2a2>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e007      	b.n	8001f96 <HAL_DMA_Abort_IT+0x2b2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a3c      	ldr	r2, [pc, #240]	@ (800208c <HAL_DMA_Abort_IT+0x3a8>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d072      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a3a      	ldr	r2, [pc, #232]	@ (8002090 <HAL_DMA_Abort_IT+0x3ac>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d06d      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a39      	ldr	r2, [pc, #228]	@ (8002094 <HAL_DMA_Abort_IT+0x3b0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d068      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a37      	ldr	r2, [pc, #220]	@ (8002098 <HAL_DMA_Abort_IT+0x3b4>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d063      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a36      	ldr	r2, [pc, #216]	@ (800209c <HAL_DMA_Abort_IT+0x3b8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d05e      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a34      	ldr	r2, [pc, #208]	@ (80020a0 <HAL_DMA_Abort_IT+0x3bc>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d059      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a33      	ldr	r2, [pc, #204]	@ (80020a4 <HAL_DMA_Abort_IT+0x3c0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d054      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a31      	ldr	r2, [pc, #196]	@ (80020a8 <HAL_DMA_Abort_IT+0x3c4>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d04f      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a30      	ldr	r2, [pc, #192]	@ (80020ac <HAL_DMA_Abort_IT+0x3c8>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d04a      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a2e      	ldr	r2, [pc, #184]	@ (80020b0 <HAL_DMA_Abort_IT+0x3cc>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d045      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a2d      	ldr	r2, [pc, #180]	@ (80020b4 <HAL_DMA_Abort_IT+0x3d0>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d040      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a2b      	ldr	r2, [pc, #172]	@ (80020b8 <HAL_DMA_Abort_IT+0x3d4>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d03b      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a2a      	ldr	r2, [pc, #168]	@ (80020bc <HAL_DMA_Abort_IT+0x3d8>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d036      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a28      	ldr	r2, [pc, #160]	@ (80020c0 <HAL_DMA_Abort_IT+0x3dc>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d031      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4a27      	ldr	r2, [pc, #156]	@ (80020c4 <HAL_DMA_Abort_IT+0x3e0>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d02c      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a25      	ldr	r2, [pc, #148]	@ (80020c8 <HAL_DMA_Abort_IT+0x3e4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d027      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a24      	ldr	r2, [pc, #144]	@ (80020cc <HAL_DMA_Abort_IT+0x3e8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d022      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a22      	ldr	r2, [pc, #136]	@ (80020d0 <HAL_DMA_Abort_IT+0x3ec>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d01d      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a21      	ldr	r2, [pc, #132]	@ (80020d4 <HAL_DMA_Abort_IT+0x3f0>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d018      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a1f      	ldr	r2, [pc, #124]	@ (80020d8 <HAL_DMA_Abort_IT+0x3f4>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a1e      	ldr	r2, [pc, #120]	@ (80020dc <HAL_DMA_Abort_IT+0x3f8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d00e      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a1c      	ldr	r2, [pc, #112]	@ (80020e0 <HAL_DMA_Abort_IT+0x3fc>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d009      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a1b      	ldr	r2, [pc, #108]	@ (80020e4 <HAL_DMA_Abort_IT+0x400>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d004      	beq.n	8002086 <HAL_DMA_Abort_IT+0x3a2>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a19      	ldr	r2, [pc, #100]	@ (80020e8 <HAL_DMA_Abort_IT+0x404>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d132      	bne.n	80020ec <HAL_DMA_Abort_IT+0x408>
 8002086:	2301      	movs	r3, #1
 8002088:	e031      	b.n	80020ee <HAL_DMA_Abort_IT+0x40a>
 800208a:	bf00      	nop
 800208c:	40020010 	.word	0x40020010
 8002090:	40020028 	.word	0x40020028
 8002094:	40020040 	.word	0x40020040
 8002098:	40020058 	.word	0x40020058
 800209c:	40020070 	.word	0x40020070
 80020a0:	40020088 	.word	0x40020088
 80020a4:	400200a0 	.word	0x400200a0
 80020a8:	400200b8 	.word	0x400200b8
 80020ac:	40020410 	.word	0x40020410
 80020b0:	40020428 	.word	0x40020428
 80020b4:	40020440 	.word	0x40020440
 80020b8:	40020458 	.word	0x40020458
 80020bc:	40020470 	.word	0x40020470
 80020c0:	40020488 	.word	0x40020488
 80020c4:	400204a0 	.word	0x400204a0
 80020c8:	400204b8 	.word	0x400204b8
 80020cc:	58025408 	.word	0x58025408
 80020d0:	5802541c 	.word	0x5802541c
 80020d4:	58025430 	.word	0x58025430
 80020d8:	58025444 	.word	0x58025444
 80020dc:	58025458 	.word	0x58025458
 80020e0:	5802546c 	.word	0x5802546c
 80020e4:	58025480 	.word	0x58025480
 80020e8:	58025494 	.word	0x58025494
 80020ec:	2300      	movs	r3, #0
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d028      	beq.n	8002144 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020f6:	681a      	ldr	r2, [r3, #0]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020fc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002100:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002106:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800210c:	f003 031f 	and.w	r3, r3, #31
 8002110:	2201      	movs	r2, #1
 8002112:	409a      	lsls	r2, r3
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002120:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00c      	beq.n	8002144 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002134:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002138:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002142:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2201      	movs	r2, #1
 8002148:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002160:	6878      	ldr	r0, [r7, #4]
 8002162:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop

08002170 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002170:	b480      	push	{r7}
 8002172:	b089      	sub	sp, #36	@ 0x24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800217e:	4b86      	ldr	r3, [pc, #536]	@ (8002398 <HAL_GPIO_Init+0x228>)
 8002180:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002182:	e18c      	b.n	800249e <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	2101      	movs	r1, #1
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	fa01 f303 	lsl.w	r3, r1, r3
 8002190:	4013      	ands	r3, r2
 8002192:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	2b00      	cmp	r3, #0
 8002198:	f000 817e 	beq.w	8002498 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d005      	beq.n	80021b4 <HAL_GPIO_Init+0x44>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d130      	bne.n	8002216 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	2203      	movs	r2, #3
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	68da      	ldr	r2, [r3, #12]
 80021d0:	69fb      	ldr	r3, [r7, #28]
 80021d2:	005b      	lsls	r3, r3, #1
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80021ea:	2201      	movs	r2, #1
 80021ec:	69fb      	ldr	r3, [r7, #28]
 80021ee:	fa02 f303 	lsl.w	r3, r2, r3
 80021f2:	43db      	mvns	r3, r3
 80021f4:	69ba      	ldr	r2, [r7, #24]
 80021f6:	4013      	ands	r3, r2
 80021f8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	f003 0201 	and.w	r2, r3, #1
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	fa02 f303 	lsl.w	r3, r2, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4313      	orrs	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	69ba      	ldr	r2, [r7, #24]
 8002214:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b03      	cmp	r3, #3
 8002220:	d017      	beq.n	8002252 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	689a      	ldr	r2, [r3, #8]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	2b02      	cmp	r3, #2
 800225c:	d123      	bne.n	80022a6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	08da      	lsrs	r2, r3, #3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	3208      	adds	r2, #8
 8002266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800226a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f003 0307 	and.w	r3, r3, #7
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	220f      	movs	r2, #15
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43db      	mvns	r3, r3
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	4013      	ands	r3, r2
 8002280:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	691a      	ldr	r2, [r3, #16]
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	f003 0307 	and.w	r3, r3, #7
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	fa02 f303 	lsl.w	r3, r2, r3
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002298:	69fb      	ldr	r3, [r7, #28]
 800229a:	08da      	lsrs	r2, r3, #3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3208      	adds	r2, #8
 80022a0:	69b9      	ldr	r1, [r7, #24]
 80022a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	2203      	movs	r2, #3
 80022b2:	fa02 f303 	lsl.w	r3, r2, r3
 80022b6:	43db      	mvns	r3, r3
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	4013      	ands	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 0203 	and.w	r2, r3, #3
 80022c6:	69fb      	ldr	r3, [r7, #28]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	685b      	ldr	r3, [r3, #4]
 80022de:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f000 80d8 	beq.w	8002498 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022e8:	4b2c      	ldr	r3, [pc, #176]	@ (800239c <HAL_GPIO_Init+0x22c>)
 80022ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022ee:	4a2b      	ldr	r2, [pc, #172]	@ (800239c <HAL_GPIO_Init+0x22c>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80022f8:	4b28      	ldr	r3, [pc, #160]	@ (800239c <HAL_GPIO_Init+0x22c>)
 80022fa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80022fe:	f003 0302 	and.w	r3, r3, #2
 8002302:	60fb      	str	r3, [r7, #12]
 8002304:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002306:	4a26      	ldr	r2, [pc, #152]	@ (80023a0 <HAL_GPIO_Init+0x230>)
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	089b      	lsrs	r3, r3, #2
 800230c:	3302      	adds	r3, #2
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002314:	69fb      	ldr	r3, [r7, #28]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	220f      	movs	r2, #15
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a1d      	ldr	r2, [pc, #116]	@ (80023a4 <HAL_GPIO_Init+0x234>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d04a      	beq.n	80023c8 <HAL_GPIO_Init+0x258>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a1c      	ldr	r2, [pc, #112]	@ (80023a8 <HAL_GPIO_Init+0x238>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d02b      	beq.n	8002392 <HAL_GPIO_Init+0x222>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a1b      	ldr	r2, [pc, #108]	@ (80023ac <HAL_GPIO_Init+0x23c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d025      	beq.n	800238e <HAL_GPIO_Init+0x21e>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a1a      	ldr	r2, [pc, #104]	@ (80023b0 <HAL_GPIO_Init+0x240>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <HAL_GPIO_Init+0x21a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a19      	ldr	r2, [pc, #100]	@ (80023b4 <HAL_GPIO_Init+0x244>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d019      	beq.n	8002386 <HAL_GPIO_Init+0x216>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <HAL_GPIO_Init+0x248>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d013      	beq.n	8002382 <HAL_GPIO_Init+0x212>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a17      	ldr	r2, [pc, #92]	@ (80023bc <HAL_GPIO_Init+0x24c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d00d      	beq.n	800237e <HAL_GPIO_Init+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a16      	ldr	r2, [pc, #88]	@ (80023c0 <HAL_GPIO_Init+0x250>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d007      	beq.n	800237a <HAL_GPIO_Init+0x20a>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a15      	ldr	r2, [pc, #84]	@ (80023c4 <HAL_GPIO_Init+0x254>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d101      	bne.n	8002376 <HAL_GPIO_Init+0x206>
 8002372:	2309      	movs	r3, #9
 8002374:	e029      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 8002376:	230a      	movs	r3, #10
 8002378:	e027      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 800237a:	2307      	movs	r3, #7
 800237c:	e025      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 800237e:	2306      	movs	r3, #6
 8002380:	e023      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 8002382:	2305      	movs	r3, #5
 8002384:	e021      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 8002386:	2304      	movs	r3, #4
 8002388:	e01f      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 800238a:	2303      	movs	r3, #3
 800238c:	e01d      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 800238e:	2302      	movs	r3, #2
 8002390:	e01b      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 8002392:	2301      	movs	r3, #1
 8002394:	e019      	b.n	80023ca <HAL_GPIO_Init+0x25a>
 8002396:	bf00      	nop
 8002398:	58000080 	.word	0x58000080
 800239c:	58024400 	.word	0x58024400
 80023a0:	58000400 	.word	0x58000400
 80023a4:	58020000 	.word	0x58020000
 80023a8:	58020400 	.word	0x58020400
 80023ac:	58020800 	.word	0x58020800
 80023b0:	58020c00 	.word	0x58020c00
 80023b4:	58021000 	.word	0x58021000
 80023b8:	58021400 	.word	0x58021400
 80023bc:	58021800 	.word	0x58021800
 80023c0:	58021c00 	.word	0x58021c00
 80023c4:	58022400 	.word	0x58022400
 80023c8:	2300      	movs	r3, #0
 80023ca:	69fa      	ldr	r2, [r7, #28]
 80023cc:	f002 0203 	and.w	r2, r2, #3
 80023d0:	0092      	lsls	r2, r2, #2
 80023d2:	4093      	lsls	r3, r2
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023da:	4938      	ldr	r1, [pc, #224]	@ (80024bc <HAL_GPIO_Init+0x34c>)
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	089b      	lsrs	r3, r3, #2
 80023e0:	3302      	adds	r3, #2
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80023e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	43db      	mvns	r3, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4013      	ands	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	4313      	orrs	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800240e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002416:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d003      	beq.n	800243c <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	4313      	orrs	r3, r2
 800243a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800243c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002444:	697b      	ldr	r3, [r7, #20]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	43db      	mvns	r3, r3
 800244e:	69ba      	ldr	r2, [r7, #24]
 8002450:	4013      	ands	r3, r2
 8002452:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800245c:	2b00      	cmp	r3, #0
 800245e:	d003      	beq.n	8002468 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	43db      	mvns	r3, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4013      	ands	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800248a:	69ba      	ldr	r2, [r7, #24]
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	4313      	orrs	r3, r2
 8002490:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002492:	697b      	ldr	r3, [r7, #20]
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	3301      	adds	r3, #1
 800249c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	f47f ae6b 	bne.w	8002184 <HAL_GPIO_Init+0x14>
  }
}
 80024ae:	bf00      	nop
 80024b0:	bf00      	nop
 80024b2:	3724      	adds	r7, #36	@ 0x24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr
 80024bc:	58000400 	.word	0x58000400

080024c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	460b      	mov	r3, r1
 80024ca:	807b      	strh	r3, [r7, #2]
 80024cc:	4613      	mov	r3, r2
 80024ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80024d0:	787b      	ldrb	r3, [r7, #1]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d003      	beq.n	80024de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80024d6:	887a      	ldrh	r2, [r7, #2]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80024dc:	e003      	b.n	80024e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	041a      	lsls	r2, r3, #16
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	619a      	str	r2, [r3, #24]
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
	...

080024f4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b084      	sub	sp, #16
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024fc:	4b19      	ldr	r3, [pc, #100]	@ (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0304 	and.w	r3, r3, #4
 8002504:	2b04      	cmp	r3, #4
 8002506:	d00a      	beq.n	800251e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002508:	4b16      	ldr	r3, [pc, #88]	@ (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 800250a:	68db      	ldr	r3, [r3, #12]
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e01f      	b.n	800255a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800251a:	2300      	movs	r3, #0
 800251c:	e01d      	b.n	800255a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800251e:	4b11      	ldr	r3, [pc, #68]	@ (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 8002520:	68db      	ldr	r3, [r3, #12]
 8002522:	f023 0207 	bic.w	r2, r3, #7
 8002526:	490f      	ldr	r1, [pc, #60]	@ (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	4313      	orrs	r3, r2
 800252c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800252e:	f7fe ff27 	bl	8001380 <HAL_GetTick>
 8002532:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002534:	e009      	b.n	800254a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002536:	f7fe ff23 	bl	8001380 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002544:	d901      	bls.n	800254a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e007      	b.n	800255a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800254a:	4b06      	ldr	r3, [pc, #24]	@ (8002564 <HAL_PWREx_ConfigSupply+0x70>)
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002552:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002556:	d1ee      	bne.n	8002536 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3710      	adds	r7, #16
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	58024800 	.word	0x58024800

08002568 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b08c      	sub	sp, #48	@ 0x30
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e3c8      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f003 0301 	and.w	r3, r3, #1
 8002582:	2b00      	cmp	r3, #0
 8002584:	f000 8087 	beq.w	8002696 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002588:	4b88      	ldr	r3, [pc, #544]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800258a:	691b      	ldr	r3, [r3, #16]
 800258c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002590:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002592:	4b86      	ldr	r3, [pc, #536]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002594:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002596:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002598:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800259a:	2b10      	cmp	r3, #16
 800259c:	d007      	beq.n	80025ae <HAL_RCC_OscConfig+0x46>
 800259e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80025a0:	2b18      	cmp	r3, #24
 80025a2:	d110      	bne.n	80025c6 <HAL_RCC_OscConfig+0x5e>
 80025a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a6:	f003 0303 	and.w	r3, r3, #3
 80025aa:	2b02      	cmp	r3, #2
 80025ac:	d10b      	bne.n	80025c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025ae:	4b7f      	ldr	r3, [pc, #508]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d06c      	beq.n	8002694 <HAL_RCC_OscConfig+0x12c>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d168      	bne.n	8002694 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e3a2      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025ce:	d106      	bne.n	80025de <HAL_RCC_OscConfig+0x76>
 80025d0:	4b76      	ldr	r3, [pc, #472]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a75      	ldr	r2, [pc, #468]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80025d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025da:	6013      	str	r3, [r2, #0]
 80025dc:	e02e      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10c      	bne.n	8002600 <HAL_RCC_OscConfig+0x98>
 80025e6:	4b71      	ldr	r3, [pc, #452]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a70      	ldr	r2, [pc, #448]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80025ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	4b6e      	ldr	r3, [pc, #440]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a6d      	ldr	r2, [pc, #436]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80025f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025fc:	6013      	str	r3, [r2, #0]
 80025fe:	e01d      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002608:	d10c      	bne.n	8002624 <HAL_RCC_OscConfig+0xbc>
 800260a:	4b68      	ldr	r3, [pc, #416]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a67      	ldr	r2, [pc, #412]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	4b65      	ldr	r3, [pc, #404]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a64      	ldr	r2, [pc, #400]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800261c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e00b      	b.n	800263c <HAL_RCC_OscConfig+0xd4>
 8002624:	4b61      	ldr	r3, [pc, #388]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a60      	ldr	r2, [pc, #384]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800262a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800262e:	6013      	str	r3, [r2, #0]
 8002630:	4b5e      	ldr	r3, [pc, #376]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a5d      	ldr	r2, [pc, #372]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002636:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800263a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d013      	beq.n	800266c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002644:	f7fe fe9c 	bl	8001380 <HAL_GetTick>
 8002648:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800264c:	f7fe fe98 	bl	8001380 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b64      	cmp	r3, #100	@ 0x64
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e356      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800265e:	4b53      	ldr	r3, [pc, #332]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f0      	beq.n	800264c <HAL_RCC_OscConfig+0xe4>
 800266a:	e014      	b.n	8002696 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800266c:	f7fe fe88 	bl	8001380 <HAL_GetTick>
 8002670:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002674:	f7fe fe84 	bl	8001380 <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b64      	cmp	r3, #100	@ 0x64
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e342      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002686:	4b49      	ldr	r3, [pc, #292]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800268e:	2b00      	cmp	r3, #0
 8002690:	d1f0      	bne.n	8002674 <HAL_RCC_OscConfig+0x10c>
 8002692:	e000      	b.n	8002696 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002694:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 808c 	beq.w	80027bc <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026a4:	4b41      	ldr	r3, [pc, #260]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026ae:	4b3f      	ldr	r3, [pc, #252]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80026b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026b2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80026b4:	6a3b      	ldr	r3, [r7, #32]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d007      	beq.n	80026ca <HAL_RCC_OscConfig+0x162>
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	2b18      	cmp	r3, #24
 80026be:	d137      	bne.n	8002730 <HAL_RCC_OscConfig+0x1c8>
 80026c0:	69fb      	ldr	r3, [r7, #28]
 80026c2:	f003 0303 	and.w	r3, r3, #3
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d132      	bne.n	8002730 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026ca:	4b38      	ldr	r3, [pc, #224]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0304 	and.w	r3, r3, #4
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d005      	beq.n	80026e2 <HAL_RCC_OscConfig+0x17a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d101      	bne.n	80026e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e314      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026e2:	4b32      	ldr	r3, [pc, #200]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 0219 	bic.w	r2, r3, #25
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68db      	ldr	r3, [r3, #12]
 80026ee:	492f      	ldr	r1, [pc, #188]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fe44 	bl	8001380 <HAL_GetTick>
 80026f8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026fc:	f7fe fe40 	bl	8001380 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e2fe      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800270e:	4b27      	ldr	r3, [pc, #156]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0304 	and.w	r3, r3, #4
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b24      	ldr	r3, [pc, #144]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	061b      	lsls	r3, r3, #24
 8002728:	4920      	ldr	r1, [pc, #128]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800272a:	4313      	orrs	r3, r2
 800272c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272e:	e045      	b.n	80027bc <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d026      	beq.n	8002786 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002738:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f023 0219 	bic.w	r2, r3, #25
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	4919      	ldr	r1, [pc, #100]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002746:	4313      	orrs	r3, r2
 8002748:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274a:	f7fe fe19 	bl	8001380 <HAL_GetTick>
 800274e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002750:	e008      	b.n	8002764 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002752:	f7fe fe15 	bl	8001380 <HAL_GetTick>
 8002756:	4602      	mov	r2, r0
 8002758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800275a:	1ad3      	subs	r3, r2, r3
 800275c:	2b02      	cmp	r3, #2
 800275e:	d901      	bls.n	8002764 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002760:	2303      	movs	r3, #3
 8002762:	e2d3      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0304 	and.w	r3, r3, #4
 800276c:	2b00      	cmp	r3, #0
 800276e:	d0f0      	beq.n	8002752 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	061b      	lsls	r3, r3, #24
 800277e:	490b      	ldr	r1, [pc, #44]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002780:	4313      	orrs	r3, r2
 8002782:	604b      	str	r3, [r1, #4]
 8002784:	e01a      	b.n	80027bc <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002786:	4b09      	ldr	r3, [pc, #36]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a08      	ldr	r2, [pc, #32]	@ (80027ac <HAL_RCC_OscConfig+0x244>)
 800278c:	f023 0301 	bic.w	r3, r3, #1
 8002790:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002792:	f7fe fdf5 	bl	8001380 <HAL_GetTick>
 8002796:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002798:	e00a      	b.n	80027b0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279a:	f7fe fdf1 	bl	8001380 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d903      	bls.n	80027b0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e2af      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
 80027ac:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027b0:	4b96      	ldr	r3, [pc, #600]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d1ee      	bne.n	800279a <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0310 	and.w	r3, r3, #16
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d06a      	beq.n	800289e <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027c8:	4b90      	ldr	r3, [pc, #576]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027d0:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027d2:	4b8e      	ldr	r3, [pc, #568]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80027d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027d6:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d007      	beq.n	80027ee <HAL_RCC_OscConfig+0x286>
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	2b18      	cmp	r3, #24
 80027e2:	d11b      	bne.n	800281c <HAL_RCC_OscConfig+0x2b4>
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d116      	bne.n	800281c <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80027ee:	4b87      	ldr	r3, [pc, #540]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d005      	beq.n	8002806 <HAL_RCC_OscConfig+0x29e>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	2b80      	cmp	r3, #128	@ 0x80
 8002800:	d001      	beq.n	8002806 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e282      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002806:	4b81      	ldr	r3, [pc, #516]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	061b      	lsls	r3, r3, #24
 8002814:	497d      	ldr	r1, [pc, #500]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002816:	4313      	orrs	r3, r2
 8002818:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800281a:	e040      	b.n	800289e <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d023      	beq.n	800286c <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002824:	4b79      	ldr	r3, [pc, #484]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a78      	ldr	r2, [pc, #480]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 800282a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800282e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7fe fda6 	bl	8001380 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002838:	f7fe fda2 	bl	8001380 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e260      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800284a:	4b70      	ldr	r3, [pc, #448]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002856:	4b6d      	ldr	r3, [pc, #436]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002858:	68db      	ldr	r3, [r3, #12]
 800285a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a1b      	ldr	r3, [r3, #32]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	4969      	ldr	r1, [pc, #420]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002866:	4313      	orrs	r3, r2
 8002868:	60cb      	str	r3, [r1, #12]
 800286a:	e018      	b.n	800289e <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800286c:	4b67      	ldr	r3, [pc, #412]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a66      	ldr	r2, [pc, #408]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002872:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002876:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002878:	f7fe fd82 	bl	8001380 <HAL_GetTick>
 800287c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800287e:	e008      	b.n	8002892 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002880:	f7fe fd7e 	bl	8001380 <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e23c      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002892:	4b5e      	ldr	r3, [pc, #376]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f0      	bne.n	8002880 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f003 0308 	and.w	r3, r3, #8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d036      	beq.n	8002918 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d019      	beq.n	80028e6 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028b2:	4b56      	ldr	r3, [pc, #344]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80028b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028b6:	4a55      	ldr	r2, [pc, #340]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80028b8:	f043 0301 	orr.w	r3, r3, #1
 80028bc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028be:	f7fe fd5f 	bl	8001380 <HAL_GetTick>
 80028c2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028c4:	e008      	b.n	80028d8 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028c6:	f7fe fd5b 	bl	8001380 <HAL_GetTick>
 80028ca:	4602      	mov	r2, r0
 80028cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d901      	bls.n	80028d8 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 80028d4:	2303      	movs	r3, #3
 80028d6:	e219      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80028d8:	4b4c      	ldr	r3, [pc, #304]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d0f0      	beq.n	80028c6 <HAL_RCC_OscConfig+0x35e>
 80028e4:	e018      	b.n	8002918 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028e6:	4b49      	ldr	r3, [pc, #292]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80028e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028ea:	4a48      	ldr	r2, [pc, #288]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80028ec:	f023 0301 	bic.w	r3, r3, #1
 80028f0:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028f2:	f7fe fd45 	bl	8001380 <HAL_GetTick>
 80028f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80028f8:	e008      	b.n	800290c <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028fa:	f7fe fd41 	bl	8001380 <HAL_GetTick>
 80028fe:	4602      	mov	r2, r0
 8002900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	2b02      	cmp	r3, #2
 8002906:	d901      	bls.n	800290c <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8002908:	2303      	movs	r3, #3
 800290a:	e1ff      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800290c:	4b3f      	ldr	r3, [pc, #252]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 800290e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002910:	f003 0302 	and.w	r3, r3, #2
 8002914:	2b00      	cmp	r3, #0
 8002916:	d1f0      	bne.n	80028fa <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0320 	and.w	r3, r3, #32
 8002920:	2b00      	cmp	r3, #0
 8002922:	d036      	beq.n	8002992 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d019      	beq.n	8002960 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800292c:	4b37      	ldr	r3, [pc, #220]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a36      	ldr	r2, [pc, #216]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002932:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002936:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002938:	f7fe fd22 	bl	8001380 <HAL_GetTick>
 800293c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800293e:	e008      	b.n	8002952 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002940:	f7fe fd1e 	bl	8001380 <HAL_GetTick>
 8002944:	4602      	mov	r2, r0
 8002946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002948:	1ad3      	subs	r3, r2, r3
 800294a:	2b02      	cmp	r3, #2
 800294c:	d901      	bls.n	8002952 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 800294e:	2303      	movs	r3, #3
 8002950:	e1dc      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002952:	4b2e      	ldr	r3, [pc, #184]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d0f0      	beq.n	8002940 <HAL_RCC_OscConfig+0x3d8>
 800295e:	e018      	b.n	8002992 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002960:	4b2a      	ldr	r3, [pc, #168]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a29      	ldr	r2, [pc, #164]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002966:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800296a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800296c:	f7fe fd08 	bl	8001380 <HAL_GetTick>
 8002970:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002972:	e008      	b.n	8002986 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002974:	f7fe fd04 	bl	8001380 <HAL_GetTick>
 8002978:	4602      	mov	r2, r0
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	1ad3      	subs	r3, r2, r3
 800297e:	2b02      	cmp	r3, #2
 8002980:	d901      	bls.n	8002986 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8002982:	2303      	movs	r3, #3
 8002984:	e1c2      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002986:	4b21      	ldr	r3, [pc, #132]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d1f0      	bne.n	8002974 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0304 	and.w	r3, r3, #4
 800299a:	2b00      	cmp	r3, #0
 800299c:	f000 8086 	beq.w	8002aac <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80029a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a10 <HAL_RCC_OscConfig+0x4a8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a10 <HAL_RCC_OscConfig+0x4a8>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029aa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029ac:	f7fe fce8 	bl	8001380 <HAL_GetTick>
 80029b0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b4:	f7fe fce4 	bl	8001380 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e1a2      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029c6:	4b12      	ldr	r3, [pc, #72]	@ (8002a10 <HAL_RCC_OscConfig+0x4a8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d106      	bne.n	80029e8 <HAL_RCC_OscConfig+0x480>
 80029da:	4b0c      	ldr	r3, [pc, #48]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80029dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029de:	4a0b      	ldr	r2, [pc, #44]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029e6:	e032      	b.n	8002a4e <HAL_RCC_OscConfig+0x4e6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d111      	bne.n	8002a14 <HAL_RCC_OscConfig+0x4ac>
 80029f0:	4b06      	ldr	r3, [pc, #24]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80029f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029f4:	4a05      	ldr	r2, [pc, #20]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80029f6:	f023 0301 	bic.w	r3, r3, #1
 80029fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80029fc:	4b03      	ldr	r3, [pc, #12]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 80029fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a00:	4a02      	ldr	r2, [pc, #8]	@ (8002a0c <HAL_RCC_OscConfig+0x4a4>)
 8002a02:	f023 0304 	bic.w	r3, r3, #4
 8002a06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a08:	e021      	b.n	8002a4e <HAL_RCC_OscConfig+0x4e6>
 8002a0a:	bf00      	nop
 8002a0c:	58024400 	.word	0x58024400
 8002a10:	58024800 	.word	0x58024800
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b05      	cmp	r3, #5
 8002a1a:	d10c      	bne.n	8002a36 <HAL_RCC_OscConfig+0x4ce>
 8002a1c:	4b83      	ldr	r3, [pc, #524]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a20:	4a82      	ldr	r2, [pc, #520]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a22:	f043 0304 	orr.w	r3, r3, #4
 8002a26:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a28:	4b80      	ldr	r3, [pc, #512]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a2c:	4a7f      	ldr	r2, [pc, #508]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a2e:	f043 0301 	orr.w	r3, r3, #1
 8002a32:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a34:	e00b      	b.n	8002a4e <HAL_RCC_OscConfig+0x4e6>
 8002a36:	4b7d      	ldr	r3, [pc, #500]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a3a:	4a7c      	ldr	r2, [pc, #496]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a3c:	f023 0301 	bic.w	r3, r3, #1
 8002a40:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a42:	4b7a      	ldr	r3, [pc, #488]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a46:	4a79      	ldr	r2, [pc, #484]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a48:	f023 0304 	bic.w	r3, r3, #4
 8002a4c:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d015      	beq.n	8002a82 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a56:	f7fe fc93 	bl	8001380 <HAL_GetTick>
 8002a5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a5c:	e00a      	b.n	8002a74 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a5e:	f7fe fc8f 	bl	8001380 <HAL_GetTick>
 8002a62:	4602      	mov	r2, r0
 8002a64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a66:	1ad3      	subs	r3, r2, r3
 8002a68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e14b      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a74:	4b6d      	ldr	r3, [pc, #436]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0ee      	beq.n	8002a5e <HAL_RCC_OscConfig+0x4f6>
 8002a80:	e014      	b.n	8002aac <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a82:	f7fe fc7d 	bl	8001380 <HAL_GetTick>
 8002a86:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a88:	e00a      	b.n	8002aa0 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a8a:	f7fe fc79 	bl	8001380 <HAL_GetTick>
 8002a8e:	4602      	mov	r2, r0
 8002a90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e135      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aa0:	4b62      	ldr	r3, [pc, #392]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002aa2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1ee      	bne.n	8002a8a <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 812a 	beq.w	8002d0a <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ab6:	4b5d      	ldr	r3, [pc, #372]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002abe:	2b18      	cmp	r3, #24
 8002ac0:	f000 80ba 	beq.w	8002c38 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	f040 8095 	bne.w	8002bf8 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ace:	4b57      	ldr	r3, [pc, #348]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a56      	ldr	r2, [pc, #344]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002ad4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ad8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ada:	f7fe fc51 	bl	8001380 <HAL_GetTick>
 8002ade:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ae0:	e008      	b.n	8002af4 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ae2:	f7fe fc4d 	bl	8001380 <HAL_GetTick>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	2b02      	cmp	r3, #2
 8002aee:	d901      	bls.n	8002af4 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002af0:	2303      	movs	r3, #3
 8002af2:	e10b      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002af4:	4b4d      	ldr	r3, [pc, #308]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d1f0      	bne.n	8002ae2 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b00:	4b4a      	ldr	r3, [pc, #296]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b02:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002b04:	4b4a      	ldr	r3, [pc, #296]	@ (8002c30 <HAL_RCC_OscConfig+0x6c8>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002b0c:	687a      	ldr	r2, [r7, #4]
 8002b0e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002b10:	0112      	lsls	r2, r2, #4
 8002b12:	430a      	orrs	r2, r1
 8002b14:	4945      	ldr	r1, [pc, #276]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	628b      	str	r3, [r1, #40]	@ 0x28
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1e:	3b01      	subs	r3, #1
 8002b20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	025b      	lsls	r3, r3, #9
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	431a      	orrs	r2, r3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b34:	3b01      	subs	r3, #1
 8002b36:	041b      	lsls	r3, r3, #16
 8002b38:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b42:	3b01      	subs	r3, #1
 8002b44:	061b      	lsls	r3, r3, #24
 8002b46:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002b4a:	4938      	ldr	r1, [pc, #224]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002b50:	4b36      	ldr	r3, [pc, #216]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b54:	4a35      	ldr	r2, [pc, #212]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b56:	f023 0301 	bic.w	r3, r3, #1
 8002b5a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002b5c:	4b33      	ldr	r3, [pc, #204]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b5e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002b60:	4b34      	ldr	r3, [pc, #208]	@ (8002c34 <HAL_RCC_OscConfig+0x6cc>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	687a      	ldr	r2, [r7, #4]
 8002b66:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002b68:	00d2      	lsls	r2, r2, #3
 8002b6a:	4930      	ldr	r1, [pc, #192]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002b70:	4b2e      	ldr	r3, [pc, #184]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b74:	f023 020c 	bic.w	r2, r3, #12
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b7c:	492b      	ldr	r1, [pc, #172]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002b82:	4b2a      	ldr	r3, [pc, #168]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	f023 0202 	bic.w	r2, r3, #2
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b8e:	4927      	ldr	r1, [pc, #156]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b90:	4313      	orrs	r3, r2
 8002b92:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b94:	4b25      	ldr	r3, [pc, #148]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b98:	4a24      	ldr	r2, [pc, #144]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002b9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b9e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002ba0:	4b22      	ldr	r3, [pc, #136]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba4:	4a21      	ldr	r2, [pc, #132]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002ba6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002baa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002bac:	4b1f      	ldr	r3, [pc, #124]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bb0:	4a1e      	ldr	r2, [pc, #120]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bb2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002bb6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bbe:	f043 0301 	orr.w	r3, r3, #1
 8002bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bc4:	4b19      	ldr	r3, [pc, #100]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a18      	ldr	r2, [pc, #96]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002bce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fbd6 	bl	8001380 <HAL_GetTick>
 8002bd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bd8:	f7fe fbd2 	bl	8001380 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e090      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bea:	4b10      	ldr	r3, [pc, #64]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x670>
 8002bf6:	e088      	b.n	8002d0a <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bf8:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002bfe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002c02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c04:	f7fe fbbc 	bl	8001380 <HAL_GetTick>
 8002c08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0c:	f7fe fbb8 	bl	8001380 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e076      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c1e:	4b03      	ldr	r3, [pc, #12]	@ (8002c2c <HAL_RCC_OscConfig+0x6c4>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d1f0      	bne.n	8002c0c <HAL_RCC_OscConfig+0x6a4>
 8002c2a:	e06e      	b.n	8002d0a <HAL_RCC_OscConfig+0x7a2>
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	fffffc0c 	.word	0xfffffc0c
 8002c34:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002c38:	4b36      	ldr	r3, [pc, #216]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c3c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002c3e:	4b35      	ldr	r3, [pc, #212]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d031      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	f003 0203 	and.w	r2, r3, #3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d12a      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	091b      	lsrs	r3, r3, #4
 8002c5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d122      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c74:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002c76:	429a      	cmp	r2, r3
 8002c78:	d11a      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	0a5b      	lsrs	r3, r3, #9
 8002c7e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c86:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d111      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	0c1b      	lsrs	r3, r3, #16
 8002c90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c98:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d108      	bne.n	8002cb0 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	0e1b      	lsrs	r3, r3, #24
 8002ca2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002caa:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002cac:	429a      	cmp	r2, r3
 8002cae:	d001      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e02b      	b.n	8002d0c <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002cb4:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002cb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002cb8:	08db      	lsrs	r3, r3, #3
 8002cba:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002cbe:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cc4:	693a      	ldr	r2, [r7, #16]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d01f      	beq.n	8002d0a <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002cca:	4b12      	ldr	r3, [pc, #72]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	4a11      	ldr	r2, [pc, #68]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002cd0:	f023 0301 	bic.w	r3, r3, #1
 8002cd4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd6:	f7fe fb53 	bl	8001380 <HAL_GetTick>
 8002cda:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002cdc:	bf00      	nop
 8002cde:	f7fe fb4f 	bl	8001380 <HAL_GetTick>
 8002ce2:	4602      	mov	r2, r0
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d0f9      	beq.n	8002cde <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002cec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cee:	4b0a      	ldr	r3, [pc, #40]	@ (8002d18 <HAL_RCC_OscConfig+0x7b0>)
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002cf6:	00d2      	lsls	r2, r2, #3
 8002cf8:	4906      	ldr	r1, [pc, #24]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002cfe:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	4a04      	ldr	r2, [pc, #16]	@ (8002d14 <HAL_RCC_OscConfig+0x7ac>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	3730      	adds	r7, #48	@ 0x30
 8002d10:	46bd      	mov	sp, r7
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	58024400 	.word	0x58024400
 8002d18:	ffff0007 	.word	0xffff0007

08002d1c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d101      	bne.n	8002d30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e19c      	b.n	800306a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d30:	4b8a      	ldr	r3, [pc, #552]	@ (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 030f 	and.w	r3, r3, #15
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d910      	bls.n	8002d60 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3e:	4b87      	ldr	r3, [pc, #540]	@ (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f023 020f 	bic.w	r2, r3, #15
 8002d46:	4985      	ldr	r1, [pc, #532]	@ (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4e:	4b83      	ldr	r3, [pc, #524]	@ (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 030f 	and.w	r3, r3, #15
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d001      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e184      	b.n	800306a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691a      	ldr	r2, [r3, #16]
 8002d70:	4b7b      	ldr	r3, [pc, #492]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002d72:	699b      	ldr	r3, [r3, #24]
 8002d74:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d908      	bls.n	8002d8e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d7c:	4b78      	ldr	r3, [pc, #480]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002d7e:	699b      	ldr	r3, [r3, #24]
 8002d80:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691b      	ldr	r3, [r3, #16]
 8002d88:	4975      	ldr	r1, [pc, #468]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d010      	beq.n	8002dbc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	695a      	ldr	r2, [r3, #20]
 8002d9e:	4b70      	ldr	r3, [pc, #448]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002da0:	69db      	ldr	r3, [r3, #28]
 8002da2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d908      	bls.n	8002dbc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002daa:	4b6d      	ldr	r3, [pc, #436]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	496a      	ldr	r1, [pc, #424]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0310 	and.w	r3, r3, #16
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d010      	beq.n	8002dea <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699a      	ldr	r2, [r3, #24]
 8002dcc:	4b64      	ldr	r3, [pc, #400]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002dce:	69db      	ldr	r3, [r3, #28]
 8002dd0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d908      	bls.n	8002dea <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002dd8:	4b61      	ldr	r3, [pc, #388]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002dda:	69db      	ldr	r3, [r3, #28]
 8002ddc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	699b      	ldr	r3, [r3, #24]
 8002de4:	495e      	ldr	r1, [pc, #376]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0320 	and.w	r3, r3, #32
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d010      	beq.n	8002e18 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69da      	ldr	r2, [r3, #28]
 8002dfa:	4b59      	ldr	r3, [pc, #356]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	6a1b      	ldr	r3, [r3, #32]
 8002dfe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002e02:	429a      	cmp	r2, r3
 8002e04:	d908      	bls.n	8002e18 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002e06:	4b56      	ldr	r3, [pc, #344]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	4953      	ldr	r1, [pc, #332]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e14:	4313      	orrs	r3, r2
 8002e16:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d010      	beq.n	8002e46 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68da      	ldr	r2, [r3, #12]
 8002e28:	4b4d      	ldr	r3, [pc, #308]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	f003 030f 	and.w	r3, r3, #15
 8002e30:	429a      	cmp	r2, r3
 8002e32:	d908      	bls.n	8002e46 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e34:	4b4a      	ldr	r3, [pc, #296]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	f023 020f 	bic.w	r2, r3, #15
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4947      	ldr	r1, [pc, #284]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	4313      	orrs	r3, r2
 8002e44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f003 0301 	and.w	r3, r3, #1
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d055      	beq.n	8002efe <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002e52:	4b43      	ldr	r3, [pc, #268]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e54:	699b      	ldr	r3, [r3, #24]
 8002e56:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	4940      	ldr	r1, [pc, #256]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d107      	bne.n	8002e7c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d121      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e0f6      	b.n	800306a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d107      	bne.n	8002e94 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e84:	4b36      	ldr	r3, [pc, #216]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d115      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e0ea      	b.n	800306a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d107      	bne.n	8002eac <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e9c:	4b30      	ldr	r3, [pc, #192]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d109      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	e0de      	b.n	800306a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eac:	4b2c      	ldr	r3, [pc, #176]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f003 0304 	and.w	r3, r3, #4
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d101      	bne.n	8002ebc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	e0d6      	b.n	800306a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ebc:	4b28      	ldr	r3, [pc, #160]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f023 0207 	bic.w	r2, r3, #7
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4925      	ldr	r1, [pc, #148]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ece:	f7fe fa57 	bl	8001380 <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ed4:	e00a      	b.n	8002eec <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ed6:	f7fe fa53 	bl	8001380 <HAL_GetTick>
 8002eda:	4602      	mov	r2, r0
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	1ad3      	subs	r3, r2, r3
 8002ee0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e0be      	b.n	800306a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eec:	4b1c      	ldr	r3, [pc, #112]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002eee:	691b      	ldr	r3, [r3, #16]
 8002ef0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	00db      	lsls	r3, r3, #3
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d1eb      	bne.n	8002ed6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0302 	and.w	r3, r3, #2
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d010      	beq.n	8002f2c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	68da      	ldr	r2, [r3, #12]
 8002f0e:	4b14      	ldr	r3, [pc, #80]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d208      	bcs.n	8002f2c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f1a:	4b11      	ldr	r3, [pc, #68]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002f1c:	699b      	ldr	r3, [r3, #24]
 8002f1e:	f023 020f 	bic.w	r2, r3, #15
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	490e      	ldr	r1, [pc, #56]	@ (8002f60 <HAL_RCC_ClockConfig+0x244>)
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f2c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d214      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f3a:	4b08      	ldr	r3, [pc, #32]	@ (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f023 020f 	bic.w	r2, r3, #15
 8002f42:	4906      	ldr	r1, [pc, #24]	@ (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f4a:	4b04      	ldr	r3, [pc, #16]	@ (8002f5c <HAL_RCC_ClockConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f003 030f 	and.w	r3, r3, #15
 8002f52:	683a      	ldr	r2, [r7, #0]
 8002f54:	429a      	cmp	r2, r3
 8002f56:	d005      	beq.n	8002f64 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e086      	b.n	800306a <HAL_RCC_ClockConfig+0x34e>
 8002f5c:	52002000 	.word	0x52002000
 8002f60:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d010      	beq.n	8002f92 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691a      	ldr	r2, [r3, #16]
 8002f74:	4b3f      	ldr	r3, [pc, #252]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002f76:	699b      	ldr	r3, [r3, #24]
 8002f78:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d208      	bcs.n	8002f92 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002f80:	4b3c      	ldr	r3, [pc, #240]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002f82:	699b      	ldr	r3, [r3, #24]
 8002f84:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	4939      	ldr	r1, [pc, #228]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0308 	and.w	r3, r3, #8
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d010      	beq.n	8002fc0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	695a      	ldr	r2, [r3, #20]
 8002fa2:	4b34      	ldr	r3, [pc, #208]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002fa4:	69db      	ldr	r3, [r3, #28]
 8002fa6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d208      	bcs.n	8002fc0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fae:	4b31      	ldr	r3, [pc, #196]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002fb0:	69db      	ldr	r3, [r3, #28]
 8002fb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	492e      	ldr	r1, [pc, #184]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0310 	and.w	r3, r3, #16
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d010      	beq.n	8002fee <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	699a      	ldr	r2, [r3, #24]
 8002fd0:	4b28      	ldr	r3, [pc, #160]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d208      	bcs.n	8002fee <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002fdc:	4b25      	ldr	r3, [pc, #148]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002fde:	69db      	ldr	r3, [r3, #28]
 8002fe0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	699b      	ldr	r3, [r3, #24]
 8002fe8:	4922      	ldr	r1, [pc, #136]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0320 	and.w	r3, r3, #32
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d010      	beq.n	800301c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	69da      	ldr	r2, [r3, #28]
 8002ffe:	4b1d      	ldr	r3, [pc, #116]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8003000:	6a1b      	ldr	r3, [r3, #32]
 8003002:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003006:	429a      	cmp	r2, r3
 8003008:	d208      	bcs.n	800301c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800300a:	4b1a      	ldr	r3, [pc, #104]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 800300c:	6a1b      	ldr	r3, [r3, #32]
 800300e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	69db      	ldr	r3, [r3, #28]
 8003016:	4917      	ldr	r1, [pc, #92]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8003018:	4313      	orrs	r3, r2
 800301a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800301c:	f000 f834 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003020:	4602      	mov	r2, r0
 8003022:	4b14      	ldr	r3, [pc, #80]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	0a1b      	lsrs	r3, r3, #8
 8003028:	f003 030f 	and.w	r3, r3, #15
 800302c:	4912      	ldr	r1, [pc, #72]	@ (8003078 <HAL_RCC_ClockConfig+0x35c>)
 800302e:	5ccb      	ldrb	r3, [r1, r3]
 8003030:	f003 031f 	and.w	r3, r3, #31
 8003034:	fa22 f303 	lsr.w	r3, r2, r3
 8003038:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800303a:	4b0e      	ldr	r3, [pc, #56]	@ (8003074 <HAL_RCC_ClockConfig+0x358>)
 800303c:	699b      	ldr	r3, [r3, #24]
 800303e:	f003 030f 	and.w	r3, r3, #15
 8003042:	4a0d      	ldr	r2, [pc, #52]	@ (8003078 <HAL_RCC_ClockConfig+0x35c>)
 8003044:	5cd3      	ldrb	r3, [r2, r3]
 8003046:	f003 031f 	and.w	r3, r3, #31
 800304a:	693a      	ldr	r2, [r7, #16]
 800304c:	fa22 f303 	lsr.w	r3, r2, r3
 8003050:	4a0a      	ldr	r2, [pc, #40]	@ (800307c <HAL_RCC_ClockConfig+0x360>)
 8003052:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003054:	4a0a      	ldr	r2, [pc, #40]	@ (8003080 <HAL_RCC_ClockConfig+0x364>)
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800305a:	4b0a      	ldr	r3, [pc, #40]	@ (8003084 <HAL_RCC_ClockConfig+0x368>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe f958 	bl	8001314 <HAL_InitTick>
 8003064:	4603      	mov	r3, r0
 8003066:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003068:	7bfb      	ldrb	r3, [r7, #15]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3718      	adds	r7, #24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}
 8003072:	bf00      	nop
 8003074:	58024400 	.word	0x58024400
 8003078:	08007abc 	.word	0x08007abc
 800307c:	24000004 	.word	0x24000004
 8003080:	24000000 	.word	0x24000000
 8003084:	24000008 	.word	0x24000008

08003088 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003088:	b480      	push	{r7}
 800308a:	b089      	sub	sp, #36	@ 0x24
 800308c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800308e:	4bb3      	ldr	r3, [pc, #716]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003090:	691b      	ldr	r3, [r3, #16]
 8003092:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003096:	2b18      	cmp	r3, #24
 8003098:	f200 8155 	bhi.w	8003346 <HAL_RCC_GetSysClockFreq+0x2be>
 800309c:	a201      	add	r2, pc, #4	@ (adr r2, 80030a4 <HAL_RCC_GetSysClockFreq+0x1c>)
 800309e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030a2:	bf00      	nop
 80030a4:	08003109 	.word	0x08003109
 80030a8:	08003347 	.word	0x08003347
 80030ac:	08003347 	.word	0x08003347
 80030b0:	08003347 	.word	0x08003347
 80030b4:	08003347 	.word	0x08003347
 80030b8:	08003347 	.word	0x08003347
 80030bc:	08003347 	.word	0x08003347
 80030c0:	08003347 	.word	0x08003347
 80030c4:	0800312f 	.word	0x0800312f
 80030c8:	08003347 	.word	0x08003347
 80030cc:	08003347 	.word	0x08003347
 80030d0:	08003347 	.word	0x08003347
 80030d4:	08003347 	.word	0x08003347
 80030d8:	08003347 	.word	0x08003347
 80030dc:	08003347 	.word	0x08003347
 80030e0:	08003347 	.word	0x08003347
 80030e4:	08003135 	.word	0x08003135
 80030e8:	08003347 	.word	0x08003347
 80030ec:	08003347 	.word	0x08003347
 80030f0:	08003347 	.word	0x08003347
 80030f4:	08003347 	.word	0x08003347
 80030f8:	08003347 	.word	0x08003347
 80030fc:	08003347 	.word	0x08003347
 8003100:	08003347 	.word	0x08003347
 8003104:	0800313b 	.word	0x0800313b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003108:	4b94      	ldr	r3, [pc, #592]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d009      	beq.n	8003128 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003114:	4b91      	ldr	r3, [pc, #580]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	4a90      	ldr	r2, [pc, #576]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003126:	e111      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003128:	4b8d      	ldr	r3, [pc, #564]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800312a:	61bb      	str	r3, [r7, #24]
      break;
 800312c:	e10e      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800312e:	4b8d      	ldr	r3, [pc, #564]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003130:	61bb      	str	r3, [r7, #24]
      break;
 8003132:	e10b      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003134:	4b8c      	ldr	r3, [pc, #560]	@ (8003368 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003136:	61bb      	str	r3, [r7, #24]
      break;
 8003138:	e108      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800313a:	4b88      	ldr	r3, [pc, #544]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800313c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800313e:	f003 0303 	and.w	r3, r3, #3
 8003142:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003144:	4b85      	ldr	r3, [pc, #532]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800314e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003150:	4b82      	ldr	r3, [pc, #520]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003154:	f003 0301 	and.w	r3, r3, #1
 8003158:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800315a:	4b80      	ldr	r3, [pc, #512]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800315c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800315e:	08db      	lsrs	r3, r3, #3
 8003160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	fb02 f303 	mul.w	r3, r2, r3
 800316a:	ee07 3a90 	vmov	s15, r3
 800316e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003172:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 80e1 	beq.w	8003340 <HAL_RCC_GetSysClockFreq+0x2b8>
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	2b02      	cmp	r3, #2
 8003182:	f000 8083 	beq.w	800328c <HAL_RCC_GetSysClockFreq+0x204>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b02      	cmp	r3, #2
 800318a:	f200 80a1 	bhi.w	80032d0 <HAL_RCC_GetSysClockFreq+0x248>
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d003      	beq.n	800319c <HAL_RCC_GetSysClockFreq+0x114>
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	2b01      	cmp	r3, #1
 8003198:	d056      	beq.n	8003248 <HAL_RCC_GetSysClockFreq+0x1c0>
 800319a:	e099      	b.n	80032d0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800319c:	4b6f      	ldr	r3, [pc, #444]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0320 	and.w	r3, r3, #32
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d02d      	beq.n	8003204 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031a8:	4b6c      	ldr	r3, [pc, #432]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	08db      	lsrs	r3, r3, #3
 80031ae:	f003 0303 	and.w	r3, r3, #3
 80031b2:	4a6b      	ldr	r2, [pc, #428]	@ (8003360 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031b4:	fa22 f303 	lsr.w	r3, r2, r3
 80031b8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	ee07 3a90 	vmov	s15, r3
 80031c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	ee07 3a90 	vmov	s15, r3
 80031ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031d2:	4b62      	ldr	r3, [pc, #392]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031da:	ee07 3a90 	vmov	s15, r3
 80031de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800336c <HAL_RCC_GetSysClockFreq+0x2e4>
 80031ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003202:	e087      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	ee07 3a90 	vmov	s15, r3
 800320a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8003370 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003216:	4b51      	ldr	r3, [pc, #324]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003226:	ed97 6a02 	vldr	s12, [r7, #8]
 800322a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800336c <HAL_RCC_GetSysClockFreq+0x2e4>
 800322e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800323a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003242:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003246:	e065      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003248:	693b      	ldr	r3, [r7, #16]
 800324a:	ee07 3a90 	vmov	s15, r3
 800324e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003252:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8003374 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800325a:	4b40      	ldr	r3, [pc, #256]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800325c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003262:	ee07 3a90 	vmov	s15, r3
 8003266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800326a:	ed97 6a02 	vldr	s12, [r7, #8]
 800326e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800336c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800327a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800327e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003286:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800328a:	e043      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	ee07 3a90 	vmov	s15, r3
 8003292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003296:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8003378 <HAL_RCC_GetSysClockFreq+0x2f0>
 800329a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800329e:	4b2f      	ldr	r3, [pc, #188]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800336c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80032c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80032ce:	e021      	b.n	8003314 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032da:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003374 <HAL_RCC_GetSysClockFreq+0x2ec>
 80032de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e2:	4b1e      	ldr	r3, [pc, #120]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ea:	ee07 3a90 	vmov	s15, r3
 80032ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032f6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800336c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800330e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003312:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003314:	4b11      	ldr	r3, [pc, #68]	@ (800335c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003318:	0a5b      	lsrs	r3, r3, #9
 800331a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800331e:	3301      	adds	r3, #1
 8003320:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	ee07 3a90 	vmov	s15, r3
 8003328:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800332c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003330:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003334:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003338:	ee17 3a90 	vmov	r3, s15
 800333c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800333e:	e005      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003340:	2300      	movs	r3, #0
 8003342:	61bb      	str	r3, [r7, #24]
      break;
 8003344:	e002      	b.n	800334c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003346:	4b07      	ldr	r3, [pc, #28]	@ (8003364 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003348:	61bb      	str	r3, [r7, #24]
      break;
 800334a:	bf00      	nop
  }

  return sysclockfreq;
 800334c:	69bb      	ldr	r3, [r7, #24]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3724      	adds	r7, #36	@ 0x24
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	58024400 	.word	0x58024400
 8003360:	03d09000 	.word	0x03d09000
 8003364:	003d0900 	.word	0x003d0900
 8003368:	007a1200 	.word	0x007a1200
 800336c:	46000000 	.word	0x46000000
 8003370:	4c742400 	.word	0x4c742400
 8003374:	4a742400 	.word	0x4a742400
 8003378:	4af42400 	.word	0x4af42400

0800337c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003382:	f7ff fe81 	bl	8003088 <HAL_RCC_GetSysClockFreq>
 8003386:	4602      	mov	r2, r0
 8003388:	4b10      	ldr	r3, [pc, #64]	@ (80033cc <HAL_RCC_GetHCLKFreq+0x50>)
 800338a:	699b      	ldr	r3, [r3, #24]
 800338c:	0a1b      	lsrs	r3, r3, #8
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	490f      	ldr	r1, [pc, #60]	@ (80033d0 <HAL_RCC_GetHCLKFreq+0x54>)
 8003394:	5ccb      	ldrb	r3, [r1, r3]
 8003396:	f003 031f 	and.w	r3, r3, #31
 800339a:	fa22 f303 	lsr.w	r3, r2, r3
 800339e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80033a0:	4b0a      	ldr	r3, [pc, #40]	@ (80033cc <HAL_RCC_GetHCLKFreq+0x50>)
 80033a2:	699b      	ldr	r3, [r3, #24]
 80033a4:	f003 030f 	and.w	r3, r3, #15
 80033a8:	4a09      	ldr	r2, [pc, #36]	@ (80033d0 <HAL_RCC_GetHCLKFreq+0x54>)
 80033aa:	5cd3      	ldrb	r3, [r2, r3]
 80033ac:	f003 031f 	and.w	r3, r3, #31
 80033b0:	687a      	ldr	r2, [r7, #4]
 80033b2:	fa22 f303 	lsr.w	r3, r2, r3
 80033b6:	4a07      	ldr	r2, [pc, #28]	@ (80033d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80033b8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80033ba:	4a07      	ldr	r2, [pc, #28]	@ (80033d8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80033c0:	4b04      	ldr	r3, [pc, #16]	@ (80033d4 <HAL_RCC_GetHCLKFreq+0x58>)
 80033c2:	681b      	ldr	r3, [r3, #0]
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3708      	adds	r7, #8
 80033c8:	46bd      	mov	sp, r7
 80033ca:	bd80      	pop	{r7, pc}
 80033cc:	58024400 	.word	0x58024400
 80033d0:	08007abc 	.word	0x08007abc
 80033d4:	24000004 	.word	0x24000004
 80033d8:	24000000 	.word	0x24000000

080033dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80033e0:	f7ff ffcc 	bl	800337c <HAL_RCC_GetHCLKFreq>
 80033e4:	4602      	mov	r2, r0
 80033e6:	4b06      	ldr	r3, [pc, #24]	@ (8003400 <HAL_RCC_GetPCLK1Freq+0x24>)
 80033e8:	69db      	ldr	r3, [r3, #28]
 80033ea:	091b      	lsrs	r3, r3, #4
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	4904      	ldr	r1, [pc, #16]	@ (8003404 <HAL_RCC_GetPCLK1Freq+0x28>)
 80033f2:	5ccb      	ldrb	r3, [r1, r3]
 80033f4:	f003 031f 	and.w	r3, r3, #31
 80033f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	58024400 	.word	0x58024400
 8003404:	08007abc 	.word	0x08007abc

08003408 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800340c:	f7ff ffb6 	bl	800337c <HAL_RCC_GetHCLKFreq>
 8003410:	4602      	mov	r2, r0
 8003412:	4b06      	ldr	r3, [pc, #24]	@ (800342c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003414:	69db      	ldr	r3, [r3, #28]
 8003416:	0a1b      	lsrs	r3, r3, #8
 8003418:	f003 0307 	and.w	r3, r3, #7
 800341c:	4904      	ldr	r1, [pc, #16]	@ (8003430 <HAL_RCC_GetPCLK2Freq+0x28>)
 800341e:	5ccb      	ldrb	r3, [r1, r3]
 8003420:	f003 031f 	and.w	r3, r3, #31
 8003424:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003428:	4618      	mov	r0, r3
 800342a:	bd80      	pop	{r7, pc}
 800342c:	58024400 	.word	0x58024400
 8003430:	08007abc 	.word	0x08007abc

08003434 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003434:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003438:	b0c6      	sub	sp, #280	@ 0x118
 800343a:	af00      	add	r7, sp, #0
 800343c:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003440:	2300      	movs	r3, #0
 8003442:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003446:	2300      	movs	r3, #0
 8003448:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800344c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003454:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003458:	2500      	movs	r5, #0
 800345a:	ea54 0305 	orrs.w	r3, r4, r5
 800345e:	d049      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003460:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003464:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003466:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800346a:	d02f      	beq.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800346c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003470:	d828      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003472:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003476:	d01a      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003478:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800347c:	d822      	bhi.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003486:	d007      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003488:	e01c      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800348a:	4bab      	ldr	r3, [pc, #684]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800348c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800348e:	4aaa      	ldr	r2, [pc, #680]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003490:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003494:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003496:	e01a      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003498:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800349c:	3308      	adds	r3, #8
 800349e:	2102      	movs	r1, #2
 80034a0:	4618      	mov	r0, r3
 80034a2:	f001 fc25 	bl	8004cf0 <RCCEx_PLL2_Config>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034ac:	e00f      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b2:	3328      	adds	r3, #40	@ 0x28
 80034b4:	2102      	movs	r1, #2
 80034b6:	4618      	mov	r0, r3
 80034b8:	f001 fccc 	bl	8004e54 <RCCEx_PLL3_Config>
 80034bc:	4603      	mov	r3, r0
 80034be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034c2:	e004      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034ca:	e000      	b.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034ce:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d10a      	bne.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034d6:	4b98      	ldr	r3, [pc, #608]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034da:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80034e4:	4a94      	ldr	r2, [pc, #592]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034e6:	430b      	orrs	r3, r1
 80034e8:	6513      	str	r3, [r2, #80]	@ 0x50
 80034ea:	e003      	b.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034f0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034fc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003500:	f04f 0900 	mov.w	r9, #0
 8003504:	ea58 0309 	orrs.w	r3, r8, r9
 8003508:	d047      	beq.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800350a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	2b04      	cmp	r3, #4
 8003512:	d82a      	bhi.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003514:	a201      	add	r2, pc, #4	@ (adr r2, 800351c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003516:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351a:	bf00      	nop
 800351c:	08003531 	.word	0x08003531
 8003520:	0800353f 	.word	0x0800353f
 8003524:	08003555 	.word	0x08003555
 8003528:	08003573 	.word	0x08003573
 800352c:	08003573 	.word	0x08003573
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003530:	4b81      	ldr	r3, [pc, #516]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003532:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003534:	4a80      	ldr	r2, [pc, #512]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003536:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800353a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800353c:	e01a      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800353e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003542:	3308      	adds	r3, #8
 8003544:	2100      	movs	r1, #0
 8003546:	4618      	mov	r0, r3
 8003548:	f001 fbd2 	bl	8004cf0 <RCCEx_PLL2_Config>
 800354c:	4603      	mov	r3, r0
 800354e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003552:	e00f      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003558:	3328      	adds	r3, #40	@ 0x28
 800355a:	2100      	movs	r1, #0
 800355c:	4618      	mov	r0, r3
 800355e:	f001 fc79 	bl	8004e54 <RCCEx_PLL3_Config>
 8003562:	4603      	mov	r3, r0
 8003564:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003568:	e004      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003570:	e000      	b.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003572:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003574:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003578:	2b00      	cmp	r3, #0
 800357a:	d10a      	bne.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800357c:	4b6e      	ldr	r3, [pc, #440]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800357e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003580:	f023 0107 	bic.w	r1, r3, #7
 8003584:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003588:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800358a:	4a6b      	ldr	r2, [pc, #428]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800358c:	430b      	orrs	r3, r1
 800358e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003590:	e003      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003596:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800359a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800359e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a2:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80035a6:	f04f 0b00 	mov.w	fp, #0
 80035aa:	ea5a 030b 	orrs.w	r3, sl, fp
 80035ae:	d05b      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80035b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035b4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035b8:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80035bc:	d03b      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x202>
 80035be:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80035c2:	d834      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035c4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035c8:	d037      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x206>
 80035ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80035ce:	d82e      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035d0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035d4:	d033      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80035d6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80035da:	d828      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e0:	d01a      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80035e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e6:	d822      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d003      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80035ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035f0:	d007      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80035f2:	e01c      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f4:	4b50      	ldr	r3, [pc, #320]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035f8:	4a4f      	ldr	r2, [pc, #316]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003600:	e01e      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003602:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003606:	3308      	adds	r3, #8
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f001 fb70 	bl	8004cf0 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003616:	e013      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003618:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800361c:	3328      	adds	r3, #40	@ 0x28
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f001 fc17 	bl	8004e54 <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800362c:	e008      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003634:	e004      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8003636:	bf00      	nop
 8003638:	e002      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800363a:	bf00      	nop
 800363c:	e000      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800363e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003644:	2b00      	cmp	r3, #0
 8003646:	d10b      	bne.n	8003660 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8003648:	4b3b      	ldr	r3, [pc, #236]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800364a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800364c:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003650:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003654:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003658:	4a37      	ldr	r2, [pc, #220]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800365a:	430b      	orrs	r3, r1
 800365c:	6593      	str	r3, [r2, #88]	@ 0x58
 800365e:	e003      	b.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003660:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003664:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8003668:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800366c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003670:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003674:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003678:	2300      	movs	r3, #0
 800367a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800367e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003682:	460b      	mov	r3, r1
 8003684:	4313      	orrs	r3, r2
 8003686:	d05d      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8003688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800368c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003690:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003694:	d03b      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8003696:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800369a:	d834      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800369c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036a0:	d037      	beq.n	8003712 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80036a2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80036a6:	d82e      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036a8:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036ac:	d033      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80036ae:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80036b2:	d828      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036b4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036b8:	d01a      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80036ba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80036be:	d822      	bhi.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d003      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x298>
 80036c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80036c8:	d007      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80036ca:	e01c      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036d0:	4a19      	ldr	r2, [pc, #100]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036d8:	e01e      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036de:	3308      	adds	r3, #8
 80036e0:	2100      	movs	r1, #0
 80036e2:	4618      	mov	r0, r3
 80036e4:	f001 fb04 	bl	8004cf0 <RCCEx_PLL2_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036ee:	e013      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036f4:	3328      	adds	r3, #40	@ 0x28
 80036f6:	2100      	movs	r1, #0
 80036f8:	4618      	mov	r0, r3
 80036fa:	f001 fbab 	bl	8004e54 <RCCEx_PLL3_Config>
 80036fe:	4603      	mov	r3, r0
 8003700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003704:	e008      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800370c:	e004      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800370e:	bf00      	nop
 8003710:	e002      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003712:	bf00      	nop
 8003714:	e000      	b.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003718:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10d      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003720:	4b05      	ldr	r3, [pc, #20]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003722:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003724:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003728:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800372c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003730:	4a01      	ldr	r2, [pc, #4]	@ (8003738 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003732:	430b      	orrs	r3, r1
 8003734:	6593      	str	r3, [r2, #88]	@ 0x58
 8003736:	e005      	b.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8003738:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800373c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003740:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003744:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003750:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003754:	2300      	movs	r3, #0
 8003756:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800375a:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800375e:	460b      	mov	r3, r1
 8003760:	4313      	orrs	r3, r2
 8003762:	d03a      	beq.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8003764:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800376a:	2b30      	cmp	r3, #48	@ 0x30
 800376c:	d01f      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800376e:	2b30      	cmp	r3, #48	@ 0x30
 8003770:	d819      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8003772:	2b20      	cmp	r3, #32
 8003774:	d00c      	beq.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8003776:	2b20      	cmp	r3, #32
 8003778:	d815      	bhi.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800377a:	2b00      	cmp	r3, #0
 800377c:	d019      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800377e:	2b10      	cmp	r3, #16
 8003780:	d111      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003782:	4baa      	ldr	r3, [pc, #680]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003786:	4aa9      	ldr	r2, [pc, #676]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003788:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800378c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800378e:	e011      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003790:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003794:	3308      	adds	r3, #8
 8003796:	2102      	movs	r1, #2
 8003798:	4618      	mov	r0, r3
 800379a:	f001 faa9 	bl	8004cf0 <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80037a4:	e006      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80037a6:	2301      	movs	r3, #1
 80037a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037ac:	e002      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80037ae:	bf00      	nop
 80037b0:	e000      	b.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80037b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d10a      	bne.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80037bc:	4b9b      	ldr	r3, [pc, #620]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037c0:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80037c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80037ca:	4a98      	ldr	r2, [pc, #608]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80037d0:	e003      	b.n	80037da <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80037da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e2:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 80037e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037ea:	2300      	movs	r3, #0
 80037ec:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80037f0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d051      	beq.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80037fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003804:	d035      	beq.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8003806:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800380a:	d82e      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x436>
 800380c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003810:	d031      	beq.n	8003876 <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003812:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003816:	d828      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003818:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800381c:	d01a      	beq.n	8003854 <HAL_RCCEx_PeriphCLKConfig+0x420>
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003822:	d822      	bhi.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8003828:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800382c:	d007      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800382e:	e01c      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003830:	4b7e      	ldr	r3, [pc, #504]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003832:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003834:	4a7d      	ldr	r2, [pc, #500]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003836:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800383a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800383c:	e01c      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800383e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003842:	3308      	adds	r3, #8
 8003844:	2100      	movs	r1, #0
 8003846:	4618      	mov	r0, r3
 8003848:	f001 fa52 	bl	8004cf0 <RCCEx_PLL2_Config>
 800384c:	4603      	mov	r3, r0
 800384e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003852:	e011      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003854:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003858:	3328      	adds	r3, #40	@ 0x28
 800385a:	2100      	movs	r1, #0
 800385c:	4618      	mov	r0, r3
 800385e:	f001 faf9 	bl	8004e54 <RCCEx_PLL3_Config>
 8003862:	4603      	mov	r3, r0
 8003864:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003868:	e006      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003870:	e002      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003872:	bf00      	nop
 8003874:	e000      	b.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8003876:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003878:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800387c:	2b00      	cmp	r3, #0
 800387e:	d10a      	bne.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003880:	4b6a      	ldr	r3, [pc, #424]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003884:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388e:	4a67      	ldr	r2, [pc, #412]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003890:	430b      	orrs	r3, r1
 8003892:	6513      	str	r3, [r2, #80]	@ 0x50
 8003894:	e003      	b.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003896:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800389a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800389e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80038aa:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80038b4:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4313      	orrs	r3, r2
 80038bc:	d053      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80038be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038c8:	d033      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 80038ca:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80038ce:	d82c      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038d0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038d4:	d02f      	beq.n	8003936 <HAL_RCCEx_PeriphCLKConfig+0x502>
 80038d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80038da:	d826      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038dc:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038e0:	d02b      	beq.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x506>
 80038e2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80038e6:	d820      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038e8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038ec:	d012      	beq.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 80038ee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80038f2:	d81a      	bhi.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d022      	beq.n	800393e <HAL_RCCEx_PeriphCLKConfig+0x50a>
 80038f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038fc:	d115      	bne.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003902:	3308      	adds	r3, #8
 8003904:	2101      	movs	r1, #1
 8003906:	4618      	mov	r0, r3
 8003908:	f001 f9f2 	bl	8004cf0 <RCCEx_PLL2_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003912:	e015      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003914:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003918:	3328      	adds	r3, #40	@ 0x28
 800391a:	2101      	movs	r1, #1
 800391c:	4618      	mov	r0, r3
 800391e:	f001 fa99 	bl	8004e54 <RCCEx_PLL3_Config>
 8003922:	4603      	mov	r3, r0
 8003924:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003928:	e00a      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800392a:	2301      	movs	r3, #1
 800392c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003930:	e006      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003932:	bf00      	nop
 8003934:	e004      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8003936:	bf00      	nop
 8003938:	e002      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800393a:	bf00      	nop
 800393c:	e000      	b.n	8003940 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 800393e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003944:	2b00      	cmp	r3, #0
 8003946:	d10a      	bne.n	800395e <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003948:	4b38      	ldr	r3, [pc, #224]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800394a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800394c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003954:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003956:	4a35      	ldr	r2, [pc, #212]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003958:	430b      	orrs	r3, r1
 800395a:	6513      	str	r3, [r2, #80]	@ 0x50
 800395c:	e003      	b.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003962:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003966:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800396a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396e:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003972:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003976:	2300      	movs	r3, #0
 8003978:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800397c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003980:	460b      	mov	r3, r1
 8003982:	4313      	orrs	r3, r2
 8003984:	d058      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003986:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800398a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800398e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003992:	d033      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003994:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003998:	d82c      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800399a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800399e:	d02f      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80039a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a4:	d826      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039aa:	d02b      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80039ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80039b0:	d820      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039b6:	d012      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80039b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039bc:	d81a      	bhi.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d022      	beq.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80039c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039c6:	d115      	bne.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039cc:	3308      	adds	r3, #8
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f001 f98d 	bl	8004cf0 <RCCEx_PLL2_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039dc:	e015      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039e2:	3328      	adds	r3, #40	@ 0x28
 80039e4:	2101      	movs	r1, #1
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fa34 	bl	8004e54 <RCCEx_PLL3_Config>
 80039ec:	4603      	mov	r3, r0
 80039ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80039f2:	e00a      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80039fa:	e006      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 80039fc:	bf00      	nop
 80039fe:	e004      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a00:	bf00      	nop
 8003a02:	e002      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a04:	bf00      	nop
 8003a06:	e000      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003a08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10e      	bne.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003a12:	4b06      	ldr	r3, [pc, #24]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a16:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003a1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a1e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a22:	4a02      	ldr	r2, [pc, #8]	@ (8003a2c <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003a24:	430b      	orrs	r3, r1
 8003a26:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a28:	e006      	b.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8003a2a:	bf00      	nop
 8003a2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a30:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a34:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a40:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003a44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003a48:	2300      	movs	r3, #0
 8003a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003a4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003a52:	460b      	mov	r3, r1
 8003a54:	4313      	orrs	r3, r2
 8003a56:	d037      	beq.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003a58:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a62:	d00e      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8003a64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003a68:	d816      	bhi.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d018      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8003a6e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003a72:	d111      	bne.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a74:	4bc4      	ldr	r3, [pc, #784]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a78:	4ac3      	ldr	r2, [pc, #780]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a80:	e00f      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a82:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a86:	3308      	adds	r3, #8
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f001 f930 	bl	8004cf0 <RCCEx_PLL2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a96:	e004      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a9e:	e000      	b.n	8003aa2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003aa0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10a      	bne.n	8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003aaa:	4bb7      	ldr	r3, [pc, #732]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003aae:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003ab2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ab6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ab8:	4ab3      	ldr	r2, [pc, #716]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003aba:	430b      	orrs	r3, r1
 8003abc:	6513      	str	r3, [r2, #80]	@ 0x50
 8003abe:	e003      	b.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ac4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ac8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003acc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad0:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003ad4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ad8:	2300      	movs	r3, #0
 8003ada:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ade:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003ae2:	460b      	mov	r3, r1
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	d039      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003ae8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003aec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aee:	2b03      	cmp	r3, #3
 8003af0:	d81c      	bhi.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003af2:	a201      	add	r2, pc, #4	@ (adr r2, 8003af8 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003af4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af8:	08003b35 	.word	0x08003b35
 8003afc:	08003b09 	.word	0x08003b09
 8003b00:	08003b17 	.word	0x08003b17
 8003b04:	08003b35 	.word	0x08003b35
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b08:	4b9f      	ldr	r3, [pc, #636]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b0c:	4a9e      	ldr	r2, [pc, #632]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b14:	e00f      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003b16:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2102      	movs	r1, #2
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f001 f8e6 	bl	8004cf0 <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003b2a:	e004      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b32:	e000      	b.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003b34:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d10a      	bne.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003b3e:	4b92      	ldr	r3, [pc, #584]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b40:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b42:	f023 0103 	bic.w	r1, r3, #3
 8003b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4c:	4a8e      	ldr	r2, [pc, #568]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003b52:	e003      	b.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b58:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b64:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003b68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003b76:	460b      	mov	r3, r1
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f000 8099 	beq.w	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b7e:	4b83      	ldr	r3, [pc, #524]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a82      	ldr	r2, [pc, #520]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b88:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003b8a:	f7fd fbf9 	bl	8001380 <HAL_GetTick>
 8003b8e:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b92:	e00b      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b94:	f7fd fbf4 	bl	8001380 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b9e:	1ad3      	subs	r3, r2, r3
 8003ba0:	2b64      	cmp	r3, #100	@ 0x64
 8003ba2:	d903      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003ba4:	2303      	movs	r3, #3
 8003ba6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003baa:	e005      	b.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bac:	4b77      	ldr	r3, [pc, #476]	@ (8003d8c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0ed      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003bb8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d173      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003bc0:	4b71      	ldr	r3, [pc, #452]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bc2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003bc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bcc:	4053      	eors	r3, r2
 8003bce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d015      	beq.n	8003c02 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bd6:	4b6c      	ldr	r3, [pc, #432]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bde:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003be2:	4b69      	ldr	r3, [pc, #420]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003be6:	4a68      	ldr	r2, [pc, #416]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003bec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003bee:	4b66      	ldr	r3, [pc, #408]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bf2:	4a65      	ldr	r2, [pc, #404]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003bf8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003bfa:	4a63      	ldr	r2, [pc, #396]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003c00:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003c02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c06:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c0e:	d118      	bne.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c10:	f7fd fbb6 	bl	8001380 <HAL_GetTick>
 8003c14:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c18:	e00d      	b.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c1a:	f7fd fbb1 	bl	8001380 <HAL_GetTick>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003c24:	1ad2      	subs	r2, r2, r3
 8003c26:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d903      	bls.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003c34:	e005      	b.n	8003c42 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003c36:	4b54      	ldr	r3, [pc, #336]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c3a:	f003 0302 	and.w	r3, r3, #2
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d0eb      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003c42:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d129      	bne.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c4a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c5a:	d10e      	bne.n	8003c7a <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c6c:	091a      	lsrs	r2, r3, #4
 8003c6e:	4b48      	ldr	r3, [pc, #288]	@ (8003d90 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003c70:	4013      	ands	r3, r2
 8003c72:	4a45      	ldr	r2, [pc, #276]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c74:	430b      	orrs	r3, r1
 8003c76:	6113      	str	r3, [r2, #16]
 8003c78:	e005      	b.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003c7a:	4b43      	ldr	r3, [pc, #268]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	4a42      	ldr	r2, [pc, #264]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c80:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003c84:	6113      	str	r3, [r2, #16]
 8003c86:	4b40      	ldr	r3, [pc, #256]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c88:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c8e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c96:	4a3c      	ldr	r2, [pc, #240]	@ (8003d88 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c98:	430b      	orrs	r3, r1
 8003c9a:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c9e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003ca2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003ca6:	e003      	b.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ca8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003cac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003cb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb8:	f002 0301 	and.w	r3, r2, #1
 8003cbc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003cc6:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	f000 808f 	beq.w	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003cd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003cd6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003cd8:	2b28      	cmp	r3, #40	@ 0x28
 8003cda:	d871      	bhi.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce2:	bf00      	nop
 8003ce4:	08003dc9 	.word	0x08003dc9
 8003ce8:	08003dc1 	.word	0x08003dc1
 8003cec:	08003dc1 	.word	0x08003dc1
 8003cf0:	08003dc1 	.word	0x08003dc1
 8003cf4:	08003dc1 	.word	0x08003dc1
 8003cf8:	08003dc1 	.word	0x08003dc1
 8003cfc:	08003dc1 	.word	0x08003dc1
 8003d00:	08003dc1 	.word	0x08003dc1
 8003d04:	08003d95 	.word	0x08003d95
 8003d08:	08003dc1 	.word	0x08003dc1
 8003d0c:	08003dc1 	.word	0x08003dc1
 8003d10:	08003dc1 	.word	0x08003dc1
 8003d14:	08003dc1 	.word	0x08003dc1
 8003d18:	08003dc1 	.word	0x08003dc1
 8003d1c:	08003dc1 	.word	0x08003dc1
 8003d20:	08003dc1 	.word	0x08003dc1
 8003d24:	08003dab 	.word	0x08003dab
 8003d28:	08003dc1 	.word	0x08003dc1
 8003d2c:	08003dc1 	.word	0x08003dc1
 8003d30:	08003dc1 	.word	0x08003dc1
 8003d34:	08003dc1 	.word	0x08003dc1
 8003d38:	08003dc1 	.word	0x08003dc1
 8003d3c:	08003dc1 	.word	0x08003dc1
 8003d40:	08003dc1 	.word	0x08003dc1
 8003d44:	08003dc9 	.word	0x08003dc9
 8003d48:	08003dc1 	.word	0x08003dc1
 8003d4c:	08003dc1 	.word	0x08003dc1
 8003d50:	08003dc1 	.word	0x08003dc1
 8003d54:	08003dc1 	.word	0x08003dc1
 8003d58:	08003dc1 	.word	0x08003dc1
 8003d5c:	08003dc1 	.word	0x08003dc1
 8003d60:	08003dc1 	.word	0x08003dc1
 8003d64:	08003dc9 	.word	0x08003dc9
 8003d68:	08003dc1 	.word	0x08003dc1
 8003d6c:	08003dc1 	.word	0x08003dc1
 8003d70:	08003dc1 	.word	0x08003dc1
 8003d74:	08003dc1 	.word	0x08003dc1
 8003d78:	08003dc1 	.word	0x08003dc1
 8003d7c:	08003dc1 	.word	0x08003dc1
 8003d80:	08003dc1 	.word	0x08003dc1
 8003d84:	08003dc9 	.word	0x08003dc9
 8003d88:	58024400 	.word	0x58024400
 8003d8c:	58024800 	.word	0x58024800
 8003d90:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d98:	3308      	adds	r3, #8
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f000 ffa7 	bl	8004cf0 <RCCEx_PLL2_Config>
 8003da2:	4603      	mov	r3, r0
 8003da4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003da8:	e00f      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003daa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dae:	3328      	adds	r3, #40	@ 0x28
 8003db0:	2101      	movs	r1, #1
 8003db2:	4618      	mov	r0, r3
 8003db4:	f001 f84e 	bl	8004e54 <RCCEx_PLL3_Config>
 8003db8:	4603      	mov	r3, r0
 8003dba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003dbe:	e004      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dc6:	e000      	b.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003dc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003dca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d10a      	bne.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003dd2:	4bbf      	ldr	r3, [pc, #764]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dd6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003dda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dde:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003de0:	4abb      	ldr	r2, [pc, #748]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003de2:	430b      	orrs	r3, r1
 8003de4:	6553      	str	r3, [r2, #84]	@ 0x54
 8003de6:	e003      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003de8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003dec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003df0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003df8:	f002 0302 	and.w	r3, r2, #2
 8003dfc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e00:	2300      	movs	r3, #0
 8003e02:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e06:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4313      	orrs	r3, r2
 8003e0e:	d041      	beq.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003e10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d824      	bhi.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e20 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e20:	08003e6d 	.word	0x08003e6d
 8003e24:	08003e39 	.word	0x08003e39
 8003e28:	08003e4f 	.word	0x08003e4f
 8003e2c:	08003e6d 	.word	0x08003e6d
 8003e30:	08003e6d 	.word	0x08003e6d
 8003e34:	08003e6d 	.word	0x08003e6d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e3c:	3308      	adds	r3, #8
 8003e3e:	2101      	movs	r1, #1
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 ff55 	bl	8004cf0 <RCCEx_PLL2_Config>
 8003e46:	4603      	mov	r3, r0
 8003e48:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e4c:	e00f      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e52:	3328      	adds	r3, #40	@ 0x28
 8003e54:	2101      	movs	r1, #1
 8003e56:	4618      	mov	r0, r3
 8003e58:	f000 fffc 	bl	8004e54 <RCCEx_PLL3_Config>
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003e62:	e004      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e6a:	e000      	b.n	8003e6e <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003e6c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e6e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d10a      	bne.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003e76:	4b96      	ldr	r3, [pc, #600]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e7a:	f023 0107 	bic.w	r1, r3, #7
 8003e7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e84:	4a92      	ldr	r2, [pc, #584]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e86:	430b      	orrs	r3, r1
 8003e88:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e8a:	e003      	b.n	8003e94 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e90:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e9c:	f002 0304 	and.w	r3, r2, #4
 8003ea0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003eaa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003eae:	460b      	mov	r3, r1
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	d044      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebc:	2b05      	cmp	r3, #5
 8003ebe:	d825      	bhi.n	8003f0c <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ec8 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec6:	bf00      	nop
 8003ec8:	08003f15 	.word	0x08003f15
 8003ecc:	08003ee1 	.word	0x08003ee1
 8003ed0:	08003ef7 	.word	0x08003ef7
 8003ed4:	08003f15 	.word	0x08003f15
 8003ed8:	08003f15 	.word	0x08003f15
 8003edc:	08003f15 	.word	0x08003f15
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ee0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ee4:	3308      	adds	r3, #8
 8003ee6:	2101      	movs	r1, #1
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f000 ff01 	bl	8004cf0 <RCCEx_PLL2_Config>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003ef4:	e00f      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ef6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003efa:	3328      	adds	r3, #40	@ 0x28
 8003efc:	2101      	movs	r1, #1
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 ffa8 	bl	8004e54 <RCCEx_PLL3_Config>
 8003f04:	4603      	mov	r3, r0
 8003f06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003f0a:	e004      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f12:	e000      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003f14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f22:	f023 0107 	bic.w	r1, r3, #7
 8003f26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f2e:	4a68      	ldr	r2, [pc, #416]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f30:	430b      	orrs	r3, r1
 8003f32:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f34:	e003      	b.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f36:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f3a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003f3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f46:	f002 0320 	and.w	r3, r2, #32
 8003f4a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f4e:	2300      	movs	r3, #0
 8003f50:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003f54:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003f58:	460b      	mov	r3, r1
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	d055      	beq.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f6a:	d033      	beq.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003f70:	d82c      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f76:	d02f      	beq.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f7c:	d826      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f7e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f82:	d02b      	beq.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003f84:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003f88:	d820      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f8a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f8e:	d012      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f94:	d81a      	bhi.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d022      	beq.n	8003fe0 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f9e:	d115      	bne.n	8003fcc <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa4:	3308      	adds	r3, #8
 8003fa6:	2100      	movs	r1, #0
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f000 fea1 	bl	8004cf0 <RCCEx_PLL2_Config>
 8003fae:	4603      	mov	r3, r0
 8003fb0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fb4:	e015      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fba:	3328      	adds	r3, #40	@ 0x28
 8003fbc:	2102      	movs	r1, #2
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 ff48 	bl	8004e54 <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003fca:	e00a      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003fd2:	e006      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003fd4:	bf00      	nop
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003fd8:	bf00      	nop
 8003fda:	e002      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10b      	bne.n	8004002 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fea:	4b39      	ldr	r3, [pc, #228]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003fec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fee:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003ff2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003ffa:	4a35      	ldr	r2, [pc, #212]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ffc:	430b      	orrs	r3, r1
 8003ffe:	6553      	str	r3, [r2, #84]	@ 0x54
 8004000:	e003      	b.n	800400a <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004002:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004006:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800400a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8004016:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800401a:	2300      	movs	r3, #0
 800401c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004020:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8004024:	460b      	mov	r3, r1
 8004026:	4313      	orrs	r3, r2
 8004028:	d058      	beq.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800402a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800402e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004032:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004036:	d033      	beq.n	80040a0 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8004038:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800403c:	d82c      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800403e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004042:	d02f      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8004044:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004048:	d826      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800404a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800404e:	d02b      	beq.n	80040a8 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8004050:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004054:	d820      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004056:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800405a:	d012      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 800405c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004060:	d81a      	bhi.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8004062:	2b00      	cmp	r3, #0
 8004064:	d022      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406a:	d115      	bne.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800406c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004070:	3308      	adds	r3, #8
 8004072:	2100      	movs	r1, #0
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fe3b 	bl	8004cf0 <RCCEx_PLL2_Config>
 800407a:	4603      	mov	r3, r0
 800407c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004080:	e015      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004082:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004086:	3328      	adds	r3, #40	@ 0x28
 8004088:	2102      	movs	r1, #2
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fee2 	bl	8004e54 <RCCEx_PLL3_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004096:	e00a      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800409e:	e006      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040a0:	bf00      	nop
 80040a2:	e004      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040a4:	bf00      	nop
 80040a6:	e002      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040a8:	bf00      	nop
 80040aa:	e000      	b.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80040ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040ae:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10e      	bne.n	80040d4 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040b6:	4b06      	ldr	r3, [pc, #24]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040ba:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80040be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80040c6:	4a02      	ldr	r2, [pc, #8]	@ (80040d0 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80040c8:	430b      	orrs	r3, r1
 80040ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80040cc:	e006      	b.n	80040dc <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80040ce:	bf00      	nop
 80040d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80040dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040e4:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80040e8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80040ec:	2300      	movs	r3, #0
 80040ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80040f2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80040f6:	460b      	mov	r3, r1
 80040f8:	4313      	orrs	r3, r2
 80040fa:	d055      	beq.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80040fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004100:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004104:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004108:	d033      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800410a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800410e:	d82c      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004110:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004114:	d02f      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 8004116:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800411a:	d826      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800411c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004120:	d02b      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004122:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004126:	d820      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004128:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800412c:	d012      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 800412e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004132:	d81a      	bhi.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004134:	2b00      	cmp	r3, #0
 8004136:	d022      	beq.n	800417e <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8004138:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800413c:	d115      	bne.n	800416a <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800413e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004142:	3308      	adds	r3, #8
 8004144:	2100      	movs	r1, #0
 8004146:	4618      	mov	r0, r3
 8004148:	f000 fdd2 	bl	8004cf0 <RCCEx_PLL2_Config>
 800414c:	4603      	mov	r3, r0
 800414e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004152:	e015      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004154:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004158:	3328      	adds	r3, #40	@ 0x28
 800415a:	2102      	movs	r1, #2
 800415c:	4618      	mov	r0, r3
 800415e:	f000 fe79 	bl	8004e54 <RCCEx_PLL3_Config>
 8004162:	4603      	mov	r3, r0
 8004164:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004168:	e00a      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004170:	e006      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004172:	bf00      	nop
 8004174:	e004      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8004176:	bf00      	nop
 8004178:	e002      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800417a:	bf00      	nop
 800417c:	e000      	b.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800417e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004180:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004184:	2b00      	cmp	r3, #0
 8004186:	d10b      	bne.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004188:	4ba0      	ldr	r3, [pc, #640]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800418a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800418c:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004190:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004194:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004198:	4a9c      	ldr	r2, [pc, #624]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800419a:	430b      	orrs	r3, r1
 800419c:	6593      	str	r3, [r2, #88]	@ 0x58
 800419e:	e003      	b.n	80041a8 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80041a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80041a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041b0:	f002 0308 	and.w	r3, r2, #8
 80041b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041b8:	2300      	movs	r3, #0
 80041ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80041be:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80041c2:	460b      	mov	r3, r1
 80041c4:	4313      	orrs	r3, r2
 80041c6:	d01e      	beq.n	8004206 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80041c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041da:	3328      	adds	r3, #40	@ 0x28
 80041dc:	2102      	movs	r1, #2
 80041de:	4618      	mov	r0, r3
 80041e0:	f000 fe38 	bl	8004e54 <RCCEx_PLL3_Config>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d002      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80041f0:	4b86      	ldr	r3, [pc, #536]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041f4:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004200:	4a82      	ldr	r2, [pc, #520]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004202:	430b      	orrs	r3, r1
 8004204:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004206:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800420a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800420e:	f002 0310 	and.w	r3, r2, #16
 8004212:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004216:	2300      	movs	r3, #0
 8004218:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800421c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004220:	460b      	mov	r3, r1
 8004222:	4313      	orrs	r3, r2
 8004224:	d01e      	beq.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004226:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800422e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004232:	d10c      	bne.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004234:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004238:	3328      	adds	r3, #40	@ 0x28
 800423a:	2102      	movs	r1, #2
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fe09 	bl	8004e54 <RCCEx_PLL3_Config>
 8004242:	4603      	mov	r3, r0
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800424e:	4b6f      	ldr	r3, [pc, #444]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004252:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004256:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800425e:	4a6b      	ldr	r2, [pc, #428]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004260:	430b      	orrs	r3, r1
 8004262:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004264:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426c:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004270:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004272:	2300      	movs	r3, #0
 8004274:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8004276:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800427a:	460b      	mov	r3, r1
 800427c:	4313      	orrs	r3, r2
 800427e:	d03e      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004280:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004284:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004288:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800428c:	d022      	beq.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800428e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004292:	d81b      	bhi.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004294:	2b00      	cmp	r3, #0
 8004296:	d003      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8004298:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800429c:	d00b      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800429e:	e015      	b.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80042a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042a4:	3308      	adds	r3, #8
 80042a6:	2100      	movs	r1, #0
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fd21 	bl	8004cf0 <RCCEx_PLL2_Config>
 80042ae:	4603      	mov	r3, r0
 80042b0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042b4:	e00f      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80042b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ba:	3328      	adds	r3, #40	@ 0x28
 80042bc:	2102      	movs	r1, #2
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 fdc8 	bl	8004e54 <RCCEx_PLL3_Config>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80042ca:	e004      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042d2:	e000      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80042d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d10b      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80042de:	4b4b      	ldr	r3, [pc, #300]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80042e2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80042e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80042ee:	4a47      	ldr	r2, [pc, #284]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042f0:	430b      	orrs	r3, r1
 80042f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80042f4:	e003      	b.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042fa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80042fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800430a:	673b      	str	r3, [r7, #112]	@ 0x70
 800430c:	2300      	movs	r3, #0
 800430e:	677b      	str	r3, [r7, #116]	@ 0x74
 8004310:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004314:	460b      	mov	r3, r1
 8004316:	4313      	orrs	r3, r2
 8004318:	d03b      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800431a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800431e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004322:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004326:	d01f      	beq.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004328:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800432c:	d818      	bhi.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 800432e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004332:	d003      	beq.n	800433c <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8004334:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004338:	d007      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800433a:	e011      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800433c:	4b33      	ldr	r3, [pc, #204]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800433e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004340:	4a32      	ldr	r2, [pc, #200]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004342:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004346:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004348:	e00f      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800434a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800434e:	3328      	adds	r3, #40	@ 0x28
 8004350:	2101      	movs	r1, #1
 8004352:	4618      	mov	r0, r3
 8004354:	f000 fd7e 	bl	8004e54 <RCCEx_PLL3_Config>
 8004358:	4603      	mov	r3, r0
 800435a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 800435e:	e004      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004366:	e000      	b.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8004368:	bf00      	nop
    }

    if (ret == HAL_OK)
 800436a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10b      	bne.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004372:	4b26      	ldr	r3, [pc, #152]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004376:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800437a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800437e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004382:	4a22      	ldr	r2, [pc, #136]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004384:	430b      	orrs	r3, r1
 8004386:	6553      	str	r3, [r2, #84]	@ 0x54
 8004388:	e003      	b.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800438a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800438e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800439e:	66bb      	str	r3, [r7, #104]	@ 0x68
 80043a0:	2300      	movs	r3, #0
 80043a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80043a4:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d034      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80043ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d003      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80043b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043bc:	d007      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80043be:	e011      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043c0:	4b12      	ldr	r3, [pc, #72]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043c4:	4a11      	ldr	r2, [pc, #68]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043c6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80043ca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043cc:	e00e      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80043ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043d2:	3308      	adds	r3, #8
 80043d4:	2102      	movs	r1, #2
 80043d6:	4618      	mov	r0, r3
 80043d8:	f000 fc8a 	bl	8004cf0 <RCCEx_PLL2_Config>
 80043dc:	4603      	mov	r3, r0
 80043de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80043e2:	e003      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80043ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80043ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d10d      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80043f4:	4b05      	ldr	r3, [pc, #20]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80043f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043f8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80043fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004400:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004402:	4a02      	ldr	r2, [pc, #8]	@ (800440c <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004404:	430b      	orrs	r3, r1
 8004406:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004408:	e006      	b.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800440a:	bf00      	nop
 800440c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004410:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004418:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800441c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004420:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004424:	663b      	str	r3, [r7, #96]	@ 0x60
 8004426:	2300      	movs	r3, #0
 8004428:	667b      	str	r3, [r7, #100]	@ 0x64
 800442a:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800442e:	460b      	mov	r3, r1
 8004430:	4313      	orrs	r3, r2
 8004432:	d00c      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004434:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004438:	3328      	adds	r3, #40	@ 0x28
 800443a:	2102      	movs	r1, #2
 800443c:	4618      	mov	r0, r3
 800443e:	f000 fd09 	bl	8004e54 <RCCEx_PLL3_Config>
 8004442:	4603      	mov	r3, r0
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800444e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004456:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800445a:	65bb      	str	r3, [r7, #88]	@ 0x58
 800445c:	2300      	movs	r3, #0
 800445e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004460:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8004464:	460b      	mov	r3, r1
 8004466:	4313      	orrs	r3, r2
 8004468:	d036      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800446a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800446e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004470:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004474:	d018      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8004476:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800447a:	d811      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800447c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004480:	d014      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8004482:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004486:	d80b      	bhi.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8004488:	2b00      	cmp	r3, #0
 800448a:	d011      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 800448c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004490:	d106      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004492:	4bb7      	ldr	r3, [pc, #732]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004494:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004496:	4ab6      	ldr	r2, [pc, #728]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004498:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800449c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800449e:	e008      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80044a6:	e004      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044a8:	bf00      	nop
 80044aa:	e002      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044ac:	bf00      	nop
 80044ae:	e000      	b.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80044b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10a      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044ba:	4bad      	ldr	r3, [pc, #692]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044be:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80044c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c8:	4aa9      	ldr	r2, [pc, #676]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ca:	430b      	orrs	r3, r1
 80044cc:	6553      	str	r3, [r2, #84]	@ 0x54
 80044ce:	e003      	b.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80044d4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80044e4:	653b      	str	r3, [r7, #80]	@ 0x50
 80044e6:	2300      	movs	r3, #0
 80044e8:	657b      	str	r3, [r7, #84]	@ 0x54
 80044ea:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80044ee:	460b      	mov	r3, r1
 80044f0:	4313      	orrs	r3, r2
 80044f2:	d009      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80044f4:	4b9e      	ldr	r3, [pc, #632]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80044f8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80044fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004500:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004502:	4a9b      	ldr	r2, [pc, #620]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004504:	430b      	orrs	r3, r1
 8004506:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004510:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004514:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004516:	2300      	movs	r3, #0
 8004518:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800451a:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800451e:	460b      	mov	r3, r1
 8004520:	4313      	orrs	r3, r2
 8004522:	d009      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004524:	4b92      	ldr	r3, [pc, #584]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004528:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800452c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004530:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004532:	4a8f      	ldr	r2, [pc, #572]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004534:	430b      	orrs	r3, r1
 8004536:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004544:	643b      	str	r3, [r7, #64]	@ 0x40
 8004546:	2300      	movs	r3, #0
 8004548:	647b      	str	r3, [r7, #68]	@ 0x44
 800454a:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800454e:	460b      	mov	r3, r1
 8004550:	4313      	orrs	r3, r2
 8004552:	d00e      	beq.n	8004572 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004554:	4b86      	ldr	r3, [pc, #536]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	4a85      	ldr	r2, [pc, #532]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800455a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800455e:	6113      	str	r3, [r2, #16]
 8004560:	4b83      	ldr	r3, [pc, #524]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004562:	6919      	ldr	r1, [r3, #16]
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004568:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800456c:	4a80      	ldr	r2, [pc, #512]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800456e:	430b      	orrs	r3, r1
 8004570:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800457a:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800457e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004580:	2300      	movs	r3, #0
 8004582:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004584:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004588:	460b      	mov	r3, r1
 800458a:	4313      	orrs	r3, r2
 800458c:	d009      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800458e:	4b78      	ldr	r3, [pc, #480]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004592:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8004596:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800459a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800459c:	4a74      	ldr	r2, [pc, #464]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800459e:	430b      	orrs	r3, r1
 80045a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80045a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80045ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80045b0:	2300      	movs	r3, #0
 80045b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80045b4:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80045b8:	460b      	mov	r3, r1
 80045ba:	4313      	orrs	r3, r2
 80045bc:	d00a      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80045be:	4b6c      	ldr	r3, [pc, #432]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045c2:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80045c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045ce:	4a68      	ldr	r2, [pc, #416]	@ (8004770 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80045d0:	430b      	orrs	r3, r1
 80045d2:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80045d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045dc:	2100      	movs	r1, #0
 80045de:	62b9      	str	r1, [r7, #40]	@ 0x28
 80045e0:	f003 0301 	and.w	r3, r3, #1
 80045e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045e6:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80045ea:	460b      	mov	r3, r1
 80045ec:	4313      	orrs	r3, r2
 80045ee:	d011      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80045f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045f4:	3308      	adds	r3, #8
 80045f6:	2100      	movs	r1, #0
 80045f8:	4618      	mov	r0, r3
 80045fa:	f000 fb79 	bl	8004cf0 <RCCEx_PLL2_Config>
 80045fe:	4603      	mov	r3, r0
 8004600:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004604:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004608:	2b00      	cmp	r3, #0
 800460a:	d003      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800460c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004610:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004614:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461c:	2100      	movs	r1, #0
 800461e:	6239      	str	r1, [r7, #32]
 8004620:	f003 0302 	and.w	r3, r3, #2
 8004624:	627b      	str	r3, [r7, #36]	@ 0x24
 8004626:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800462a:	460b      	mov	r3, r1
 800462c:	4313      	orrs	r3, r2
 800462e:	d011      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004630:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004634:	3308      	adds	r3, #8
 8004636:	2101      	movs	r1, #1
 8004638:	4618      	mov	r0, r3
 800463a:	f000 fb59 	bl	8004cf0 <RCCEx_PLL2_Config>
 800463e:	4603      	mov	r3, r0
 8004640:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004644:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004648:	2b00      	cmp	r3, #0
 800464a:	d003      	beq.n	8004654 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800464c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004650:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004654:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465c:	2100      	movs	r1, #0
 800465e:	61b9      	str	r1, [r7, #24]
 8004660:	f003 0304 	and.w	r3, r3, #4
 8004664:	61fb      	str	r3, [r7, #28]
 8004666:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800466a:	460b      	mov	r3, r1
 800466c:	4313      	orrs	r3, r2
 800466e:	d011      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004670:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004674:	3308      	adds	r3, #8
 8004676:	2102      	movs	r1, #2
 8004678:	4618      	mov	r0, r3
 800467a:	f000 fb39 	bl	8004cf0 <RCCEx_PLL2_Config>
 800467e:	4603      	mov	r3, r0
 8004680:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004684:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800468c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004690:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004694:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800469c:	2100      	movs	r1, #0
 800469e:	6139      	str	r1, [r7, #16]
 80046a0:	f003 0308 	and.w	r3, r3, #8
 80046a4:	617b      	str	r3, [r7, #20]
 80046a6:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80046aa:	460b      	mov	r3, r1
 80046ac:	4313      	orrs	r3, r2
 80046ae:	d011      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80046b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046b4:	3328      	adds	r3, #40	@ 0x28
 80046b6:	2100      	movs	r1, #0
 80046b8:	4618      	mov	r0, r3
 80046ba:	f000 fbcb 	bl	8004e54 <RCCEx_PLL3_Config>
 80046be:	4603      	mov	r3, r0
 80046c0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80046c4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d003      	beq.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046cc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046d0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80046d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046dc:	2100      	movs	r1, #0
 80046de:	60b9      	str	r1, [r7, #8]
 80046e0:	f003 0310 	and.w	r3, r3, #16
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80046ea:	460b      	mov	r3, r1
 80046ec:	4313      	orrs	r3, r2
 80046ee:	d011      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046f4:	3328      	adds	r3, #40	@ 0x28
 80046f6:	2101      	movs	r1, #1
 80046f8:	4618      	mov	r0, r3
 80046fa:	f000 fbab 	bl	8004e54 <RCCEx_PLL3_Config>
 80046fe:	4603      	mov	r3, r0
 8004700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004704:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800470c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004710:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004714:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004718:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471c:	2100      	movs	r1, #0
 800471e:	6039      	str	r1, [r7, #0]
 8004720:	f003 0320 	and.w	r3, r3, #32
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	e9d7 1200 	ldrd	r1, r2, [r7]
 800472a:	460b      	mov	r3, r1
 800472c:	4313      	orrs	r3, r2
 800472e:	d011      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004734:	3328      	adds	r3, #40	@ 0x28
 8004736:	2102      	movs	r1, #2
 8004738:	4618      	mov	r0, r3
 800473a:	f000 fb8b 	bl	8004e54 <RCCEx_PLL3_Config>
 800473e:	4603      	mov	r3, r0
 8004740:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004744:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004748:	2b00      	cmp	r3, #0
 800474a:	d003      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800474c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004750:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8004754:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8004758:	2b00      	cmp	r3, #0
 800475a:	d101      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 800475c:	2300      	movs	r3, #0
 800475e:	e000      	b.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
}
 8004762:	4618      	mov	r0, r3
 8004764:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8004768:	46bd      	mov	sp, r7
 800476a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800476e:	bf00      	nop
 8004770:	58024400 	.word	0x58024400

08004774 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004778:	f7fe fe00 	bl	800337c <HAL_RCC_GetHCLKFreq>
 800477c:	4602      	mov	r2, r0
 800477e:	4b06      	ldr	r3, [pc, #24]	@ (8004798 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004780:	6a1b      	ldr	r3, [r3, #32]
 8004782:	091b      	lsrs	r3, r3, #4
 8004784:	f003 0307 	and.w	r3, r3, #7
 8004788:	4904      	ldr	r1, [pc, #16]	@ (800479c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800478a:	5ccb      	ldrb	r3, [r1, r3]
 800478c:	f003 031f 	and.w	r3, r3, #31
 8004790:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004794:	4618      	mov	r0, r3
 8004796:	bd80      	pop	{r7, pc}
 8004798:	58024400 	.word	0x58024400
 800479c:	08007abc 	.word	0x08007abc

080047a0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b089      	sub	sp, #36	@ 0x24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80047a8:	4ba1      	ldr	r3, [pc, #644]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047ac:	f003 0303 	and.w	r3, r3, #3
 80047b0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80047b2:	4b9f      	ldr	r3, [pc, #636]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b6:	0b1b      	lsrs	r3, r3, #12
 80047b8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80047bc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80047be:	4b9c      	ldr	r3, [pc, #624]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c2:	091b      	lsrs	r3, r3, #4
 80047c4:	f003 0301 	and.w	r3, r3, #1
 80047c8:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80047ca:	4b99      	ldr	r3, [pc, #612]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ce:	08db      	lsrs	r3, r3, #3
 80047d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	fb02 f303 	mul.w	r3, r2, r3
 80047da:	ee07 3a90 	vmov	s15, r3
 80047de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8111 	beq.w	8004a10 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	f000 8083 	beq.w	80048fc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	f200 80a1 	bhi.w	8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80047fe:	69bb      	ldr	r3, [r7, #24]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004804:	69bb      	ldr	r3, [r7, #24]
 8004806:	2b01      	cmp	r3, #1
 8004808:	d056      	beq.n	80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800480a:	e099      	b.n	8004940 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800480c:	4b88      	ldr	r3, [pc, #544]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0320 	and.w	r3, r3, #32
 8004814:	2b00      	cmp	r3, #0
 8004816:	d02d      	beq.n	8004874 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004818:	4b85      	ldr	r3, [pc, #532]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	08db      	lsrs	r3, r3, #3
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	4a84      	ldr	r2, [pc, #528]	@ (8004a34 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004824:	fa22 f303 	lsr.w	r3, r2, r3
 8004828:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	ee07 3a90 	vmov	s15, r3
 8004830:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	ee07 3a90 	vmov	s15, r3
 800483a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800483e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004842:	4b7b      	ldr	r3, [pc, #492]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004846:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800484a:	ee07 3a90 	vmov	s15, r3
 800484e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004852:	ed97 6a03 	vldr	s12, [r7, #12]
 8004856:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800485a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004862:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004866:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800486a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004872:	e087      	b.n	8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	ee07 3a90 	vmov	s15, r3
 800487a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004a3c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004882:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004886:	4b6a      	ldr	r3, [pc, #424]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004888:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800488a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488e:	ee07 3a90 	vmov	s15, r3
 8004892:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004896:	ed97 6a03 	vldr	s12, [r7, #12]
 800489a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800489e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b6:	e065      	b.n	8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	ee07 3a90 	vmov	s15, r3
 80048be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048c2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048ca:	4b59      	ldr	r3, [pc, #356]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048d2:	ee07 3a90 	vmov	s15, r3
 80048d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048da:	ed97 6a03 	vldr	s12, [r7, #12]
 80048de:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048fa:	e043      	b.n	8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048fc:	697b      	ldr	r3, [r7, #20]
 80048fe:	ee07 3a90 	vmov	s15, r3
 8004902:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004906:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004a44 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800490a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800490e:	4b48      	ldr	r3, [pc, #288]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004912:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004916:	ee07 3a90 	vmov	s15, r3
 800491a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800491e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004922:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004926:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800492a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800492e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004932:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800493a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800493e:	e021      	b.n	8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	ee07 3a90 	vmov	s15, r3
 8004946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800494a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004a40 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800494e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004952:	4b37      	ldr	r3, [pc, #220]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004956:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800495a:	ee07 3a90 	vmov	s15, r3
 800495e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004962:	ed97 6a03 	vldr	s12, [r7, #12]
 8004966:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004a38 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800496a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800496e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004972:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004976:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800497a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800497e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004982:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004984:	4b2a      	ldr	r3, [pc, #168]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004988:	0a5b      	lsrs	r3, r3, #9
 800498a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800498e:	ee07 3a90 	vmov	s15, r3
 8004992:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004996:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800499a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800499e:	edd7 6a07 	vldr	s13, [r7, #28]
 80049a2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049aa:	ee17 2a90 	vmov	r2, s15
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80049b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049b6:	0c1b      	lsrs	r3, r3, #16
 80049b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049bc:	ee07 3a90 	vmov	s15, r3
 80049c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049c4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049c8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049cc:	edd7 6a07 	vldr	s13, [r7, #28]
 80049d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80049d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049d8:	ee17 2a90 	vmov	r2, s15
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80049e0:	4b13      	ldr	r3, [pc, #76]	@ (8004a30 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80049e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049e4:	0e1b      	lsrs	r3, r3, #24
 80049e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80049f6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80049fa:	edd7 6a07 	vldr	s13, [r7, #28]
 80049fe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004a02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a06:	ee17 2a90 	vmov	r2, s15
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004a0e:	e008      	b.n	8004a22 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	609a      	str	r2, [r3, #8]
}
 8004a22:	bf00      	nop
 8004a24:	3724      	adds	r7, #36	@ 0x24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	58024400 	.word	0x58024400
 8004a34:	03d09000 	.word	0x03d09000
 8004a38:	46000000 	.word	0x46000000
 8004a3c:	4c742400 	.word	0x4c742400
 8004a40:	4a742400 	.word	0x4a742400
 8004a44:	4af42400 	.word	0x4af42400

08004a48 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b089      	sub	sp, #36	@ 0x24
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004a50:	4ba1      	ldr	r3, [pc, #644]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a54:	f003 0303 	and.w	r3, r3, #3
 8004a58:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004a5a:	4b9f      	ldr	r3, [pc, #636]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a5e:	0d1b      	lsrs	r3, r3, #20
 8004a60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a64:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004a66:	4b9c      	ldr	r3, [pc, #624]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a6a:	0a1b      	lsrs	r3, r3, #8
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004a72:	4b99      	ldr	r3, [pc, #612]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a76:	08db      	lsrs	r3, r3, #3
 8004a78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004a7c:	693a      	ldr	r2, [r7, #16]
 8004a7e:	fb02 f303 	mul.w	r3, r2, r3
 8004a82:	ee07 3a90 	vmov	s15, r3
 8004a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a8e:	697b      	ldr	r3, [r7, #20]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	f000 8111 	beq.w	8004cb8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	2b02      	cmp	r3, #2
 8004a9a:	f000 8083 	beq.w	8004ba4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a9e:	69bb      	ldr	r3, [r7, #24]
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	f200 80a1 	bhi.w	8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004aa6:	69bb      	ldr	r3, [r7, #24]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d003      	beq.n	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d056      	beq.n	8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004ab2:	e099      	b.n	8004be8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ab4:	4b88      	ldr	r3, [pc, #544]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02d      	beq.n	8004b1c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004ac0:	4b85      	ldr	r3, [pc, #532]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	08db      	lsrs	r3, r3, #3
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	4a84      	ldr	r2, [pc, #528]	@ (8004cdc <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004acc:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	ee07 3a90 	vmov	s15, r3
 8004ad8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	ee07 3a90 	vmov	s15, r3
 8004ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aea:	4b7b      	ldr	r3, [pc, #492]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004af2:	ee07 3a90 	vmov	s15, r3
 8004af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004afa:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b1a:	e087      	b.n	8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	ee07 3a90 	vmov	s15, r3
 8004b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b26:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2e:	4b6a      	ldr	r3, [pc, #424]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b36:	ee07 3a90 	vmov	s15, r3
 8004b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b42:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5e:	e065      	b.n	8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	ee07 3a90 	vmov	s15, r3
 8004b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b6a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b72:	4b59      	ldr	r3, [pc, #356]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b7a:	ee07 3a90 	vmov	s15, r3
 8004b7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b82:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b86:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ba2:	e043      	b.n	8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	ee07 3a90 	vmov	s15, r3
 8004baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004cec <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004bb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bb6:	4b48      	ldr	r3, [pc, #288]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bbe:	ee07 3a90 	vmov	s15, r3
 8004bc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004bc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004bce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004be2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004be6:	e021      	b.n	8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	ee07 3a90 	vmov	s15, r3
 8004bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bf2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ce8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bfa:	4b37      	ldr	r3, [pc, #220]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c02:	ee07 3a90 	vmov	s15, r3
 8004c06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c0e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004ce0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004c12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c2a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004c2c:	4b2a      	ldr	r3, [pc, #168]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c30:	0a5b      	lsrs	r3, r3, #9
 8004c32:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c36:	ee07 3a90 	vmov	s15, r3
 8004c3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c3e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c42:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c46:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c52:	ee17 2a90 	vmov	r2, s15
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004c5a:	4b1f      	ldr	r3, [pc, #124]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5e:	0c1b      	lsrs	r3, r3, #16
 8004c60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c64:	ee07 3a90 	vmov	s15, r3
 8004c68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c70:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c74:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c80:	ee17 2a90 	vmov	r2, s15
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004c88:	4b13      	ldr	r3, [pc, #76]	@ (8004cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c8c:	0e1b      	lsrs	r3, r3, #24
 8004c8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c92:	ee07 3a90 	vmov	s15, r3
 8004c96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ca2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ca6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004caa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cae:	ee17 2a90 	vmov	r2, s15
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004cb6:	e008      	b.n	8004cca <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
}
 8004cca:	bf00      	nop
 8004ccc:	3724      	adds	r7, #36	@ 0x24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
 8004cd6:	bf00      	nop
 8004cd8:	58024400 	.word	0x58024400
 8004cdc:	03d09000 	.word	0x03d09000
 8004ce0:	46000000 	.word	0x46000000
 8004ce4:	4c742400 	.word	0x4c742400
 8004ce8:	4a742400 	.word	0x4a742400
 8004cec:	4af42400 	.word	0x4af42400

08004cf0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cfe:	4b53      	ldr	r3, [pc, #332]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d02:	f003 0303 	and.w	r3, r3, #3
 8004d06:	2b03      	cmp	r3, #3
 8004d08:	d101      	bne.n	8004d0e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e099      	b.n	8004e42 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004d0e:	4b4f      	ldr	r3, [pc, #316]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4a4e      	ldr	r2, [pc, #312]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d14:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004d18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d1a:	f7fc fb31 	bl	8001380 <HAL_GetTick>
 8004d1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d20:	e008      	b.n	8004d34 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d22:	f7fc fb2d 	bl	8001380 <HAL_GetTick>
 8004d26:	4602      	mov	r2, r0
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	1ad3      	subs	r3, r2, r3
 8004d2c:	2b02      	cmp	r3, #2
 8004d2e:	d901      	bls.n	8004d34 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d30:	2303      	movs	r3, #3
 8004d32:	e086      	b.n	8004e42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004d34:	4b45      	ldr	r3, [pc, #276]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f0      	bne.n	8004d22 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004d40:	4b42      	ldr	r3, [pc, #264]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d44:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	031b      	lsls	r3, r3, #12
 8004d4e:	493f      	ldr	r1, [pc, #252]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	685b      	ldr	r3, [r3, #4]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	3b01      	subs	r3, #1
 8004d64:	025b      	lsls	r3, r3, #9
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	431a      	orrs	r2, r3
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	3b01      	subs	r3, #1
 8004d70:	041b      	lsls	r3, r3, #16
 8004d72:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	061b      	lsls	r3, r3, #24
 8004d80:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d84:	4931      	ldr	r1, [pc, #196]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d86:	4313      	orrs	r3, r2
 8004d88:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004d8a:	4b30      	ldr	r3, [pc, #192]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d8e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	492d      	ldr	r1, [pc, #180]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d9c:	4b2b      	ldr	r3, [pc, #172]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	f023 0220 	bic.w	r2, r3, #32
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	699b      	ldr	r3, [r3, #24]
 8004da8:	4928      	ldr	r1, [pc, #160]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004daa:	4313      	orrs	r3, r2
 8004dac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004dae:	4b27      	ldr	r3, [pc, #156]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	4a26      	ldr	r2, [pc, #152]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004db4:	f023 0310 	bic.w	r3, r3, #16
 8004db8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004dba:	4b24      	ldr	r3, [pc, #144]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004dbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004dbe:	4b24      	ldr	r3, [pc, #144]	@ (8004e50 <RCCEx_PLL2_Config+0x160>)
 8004dc0:	4013      	ands	r3, r2
 8004dc2:	687a      	ldr	r2, [r7, #4]
 8004dc4:	69d2      	ldr	r2, [r2, #28]
 8004dc6:	00d2      	lsls	r2, r2, #3
 8004dc8:	4920      	ldr	r1, [pc, #128]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004dce:	4b1f      	ldr	r3, [pc, #124]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd2:	4a1e      	ldr	r2, [pc, #120]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004dd4:	f043 0310 	orr.w	r3, r3, #16
 8004dd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d106      	bne.n	8004dee <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004de0:	4b1a      	ldr	r3, [pc, #104]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	4a19      	ldr	r2, [pc, #100]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004de6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004dea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004dec:	e00f      	b.n	8004e0e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	2b01      	cmp	r3, #1
 8004df2:	d106      	bne.n	8004e02 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004df4:	4b15      	ldr	r3, [pc, #84]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df8:	4a14      	ldr	r2, [pc, #80]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004dfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e00:	e005      	b.n	8004e0e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004e02:	4b12      	ldr	r3, [pc, #72]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004e04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e06:	4a11      	ldr	r2, [pc, #68]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004e08:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004e0e:	4b0f      	ldr	r3, [pc, #60]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a0e      	ldr	r2, [pc, #56]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004e14:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004e18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e1a:	f7fc fab1 	bl	8001380 <HAL_GetTick>
 8004e1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e20:	e008      	b.n	8004e34 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004e22:	f7fc faad 	bl	8001380 <HAL_GetTick>
 8004e26:	4602      	mov	r2, r0
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	1ad3      	subs	r3, r2, r3
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d901      	bls.n	8004e34 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e30:	2303      	movs	r3, #3
 8004e32:	e006      	b.n	8004e42 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004e34:	4b05      	ldr	r3, [pc, #20]	@ (8004e4c <RCCEx_PLL2_Config+0x15c>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d0f0      	beq.n	8004e22 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004e40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e42:	4618      	mov	r0, r3
 8004e44:	3710      	adds	r7, #16
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}
 8004e4a:	bf00      	nop
 8004e4c:	58024400 	.word	0x58024400
 8004e50:	ffff0007 	.word	0xffff0007

08004e54 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b084      	sub	sp, #16
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
 8004e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004e62:	4b53      	ldr	r3, [pc, #332]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	f003 0303 	and.w	r3, r3, #3
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d101      	bne.n	8004e72 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	e099      	b.n	8004fa6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004e72:	4b4f      	ldr	r3, [pc, #316]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a4e      	ldr	r2, [pc, #312]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004e78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e7e:	f7fc fa7f 	bl	8001380 <HAL_GetTick>
 8004e82:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e84:	e008      	b.n	8004e98 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e86:	f7fc fa7b 	bl	8001380 <HAL_GetTick>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	1ad3      	subs	r3, r2, r3
 8004e90:	2b02      	cmp	r3, #2
 8004e92:	d901      	bls.n	8004e98 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e94:	2303      	movs	r3, #3
 8004e96:	e086      	b.n	8004fa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e98:	4b45      	ldr	r3, [pc, #276]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d1f0      	bne.n	8004e86 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004ea4:	4b42      	ldr	r3, [pc, #264]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	051b      	lsls	r3, r3, #20
 8004eb2:	493f      	ldr	r1, [pc, #252]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	3b01      	subs	r3, #1
 8004ebe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	3b01      	subs	r3, #1
 8004ec8:	025b      	lsls	r3, r3, #9
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	431a      	orrs	r2, r3
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	68db      	ldr	r3, [r3, #12]
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	041b      	lsls	r3, r3, #16
 8004ed6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	3b01      	subs	r3, #1
 8004ee2:	061b      	lsls	r3, r3, #24
 8004ee4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ee8:	4931      	ldr	r1, [pc, #196]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004eea:	4313      	orrs	r3, r2
 8004eec:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004eee:	4b30      	ldr	r3, [pc, #192]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004ef0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef2:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	695b      	ldr	r3, [r3, #20]
 8004efa:	492d      	ldr	r1, [pc, #180]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004efc:	4313      	orrs	r3, r2
 8004efe:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004f00:	4b2b      	ldr	r3, [pc, #172]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f04:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	699b      	ldr	r3, [r3, #24]
 8004f0c:	4928      	ldr	r1, [pc, #160]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004f12:	4b27      	ldr	r3, [pc, #156]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f16:	4a26      	ldr	r2, [pc, #152]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f1c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004f1e:	4b24      	ldr	r3, [pc, #144]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f22:	4b24      	ldr	r3, [pc, #144]	@ (8004fb4 <RCCEx_PLL3_Config+0x160>)
 8004f24:	4013      	ands	r3, r2
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	69d2      	ldr	r2, [r2, #28]
 8004f2a:	00d2      	lsls	r2, r2, #3
 8004f2c:	4920      	ldr	r1, [pc, #128]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004f32:	4b1f      	ldr	r3, [pc, #124]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f36:	4a1e      	ldr	r2, [pc, #120]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004f44:	4b1a      	ldr	r3, [pc, #104]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f48:	4a19      	ldr	r2, [pc, #100]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f4a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004f4e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f50:	e00f      	b.n	8004f72 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d106      	bne.n	8004f66 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004f58:	4b15      	ldr	r3, [pc, #84]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f5c:	4a14      	ldr	r2, [pc, #80]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f5e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004f62:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f64:	e005      	b.n	8004f72 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004f66:	4b12      	ldr	r3, [pc, #72]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f6a:	4a11      	ldr	r2, [pc, #68]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004f70:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004f72:	4b0f      	ldr	r3, [pc, #60]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a0e      	ldr	r2, [pc, #56]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f7c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f7e:	f7fc f9ff 	bl	8001380 <HAL_GetTick>
 8004f82:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f84:	e008      	b.n	8004f98 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004f86:	f7fc f9fb 	bl	8001380 <HAL_GetTick>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2b02      	cmp	r3, #2
 8004f92:	d901      	bls.n	8004f98 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e006      	b.n	8004fa6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f98:	4b05      	ldr	r3, [pc, #20]	@ (8004fb0 <RCCEx_PLL3_Config+0x15c>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0f0      	beq.n	8004f86 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	58024400 	.word	0x58024400
 8004fb4:	ffff0007 	.word	0xffff0007

08004fb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d101      	bne.n	8004fca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e042      	b.n	8005050 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fb ffd7 	bl	8000f90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2224      	movs	r2, #36	@ 0x24
 8004fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 0201 	bic.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d002      	beq.n	8005008 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f001 fb52 	bl	80066ac <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fce3 	bl	80059d4 <UART_SetConfig>
 800500e:	4603      	mov	r3, r0
 8005010:	2b01      	cmp	r3, #1
 8005012:	d101      	bne.n	8005018 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e01b      	b.n	8005050 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	685a      	ldr	r2, [r3, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005026:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	689a      	ldr	r2, [r3, #8]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005036:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	681a      	ldr	r2, [r3, #0]
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f042 0201 	orr.w	r2, r2, #1
 8005046:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f001 fbd1 	bl	80067f0 <UART_CheckIdleState>
 800504e:	4603      	mov	r3, r0
}
 8005050:	4618      	mov	r0, r3
 8005052:	3708      	adds	r7, #8
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b08a      	sub	sp, #40	@ 0x28
 800505c:	af02      	add	r7, sp, #8
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	603b      	str	r3, [r7, #0]
 8005064:	4613      	mov	r3, r2
 8005066:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800506e:	2b20      	cmp	r3, #32
 8005070:	d17b      	bne.n	800516a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <HAL_UART_Transmit+0x26>
 8005078:	88fb      	ldrh	r3, [r7, #6]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e074      	b.n	800516c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	2200      	movs	r2, #0
 8005086:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	2221      	movs	r2, #33	@ 0x21
 800508e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005092:	f7fc f975 	bl	8001380 <HAL_GetTick>
 8005096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	88fa      	ldrh	r2, [r7, #6]
 80050a4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050b0:	d108      	bne.n	80050c4 <HAL_UART_Transmit+0x6c>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	691b      	ldr	r3, [r3, #16]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d104      	bne.n	80050c4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80050ba:	2300      	movs	r3, #0
 80050bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	61bb      	str	r3, [r7, #24]
 80050c2:	e003      	b.n	80050cc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80050c8:	2300      	movs	r3, #0
 80050ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80050cc:	e030      	b.n	8005130 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	9300      	str	r3, [sp, #0]
 80050d2:	697b      	ldr	r3, [r7, #20]
 80050d4:	2200      	movs	r2, #0
 80050d6:	2180      	movs	r1, #128	@ 0x80
 80050d8:	68f8      	ldr	r0, [r7, #12]
 80050da:	f001 fc33 	bl	8006944 <UART_WaitOnFlagUntilTimeout>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2220      	movs	r2, #32
 80050e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e03d      	b.n	800516c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10b      	bne.n	800510e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80050f6:	69bb      	ldr	r3, [r7, #24]
 80050f8:	881b      	ldrh	r3, [r3, #0]
 80050fa:	461a      	mov	r2, r3
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005104:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005106:	69bb      	ldr	r3, [r7, #24]
 8005108:	3302      	adds	r3, #2
 800510a:	61bb      	str	r3, [r7, #24]
 800510c:	e007      	b.n	800511e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	781a      	ldrb	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	3301      	adds	r3, #1
 800511c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005124:	b29b      	uxth	r3, r3
 8005126:	3b01      	subs	r3, #1
 8005128:	b29a      	uxth	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005136:	b29b      	uxth	r3, r3
 8005138:	2b00      	cmp	r3, #0
 800513a:	d1c8      	bne.n	80050ce <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	9300      	str	r3, [sp, #0]
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	2200      	movs	r2, #0
 8005144:	2140      	movs	r1, #64	@ 0x40
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f001 fbfc 	bl	8006944 <UART_WaitOnFlagUntilTimeout>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d005      	beq.n	800515e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2220      	movs	r2, #32
 8005156:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800515a:	2303      	movs	r3, #3
 800515c:	e006      	b.n	800516c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005166:	2300      	movs	r3, #0
 8005168:	e000      	b.n	800516c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800516a:	2302      	movs	r3, #2
  }
}
 800516c:	4618      	mov	r0, r3
 800516e:	3720      	adds	r7, #32
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b08a      	sub	sp, #40	@ 0x28
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	4613      	mov	r3, r2
 8005180:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005188:	2b20      	cmp	r3, #32
 800518a:	d137      	bne.n	80051fc <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d002      	beq.n	8005198 <HAL_UART_Receive_IT+0x24>
 8005192:	88fb      	ldrh	r3, [r7, #6]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d101      	bne.n	800519c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005198:	2301      	movs	r3, #1
 800519a:	e030      	b.n	80051fe <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a18      	ldr	r2, [pc, #96]	@ (8005208 <HAL_UART_Receive_IT+0x94>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d01f      	beq.n	80051ec <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d018      	beq.n	80051ec <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	613b      	str	r3, [r7, #16]
   return(result);
 80051c8:	693b      	ldr	r3, [r7, #16]
 80051ca:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80051ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	623b      	str	r3, [r7, #32]
 80051da:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	69f9      	ldr	r1, [r7, #28]
 80051de:	6a3a      	ldr	r2, [r7, #32]
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e6      	bne.n	80051ba <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80051ec:	88fb      	ldrh	r3, [r7, #6]
 80051ee:	461a      	mov	r2, r3
 80051f0:	68b9      	ldr	r1, [r7, #8]
 80051f2:	68f8      	ldr	r0, [r7, #12]
 80051f4:	f001 fc14 	bl	8006a20 <UART_Start_Receive_IT>
 80051f8:	4603      	mov	r3, r0
 80051fa:	e000      	b.n	80051fe <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80051fc:	2302      	movs	r3, #2
  }
}
 80051fe:	4618      	mov	r0, r3
 8005200:	3728      	adds	r7, #40	@ 0x28
 8005202:	46bd      	mov	sp, r7
 8005204:	bd80      	pop	{r7, pc}
 8005206:	bf00      	nop
 8005208:	58000c00 	.word	0x58000c00

0800520c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b0ba      	sub	sp, #232	@ 0xe8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	69db      	ldr	r3, [r3, #28]
 800521a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005232:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005236:	f640 030f 	movw	r3, #2063	@ 0x80f
 800523a:	4013      	ands	r3, r2
 800523c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005240:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005244:	2b00      	cmp	r3, #0
 8005246:	d11b      	bne.n	8005280 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d015      	beq.n	8005280 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005254:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005258:	f003 0320 	and.w	r3, r3, #32
 800525c:	2b00      	cmp	r3, #0
 800525e:	d105      	bne.n	800526c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005260:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005264:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005268:	2b00      	cmp	r3, #0
 800526a:	d009      	beq.n	8005280 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005270:	2b00      	cmp	r3, #0
 8005272:	f000 8377 	beq.w	8005964 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	4798      	blx	r3
      }
      return;
 800527e:	e371      	b.n	8005964 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005284:	2b00      	cmp	r3, #0
 8005286:	f000 8123 	beq.w	80054d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800528a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800528e:	4b8d      	ldr	r3, [pc, #564]	@ (80054c4 <HAL_UART_IRQHandler+0x2b8>)
 8005290:	4013      	ands	r3, r2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d106      	bne.n	80052a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005296:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800529a:	4b8b      	ldr	r3, [pc, #556]	@ (80054c8 <HAL_UART_IRQHandler+0x2bc>)
 800529c:	4013      	ands	r3, r2
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8116 	beq.w	80054d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052a8:	f003 0301 	and.w	r3, r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d011      	beq.n	80052d4 <HAL_UART_IRQHandler+0xc8>
 80052b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d00b      	beq.n	80052d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2201      	movs	r2, #1
 80052c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052ca:	f043 0201 	orr.w	r2, r3, #1
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052d8:	f003 0302 	and.w	r3, r3, #2
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d011      	beq.n	8005304 <HAL_UART_IRQHandler+0xf8>
 80052e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80052e4:	f003 0301 	and.w	r3, r3, #1
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2202      	movs	r2, #2
 80052f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052fa:	f043 0204 	orr.w	r2, r3, #4
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005308:	f003 0304 	and.w	r3, r3, #4
 800530c:	2b00      	cmp	r3, #0
 800530e:	d011      	beq.n	8005334 <HAL_UART_IRQHandler+0x128>
 8005310:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005314:	f003 0301 	and.w	r3, r3, #1
 8005318:	2b00      	cmp	r3, #0
 800531a:	d00b      	beq.n	8005334 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2204      	movs	r2, #4
 8005322:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800532a:	f043 0202 	orr.w	r2, r3, #2
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b00      	cmp	r3, #0
 800533e:	d017      	beq.n	8005370 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d105      	bne.n	8005358 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800534c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005350:	4b5c      	ldr	r3, [pc, #368]	@ (80054c4 <HAL_UART_IRQHandler+0x2b8>)
 8005352:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005354:	2b00      	cmp	r3, #0
 8005356:	d00b      	beq.n	8005370 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	2208      	movs	r2, #8
 800535e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005366:	f043 0208 	orr.w	r2, r3, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005374:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005378:	2b00      	cmp	r3, #0
 800537a:	d012      	beq.n	80053a2 <HAL_UART_IRQHandler+0x196>
 800537c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005380:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00c      	beq.n	80053a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005390:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005398:	f043 0220 	orr.w	r2, r3, #32
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f000 82dd 	beq.w	8005968 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 0320 	and.w	r3, r3, #32
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d013      	beq.n	80053e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80053ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053be:	f003 0320 	and.w	r3, r3, #32
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d105      	bne.n	80053d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80053c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d007      	beq.n	80053e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053de:	6878      	ldr	r0, [r7, #4]
 80053e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80053e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053f6:	2b40      	cmp	r3, #64	@ 0x40
 80053f8:	d005      	beq.n	8005406 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80053fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80053fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005402:	2b00      	cmp	r3, #0
 8005404:	d054      	beq.n	80054b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005406:	6878      	ldr	r0, [r7, #4]
 8005408:	f001 fc2c 	bl	8006c64 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005416:	2b40      	cmp	r3, #64	@ 0x40
 8005418:	d146      	bne.n	80054a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	3308      	adds	r3, #8
 8005420:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005424:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005428:	e853 3f00 	ldrex	r3, [r3]
 800542c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005430:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005434:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005438:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3308      	adds	r3, #8
 8005442:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005446:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800544a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800544e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005452:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005456:	e841 2300 	strex	r3, r2, [r1]
 800545a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800545e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005462:	2b00      	cmp	r3, #0
 8005464:	d1d9      	bne.n	800541a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800546c:	2b00      	cmp	r3, #0
 800546e:	d017      	beq.n	80054a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005476:	4a15      	ldr	r2, [pc, #84]	@ (80054cc <HAL_UART_IRQHandler+0x2c0>)
 8005478:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005480:	4618      	mov	r0, r3
 8005482:	f7fc fc2f 	bl	8001ce4 <HAL_DMA_Abort_IT>
 8005486:	4603      	mov	r3, r0
 8005488:	2b00      	cmp	r3, #0
 800548a:	d019      	beq.n	80054c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005492:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800549a:	4610      	mov	r0, r2
 800549c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800549e:	e00f      	b.n	80054c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80054a0:	6878      	ldr	r0, [r7, #4]
 80054a2:	f000 fa81 	bl	80059a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054a6:	e00b      	b.n	80054c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80054a8:	6878      	ldr	r0, [r7, #4]
 80054aa:	f000 fa7d 	bl	80059a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054ae:	e007      	b.n	80054c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f000 fa79 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80054be:	e253      	b.n	8005968 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054c0:	bf00      	nop
    return;
 80054c2:	e251      	b.n	8005968 <HAL_UART_IRQHandler+0x75c>
 80054c4:	10000001 	.word	0x10000001
 80054c8:	04000120 	.word	0x04000120
 80054cc:	08006d31 	.word	0x08006d31

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	f040 81e7 	bne.w	80058a8 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054de:	f003 0310 	and.w	r3, r3, #16
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	f000 81e0 	beq.w	80058a8 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80054e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054ec:	f003 0310 	and.w	r3, r3, #16
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f000 81d9 	beq.w	80058a8 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	2210      	movs	r2, #16
 80054fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005508:	2b40      	cmp	r3, #64	@ 0x40
 800550a:	f040 8151 	bne.w	80057b0 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a96      	ldr	r2, [pc, #600]	@ (8005770 <HAL_UART_IRQHandler+0x564>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d068      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a93      	ldr	r2, [pc, #588]	@ (8005774 <HAL_UART_IRQHandler+0x568>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d061      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a91      	ldr	r2, [pc, #580]	@ (8005778 <HAL_UART_IRQHandler+0x56c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d05a      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a8e      	ldr	r2, [pc, #568]	@ (800577c <HAL_UART_IRQHandler+0x570>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d053      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a8c      	ldr	r2, [pc, #560]	@ (8005780 <HAL_UART_IRQHandler+0x574>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d04c      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a89      	ldr	r2, [pc, #548]	@ (8005784 <HAL_UART_IRQHandler+0x578>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d045      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a87      	ldr	r2, [pc, #540]	@ (8005788 <HAL_UART_IRQHandler+0x57c>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d03e      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	4a84      	ldr	r2, [pc, #528]	@ (800578c <HAL_UART_IRQHandler+0x580>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d037      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a82      	ldr	r2, [pc, #520]	@ (8005790 <HAL_UART_IRQHandler+0x584>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d030      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a7f      	ldr	r2, [pc, #508]	@ (8005794 <HAL_UART_IRQHandler+0x588>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d029      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	4a7d      	ldr	r2, [pc, #500]	@ (8005798 <HAL_UART_IRQHandler+0x58c>)
 80055a4:	4293      	cmp	r3, r2
 80055a6:	d022      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a7a      	ldr	r2, [pc, #488]	@ (800579c <HAL_UART_IRQHandler+0x590>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d01b      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4a78      	ldr	r2, [pc, #480]	@ (80057a0 <HAL_UART_IRQHandler+0x594>)
 80055c0:	4293      	cmp	r3, r2
 80055c2:	d014      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a75      	ldr	r2, [pc, #468]	@ (80057a4 <HAL_UART_IRQHandler+0x598>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d00d      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4a73      	ldr	r2, [pc, #460]	@ (80057a8 <HAL_UART_IRQHandler+0x59c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d006      	beq.n	80055ee <HAL_UART_IRQHandler+0x3e2>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a70      	ldr	r2, [pc, #448]	@ (80057ac <HAL_UART_IRQHandler+0x5a0>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d106      	bne.n	80055fc <HAL_UART_IRQHandler+0x3f0>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	b29b      	uxth	r3, r3
 80055fa:	e005      	b.n	8005608 <HAL_UART_IRQHandler+0x3fc>
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	b29b      	uxth	r3, r3
 8005608:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800560c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005610:	2b00      	cmp	r3, #0
 8005612:	f000 81ab 	beq.w	800596c <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800561c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005620:	429a      	cmp	r2, r3
 8005622:	f080 81a3 	bcs.w	800596c <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800562c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005636:	69db      	ldr	r3, [r3, #28]
 8005638:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800563c:	f000 8087 	beq.w	800574e <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005654:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005658:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800565c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	461a      	mov	r2, r3
 8005666:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800566a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800566e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005676:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005682:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1da      	bne.n	8005640 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3308      	adds	r3, #8
 8005690:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800569a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800569c:	f023 0301 	bic.w	r3, r3, #1
 80056a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3308      	adds	r3, #8
 80056aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80056ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e1      	bne.n	800568a <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3308      	adds	r3, #8
 80056cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3308      	adds	r3, #8
 80056e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e3      	bne.n	80056c6 <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005712:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005714:	e853 3f00 	ldrex	r3, [r3]
 8005718:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800571a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800571c:	f023 0310 	bic.w	r3, r3, #16
 8005720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800572e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005730:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005732:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005734:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005736:	e841 2300 	strex	r3, r2, [r1]
 800573a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800573c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1e4      	bne.n	800570c <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005748:	4618      	mov	r0, r3
 800574a:	f7fb ffad 	bl	80016a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2202      	movs	r2, #2
 8005752:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005760:	b29b      	uxth	r3, r3
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	b29b      	uxth	r3, r3
 8005766:	4619      	mov	r1, r3
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f927 	bl	80059bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800576e:	e0fd      	b.n	800596c <HAL_UART_IRQHandler+0x760>
 8005770:	40020010 	.word	0x40020010
 8005774:	40020028 	.word	0x40020028
 8005778:	40020040 	.word	0x40020040
 800577c:	40020058 	.word	0x40020058
 8005780:	40020070 	.word	0x40020070
 8005784:	40020088 	.word	0x40020088
 8005788:	400200a0 	.word	0x400200a0
 800578c:	400200b8 	.word	0x400200b8
 8005790:	40020410 	.word	0x40020410
 8005794:	40020428 	.word	0x40020428
 8005798:	40020440 	.word	0x40020440
 800579c:	40020458 	.word	0x40020458
 80057a0:	40020470 	.word	0x40020470
 80057a4:	40020488 	.word	0x40020488
 80057a8:	400204a0 	.word	0x400204a0
 80057ac:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057bc:	b29b      	uxth	r3, r3
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80cf 	beq.w	8005970 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 80057d2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	f000 80ca 	beq.w	8005970 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057e4:	e853 3f00 	ldrex	r3, [r3]
 80057e8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057ec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057f0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	461a      	mov	r2, r3
 80057fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80057fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005800:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005802:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005806:	e841 2300 	strex	r3, r2, [r1]
 800580a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800580c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800580e:	2b00      	cmp	r3, #0
 8005810:	d1e4      	bne.n	80057dc <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	3308      	adds	r3, #8
 8005818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800581a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800581c:	e853 3f00 	ldrex	r3, [r3]
 8005820:	623b      	str	r3, [r7, #32]
   return(result);
 8005822:	6a3a      	ldr	r2, [r7, #32]
 8005824:	4b55      	ldr	r3, [pc, #340]	@ (800597c <HAL_UART_IRQHandler+0x770>)
 8005826:	4013      	ands	r3, r2
 8005828:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3308      	adds	r3, #8
 8005832:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005836:	633a      	str	r2, [r7, #48]	@ 0x30
 8005838:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800583a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800583c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800583e:	e841 2300 	strex	r3, r2, [r1]
 8005842:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005846:	2b00      	cmp	r3, #0
 8005848:	d1e3      	bne.n	8005812 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005864:	693b      	ldr	r3, [r7, #16]
 8005866:	e853 3f00 	ldrex	r3, [r3]
 800586a:	60fb      	str	r3, [r7, #12]
   return(result);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f023 0310 	bic.w	r3, r3, #16
 8005872:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	461a      	mov	r2, r3
 800587c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8005880:	61fb      	str	r3, [r7, #28]
 8005882:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	69b9      	ldr	r1, [r7, #24]
 8005886:	69fa      	ldr	r2, [r7, #28]
 8005888:	e841 2300 	strex	r3, r2, [r1]
 800588c:	617b      	str	r3, [r7, #20]
   return(result);
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d1e4      	bne.n	800585e <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2202      	movs	r2, #2
 8005898:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800589a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800589e:	4619      	mov	r1, r3
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	f000 f88b 	bl	80059bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80058a6:	e063      	b.n	8005970 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80058a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058ac:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00e      	beq.n	80058d2 <HAL_UART_IRQHandler+0x6c6>
 80058b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d008      	beq.n	80058d2 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80058c8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 ff8e 	bl	80077ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058d0:	e051      	b.n	8005976 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d014      	beq.n	8005908 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80058de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d105      	bne.n	80058f6 <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80058ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d008      	beq.n	8005908 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d03a      	beq.n	8005974 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	4798      	blx	r3
    }
    return;
 8005906:	e035      	b.n	8005974 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005908:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800590c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005910:	2b00      	cmp	r3, #0
 8005912:	d009      	beq.n	8005928 <HAL_UART_IRQHandler+0x71c>
 8005914:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005918:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800591c:	2b00      	cmp	r3, #0
 800591e:	d003      	beq.n	8005928 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005920:	6878      	ldr	r0, [r7, #4]
 8005922:	f001 fa1b 	bl	8006d5c <UART_EndTransmit_IT>
    return;
 8005926:	e026      	b.n	8005976 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005928:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800592c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005930:	2b00      	cmp	r3, #0
 8005932:	d009      	beq.n	8005948 <HAL_UART_IRQHandler+0x73c>
 8005934:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005938:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f001 ff67 	bl	8007814 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005946:	e016      	b.n	8005976 <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005948:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800594c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005950:	2b00      	cmp	r3, #0
 8005952:	d010      	beq.n	8005976 <HAL_UART_IRQHandler+0x76a>
 8005954:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005958:	2b00      	cmp	r3, #0
 800595a:	da0c      	bge.n	8005976 <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f001 ff4f 	bl	8007800 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005962:	e008      	b.n	8005976 <HAL_UART_IRQHandler+0x76a>
      return;
 8005964:	bf00      	nop
 8005966:	e006      	b.n	8005976 <HAL_UART_IRQHandler+0x76a>
    return;
 8005968:	bf00      	nop
 800596a:	e004      	b.n	8005976 <HAL_UART_IRQHandler+0x76a>
      return;
 800596c:	bf00      	nop
 800596e:	e002      	b.n	8005976 <HAL_UART_IRQHandler+0x76a>
      return;
 8005970:	bf00      	nop
 8005972:	e000      	b.n	8005976 <HAL_UART_IRQHandler+0x76a>
    return;
 8005974:	bf00      	nop
  }
}
 8005976:	37e8      	adds	r7, #232	@ 0xe8
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	effffffe 	.word	0xeffffffe

08005980 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800599c:	bf00      	nop
 800599e:	370c      	adds	r7, #12
 80059a0:	46bd      	mov	sp, r7
 80059a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a6:	4770      	bx	lr

080059a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80059a8:	b480      	push	{r7}
 80059aa:	b083      	sub	sp, #12
 80059ac:	af00      	add	r7, sp, #0
 80059ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80059b0:	bf00      	nop
 80059b2:	370c      	adds	r7, #12
 80059b4:	46bd      	mov	sp, r7
 80059b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ba:	4770      	bx	lr

080059bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80059bc:	b480      	push	{r7}
 80059be:	b083      	sub	sp, #12
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	460b      	mov	r3, r1
 80059c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059c8:	bf00      	nop
 80059ca:	370c      	adds	r7, #12
 80059cc:	46bd      	mov	sp, r7
 80059ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d2:	4770      	bx	lr

080059d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80059d8:	b092      	sub	sp, #72	@ 0x48
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059de:	2300      	movs	r3, #0
 80059e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	691b      	ldr	r3, [r3, #16]
 80059ec:	431a      	orrs	r2, r3
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	695b      	ldr	r3, [r3, #20]
 80059f2:	431a      	orrs	r2, r3
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	69db      	ldr	r3, [r3, #28]
 80059f8:	4313      	orrs	r3, r2
 80059fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	4bbe      	ldr	r3, [pc, #760]	@ (8005cfc <UART_SetConfig+0x328>)
 8005a04:	4013      	ands	r3, r2
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	6812      	ldr	r2, [r2, #0]
 8005a0a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a0c:	430b      	orrs	r3, r1
 8005a0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	68da      	ldr	r2, [r3, #12]
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	699b      	ldr	r3, [r3, #24]
 8005a2a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4ab3      	ldr	r2, [pc, #716]	@ (8005d00 <UART_SetConfig+0x32c>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d004      	beq.n	8005a40 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005a36:	697b      	ldr	r3, [r7, #20]
 8005a38:	6a1b      	ldr	r3, [r3, #32]
 8005a3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a3c:	4313      	orrs	r3, r2
 8005a3e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	689a      	ldr	r2, [r3, #8]
 8005a46:	4baf      	ldr	r3, [pc, #700]	@ (8005d04 <UART_SetConfig+0x330>)
 8005a48:	4013      	ands	r3, r2
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	6812      	ldr	r2, [r2, #0]
 8005a4e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005a50:	430b      	orrs	r3, r1
 8005a52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	f023 010f 	bic.w	r1, r3, #15
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	430a      	orrs	r2, r1
 8005a68:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4aa6      	ldr	r2, [pc, #664]	@ (8005d08 <UART_SetConfig+0x334>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d177      	bne.n	8005b64 <UART_SetConfig+0x190>
 8005a74:	4ba5      	ldr	r3, [pc, #660]	@ (8005d0c <UART_SetConfig+0x338>)
 8005a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005a7c:	2b28      	cmp	r3, #40	@ 0x28
 8005a7e:	d86d      	bhi.n	8005b5c <UART_SetConfig+0x188>
 8005a80:	a201      	add	r2, pc, #4	@ (adr r2, 8005a88 <UART_SetConfig+0xb4>)
 8005a82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a86:	bf00      	nop
 8005a88:	08005b2d 	.word	0x08005b2d
 8005a8c:	08005b5d 	.word	0x08005b5d
 8005a90:	08005b5d 	.word	0x08005b5d
 8005a94:	08005b5d 	.word	0x08005b5d
 8005a98:	08005b5d 	.word	0x08005b5d
 8005a9c:	08005b5d 	.word	0x08005b5d
 8005aa0:	08005b5d 	.word	0x08005b5d
 8005aa4:	08005b5d 	.word	0x08005b5d
 8005aa8:	08005b35 	.word	0x08005b35
 8005aac:	08005b5d 	.word	0x08005b5d
 8005ab0:	08005b5d 	.word	0x08005b5d
 8005ab4:	08005b5d 	.word	0x08005b5d
 8005ab8:	08005b5d 	.word	0x08005b5d
 8005abc:	08005b5d 	.word	0x08005b5d
 8005ac0:	08005b5d 	.word	0x08005b5d
 8005ac4:	08005b5d 	.word	0x08005b5d
 8005ac8:	08005b3d 	.word	0x08005b3d
 8005acc:	08005b5d 	.word	0x08005b5d
 8005ad0:	08005b5d 	.word	0x08005b5d
 8005ad4:	08005b5d 	.word	0x08005b5d
 8005ad8:	08005b5d 	.word	0x08005b5d
 8005adc:	08005b5d 	.word	0x08005b5d
 8005ae0:	08005b5d 	.word	0x08005b5d
 8005ae4:	08005b5d 	.word	0x08005b5d
 8005ae8:	08005b45 	.word	0x08005b45
 8005aec:	08005b5d 	.word	0x08005b5d
 8005af0:	08005b5d 	.word	0x08005b5d
 8005af4:	08005b5d 	.word	0x08005b5d
 8005af8:	08005b5d 	.word	0x08005b5d
 8005afc:	08005b5d 	.word	0x08005b5d
 8005b00:	08005b5d 	.word	0x08005b5d
 8005b04:	08005b5d 	.word	0x08005b5d
 8005b08:	08005b4d 	.word	0x08005b4d
 8005b0c:	08005b5d 	.word	0x08005b5d
 8005b10:	08005b5d 	.word	0x08005b5d
 8005b14:	08005b5d 	.word	0x08005b5d
 8005b18:	08005b5d 	.word	0x08005b5d
 8005b1c:	08005b5d 	.word	0x08005b5d
 8005b20:	08005b5d 	.word	0x08005b5d
 8005b24:	08005b5d 	.word	0x08005b5d
 8005b28:	08005b55 	.word	0x08005b55
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e326      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005b34:	2304      	movs	r3, #4
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e322      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005b3c:	2308      	movs	r3, #8
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e31e      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005b44:	2310      	movs	r3, #16
 8005b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b4a:	e31a      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005b4c:	2320      	movs	r3, #32
 8005b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b52:	e316      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005b54:	2340      	movs	r3, #64	@ 0x40
 8005b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b5a:	e312      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005b5c:	2380      	movs	r3, #128	@ 0x80
 8005b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b62:	e30e      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a69      	ldr	r2, [pc, #420]	@ (8005d10 <UART_SetConfig+0x33c>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d130      	bne.n	8005bd0 <UART_SetConfig+0x1fc>
 8005b6e:	4b67      	ldr	r3, [pc, #412]	@ (8005d0c <UART_SetConfig+0x338>)
 8005b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b72:	f003 0307 	and.w	r3, r3, #7
 8005b76:	2b05      	cmp	r3, #5
 8005b78:	d826      	bhi.n	8005bc8 <UART_SetConfig+0x1f4>
 8005b7a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b80 <UART_SetConfig+0x1ac>)
 8005b7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b80:	08005b99 	.word	0x08005b99
 8005b84:	08005ba1 	.word	0x08005ba1
 8005b88:	08005ba9 	.word	0x08005ba9
 8005b8c:	08005bb1 	.word	0x08005bb1
 8005b90:	08005bb9 	.word	0x08005bb9
 8005b94:	08005bc1 	.word	0x08005bc1
 8005b98:	2300      	movs	r3, #0
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e2f0      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ba0:	2304      	movs	r3, #4
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e2ec      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ba8:	2308      	movs	r3, #8
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e2e8      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005bb0:	2310      	movs	r3, #16
 8005bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bb6:	e2e4      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005bb8:	2320      	movs	r3, #32
 8005bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bbe:	e2e0      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005bc0:	2340      	movs	r3, #64	@ 0x40
 8005bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bc6:	e2dc      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005bc8:	2380      	movs	r3, #128	@ 0x80
 8005bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bce:	e2d8      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a4f      	ldr	r2, [pc, #316]	@ (8005d14 <UART_SetConfig+0x340>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d130      	bne.n	8005c3c <UART_SetConfig+0x268>
 8005bda:	4b4c      	ldr	r3, [pc, #304]	@ (8005d0c <UART_SetConfig+0x338>)
 8005bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bde:	f003 0307 	and.w	r3, r3, #7
 8005be2:	2b05      	cmp	r3, #5
 8005be4:	d826      	bhi.n	8005c34 <UART_SetConfig+0x260>
 8005be6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bec <UART_SetConfig+0x218>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005c05 	.word	0x08005c05
 8005bf0:	08005c0d 	.word	0x08005c0d
 8005bf4:	08005c15 	.word	0x08005c15
 8005bf8:	08005c1d 	.word	0x08005c1d
 8005bfc:	08005c25 	.word	0x08005c25
 8005c00:	08005c2d 	.word	0x08005c2d
 8005c04:	2300      	movs	r3, #0
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e2ba      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c0c:	2304      	movs	r3, #4
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e2b6      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c14:	2308      	movs	r3, #8
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e2b2      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c22:	e2ae      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c24:	2320      	movs	r3, #32
 8005c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c2a:	e2aa      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c2c:	2340      	movs	r3, #64	@ 0x40
 8005c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c32:	e2a6      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c34:	2380      	movs	r3, #128	@ 0x80
 8005c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c3a:	e2a2      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a35      	ldr	r2, [pc, #212]	@ (8005d18 <UART_SetConfig+0x344>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d130      	bne.n	8005ca8 <UART_SetConfig+0x2d4>
 8005c46:	4b31      	ldr	r3, [pc, #196]	@ (8005d0c <UART_SetConfig+0x338>)
 8005c48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c4a:	f003 0307 	and.w	r3, r3, #7
 8005c4e:	2b05      	cmp	r3, #5
 8005c50:	d826      	bhi.n	8005ca0 <UART_SetConfig+0x2cc>
 8005c52:	a201      	add	r2, pc, #4	@ (adr r2, 8005c58 <UART_SetConfig+0x284>)
 8005c54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c58:	08005c71 	.word	0x08005c71
 8005c5c:	08005c79 	.word	0x08005c79
 8005c60:	08005c81 	.word	0x08005c81
 8005c64:	08005c89 	.word	0x08005c89
 8005c68:	08005c91 	.word	0x08005c91
 8005c6c:	08005c99 	.word	0x08005c99
 8005c70:	2300      	movs	r3, #0
 8005c72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c76:	e284      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c78:	2304      	movs	r3, #4
 8005c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c7e:	e280      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c80:	2308      	movs	r3, #8
 8005c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c86:	e27c      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c88:	2310      	movs	r3, #16
 8005c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c8e:	e278      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c90:	2320      	movs	r3, #32
 8005c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c96:	e274      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005c98:	2340      	movs	r3, #64	@ 0x40
 8005c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9e:	e270      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ca0:	2380      	movs	r3, #128	@ 0x80
 8005ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca6:	e26c      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ca8:	697b      	ldr	r3, [r7, #20]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a1b      	ldr	r2, [pc, #108]	@ (8005d1c <UART_SetConfig+0x348>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d142      	bne.n	8005d38 <UART_SetConfig+0x364>
 8005cb2:	4b16      	ldr	r3, [pc, #88]	@ (8005d0c <UART_SetConfig+0x338>)
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cb6:	f003 0307 	and.w	r3, r3, #7
 8005cba:	2b05      	cmp	r3, #5
 8005cbc:	d838      	bhi.n	8005d30 <UART_SetConfig+0x35c>
 8005cbe:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc4 <UART_SetConfig+0x2f0>)
 8005cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc4:	08005cdd 	.word	0x08005cdd
 8005cc8:	08005ce5 	.word	0x08005ce5
 8005ccc:	08005ced 	.word	0x08005ced
 8005cd0:	08005cf5 	.word	0x08005cf5
 8005cd4:	08005d21 	.word	0x08005d21
 8005cd8:	08005d29 	.word	0x08005d29
 8005cdc:	2300      	movs	r3, #0
 8005cde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ce2:	e24e      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ce4:	2304      	movs	r3, #4
 8005ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cea:	e24a      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005cec:	2308      	movs	r3, #8
 8005cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cf2:	e246      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005cf4:	2310      	movs	r3, #16
 8005cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005cfa:	e242      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005cfc:	cfff69f3 	.word	0xcfff69f3
 8005d00:	58000c00 	.word	0x58000c00
 8005d04:	11fff4ff 	.word	0x11fff4ff
 8005d08:	40011000 	.word	0x40011000
 8005d0c:	58024400 	.word	0x58024400
 8005d10:	40004400 	.word	0x40004400
 8005d14:	40004800 	.word	0x40004800
 8005d18:	40004c00 	.word	0x40004c00
 8005d1c:	40005000 	.word	0x40005000
 8005d20:	2320      	movs	r3, #32
 8005d22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d26:	e22c      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005d28:	2340      	movs	r3, #64	@ 0x40
 8005d2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d2e:	e228      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005d30:	2380      	movs	r3, #128	@ 0x80
 8005d32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d36:	e224      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4ab1      	ldr	r2, [pc, #708]	@ (8006004 <UART_SetConfig+0x630>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d176      	bne.n	8005e30 <UART_SetConfig+0x45c>
 8005d42:	4bb1      	ldr	r3, [pc, #708]	@ (8006008 <UART_SetConfig+0x634>)
 8005d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005d4a:	2b28      	cmp	r3, #40	@ 0x28
 8005d4c:	d86c      	bhi.n	8005e28 <UART_SetConfig+0x454>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <UART_SetConfig+0x380>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005df9 	.word	0x08005df9
 8005d58:	08005e29 	.word	0x08005e29
 8005d5c:	08005e29 	.word	0x08005e29
 8005d60:	08005e29 	.word	0x08005e29
 8005d64:	08005e29 	.word	0x08005e29
 8005d68:	08005e29 	.word	0x08005e29
 8005d6c:	08005e29 	.word	0x08005e29
 8005d70:	08005e29 	.word	0x08005e29
 8005d74:	08005e01 	.word	0x08005e01
 8005d78:	08005e29 	.word	0x08005e29
 8005d7c:	08005e29 	.word	0x08005e29
 8005d80:	08005e29 	.word	0x08005e29
 8005d84:	08005e29 	.word	0x08005e29
 8005d88:	08005e29 	.word	0x08005e29
 8005d8c:	08005e29 	.word	0x08005e29
 8005d90:	08005e29 	.word	0x08005e29
 8005d94:	08005e09 	.word	0x08005e09
 8005d98:	08005e29 	.word	0x08005e29
 8005d9c:	08005e29 	.word	0x08005e29
 8005da0:	08005e29 	.word	0x08005e29
 8005da4:	08005e29 	.word	0x08005e29
 8005da8:	08005e29 	.word	0x08005e29
 8005dac:	08005e29 	.word	0x08005e29
 8005db0:	08005e29 	.word	0x08005e29
 8005db4:	08005e11 	.word	0x08005e11
 8005db8:	08005e29 	.word	0x08005e29
 8005dbc:	08005e29 	.word	0x08005e29
 8005dc0:	08005e29 	.word	0x08005e29
 8005dc4:	08005e29 	.word	0x08005e29
 8005dc8:	08005e29 	.word	0x08005e29
 8005dcc:	08005e29 	.word	0x08005e29
 8005dd0:	08005e29 	.word	0x08005e29
 8005dd4:	08005e19 	.word	0x08005e19
 8005dd8:	08005e29 	.word	0x08005e29
 8005ddc:	08005e29 	.word	0x08005e29
 8005de0:	08005e29 	.word	0x08005e29
 8005de4:	08005e29 	.word	0x08005e29
 8005de8:	08005e29 	.word	0x08005e29
 8005dec:	08005e29 	.word	0x08005e29
 8005df0:	08005e29 	.word	0x08005e29
 8005df4:	08005e21 	.word	0x08005e21
 8005df8:	2301      	movs	r3, #1
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e1c0      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e00:	2304      	movs	r3, #4
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e1bc      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e08:	2308      	movs	r3, #8
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e1b8      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e10:	2310      	movs	r3, #16
 8005e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e16:	e1b4      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e18:	2320      	movs	r3, #32
 8005e1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e1e:	e1b0      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e20:	2340      	movs	r3, #64	@ 0x40
 8005e22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e26:	e1ac      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e28:	2380      	movs	r3, #128	@ 0x80
 8005e2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e2e:	e1a8      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a75      	ldr	r2, [pc, #468]	@ (800600c <UART_SetConfig+0x638>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d130      	bne.n	8005e9c <UART_SetConfig+0x4c8>
 8005e3a:	4b73      	ldr	r3, [pc, #460]	@ (8006008 <UART_SetConfig+0x634>)
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b05      	cmp	r3, #5
 8005e44:	d826      	bhi.n	8005e94 <UART_SetConfig+0x4c0>
 8005e46:	a201      	add	r2, pc, #4	@ (adr r2, 8005e4c <UART_SetConfig+0x478>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005e65 	.word	0x08005e65
 8005e50:	08005e6d 	.word	0x08005e6d
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005e7d 	.word	0x08005e7d
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e8d 	.word	0x08005e8d
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e18a      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e6c:	2304      	movs	r3, #4
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e186      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e74:	2308      	movs	r3, #8
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e182      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e7c:	2310      	movs	r3, #16
 8005e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e82:	e17e      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e84:	2320      	movs	r3, #32
 8005e86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e8a:	e17a      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e8c:	2340      	movs	r3, #64	@ 0x40
 8005e8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e92:	e176      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e94:	2380      	movs	r3, #128	@ 0x80
 8005e96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e9a:	e172      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	4a5b      	ldr	r2, [pc, #364]	@ (8006010 <UART_SetConfig+0x63c>)
 8005ea2:	4293      	cmp	r3, r2
 8005ea4:	d130      	bne.n	8005f08 <UART_SetConfig+0x534>
 8005ea6:	4b58      	ldr	r3, [pc, #352]	@ (8006008 <UART_SetConfig+0x634>)
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eaa:	f003 0307 	and.w	r3, r3, #7
 8005eae:	2b05      	cmp	r3, #5
 8005eb0:	d826      	bhi.n	8005f00 <UART_SetConfig+0x52c>
 8005eb2:	a201      	add	r2, pc, #4	@ (adr r2, 8005eb8 <UART_SetConfig+0x4e4>)
 8005eb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb8:	08005ed1 	.word	0x08005ed1
 8005ebc:	08005ed9 	.word	0x08005ed9
 8005ec0:	08005ee1 	.word	0x08005ee1
 8005ec4:	08005ee9 	.word	0x08005ee9
 8005ec8:	08005ef1 	.word	0x08005ef1
 8005ecc:	08005ef9 	.word	0x08005ef9
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ed6:	e154      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ed8:	2304      	movs	r3, #4
 8005eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ede:	e150      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ee0:	2308      	movs	r3, #8
 8005ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ee6:	e14c      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ee8:	2310      	movs	r3, #16
 8005eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005eee:	e148      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ef0:	2320      	movs	r3, #32
 8005ef2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ef6:	e144      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ef8:	2340      	movs	r3, #64	@ 0x40
 8005efa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005efe:	e140      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005f00:	2380      	movs	r3, #128	@ 0x80
 8005f02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f06:	e13c      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005f08:	697b      	ldr	r3, [r7, #20]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a41      	ldr	r2, [pc, #260]	@ (8006014 <UART_SetConfig+0x640>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	f040 8082 	bne.w	8006018 <UART_SetConfig+0x644>
 8005f14:	4b3c      	ldr	r3, [pc, #240]	@ (8006008 <UART_SetConfig+0x634>)
 8005f16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f18:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f1c:	2b28      	cmp	r3, #40	@ 0x28
 8005f1e:	d86d      	bhi.n	8005ffc <UART_SetConfig+0x628>
 8005f20:	a201      	add	r2, pc, #4	@ (adr r2, 8005f28 <UART_SetConfig+0x554>)
 8005f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f26:	bf00      	nop
 8005f28:	08005fcd 	.word	0x08005fcd
 8005f2c:	08005ffd 	.word	0x08005ffd
 8005f30:	08005ffd 	.word	0x08005ffd
 8005f34:	08005ffd 	.word	0x08005ffd
 8005f38:	08005ffd 	.word	0x08005ffd
 8005f3c:	08005ffd 	.word	0x08005ffd
 8005f40:	08005ffd 	.word	0x08005ffd
 8005f44:	08005ffd 	.word	0x08005ffd
 8005f48:	08005fd5 	.word	0x08005fd5
 8005f4c:	08005ffd 	.word	0x08005ffd
 8005f50:	08005ffd 	.word	0x08005ffd
 8005f54:	08005ffd 	.word	0x08005ffd
 8005f58:	08005ffd 	.word	0x08005ffd
 8005f5c:	08005ffd 	.word	0x08005ffd
 8005f60:	08005ffd 	.word	0x08005ffd
 8005f64:	08005ffd 	.word	0x08005ffd
 8005f68:	08005fdd 	.word	0x08005fdd
 8005f6c:	08005ffd 	.word	0x08005ffd
 8005f70:	08005ffd 	.word	0x08005ffd
 8005f74:	08005ffd 	.word	0x08005ffd
 8005f78:	08005ffd 	.word	0x08005ffd
 8005f7c:	08005ffd 	.word	0x08005ffd
 8005f80:	08005ffd 	.word	0x08005ffd
 8005f84:	08005ffd 	.word	0x08005ffd
 8005f88:	08005fe5 	.word	0x08005fe5
 8005f8c:	08005ffd 	.word	0x08005ffd
 8005f90:	08005ffd 	.word	0x08005ffd
 8005f94:	08005ffd 	.word	0x08005ffd
 8005f98:	08005ffd 	.word	0x08005ffd
 8005f9c:	08005ffd 	.word	0x08005ffd
 8005fa0:	08005ffd 	.word	0x08005ffd
 8005fa4:	08005ffd 	.word	0x08005ffd
 8005fa8:	08005fed 	.word	0x08005fed
 8005fac:	08005ffd 	.word	0x08005ffd
 8005fb0:	08005ffd 	.word	0x08005ffd
 8005fb4:	08005ffd 	.word	0x08005ffd
 8005fb8:	08005ffd 	.word	0x08005ffd
 8005fbc:	08005ffd 	.word	0x08005ffd
 8005fc0:	08005ffd 	.word	0x08005ffd
 8005fc4:	08005ffd 	.word	0x08005ffd
 8005fc8:	08005ff5 	.word	0x08005ff5
 8005fcc:	2301      	movs	r3, #1
 8005fce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fd2:	e0d6      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005fd4:	2304      	movs	r3, #4
 8005fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fda:	e0d2      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005fdc:	2308      	movs	r3, #8
 8005fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fe2:	e0ce      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005fe4:	2310      	movs	r3, #16
 8005fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005fea:	e0ca      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005fec:	2320      	movs	r3, #32
 8005fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ff2:	e0c6      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ff4:	2340      	movs	r3, #64	@ 0x40
 8005ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ffa:	e0c2      	b.n	8006182 <UART_SetConfig+0x7ae>
 8005ffc:	2380      	movs	r3, #128	@ 0x80
 8005ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006002:	e0be      	b.n	8006182 <UART_SetConfig+0x7ae>
 8006004:	40011400 	.word	0x40011400
 8006008:	58024400 	.word	0x58024400
 800600c:	40007800 	.word	0x40007800
 8006010:	40007c00 	.word	0x40007c00
 8006014:	40011800 	.word	0x40011800
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	4aad      	ldr	r2, [pc, #692]	@ (80062d4 <UART_SetConfig+0x900>)
 800601e:	4293      	cmp	r3, r2
 8006020:	d176      	bne.n	8006110 <UART_SetConfig+0x73c>
 8006022:	4bad      	ldr	r3, [pc, #692]	@ (80062d8 <UART_SetConfig+0x904>)
 8006024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006026:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800602a:	2b28      	cmp	r3, #40	@ 0x28
 800602c:	d86c      	bhi.n	8006108 <UART_SetConfig+0x734>
 800602e:	a201      	add	r2, pc, #4	@ (adr r2, 8006034 <UART_SetConfig+0x660>)
 8006030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006034:	080060d9 	.word	0x080060d9
 8006038:	08006109 	.word	0x08006109
 800603c:	08006109 	.word	0x08006109
 8006040:	08006109 	.word	0x08006109
 8006044:	08006109 	.word	0x08006109
 8006048:	08006109 	.word	0x08006109
 800604c:	08006109 	.word	0x08006109
 8006050:	08006109 	.word	0x08006109
 8006054:	080060e1 	.word	0x080060e1
 8006058:	08006109 	.word	0x08006109
 800605c:	08006109 	.word	0x08006109
 8006060:	08006109 	.word	0x08006109
 8006064:	08006109 	.word	0x08006109
 8006068:	08006109 	.word	0x08006109
 800606c:	08006109 	.word	0x08006109
 8006070:	08006109 	.word	0x08006109
 8006074:	080060e9 	.word	0x080060e9
 8006078:	08006109 	.word	0x08006109
 800607c:	08006109 	.word	0x08006109
 8006080:	08006109 	.word	0x08006109
 8006084:	08006109 	.word	0x08006109
 8006088:	08006109 	.word	0x08006109
 800608c:	08006109 	.word	0x08006109
 8006090:	08006109 	.word	0x08006109
 8006094:	080060f1 	.word	0x080060f1
 8006098:	08006109 	.word	0x08006109
 800609c:	08006109 	.word	0x08006109
 80060a0:	08006109 	.word	0x08006109
 80060a4:	08006109 	.word	0x08006109
 80060a8:	08006109 	.word	0x08006109
 80060ac:	08006109 	.word	0x08006109
 80060b0:	08006109 	.word	0x08006109
 80060b4:	080060f9 	.word	0x080060f9
 80060b8:	08006109 	.word	0x08006109
 80060bc:	08006109 	.word	0x08006109
 80060c0:	08006109 	.word	0x08006109
 80060c4:	08006109 	.word	0x08006109
 80060c8:	08006109 	.word	0x08006109
 80060cc:	08006109 	.word	0x08006109
 80060d0:	08006109 	.word	0x08006109
 80060d4:	08006101 	.word	0x08006101
 80060d8:	2301      	movs	r3, #1
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060de:	e050      	b.n	8006182 <UART_SetConfig+0x7ae>
 80060e0:	2304      	movs	r3, #4
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e6:	e04c      	b.n	8006182 <UART_SetConfig+0x7ae>
 80060e8:	2308      	movs	r3, #8
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ee:	e048      	b.n	8006182 <UART_SetConfig+0x7ae>
 80060f0:	2310      	movs	r3, #16
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060f6:	e044      	b.n	8006182 <UART_SetConfig+0x7ae>
 80060f8:	2320      	movs	r3, #32
 80060fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060fe:	e040      	b.n	8006182 <UART_SetConfig+0x7ae>
 8006100:	2340      	movs	r3, #64	@ 0x40
 8006102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006106:	e03c      	b.n	8006182 <UART_SetConfig+0x7ae>
 8006108:	2380      	movs	r3, #128	@ 0x80
 800610a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800610e:	e038      	b.n	8006182 <UART_SetConfig+0x7ae>
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	4a71      	ldr	r2, [pc, #452]	@ (80062dc <UART_SetConfig+0x908>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d130      	bne.n	800617c <UART_SetConfig+0x7a8>
 800611a:	4b6f      	ldr	r3, [pc, #444]	@ (80062d8 <UART_SetConfig+0x904>)
 800611c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800611e:	f003 0307 	and.w	r3, r3, #7
 8006122:	2b05      	cmp	r3, #5
 8006124:	d826      	bhi.n	8006174 <UART_SetConfig+0x7a0>
 8006126:	a201      	add	r2, pc, #4	@ (adr r2, 800612c <UART_SetConfig+0x758>)
 8006128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800612c:	08006145 	.word	0x08006145
 8006130:	0800614d 	.word	0x0800614d
 8006134:	08006155 	.word	0x08006155
 8006138:	0800615d 	.word	0x0800615d
 800613c:	08006165 	.word	0x08006165
 8006140:	0800616d 	.word	0x0800616d
 8006144:	2302      	movs	r3, #2
 8006146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800614a:	e01a      	b.n	8006182 <UART_SetConfig+0x7ae>
 800614c:	2304      	movs	r3, #4
 800614e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006152:	e016      	b.n	8006182 <UART_SetConfig+0x7ae>
 8006154:	2308      	movs	r3, #8
 8006156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800615a:	e012      	b.n	8006182 <UART_SetConfig+0x7ae>
 800615c:	2310      	movs	r3, #16
 800615e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006162:	e00e      	b.n	8006182 <UART_SetConfig+0x7ae>
 8006164:	2320      	movs	r3, #32
 8006166:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800616a:	e00a      	b.n	8006182 <UART_SetConfig+0x7ae>
 800616c:	2340      	movs	r3, #64	@ 0x40
 800616e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006172:	e006      	b.n	8006182 <UART_SetConfig+0x7ae>
 8006174:	2380      	movs	r3, #128	@ 0x80
 8006176:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800617a:	e002      	b.n	8006182 <UART_SetConfig+0x7ae>
 800617c:	2380      	movs	r3, #128	@ 0x80
 800617e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006182:	697b      	ldr	r3, [r7, #20]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a55      	ldr	r2, [pc, #340]	@ (80062dc <UART_SetConfig+0x908>)
 8006188:	4293      	cmp	r3, r2
 800618a:	f040 80f8 	bne.w	800637e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800618e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006192:	2b20      	cmp	r3, #32
 8006194:	dc46      	bgt.n	8006224 <UART_SetConfig+0x850>
 8006196:	2b02      	cmp	r3, #2
 8006198:	db75      	blt.n	8006286 <UART_SetConfig+0x8b2>
 800619a:	3b02      	subs	r3, #2
 800619c:	2b1e      	cmp	r3, #30
 800619e:	d872      	bhi.n	8006286 <UART_SetConfig+0x8b2>
 80061a0:	a201      	add	r2, pc, #4	@ (adr r2, 80061a8 <UART_SetConfig+0x7d4>)
 80061a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061a6:	bf00      	nop
 80061a8:	0800622b 	.word	0x0800622b
 80061ac:	08006287 	.word	0x08006287
 80061b0:	08006233 	.word	0x08006233
 80061b4:	08006287 	.word	0x08006287
 80061b8:	08006287 	.word	0x08006287
 80061bc:	08006287 	.word	0x08006287
 80061c0:	08006243 	.word	0x08006243
 80061c4:	08006287 	.word	0x08006287
 80061c8:	08006287 	.word	0x08006287
 80061cc:	08006287 	.word	0x08006287
 80061d0:	08006287 	.word	0x08006287
 80061d4:	08006287 	.word	0x08006287
 80061d8:	08006287 	.word	0x08006287
 80061dc:	08006287 	.word	0x08006287
 80061e0:	08006253 	.word	0x08006253
 80061e4:	08006287 	.word	0x08006287
 80061e8:	08006287 	.word	0x08006287
 80061ec:	08006287 	.word	0x08006287
 80061f0:	08006287 	.word	0x08006287
 80061f4:	08006287 	.word	0x08006287
 80061f8:	08006287 	.word	0x08006287
 80061fc:	08006287 	.word	0x08006287
 8006200:	08006287 	.word	0x08006287
 8006204:	08006287 	.word	0x08006287
 8006208:	08006287 	.word	0x08006287
 800620c:	08006287 	.word	0x08006287
 8006210:	08006287 	.word	0x08006287
 8006214:	08006287 	.word	0x08006287
 8006218:	08006287 	.word	0x08006287
 800621c:	08006287 	.word	0x08006287
 8006220:	08006279 	.word	0x08006279
 8006224:	2b40      	cmp	r3, #64	@ 0x40
 8006226:	d02a      	beq.n	800627e <UART_SetConfig+0x8aa>
 8006228:	e02d      	b.n	8006286 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800622a:	f7fe faa3 	bl	8004774 <HAL_RCCEx_GetD3PCLK1Freq>
 800622e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006230:	e02f      	b.n	8006292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006232:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006236:	4618      	mov	r0, r3
 8006238:	f7fe fab2 	bl	80047a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800623c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800623e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006240:	e027      	b.n	8006292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006242:	f107 0318 	add.w	r3, r7, #24
 8006246:	4618      	mov	r0, r3
 8006248:	f7fe fbfe 	bl	8004a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006250:	e01f      	b.n	8006292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006252:	4b21      	ldr	r3, [pc, #132]	@ (80062d8 <UART_SetConfig+0x904>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f003 0320 	and.w	r3, r3, #32
 800625a:	2b00      	cmp	r3, #0
 800625c:	d009      	beq.n	8006272 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800625e:	4b1e      	ldr	r3, [pc, #120]	@ (80062d8 <UART_SetConfig+0x904>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	08db      	lsrs	r3, r3, #3
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	4a1d      	ldr	r2, [pc, #116]	@ (80062e0 <UART_SetConfig+0x90c>)
 800626a:	fa22 f303 	lsr.w	r3, r2, r3
 800626e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006270:	e00f      	b.n	8006292 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8006272:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <UART_SetConfig+0x90c>)
 8006274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006276:	e00c      	b.n	8006292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006278:	4b1a      	ldr	r3, [pc, #104]	@ (80062e4 <UART_SetConfig+0x910>)
 800627a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800627c:	e009      	b.n	8006292 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800627e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006284:	e005      	b.n	8006292 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8006286:	2300      	movs	r3, #0
 8006288:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800628a:	2301      	movs	r3, #1
 800628c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006290:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006294:	2b00      	cmp	r3, #0
 8006296:	f000 81ee 	beq.w	8006676 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800629e:	4a12      	ldr	r2, [pc, #72]	@ (80062e8 <UART_SetConfig+0x914>)
 80062a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062a4:	461a      	mov	r2, r3
 80062a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80062ac:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062ae:	697b      	ldr	r3, [r7, #20]
 80062b0:	685a      	ldr	r2, [r3, #4]
 80062b2:	4613      	mov	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4413      	add	r3, r2
 80062b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062ba:	429a      	cmp	r2, r3
 80062bc:	d305      	bcc.n	80062ca <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d910      	bls.n	80062ec <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062d0:	e1d1      	b.n	8006676 <UART_SetConfig+0xca2>
 80062d2:	bf00      	nop
 80062d4:	40011c00 	.word	0x40011c00
 80062d8:	58024400 	.word	0x58024400
 80062dc:	58000c00 	.word	0x58000c00
 80062e0:	03d09000 	.word	0x03d09000
 80062e4:	003d0900 	.word	0x003d0900
 80062e8:	08007acc 	.word	0x08007acc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ee:	2200      	movs	r2, #0
 80062f0:	60bb      	str	r3, [r7, #8]
 80062f2:	60fa      	str	r2, [r7, #12]
 80062f4:	697b      	ldr	r3, [r7, #20]
 80062f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062f8:	4ac0      	ldr	r2, [pc, #768]	@ (80065fc <UART_SetConfig+0xc28>)
 80062fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2200      	movs	r2, #0
 8006302:	603b      	str	r3, [r7, #0]
 8006304:	607a      	str	r2, [r7, #4]
 8006306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800630a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800630e:	f7f9 fffd 	bl	800030c <__aeabi_uldivmod>
 8006312:	4602      	mov	r2, r0
 8006314:	460b      	mov	r3, r1
 8006316:	4610      	mov	r0, r2
 8006318:	4619      	mov	r1, r3
 800631a:	f04f 0200 	mov.w	r2, #0
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	020b      	lsls	r3, r1, #8
 8006324:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006328:	0202      	lsls	r2, r0, #8
 800632a:	6979      	ldr	r1, [r7, #20]
 800632c:	6849      	ldr	r1, [r1, #4]
 800632e:	0849      	lsrs	r1, r1, #1
 8006330:	2000      	movs	r0, #0
 8006332:	460c      	mov	r4, r1
 8006334:	4605      	mov	r5, r0
 8006336:	eb12 0804 	adds.w	r8, r2, r4
 800633a:	eb43 0905 	adc.w	r9, r3, r5
 800633e:	697b      	ldr	r3, [r7, #20]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	2200      	movs	r2, #0
 8006344:	469a      	mov	sl, r3
 8006346:	4693      	mov	fp, r2
 8006348:	4652      	mov	r2, sl
 800634a:	465b      	mov	r3, fp
 800634c:	4640      	mov	r0, r8
 800634e:	4649      	mov	r1, r9
 8006350:	f7f9 ffdc 	bl	800030c <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4613      	mov	r3, r2
 800635a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800635c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800635e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006362:	d308      	bcc.n	8006376 <UART_SetConfig+0x9a2>
 8006364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006366:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800636a:	d204      	bcs.n	8006376 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006372:	60da      	str	r2, [r3, #12]
 8006374:	e17f      	b.n	8006676 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800637c:	e17b      	b.n	8006676 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006386:	f040 80bd 	bne.w	8006504 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800638a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800638e:	2b20      	cmp	r3, #32
 8006390:	dc48      	bgt.n	8006424 <UART_SetConfig+0xa50>
 8006392:	2b00      	cmp	r3, #0
 8006394:	db7b      	blt.n	800648e <UART_SetConfig+0xaba>
 8006396:	2b20      	cmp	r3, #32
 8006398:	d879      	bhi.n	800648e <UART_SetConfig+0xaba>
 800639a:	a201      	add	r2, pc, #4	@ (adr r2, 80063a0 <UART_SetConfig+0x9cc>)
 800639c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063a0:	0800642b 	.word	0x0800642b
 80063a4:	08006433 	.word	0x08006433
 80063a8:	0800648f 	.word	0x0800648f
 80063ac:	0800648f 	.word	0x0800648f
 80063b0:	0800643b 	.word	0x0800643b
 80063b4:	0800648f 	.word	0x0800648f
 80063b8:	0800648f 	.word	0x0800648f
 80063bc:	0800648f 	.word	0x0800648f
 80063c0:	0800644b 	.word	0x0800644b
 80063c4:	0800648f 	.word	0x0800648f
 80063c8:	0800648f 	.word	0x0800648f
 80063cc:	0800648f 	.word	0x0800648f
 80063d0:	0800648f 	.word	0x0800648f
 80063d4:	0800648f 	.word	0x0800648f
 80063d8:	0800648f 	.word	0x0800648f
 80063dc:	0800648f 	.word	0x0800648f
 80063e0:	0800645b 	.word	0x0800645b
 80063e4:	0800648f 	.word	0x0800648f
 80063e8:	0800648f 	.word	0x0800648f
 80063ec:	0800648f 	.word	0x0800648f
 80063f0:	0800648f 	.word	0x0800648f
 80063f4:	0800648f 	.word	0x0800648f
 80063f8:	0800648f 	.word	0x0800648f
 80063fc:	0800648f 	.word	0x0800648f
 8006400:	0800648f 	.word	0x0800648f
 8006404:	0800648f 	.word	0x0800648f
 8006408:	0800648f 	.word	0x0800648f
 800640c:	0800648f 	.word	0x0800648f
 8006410:	0800648f 	.word	0x0800648f
 8006414:	0800648f 	.word	0x0800648f
 8006418:	0800648f 	.word	0x0800648f
 800641c:	0800648f 	.word	0x0800648f
 8006420:	08006481 	.word	0x08006481
 8006424:	2b40      	cmp	r3, #64	@ 0x40
 8006426:	d02e      	beq.n	8006486 <UART_SetConfig+0xab2>
 8006428:	e031      	b.n	800648e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800642a:	f7fc ffd7 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 800642e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006430:	e033      	b.n	800649a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006432:	f7fc ffe9 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 8006436:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006438:	e02f      	b.n	800649a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800643a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800643e:	4618      	mov	r0, r3
 8006440:	f7fe f9ae 	bl	80047a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006444:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006446:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006448:	e027      	b.n	800649a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800644a:	f107 0318 	add.w	r3, r7, #24
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe fafa 	bl	8004a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006454:	69fb      	ldr	r3, [r7, #28]
 8006456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006458:	e01f      	b.n	800649a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800645a:	4b69      	ldr	r3, [pc, #420]	@ (8006600 <UART_SetConfig+0xc2c>)
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f003 0320 	and.w	r3, r3, #32
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006466:	4b66      	ldr	r3, [pc, #408]	@ (8006600 <UART_SetConfig+0xc2c>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	08db      	lsrs	r3, r3, #3
 800646c:	f003 0303 	and.w	r3, r3, #3
 8006470:	4a64      	ldr	r2, [pc, #400]	@ (8006604 <UART_SetConfig+0xc30>)
 8006472:	fa22 f303 	lsr.w	r3, r2, r3
 8006476:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006478:	e00f      	b.n	800649a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800647a:	4b62      	ldr	r3, [pc, #392]	@ (8006604 <UART_SetConfig+0xc30>)
 800647c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800647e:	e00c      	b.n	800649a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006480:	4b61      	ldr	r3, [pc, #388]	@ (8006608 <UART_SetConfig+0xc34>)
 8006482:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006484:	e009      	b.n	800649a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006486:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800648a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800648c:	e005      	b.n	800649a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006492:	2301      	movs	r3, #1
 8006494:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800649a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 80ea 	beq.w	8006676 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a6:	4a55      	ldr	r2, [pc, #340]	@ (80065fc <UART_SetConfig+0xc28>)
 80064a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064ac:	461a      	mov	r2, r3
 80064ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80064b4:	005a      	lsls	r2, r3, #1
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	085b      	lsrs	r3, r3, #1
 80064bc:	441a      	add	r2, r3
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	685b      	ldr	r3, [r3, #4]
 80064c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80064c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ca:	2b0f      	cmp	r3, #15
 80064cc:	d916      	bls.n	80064fc <UART_SetConfig+0xb28>
 80064ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064d4:	d212      	bcs.n	80064fc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	b29b      	uxth	r3, r3
 80064da:	f023 030f 	bic.w	r3, r3, #15
 80064de:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80064e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e2:	085b      	lsrs	r3, r3, #1
 80064e4:	b29b      	uxth	r3, r3
 80064e6:	f003 0307 	and.w	r3, r3, #7
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80064ee:	4313      	orrs	r3, r2
 80064f0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80064f8:	60da      	str	r2, [r3, #12]
 80064fa:	e0bc      	b.n	8006676 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006502:	e0b8      	b.n	8006676 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006504:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006508:	2b20      	cmp	r3, #32
 800650a:	dc4b      	bgt.n	80065a4 <UART_SetConfig+0xbd0>
 800650c:	2b00      	cmp	r3, #0
 800650e:	f2c0 8087 	blt.w	8006620 <UART_SetConfig+0xc4c>
 8006512:	2b20      	cmp	r3, #32
 8006514:	f200 8084 	bhi.w	8006620 <UART_SetConfig+0xc4c>
 8006518:	a201      	add	r2, pc, #4	@ (adr r2, 8006520 <UART_SetConfig+0xb4c>)
 800651a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651e:	bf00      	nop
 8006520:	080065ab 	.word	0x080065ab
 8006524:	080065b3 	.word	0x080065b3
 8006528:	08006621 	.word	0x08006621
 800652c:	08006621 	.word	0x08006621
 8006530:	080065bb 	.word	0x080065bb
 8006534:	08006621 	.word	0x08006621
 8006538:	08006621 	.word	0x08006621
 800653c:	08006621 	.word	0x08006621
 8006540:	080065cb 	.word	0x080065cb
 8006544:	08006621 	.word	0x08006621
 8006548:	08006621 	.word	0x08006621
 800654c:	08006621 	.word	0x08006621
 8006550:	08006621 	.word	0x08006621
 8006554:	08006621 	.word	0x08006621
 8006558:	08006621 	.word	0x08006621
 800655c:	08006621 	.word	0x08006621
 8006560:	080065db 	.word	0x080065db
 8006564:	08006621 	.word	0x08006621
 8006568:	08006621 	.word	0x08006621
 800656c:	08006621 	.word	0x08006621
 8006570:	08006621 	.word	0x08006621
 8006574:	08006621 	.word	0x08006621
 8006578:	08006621 	.word	0x08006621
 800657c:	08006621 	.word	0x08006621
 8006580:	08006621 	.word	0x08006621
 8006584:	08006621 	.word	0x08006621
 8006588:	08006621 	.word	0x08006621
 800658c:	08006621 	.word	0x08006621
 8006590:	08006621 	.word	0x08006621
 8006594:	08006621 	.word	0x08006621
 8006598:	08006621 	.word	0x08006621
 800659c:	08006621 	.word	0x08006621
 80065a0:	08006613 	.word	0x08006613
 80065a4:	2b40      	cmp	r3, #64	@ 0x40
 80065a6:	d037      	beq.n	8006618 <UART_SetConfig+0xc44>
 80065a8:	e03a      	b.n	8006620 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065aa:	f7fc ff17 	bl	80033dc <HAL_RCC_GetPCLK1Freq>
 80065ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065b0:	e03c      	b.n	800662c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065b2:	f7fc ff29 	bl	8003408 <HAL_RCC_GetPCLK2Freq>
 80065b6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80065b8:	e038      	b.n	800662c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80065be:	4618      	mov	r0, r3
 80065c0:	f7fe f8ee 	bl	80047a0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065c8:	e030      	b.n	800662c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065ca:	f107 0318 	add.w	r3, r7, #24
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe fa3a 	bl	8004a48 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80065d8:	e028      	b.n	800662c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80065da:	4b09      	ldr	r3, [pc, #36]	@ (8006600 <UART_SetConfig+0xc2c>)
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d012      	beq.n	800660c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80065e6:	4b06      	ldr	r3, [pc, #24]	@ (8006600 <UART_SetConfig+0xc2c>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	08db      	lsrs	r3, r3, #3
 80065ec:	f003 0303 	and.w	r3, r3, #3
 80065f0:	4a04      	ldr	r2, [pc, #16]	@ (8006604 <UART_SetConfig+0xc30>)
 80065f2:	fa22 f303 	lsr.w	r3, r2, r3
 80065f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80065f8:	e018      	b.n	800662c <UART_SetConfig+0xc58>
 80065fa:	bf00      	nop
 80065fc:	08007acc 	.word	0x08007acc
 8006600:	58024400 	.word	0x58024400
 8006604:	03d09000 	.word	0x03d09000
 8006608:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 800660c:	4b24      	ldr	r3, [pc, #144]	@ (80066a0 <UART_SetConfig+0xccc>)
 800660e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006610:	e00c      	b.n	800662c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006612:	4b24      	ldr	r3, [pc, #144]	@ (80066a4 <UART_SetConfig+0xcd0>)
 8006614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006616:	e009      	b.n	800662c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006618:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800661c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800661e:	e005      	b.n	800662c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006620:	2300      	movs	r3, #0
 8006622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800662a:	bf00      	nop
    }

    if (pclk != 0U)
 800662c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800662e:	2b00      	cmp	r3, #0
 8006630:	d021      	beq.n	8006676 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006636:	4a1c      	ldr	r2, [pc, #112]	@ (80066a8 <UART_SetConfig+0xcd4>)
 8006638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800663c:	461a      	mov	r2, r3
 800663e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006640:	fbb3 f2f2 	udiv	r2, r3, r2
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	685b      	ldr	r3, [r3, #4]
 8006648:	085b      	lsrs	r3, r3, #1
 800664a:	441a      	add	r2, r3
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	fbb2 f3f3 	udiv	r3, r2, r3
 8006654:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006658:	2b0f      	cmp	r3, #15
 800665a:	d909      	bls.n	8006670 <UART_SetConfig+0xc9c>
 800665c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800665e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006662:	d205      	bcs.n	8006670 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006666:	b29a      	uxth	r2, r3
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	60da      	str	r2, [r3, #12]
 800666e:	e002      	b.n	8006676 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	2201      	movs	r2, #1
 800667a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800667e:	697b      	ldr	r3, [r7, #20]
 8006680:	2201      	movs	r2, #1
 8006682:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006686:	697b      	ldr	r3, [r7, #20]
 8006688:	2200      	movs	r2, #0
 800668a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	2200      	movs	r2, #0
 8006690:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006692:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8006696:	4618      	mov	r0, r3
 8006698:	3748      	adds	r7, #72	@ 0x48
 800669a:	46bd      	mov	sp, r7
 800669c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80066a0:	03d09000 	.word	0x03d09000
 80066a4:	003d0900 	.word	0x003d0900
 80066a8:	08007acc 	.word	0x08007acc

080066ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b8:	f003 0308 	and.w	r3, r3, #8
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00a      	beq.n	80066d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	430a      	orrs	r2, r1
 80066d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066da:	f003 0301 	and.w	r3, r3, #1
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d00a      	beq.n	80066f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	430a      	orrs	r2, r1
 80066f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066fc:	f003 0302 	and.w	r3, r3, #2
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00a      	beq.n	800671a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	430a      	orrs	r2, r1
 8006718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800671e:	f003 0304 	and.w	r3, r3, #4
 8006722:	2b00      	cmp	r3, #0
 8006724:	d00a      	beq.n	800673c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	685b      	ldr	r3, [r3, #4]
 800672c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	430a      	orrs	r2, r1
 800673a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006740:	f003 0310 	and.w	r3, r3, #16
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00a      	beq.n	800675e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	430a      	orrs	r2, r1
 800675c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d00a      	beq.n	8006780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	430a      	orrs	r2, r1
 800677e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006784:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006788:	2b00      	cmp	r3, #0
 800678a:	d01a      	beq.n	80067c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	430a      	orrs	r2, r1
 80067a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80067a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80067aa:	d10a      	bne.n	80067c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	430a      	orrs	r2, r1
 80067c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	430a      	orrs	r2, r1
 80067e2:	605a      	str	r2, [r3, #4]
  }
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b098      	sub	sp, #96	@ 0x60
 80067f4:	af02      	add	r7, sp, #8
 80067f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006800:	f7fa fdbe 	bl	8001380 <HAL_GetTick>
 8006804:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0308 	and.w	r3, r3, #8
 8006810:	2b08      	cmp	r3, #8
 8006812:	d12f      	bne.n	8006874 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006814:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006818:	9300      	str	r3, [sp, #0]
 800681a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800681c:	2200      	movs	r2, #0
 800681e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f000 f88e 	bl	8006944 <UART_WaitOnFlagUntilTimeout>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d022      	beq.n	8006874 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006834:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006836:	e853 3f00 	ldrex	r3, [r3]
 800683a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800683c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800683e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006842:	653b      	str	r3, [r7, #80]	@ 0x50
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	461a      	mov	r2, r3
 800684a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800684c:	647b      	str	r3, [r7, #68]	@ 0x44
 800684e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006850:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006852:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006854:	e841 2300 	strex	r3, r2, [r1]
 8006858:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800685a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800685c:	2b00      	cmp	r3, #0
 800685e:	d1e6      	bne.n	800682e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2220      	movs	r2, #32
 8006864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006870:	2303      	movs	r3, #3
 8006872:	e063      	b.n	800693c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f003 0304 	and.w	r3, r3, #4
 800687e:	2b04      	cmp	r3, #4
 8006880:	d149      	bne.n	8006916 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006882:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800688a:	2200      	movs	r2, #0
 800688c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006890:	6878      	ldr	r0, [r7, #4]
 8006892:	f000 f857 	bl	8006944 <UART_WaitOnFlagUntilTimeout>
 8006896:	4603      	mov	r3, r0
 8006898:	2b00      	cmp	r3, #0
 800689a:	d03c      	beq.n	8006916 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a4:	e853 3f00 	ldrex	r3, [r3]
 80068a8:	623b      	str	r3, [r7, #32]
   return(result);
 80068aa:	6a3b      	ldr	r3, [r7, #32]
 80068ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	461a      	mov	r2, r3
 80068b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80068ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80068bc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80068c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c2:	e841 2300 	strex	r3, r2, [r1]
 80068c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80068c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d1e6      	bne.n	800689c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	3308      	adds	r3, #8
 80068d4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	e853 3f00 	ldrex	r3, [r3]
 80068dc:	60fb      	str	r3, [r7, #12]
   return(result);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f023 0301 	bic.w	r3, r3, #1
 80068e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	3308      	adds	r3, #8
 80068ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80068ee:	61fa      	str	r2, [r7, #28]
 80068f0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f2:	69b9      	ldr	r1, [r7, #24]
 80068f4:	69fa      	ldr	r2, [r7, #28]
 80068f6:	e841 2300 	strex	r3, r2, [r1]
 80068fa:	617b      	str	r3, [r7, #20]
   return(result);
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d1e5      	bne.n	80068ce <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2220      	movs	r2, #32
 8006906:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2200      	movs	r2, #0
 800690e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e012      	b.n	800693c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2220      	movs	r2, #32
 800691a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2220      	movs	r2, #32
 8006922:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	3758      	adds	r7, #88	@ 0x58
 8006940:	46bd      	mov	sp, r7
 8006942:	bd80      	pop	{r7, pc}

08006944 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	60f8      	str	r0, [r7, #12]
 800694c:	60b9      	str	r1, [r7, #8]
 800694e:	603b      	str	r3, [r7, #0]
 8006950:	4613      	mov	r3, r2
 8006952:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006954:	e04f      	b.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695c:	d04b      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800695e:	f7fa fd0f 	bl	8001380 <HAL_GetTick>
 8006962:	4602      	mov	r2, r0
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	1ad3      	subs	r3, r2, r3
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	429a      	cmp	r2, r3
 800696c:	d302      	bcc.n	8006974 <UART_WaitOnFlagUntilTimeout+0x30>
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006974:	2303      	movs	r3, #3
 8006976:	e04e      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	f003 0304 	and.w	r3, r3, #4
 8006982:	2b00      	cmp	r3, #0
 8006984:	d037      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006986:	68bb      	ldr	r3, [r7, #8]
 8006988:	2b80      	cmp	r3, #128	@ 0x80
 800698a:	d034      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800698c:	68bb      	ldr	r3, [r7, #8]
 800698e:	2b40      	cmp	r3, #64	@ 0x40
 8006990:	d031      	beq.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	69db      	ldr	r3, [r3, #28]
 8006998:	f003 0308 	and.w	r3, r3, #8
 800699c:	2b08      	cmp	r3, #8
 800699e:	d110      	bne.n	80069c2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	2208      	movs	r2, #8
 80069a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069a8:	68f8      	ldr	r0, [r7, #12]
 80069aa:	f000 f95b 	bl	8006c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	2208      	movs	r2, #8
 80069b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80069be:	2301      	movs	r3, #1
 80069c0:	e029      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	69db      	ldr	r3, [r3, #28]
 80069c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80069cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80069d0:	d111      	bne.n	80069f6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80069da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80069dc:	68f8      	ldr	r0, [r7, #12]
 80069de:	f000 f941 	bl	8006c64 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2220      	movs	r2, #32
 80069e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e00f      	b.n	8006a16 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	69da      	ldr	r2, [r3, #28]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4013      	ands	r3, r2
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d0a0      	beq.n	8006956 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3710      	adds	r7, #16
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
	...

08006a20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b0a3      	sub	sp, #140	@ 0x8c
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	60f8      	str	r0, [r7, #12]
 8006a28:	60b9      	str	r1, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	68ba      	ldr	r2, [r7, #8]
 8006a32:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	88fa      	ldrh	r2, [r7, #6]
 8006a38:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	88fa      	ldrh	r2, [r7, #6]
 8006a40:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	2200      	movs	r2, #0
 8006a48:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a52:	d10e      	bne.n	8006a72 <UART_Start_Receive_IT+0x52>
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	691b      	ldr	r3, [r3, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d105      	bne.n	8006a68 <UART_Start_Receive_IT+0x48>
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8006a62:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a66:	e02d      	b.n	8006ac4 <UART_Start_Receive_IT+0xa4>
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	22ff      	movs	r2, #255	@ 0xff
 8006a6c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a70:	e028      	b.n	8006ac4 <UART_Start_Receive_IT+0xa4>
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	689b      	ldr	r3, [r3, #8]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d10d      	bne.n	8006a96 <UART_Start_Receive_IT+0x76>
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	691b      	ldr	r3, [r3, #16]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d104      	bne.n	8006a8c <UART_Start_Receive_IT+0x6c>
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	22ff      	movs	r2, #255	@ 0xff
 8006a86:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a8a:	e01b      	b.n	8006ac4 <UART_Start_Receive_IT+0xa4>
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	227f      	movs	r2, #127	@ 0x7f
 8006a90:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a94:	e016      	b.n	8006ac4 <UART_Start_Receive_IT+0xa4>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a9e:	d10d      	bne.n	8006abc <UART_Start_Receive_IT+0x9c>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d104      	bne.n	8006ab2 <UART_Start_Receive_IT+0x92>
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	227f      	movs	r2, #127	@ 0x7f
 8006aac:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006ab0:	e008      	b.n	8006ac4 <UART_Start_Receive_IT+0xa4>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	223f      	movs	r2, #63	@ 0x3f
 8006ab6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006aba:	e003      	b.n	8006ac4 <UART_Start_Receive_IT+0xa4>
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	2200      	movs	r2, #0
 8006ac0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2222      	movs	r2, #34	@ 0x22
 8006ad0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	3308      	adds	r3, #8
 8006ada:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ade:	e853 3f00 	ldrex	r3, [r3]
 8006ae2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006ae4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ae6:	f043 0301 	orr.w	r3, r3, #1
 8006aea:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	3308      	adds	r3, #8
 8006af4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006af8:	673a      	str	r2, [r7, #112]	@ 0x70
 8006afa:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006afc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006afe:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006b00:	e841 2300 	strex	r3, r2, [r1]
 8006b04:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006b06:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1e3      	bne.n	8006ad4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006b10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006b14:	d14f      	bne.n	8006bb6 <UART_Start_Receive_IT+0x196>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006b1c:	88fa      	ldrh	r2, [r7, #6]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d349      	bcc.n	8006bb6 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b2a:	d107      	bne.n	8006b3c <UART_Start_Receive_IT+0x11c>
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d103      	bne.n	8006b3c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4a47      	ldr	r2, [pc, #284]	@ (8006c54 <UART_Start_Receive_IT+0x234>)
 8006b38:	675a      	str	r2, [r3, #116]	@ 0x74
 8006b3a:	e002      	b.n	8006b42 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4a46      	ldr	r2, [pc, #280]	@ (8006c58 <UART_Start_Receive_IT+0x238>)
 8006b40:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d01a      	beq.n	8006b80 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b52:	e853 3f00 	ldrex	r3, [r3]
 8006b56:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006b58:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b5a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b5e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	461a      	mov	r2, r3
 8006b68:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006b6e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b70:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006b72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006b74:	e841 2300 	strex	r3, r2, [r1]
 8006b78:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006b7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d1e4      	bne.n	8006b4a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	3308      	adds	r3, #8
 8006b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b8a:	e853 3f00 	ldrex	r3, [r3]
 8006b8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b96:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006ba0:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006ba2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba4:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ba8:	e841 2300 	strex	r3, r2, [r1]
 8006bac:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d1e5      	bne.n	8006b80 <UART_Start_Receive_IT+0x160>
 8006bb4:	e046      	b.n	8006c44 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	689b      	ldr	r3, [r3, #8]
 8006bba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006bbe:	d107      	bne.n	8006bd0 <UART_Start_Receive_IT+0x1b0>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	691b      	ldr	r3, [r3, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d103      	bne.n	8006bd0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	4a24      	ldr	r2, [pc, #144]	@ (8006c5c <UART_Start_Receive_IT+0x23c>)
 8006bcc:	675a      	str	r2, [r3, #116]	@ 0x74
 8006bce:	e002      	b.n	8006bd6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	4a23      	ldr	r2, [pc, #140]	@ (8006c60 <UART_Start_Receive_IT+0x240>)
 8006bd4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d019      	beq.n	8006c12 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bee:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006bf2:	677b      	str	r3, [r7, #116]	@ 0x74
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	461a      	mov	r2, r3
 8006bfa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006bfc:	637b      	str	r3, [r7, #52]	@ 0x34
 8006bfe:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c02:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e6      	bne.n	8006bde <UART_Start_Receive_IT+0x1be>
 8006c10:	e018      	b.n	8006c44 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c18:	697b      	ldr	r3, [r7, #20]
 8006c1a:	e853 3f00 	ldrex	r3, [r3]
 8006c1e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	f043 0320 	orr.w	r3, r3, #32
 8006c26:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	461a      	mov	r2, r3
 8006c2e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006c30:	623b      	str	r3, [r7, #32]
 8006c32:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c34:	69f9      	ldr	r1, [r7, #28]
 8006c36:	6a3a      	ldr	r2, [r7, #32]
 8006c38:	e841 2300 	strex	r3, r2, [r1]
 8006c3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c3e:	69bb      	ldr	r3, [r7, #24]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d1e6      	bne.n	8006c12 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006c44:	2300      	movs	r3, #0
}
 8006c46:	4618      	mov	r0, r3
 8006c48:	378c      	adds	r7, #140	@ 0x8c
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop
 8006c54:	08007485 	.word	0x08007485
 8006c58:	08007125 	.word	0x08007125
 8006c5c:	08006f6d 	.word	0x08006f6d
 8006c60:	08006db5 	.word	0x08006db5

08006c64 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b095      	sub	sp, #84	@ 0x54
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e6      	bne.n	8006c6c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	3308      	adds	r3, #8
 8006ca4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca6:	6a3b      	ldr	r3, [r7, #32]
 8006ca8:	e853 3f00 	ldrex	r3, [r3]
 8006cac:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cae:	69fa      	ldr	r2, [r7, #28]
 8006cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8006d2c <UART_EndRxTransfer+0xc8>)
 8006cb2:	4013      	ands	r3, r2
 8006cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	3308      	adds	r3, #8
 8006cbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cc0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cc4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cc6:	e841 2300 	strex	r3, r2, [r1]
 8006cca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d1e5      	bne.n	8006c9e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d118      	bne.n	8006d0c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	f023 0310 	bic.w	r3, r3, #16
 8006cee:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	461a      	mov	r2, r3
 8006cf6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cf8:	61bb      	str	r3, [r7, #24]
 8006cfa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	613b      	str	r3, [r7, #16]
   return(result);
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e6      	bne.n	8006cda <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2200      	movs	r2, #0
 8006d18:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d20:	bf00      	nop
 8006d22:	3754      	adds	r7, #84	@ 0x54
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	effffffe 	.word	0xeffffffe

08006d30 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d3c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d4e:	68f8      	ldr	r0, [r7, #12]
 8006d50:	f7fe fe2a 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d54:	bf00      	nop
 8006d56:	3710      	adds	r7, #16
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	e853 3f00 	ldrex	r3, [r3]
 8006d70:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d78:	61fb      	str	r3, [r7, #28]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	461a      	mov	r2, r3
 8006d80:	69fb      	ldr	r3, [r7, #28]
 8006d82:	61bb      	str	r3, [r7, #24]
 8006d84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d86:	6979      	ldr	r1, [r7, #20]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	e841 2300 	strex	r3, r2, [r1]
 8006d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d1e6      	bne.n	8006d64 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f7fe fdeb 	bl	8005980 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006daa:	bf00      	nop
 8006dac:	3720      	adds	r7, #32
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
	...

08006db4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b09c      	sub	sp, #112	@ 0x70
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006dc2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006dcc:	2b22      	cmp	r3, #34	@ 0x22
 8006dce:	f040 80be 	bne.w	8006f4e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dd8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006ddc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006de0:	b2d9      	uxtb	r1, r3
 8006de2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006de6:	b2da      	uxtb	r2, r3
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006dec:	400a      	ands	r2, r1
 8006dee:	b2d2      	uxtb	r2, r2
 8006df0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006df6:	1c5a      	adds	r2, r3, #1
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e02:	b29b      	uxth	r3, r3
 8006e04:	3b01      	subs	r3, #1
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006e14:	b29b      	uxth	r3, r3
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f040 80a1 	bne.w	8006f5e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e24:	e853 3f00 	ldrex	r3, [r3]
 8006e28:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006e2a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006e2c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e30:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	461a      	mov	r2, r3
 8006e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e3a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006e3c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e3e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006e40:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006e42:	e841 2300 	strex	r3, r2, [r1]
 8006e46:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006e48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d1e6      	bne.n	8006e1c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	3308      	adds	r3, #8
 8006e54:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e58:	e853 3f00 	ldrex	r3, [r3]
 8006e5c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e60:	f023 0301 	bic.w	r3, r3, #1
 8006e64:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	3308      	adds	r3, #8
 8006e6c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006e6e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006e70:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e72:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e76:	e841 2300 	strex	r3, r2, [r1]
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d1e5      	bne.n	8006e4e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	2220      	movs	r2, #32
 8006e86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	2200      	movs	r2, #0
 8006e94:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	4a33      	ldr	r2, [pc, #204]	@ (8006f68 <UART_RxISR_8BIT+0x1b4>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d01f      	beq.n	8006ee0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d018      	beq.n	8006ee0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	e853 3f00 	ldrex	r3, [r3]
 8006eba:	623b      	str	r3, [r7, #32]
   return(result);
 8006ebc:	6a3b      	ldr	r3, [r7, #32]
 8006ebe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006ec2:	663b      	str	r3, [r7, #96]	@ 0x60
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006ecc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ed4:	e841 2300 	strex	r3, r2, [r1]
 8006ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d1e6      	bne.n	8006eae <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d12e      	bne.n	8006f46 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	e853 3f00 	ldrex	r3, [r3]
 8006efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f023 0310 	bic.w	r3, r3, #16
 8006f02:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	461a      	mov	r2, r3
 8006f0a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006f0c:	61fb      	str	r3, [r7, #28]
 8006f0e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f10:	69b9      	ldr	r1, [r7, #24]
 8006f12:	69fa      	ldr	r2, [r7, #28]
 8006f14:	e841 2300 	strex	r3, r2, [r1]
 8006f18:	617b      	str	r3, [r7, #20]
   return(result);
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1e6      	bne.n	8006eee <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	69db      	ldr	r3, [r3, #28]
 8006f26:	f003 0310 	and.w	r3, r3, #16
 8006f2a:	2b10      	cmp	r3, #16
 8006f2c:	d103      	bne.n	8006f36 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	2210      	movs	r2, #16
 8006f34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006f3c:	4619      	mov	r1, r3
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f7fe fd3c 	bl	80059bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f44:	e00b      	b.n	8006f5e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f7fe fd24 	bl	8005994 <HAL_UART_RxCpltCallback>
}
 8006f4c:	e007      	b.n	8006f5e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	699a      	ldr	r2, [r3, #24]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f042 0208 	orr.w	r2, r2, #8
 8006f5c:	619a      	str	r2, [r3, #24]
}
 8006f5e:	bf00      	nop
 8006f60:	3770      	adds	r7, #112	@ 0x70
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	58000c00 	.word	0x58000c00

08006f6c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b09c      	sub	sp, #112	@ 0x70
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006f7a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006f84:	2b22      	cmp	r3, #34	@ 0x22
 8006f86:	f040 80be 	bne.w	8007106 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f98:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f9a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006f9e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	b29a      	uxth	r2, r3
 8006fa6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006fa8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006fae:	1c9a      	adds	r2, r3, #2
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	3b01      	subs	r3, #1
 8006fbe:	b29a      	uxth	r2, r3
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006fcc:	b29b      	uxth	r3, r3
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	f040 80a1 	bne.w	8007116 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006fe2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fe4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006fe8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006ff2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006ff4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006ff8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007000:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e6      	bne.n	8006fd4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	3308      	adds	r3, #8
 800700c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007010:	e853 3f00 	ldrex	r3, [r3]
 8007014:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007018:	f023 0301 	bic.w	r3, r3, #1
 800701c:	663b      	str	r3, [r7, #96]	@ 0x60
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3308      	adds	r3, #8
 8007024:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007026:	643a      	str	r2, [r7, #64]	@ 0x40
 8007028:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800702a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800702c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e5      	bne.n	8007006 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2220      	movs	r2, #32
 800703e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2200      	movs	r2, #0
 800704c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a33      	ldr	r2, [pc, #204]	@ (8007120 <UART_RxISR_16BIT+0x1b4>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d01f      	beq.n	8007098 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d018      	beq.n	8007098 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800706c:	6a3b      	ldr	r3, [r7, #32]
 800706e:	e853 3f00 	ldrex	r3, [r3]
 8007072:	61fb      	str	r3, [r7, #28]
   return(result);
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800707a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	461a      	mov	r2, r3
 8007082:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007084:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007086:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007088:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800708a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800708c:	e841 2300 	strex	r3, r2, [r1]
 8007090:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007092:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007094:	2b00      	cmp	r3, #0
 8007096:	d1e6      	bne.n	8007066 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800709c:	2b01      	cmp	r3, #1
 800709e:	d12e      	bne.n	80070fe <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	e853 3f00 	ldrex	r3, [r3]
 80070b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	f023 0310 	bic.w	r3, r3, #16
 80070ba:	65bb      	str	r3, [r7, #88]	@ 0x58
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	461a      	mov	r2, r3
 80070c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80070c4:	61bb      	str	r3, [r7, #24]
 80070c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070c8:	6979      	ldr	r1, [r7, #20]
 80070ca:	69ba      	ldr	r2, [r7, #24]
 80070cc:	e841 2300 	strex	r3, r2, [r1]
 80070d0:	613b      	str	r3, [r7, #16]
   return(result);
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1e6      	bne.n	80070a6 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	69db      	ldr	r3, [r3, #28]
 80070de:	f003 0310 	and.w	r3, r3, #16
 80070e2:	2b10      	cmp	r3, #16
 80070e4:	d103      	bne.n	80070ee <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2210      	movs	r2, #16
 80070ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80070f4:	4619      	mov	r1, r3
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f7fe fc60 	bl	80059bc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80070fc:	e00b      	b.n	8007116 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7fe fc48 	bl	8005994 <HAL_UART_RxCpltCallback>
}
 8007104:	e007      	b.n	8007116 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	699a      	ldr	r2, [r3, #24]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0208 	orr.w	r2, r2, #8
 8007114:	619a      	str	r2, [r3, #24]
}
 8007116:	bf00      	nop
 8007118:	3770      	adds	r7, #112	@ 0x70
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	58000c00 	.word	0x58000c00

08007124 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b0ac      	sub	sp, #176	@ 0xb0
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007132:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	69db      	ldr	r3, [r3, #28]
 800713c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	689b      	ldr	r3, [r3, #8]
 8007150:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800715a:	2b22      	cmp	r3, #34	@ 0x22
 800715c:	f040 8180 	bne.w	8007460 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007166:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800716a:	e123      	b.n	80073b4 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007172:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007176:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800717a:	b2d9      	uxtb	r1, r3
 800717c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007180:	b2da      	uxtb	r2, r3
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007186:	400a      	ands	r2, r1
 8007188:	b2d2      	uxtb	r2, r2
 800718a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007190:	1c5a      	adds	r2, r3, #1
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800719c:	b29b      	uxth	r3, r3
 800719e:	3b01      	subs	r3, #1
 80071a0:	b29a      	uxth	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071b6:	f003 0307 	and.w	r3, r3, #7
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d053      	beq.n	8007266 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d011      	beq.n	80071ee <UART_RxISR_8BIT_FIFOEN+0xca>
 80071ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80071ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d00b      	beq.n	80071ee <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	2201      	movs	r2, #1
 80071dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071e4:	f043 0201 	orr.w	r2, r3, #1
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80071f2:	f003 0302 	and.w	r3, r3, #2
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d011      	beq.n	800721e <UART_RxISR_8BIT_FIFOEN+0xfa>
 80071fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d00b      	beq.n	800721e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2202      	movs	r2, #2
 800720c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007214:	f043 0204 	orr.w	r2, r3, #4
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800721e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007222:	f003 0304 	and.w	r3, r3, #4
 8007226:	2b00      	cmp	r3, #0
 8007228:	d011      	beq.n	800724e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800722a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800722e:	f003 0301 	and.w	r3, r3, #1
 8007232:	2b00      	cmp	r3, #0
 8007234:	d00b      	beq.n	800724e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	2204      	movs	r2, #4
 800723c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007244:	f043 0202 	orr.w	r2, r3, #2
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007254:	2b00      	cmp	r3, #0
 8007256:	d006      	beq.n	8007266 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f7fe fba5 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	f040 80a0 	bne.w	80073b4 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007282:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007288:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	461a      	mov	r2, r3
 8007292:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007296:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007298:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800729c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80072a4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e4      	bne.n	8007274 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	3308      	adds	r3, #8
 80072b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80072b4:	e853 3f00 	ldrex	r3, [r3]
 80072b8:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80072ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80072bc:	4b6e      	ldr	r3, [pc, #440]	@ (8007478 <UART_RxISR_8BIT_FIFOEN+0x354>)
 80072be:	4013      	ands	r3, r2
 80072c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	3308      	adds	r3, #8
 80072ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80072ce:	66ba      	str	r2, [r7, #104]	@ 0x68
 80072d0:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d2:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80072d4:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80072d6:	e841 2300 	strex	r3, r2, [r1]
 80072da:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80072dc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d1e3      	bne.n	80072aa <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2220      	movs	r2, #32
 80072e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2200      	movs	r2, #0
 80072f4:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a60      	ldr	r2, [pc, #384]	@ (800747c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d021      	beq.n	8007344 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01a      	beq.n	8007344 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007314:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007316:	e853 3f00 	ldrex	r3, [r3]
 800731a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 800731c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800731e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007322:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	461a      	mov	r2, r3
 800732c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007330:	657b      	str	r3, [r7, #84]	@ 0x54
 8007332:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007334:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007336:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007338:	e841 2300 	strex	r3, r2, [r1]
 800733c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800733e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007340:	2b00      	cmp	r3, #0
 8007342:	d1e4      	bne.n	800730e <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007348:	2b01      	cmp	r3, #1
 800734a:	d130      	bne.n	80073ae <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800735a:	e853 3f00 	ldrex	r3, [r3]
 800735e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007362:	f023 0310 	bic.w	r3, r3, #16
 8007366:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	461a      	mov	r2, r3
 8007370:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007374:	643b      	str	r3, [r7, #64]	@ 0x40
 8007376:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800737a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e4      	bne.n	8007352 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f003 0310 	and.w	r3, r3, #16
 8007392:	2b10      	cmp	r3, #16
 8007394:	d103      	bne.n	800739e <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	2210      	movs	r2, #16
 800739c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80073a4:	4619      	mov	r1, r3
 80073a6:	6878      	ldr	r0, [r7, #4]
 80073a8:	f7fe fb08 	bl	80059bc <HAL_UARTEx_RxEventCallback>
 80073ac:	e002      	b.n	80073b4 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80073ae:	6878      	ldr	r0, [r7, #4]
 80073b0:	f7fe faf0 	bl	8005994 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80073b4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d006      	beq.n	80073ca <UART_RxISR_8BIT_FIFOEN+0x2a6>
 80073bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80073c0:	f003 0320 	and.w	r3, r3, #32
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f47f aed1 	bne.w	800716c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073d0:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80073d4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d049      	beq.n	8007470 <UART_RxISR_8BIT_FIFOEN+0x34c>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80073e2:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80073e6:	429a      	cmp	r2, r3
 80073e8:	d242      	bcs.n	8007470 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3308      	adds	r3, #8
 80073f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80073fa:	69fb      	ldr	r3, [r7, #28]
 80073fc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007400:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3308      	adds	r3, #8
 800740a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 800740e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007410:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007414:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800741c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e3      	bne.n	80073ea <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a16      	ldr	r2, [pc, #88]	@ (8007480 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8007426:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	60bb      	str	r3, [r7, #8]
   return(result);
 8007436:	68bb      	ldr	r3, [r7, #8]
 8007438:	f043 0320 	orr.w	r3, r3, #32
 800743c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	461a      	mov	r2, r3
 8007446:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800744a:	61bb      	str	r3, [r7, #24]
 800744c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6979      	ldr	r1, [r7, #20]
 8007450:	69ba      	ldr	r2, [r7, #24]
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	613b      	str	r3, [r7, #16]
   return(result);
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e4      	bne.n	8007428 <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800745e:	e007      	b.n	8007470 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	699a      	ldr	r2, [r3, #24]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0208 	orr.w	r2, r2, #8
 800746e:	619a      	str	r2, [r3, #24]
}
 8007470:	bf00      	nop
 8007472:	37b0      	adds	r7, #176	@ 0xb0
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	effffffe 	.word	0xeffffffe
 800747c:	58000c00 	.word	0x58000c00
 8007480:	08006db5 	.word	0x08006db5

08007484 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b0ae      	sub	sp, #184	@ 0xb8
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007492:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	69db      	ldr	r3, [r3, #28]
 800749c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074ba:	2b22      	cmp	r3, #34	@ 0x22
 80074bc:	f040 8184 	bne.w	80077c8 <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80074c6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074ca:	e127      	b.n	800771c <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074d2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80074de:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80074e2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80074e6:	4013      	ands	r3, r2
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80074ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80074f4:	1c9a      	adds	r2, r3, #2
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007500:	b29b      	uxth	r3, r3
 8007502:	3b01      	subs	r3, #1
 8007504:	b29a      	uxth	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	69db      	ldr	r3, [r3, #28]
 8007512:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800751a:	f003 0307 	and.w	r3, r3, #7
 800751e:	2b00      	cmp	r3, #0
 8007520:	d053      	beq.n	80075ca <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007526:	f003 0301 	and.w	r3, r3, #1
 800752a:	2b00      	cmp	r3, #0
 800752c:	d011      	beq.n	8007552 <UART_RxISR_16BIT_FIFOEN+0xce>
 800752e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00b      	beq.n	8007552 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2201      	movs	r2, #1
 8007540:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007548:	f043 0201 	orr.w	r2, r3, #1
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007552:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d011      	beq.n	8007582 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800755e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2202      	movs	r2, #2
 8007570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007578:	f043 0204 	orr.w	r2, r3, #4
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007582:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007586:	f003 0304 	and.w	r3, r3, #4
 800758a:	2b00      	cmp	r3, #0
 800758c:	d011      	beq.n	80075b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800758e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2204      	movs	r2, #4
 80075a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075a8:	f043 0202 	orr.w	r2, r3, #2
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d006      	beq.n	80075ca <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f7fe f9f3 	bl	80059a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2200      	movs	r2, #0
 80075c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075d0:	b29b      	uxth	r3, r3
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	f040 80a2 	bne.w	800771c <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075de:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80075e0:	e853 3f00 	ldrex	r3, [r3]
 80075e4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80075e6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80075e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80075ec:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	461a      	mov	r2, r3
 80075f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80075fa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80075fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007600:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007602:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800760c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800760e:	2b00      	cmp	r3, #0
 8007610:	d1e2      	bne.n	80075d8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	3308      	adds	r3, #8
 8007618:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007622:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007624:	4b6e      	ldr	r3, [pc, #440]	@ (80077e0 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 8007626:	4013      	ands	r3, r2
 8007628:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3308      	adds	r3, #8
 8007632:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007636:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007638:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800763c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007644:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e3      	bne.n	8007612 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2220      	movs	r2, #32
 800764e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a60      	ldr	r2, [pc, #384]	@ (80077e4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d021      	beq.n	80076ac <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01a      	beq.n	80076ac <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800767c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800767e:	e853 3f00 	ldrex	r3, [r3]
 8007682:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007684:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007686:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800768a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007698:	65bb      	str	r3, [r7, #88]	@ 0x58
 800769a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800769e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80076a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e4      	bne.n	8007676 <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80076b0:	2b01      	cmp	r3, #1
 80076b2:	d130      	bne.n	8007716 <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2200      	movs	r2, #0
 80076b8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076c2:	e853 3f00 	ldrex	r3, [r3]
 80076c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80076c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076ca:	f023 0310 	bic.w	r3, r3, #16
 80076ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	461a      	mov	r2, r3
 80076d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80076dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80076de:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80076e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80076e4:	e841 2300 	strex	r3, r2, [r1]
 80076e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80076ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d1e4      	bne.n	80076ba <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	f003 0310 	and.w	r3, r3, #16
 80076fa:	2b10      	cmp	r3, #16
 80076fc:	d103      	bne.n	8007706 <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2210      	movs	r2, #16
 8007704:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f7fe f954 	bl	80059bc <HAL_UARTEx_RxEventCallback>
 8007714:	e002      	b.n	800771c <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007716:	6878      	ldr	r0, [r7, #4]
 8007718:	f7fe f93c 	bl	8005994 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800771c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007720:	2b00      	cmp	r3, #0
 8007722:	d006      	beq.n	8007732 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007724:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	f47f aecd 	bne.w	80074cc <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007738:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800773c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007740:	2b00      	cmp	r3, #0
 8007742:	d049      	beq.n	80077d8 <UART_RxISR_16BIT_FIFOEN+0x354>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800774a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 800774e:	429a      	cmp	r2, r3
 8007750:	d242      	bcs.n	80077d8 <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3308      	adds	r3, #8
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800775a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775c:	e853 3f00 	ldrex	r3, [r3]
 8007760:	623b      	str	r3, [r7, #32]
   return(result);
 8007762:	6a3b      	ldr	r3, [r7, #32]
 8007764:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	3308      	adds	r3, #8
 8007772:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007776:	633a      	str	r2, [r7, #48]	@ 0x30
 8007778:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800777a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800777c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800777e:	e841 2300 	strex	r3, r2, [r1]
 8007782:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007786:	2b00      	cmp	r3, #0
 8007788:	d1e3      	bne.n	8007752 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4a16      	ldr	r2, [pc, #88]	@ (80077e8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800778e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	e853 3f00 	ldrex	r3, [r3]
 800779c:	60fb      	str	r3, [r7, #12]
   return(result);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f043 0320 	orr.w	r3, r3, #32
 80077a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80077b2:	61fb      	str	r3, [r7, #28]
 80077b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077b6:	69b9      	ldr	r1, [r7, #24]
 80077b8:	69fa      	ldr	r2, [r7, #28]
 80077ba:	e841 2300 	strex	r3, r2, [r1]
 80077be:	617b      	str	r3, [r7, #20]
   return(result);
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d1e4      	bne.n	8007790 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80077c6:	e007      	b.n	80077d8 <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f042 0208 	orr.w	r2, r2, #8
 80077d6:	619a      	str	r2, [r3, #24]
}
 80077d8:	bf00      	nop
 80077da:	37b8      	adds	r7, #184	@ 0xb8
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	effffffe 	.word	0xeffffffe
 80077e4:	58000c00 	.word	0x58000c00
 80077e8:	08006f6d 	.word	0x08006f6d

080077ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b083      	sub	sp, #12
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80077f4:	bf00      	nop
 80077f6:	370c      	adds	r7, #12
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007808:	bf00      	nop
 800780a:	370c      	adds	r7, #12
 800780c:	46bd      	mov	sp, r7
 800780e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007812:	4770      	bx	lr

08007814 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007814:	b480      	push	{r7}
 8007816:	b083      	sub	sp, #12
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800781c:	bf00      	nop
 800781e:	370c      	adds	r7, #12
 8007820:	46bd      	mov	sp, r7
 8007822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007826:	4770      	bx	lr

08007828 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007836:	2b01      	cmp	r3, #1
 8007838:	d101      	bne.n	800783e <HAL_UARTEx_DisableFifoMode+0x16>
 800783a:	2302      	movs	r3, #2
 800783c:	e027      	b.n	800788e <HAL_UARTEx_DisableFifoMode+0x66>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2224      	movs	r2, #36	@ 0x24
 800784a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	681a      	ldr	r2, [r3, #0]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	f022 0201 	bic.w	r2, r2, #1
 8007864:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800786c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2200      	movs	r2, #0
 8007872:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	68fa      	ldr	r2, [r7, #12]
 800787a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800788c:	2300      	movs	r3, #0
}
 800788e:	4618      	mov	r0, r3
 8007890:	3714      	adds	r7, #20
 8007892:	46bd      	mov	sp, r7
 8007894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007898:	4770      	bx	lr

0800789a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
 80078a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	d101      	bne.n	80078b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80078ae:	2302      	movs	r3, #2
 80078b0:	e02d      	b.n	800790e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2224      	movs	r2, #36	@ 0x24
 80078be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f022 0201 	bic.w	r2, r2, #1
 80078d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	689b      	ldr	r3, [r3, #8]
 80078e0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 f850 	bl	8007994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800790c:	2300      	movs	r3, #0
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}

08007916 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007916:	b580      	push	{r7, lr}
 8007918:	b084      	sub	sp, #16
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
 800791e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007926:	2b01      	cmp	r3, #1
 8007928:	d101      	bne.n	800792e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800792a:	2302      	movs	r3, #2
 800792c:	e02d      	b.n	800798a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2201      	movs	r2, #1
 8007932:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2224      	movs	r2, #36	@ 0x24
 800793a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f022 0201 	bic.w	r2, r2, #1
 8007954:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	689b      	ldr	r3, [r3, #8]
 800795c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	683a      	ldr	r2, [r7, #0]
 8007966:	430a      	orrs	r2, r1
 8007968:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 f812 	bl	8007994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	2220      	movs	r2, #32
 800797c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2200      	movs	r2, #0
 8007984:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007988:	2300      	movs	r3, #0
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
	...

08007994 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d108      	bne.n	80079b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80079b4:	e031      	b.n	8007a1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80079b6:	2310      	movs	r3, #16
 80079b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80079ba:	2310      	movs	r3, #16
 80079bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	689b      	ldr	r3, [r3, #8]
 80079c4:	0e5b      	lsrs	r3, r3, #25
 80079c6:	b2db      	uxtb	r3, r3
 80079c8:	f003 0307 	and.w	r3, r3, #7
 80079cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	0f5b      	lsrs	r3, r3, #29
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	f003 0307 	and.w	r3, r3, #7
 80079dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079de:	7bbb      	ldrb	r3, [r7, #14]
 80079e0:	7b3a      	ldrb	r2, [r7, #12]
 80079e2:	4911      	ldr	r1, [pc, #68]	@ (8007a28 <UARTEx_SetNbDataToProcess+0x94>)
 80079e4:	5c8a      	ldrb	r2, [r1, r2]
 80079e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80079ea:	7b3a      	ldrb	r2, [r7, #12]
 80079ec:	490f      	ldr	r1, [pc, #60]	@ (8007a2c <UARTEx_SetNbDataToProcess+0x98>)
 80079ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80079f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80079f4:	b29a      	uxth	r2, r3
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	7b7a      	ldrb	r2, [r7, #13]
 8007a00:	4909      	ldr	r1, [pc, #36]	@ (8007a28 <UARTEx_SetNbDataToProcess+0x94>)
 8007a02:	5c8a      	ldrb	r2, [r1, r2]
 8007a04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007a08:	7b7a      	ldrb	r2, [r7, #13]
 8007a0a:	4908      	ldr	r1, [pc, #32]	@ (8007a2c <UARTEx_SetNbDataToProcess+0x98>)
 8007a0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007a0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007a12:	b29a      	uxth	r2, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007a1a:	bf00      	nop
 8007a1c:	3714      	adds	r7, #20
 8007a1e:	46bd      	mov	sp, r7
 8007a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a24:	4770      	bx	lr
 8007a26:	bf00      	nop
 8007a28:	08007ae4 	.word	0x08007ae4
 8007a2c:	08007aec 	.word	0x08007aec

08007a30 <memset>:
 8007a30:	4402      	add	r2, r0
 8007a32:	4603      	mov	r3, r0
 8007a34:	4293      	cmp	r3, r2
 8007a36:	d100      	bne.n	8007a3a <memset+0xa>
 8007a38:	4770      	bx	lr
 8007a3a:	f803 1b01 	strb.w	r1, [r3], #1
 8007a3e:	e7f9      	b.n	8007a34 <memset+0x4>

08007a40 <__libc_init_array>:
 8007a40:	b570      	push	{r4, r5, r6, lr}
 8007a42:	4d0d      	ldr	r5, [pc, #52]	@ (8007a78 <__libc_init_array+0x38>)
 8007a44:	4c0d      	ldr	r4, [pc, #52]	@ (8007a7c <__libc_init_array+0x3c>)
 8007a46:	1b64      	subs	r4, r4, r5
 8007a48:	10a4      	asrs	r4, r4, #2
 8007a4a:	2600      	movs	r6, #0
 8007a4c:	42a6      	cmp	r6, r4
 8007a4e:	d109      	bne.n	8007a64 <__libc_init_array+0x24>
 8007a50:	4d0b      	ldr	r5, [pc, #44]	@ (8007a80 <__libc_init_array+0x40>)
 8007a52:	4c0c      	ldr	r4, [pc, #48]	@ (8007a84 <__libc_init_array+0x44>)
 8007a54:	f000 f826 	bl	8007aa4 <_init>
 8007a58:	1b64      	subs	r4, r4, r5
 8007a5a:	10a4      	asrs	r4, r4, #2
 8007a5c:	2600      	movs	r6, #0
 8007a5e:	42a6      	cmp	r6, r4
 8007a60:	d105      	bne.n	8007a6e <__libc_init_array+0x2e>
 8007a62:	bd70      	pop	{r4, r5, r6, pc}
 8007a64:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a68:	4798      	blx	r3
 8007a6a:	3601      	adds	r6, #1
 8007a6c:	e7ee      	b.n	8007a4c <__libc_init_array+0xc>
 8007a6e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a72:	4798      	blx	r3
 8007a74:	3601      	adds	r6, #1
 8007a76:	e7f2      	b.n	8007a5e <__libc_init_array+0x1e>
 8007a78:	08007afc 	.word	0x08007afc
 8007a7c:	08007afc 	.word	0x08007afc
 8007a80:	08007afc 	.word	0x08007afc
 8007a84:	08007b00 	.word	0x08007b00

08007a88 <memcpy>:
 8007a88:	440a      	add	r2, r1
 8007a8a:	4291      	cmp	r1, r2
 8007a8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a90:	d100      	bne.n	8007a94 <memcpy+0xc>
 8007a92:	4770      	bx	lr
 8007a94:	b510      	push	{r4, lr}
 8007a96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a9e:	4291      	cmp	r1, r2
 8007aa0:	d1f9      	bne.n	8007a96 <memcpy+0xe>
 8007aa2:	bd10      	pop	{r4, pc}

08007aa4 <_init>:
 8007aa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007aa6:	bf00      	nop
 8007aa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007aaa:	bc08      	pop	{r3}
 8007aac:	469e      	mov	lr, r3
 8007aae:	4770      	bx	lr

08007ab0 <_fini>:
 8007ab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ab2:	bf00      	nop
 8007ab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ab6:	bc08      	pop	{r3}
 8007ab8:	469e      	mov	lr, r3
 8007aba:	4770      	bx	lr
