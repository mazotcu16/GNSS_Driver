
GNSS_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000093a8  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08009674  08009674  0000a674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080096b4  080096b4  0000a6b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080096bc  080096bc  0000a6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080096c0  080096c0  0000a6c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080096c4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000009b0  24000010  080096d4  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  240009c0  080096d4  0000b9c0  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   000126dd  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025f8  00000000  00000000  0001d71b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000bf0  00000000  00000000  0001fd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000924  00000000  00000000  00020908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031984  00000000  00000000  0002122c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012416  00000000  00000000  00052bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fbaf  00000000  00000000  00064fc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a4b75  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003078  00000000  00000000  001a4bb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001a7c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	0800965c 	.word	0x0800965c

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	0800965c 	.word	0x0800965c

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <GNSS_Tanimla>:
#include "SysTick_Timer.h"
U_Blox_frame_high_layer U_Blox_frame_tx;
U_Blox_frame_high_layer U_Blox_frame_rx;
int b = 0;
static uint32_t zaman;
void GNSS_Tanimla(GNSS *GNSS_t) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	U_Blox_Init();
 8000604:	f000 f96c 	bl	80008e0 <U_Blox_Init>
	for (int i = 0; i < 26; i++) {
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e008      	b.n	8000620 <GNSS_Tanimla+0x24>
		U_Blox_frame_tx.payload.data[i] = 0;
 800060e:	4a2e      	ldr	r2, [pc, #184]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	3304      	adds	r3, #4
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b19      	cmp	r3, #25
 8000624:	ddf3      	ble.n	800060e <GNSS_Tanimla+0x12>
	}
	U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000628:	2206      	movs	r2, #6
 800062a:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800062e:	2200      	movs	r2, #0
 8000630:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000632:	4a25      	ldr	r2, [pc, #148]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000634:	7d13      	ldrb	r3, [r2, #20]
 8000636:	f36f 0341 	bfc	r3, #1, #1
 800063a:	7513      	strb	r3, [r2, #20]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 800063c:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800063e:	7a13      	ldrb	r3, [r2, #8]
 8000640:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000644:	7213      	strb	r3, [r2, #8]
			3;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 8000646:	4a20      	ldr	r2, [pc, #128]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000648:	7a13      	ldrb	r3, [r2, #8]
 800064a:	2110      	movs	r1, #16
 800064c:	f361 0305 	bfi	r3, r1, #0, #6
 8000650:	7213      	strb	r3, [r2, #8]
			16;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000652:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000654:	7a53      	ldrb	r3, [r2, #9]
 8000656:	f36f 1305 	bfc	r3, #4, #2
 800065a:	7253      	strb	r3, [r2, #9]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 800065c:	4a1a      	ldr	r2, [pc, #104]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800065e:	7a53      	ldrb	r3, [r2, #9]
 8000660:	2104      	movs	r1, #4
 8000662:	f361 0343 	bfi	r3, r1, #1, #3
 8000666:	7253      	strb	r3, [r2, #9]
			4;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800066a:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800066e:	60da      	str	r2, [r3, #12]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000672:	2200      	movs	r2, #0
 8000674:	80da      	strh	r2, [r3, #6]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000678:	7c13      	ldrb	r3, [r2, #16]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	7413      	strb	r3, [r2, #16]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 8000680:	4a11      	ldr	r2, [pc, #68]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000682:	7c93      	ldrb	r3, [r2, #18]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	7493      	strb	r3, [r2, #18]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 800068a:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800068c:	2201      	movs	r2, #1
 800068e:	711a      	strb	r2, [r3, #4]
	U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000692:	2214      	movs	r2, #20
 8000694:	805a      	strh	r2, [r3, #2]
	if (U_Blox_Is_Packet_Ready_To_Send()) {
 8000696:	f000 fa2d 	bl	8000af4 <U_Blox_Is_Packet_Ready_To_Send>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d004      	beq.n	80006aa <GNSS_Tanimla+0xae>
		U_Blox_Set_Frame(&U_Blox_frame_tx);
 80006a0:	4809      	ldr	r0, [pc, #36]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 80006a2:	f000 f9ad 	bl	8000a00 <U_Blox_Set_Frame>
		U_Blox_Send_Packet();
 80006a6:	f000 fa35 	bl	8000b14 <U_Blox_Send_Packet>
	}
	//while(!U_Blox_Is_Packet_Ready());

	GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	2201      	movs	r2, #1
 80006ae:	741a      	strb	r2, [r3, #16]
	GNSS_t->onceki_durum = SM_GNSS_IDLE;
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	2200      	movs	r2, #0
 80006b4:	745a      	strb	r2, [r3, #17]
	zaman = SystickGetMs();
 80006b6:	f000 fe49 	bl	800134c <SystickGetMs>
 80006ba:	4603      	mov	r3, r0
 80006bc:	4a03      	ldr	r2, [pc, #12]	@ (80006cc <GNSS_Tanimla+0xd0>)
 80006be:	6013      	str	r3, [r2, #0]
}
 80006c0:	bf00      	nop
 80006c2:	3710      	adds	r7, #16
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	2400002c 	.word	0x2400002c
 80006cc:	2400041c 	.word	0x2400041c

080006d0 <GNSS_Gorev>:
	} else {
		return 0;
	}
}

void GNSS_Gorev(GNSS *GNSS_t) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	U_Blox_Task();
 80006d8:	f000 f91a 	bl	8000910 <U_Blox_Task>
	switch (GNSS_t->SM) {
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	7c1b      	ldrb	r3, [r3, #16]
 80006e0:	2b03      	cmp	r3, #3
 80006e2:	f200 80f3 	bhi.w	80008cc <GNSS_Gorev+0x1fc>
 80006e6:	a201      	add	r2, pc, #4	@ (adr r2, 80006ec <GNSS_Gorev+0x1c>)
 80006e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006ec:	080006fd 	.word	0x080006fd
 80006f0:	080007b5 	.word	0x080007b5
 80006f4:	08000799 	.word	0x08000799
 80006f8:	0800088d 	.word	0x0800088d
	case SM_GNSS_IDLE:
		U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 80006fc:	4b75      	ldr	r3, [pc, #468]	@ (80008d4 <GNSS_Gorev+0x204>)
 80006fe:	2206      	movs	r2, #6
 8000700:	701a      	strb	r2, [r3, #0]
		U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 8000702:	4b74      	ldr	r3, [pc, #464]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000704:	2200      	movs	r2, #0
 8000706:	705a      	strb	r2, [r3, #1]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000708:	4a72      	ldr	r2, [pc, #456]	@ (80008d4 <GNSS_Gorev+0x204>)
 800070a:	7d13      	ldrb	r3, [r2, #20]
 800070c:	f36f 0341 	bfc	r3, #1, #1
 8000710:	7513      	strb	r3, [r2, #20]
				0;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 8000712:	4a70      	ldr	r2, [pc, #448]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000714:	7a13      	ldrb	r3, [r2, #8]
 8000716:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 800071a:	7213      	strb	r3, [r2, #8]
				3;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 800071c:	4a6d      	ldr	r2, [pc, #436]	@ (80008d4 <GNSS_Gorev+0x204>)
 800071e:	7a13      	ldrb	r3, [r2, #8]
 8000720:	2110      	movs	r1, #16
 8000722:	f361 0305 	bfi	r3, r1, #0, #6
 8000726:	7213      	strb	r3, [r2, #8]
				16;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000728:	4a6a      	ldr	r2, [pc, #424]	@ (80008d4 <GNSS_Gorev+0x204>)
 800072a:	7a53      	ldrb	r3, [r2, #9]
 800072c:	f36f 1305 	bfc	r3, #4, #2
 8000730:	7253      	strb	r3, [r2, #9]
				0;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 8000732:	4a68      	ldr	r2, [pc, #416]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000734:	7a53      	ldrb	r3, [r2, #9]
 8000736:	2104      	movs	r1, #4
 8000738:	f361 0343 	bfi	r3, r1, #1, #3
 800073c:	7253      	strb	r3, [r2, #9]
				4;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 800073e:	4b65      	ldr	r3, [pc, #404]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000740:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000744:	60da      	str	r2, [r3, #12]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 8000746:	4b63      	ldr	r3, [pc, #396]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000748:	2200      	movs	r2, #0
 800074a:	80da      	strh	r2, [r3, #6]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 800074c:	4a61      	ldr	r2, [pc, #388]	@ (80008d4 <GNSS_Gorev+0x204>)
 800074e:	7c13      	ldrb	r3, [r2, #16]
 8000750:	f043 0301 	orr.w	r3, r3, #1
 8000754:	7413      	strb	r3, [r2, #16]
				1;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 8000756:	4a5f      	ldr	r2, [pc, #380]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000758:	7c93      	ldrb	r3, [r2, #18]
 800075a:	f043 0301 	orr.w	r3, r3, #1
 800075e:	7493      	strb	r3, [r2, #18]
				1;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 8000760:	4b5c      	ldr	r3, [pc, #368]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000762:	2201      	movs	r2, #1
 8000764:	711a      	strb	r2, [r3, #4]
		U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 8000766:	4b5b      	ldr	r3, [pc, #364]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000768:	2214      	movs	r2, #20
 800076a:	805a      	strh	r2, [r3, #2]
		if (U_Blox_Is_Packet_Ready_To_Send()) {
 800076c:	f000 f9c2 	bl	8000af4 <U_Blox_Is_Packet_Ready_To_Send>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d004      	beq.n	8000780 <GNSS_Gorev+0xb0>
			U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000776:	4857      	ldr	r0, [pc, #348]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000778:	f000 f942 	bl	8000a00 <U_Blox_Set_Frame>
			U_Blox_Send_Packet();
 800077c:	f000 f9ca 	bl	8000b14 <U_Blox_Send_Packet>
		}
		static uint32_t zamanlama;
		zamanlama = SystickGetMs();
 8000780:	f000 fde4 	bl	800134c <SystickGetMs>
 8000784:	4603      	mov	r3, r0
 8000786:	4a54      	ldr	r2, [pc, #336]	@ (80008d8 <GNSS_Gorev+0x208>)
 8000788:	6013      	str	r3, [r2, #0]
		GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2201      	movs	r2, #1
 800078e:	741a      	strb	r2, [r3, #16]
		GNSS_t->onceki_durum = SM_GNSS_IDLE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	745a      	strb	r2, [r3, #17]
		break;
 8000796:	e099      	b.n	80008cc <GNSS_Gorev+0x1fc>
	case SM_GNSS_NO_REPLY:

		GNSS_t->İstatistikler_t.veri_gelmedi++;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	1c5a      	adds	r2, r3, #1
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	615a      	str	r2, [r3, #20]
		GNSS_t->SM = SM_GNSS_IDLE;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	741a      	strb	r2, [r3, #16]
		zamanlama = SystickGetMs();
 80007a8:	f000 fdd0 	bl	800134c <SystickGetMs>
 80007ac:	4603      	mov	r3, r0
 80007ae:	4a4a      	ldr	r2, [pc, #296]	@ (80008d8 <GNSS_Gorev+0x208>)
 80007b0:	6013      	str	r3, [r2, #0]
		break;
 80007b2:	e08b      	b.n	80008cc <GNSS_Gorev+0x1fc>
	case SM_GNSS_WAIT_FOR_REPLY:

		if (GNSS_t->onceki_durum == SM_GNSS_IDLE) {
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	7c5b      	ldrb	r3, [r3, #17]
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d121      	bne.n	8000800 <GNSS_Gorev+0x130>
			if (U_Blox_Is_Packet_Ready()) {
 80007bc:	f000 f98a 	bl	8000ad4 <U_Blox_Is_Packet_Ready>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d00e      	beq.n	80007e4 <GNSS_Gorev+0x114>
				U_Blox_Get_Package(&U_Blox_frame_rx);
 80007c6:	4845      	ldr	r0, [pc, #276]	@ (80008dc <GNSS_Gorev+0x20c>)
 80007c8:	f000 f9b8 	bl	8000b3c <U_Blox_Get_Package>
				if ((U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_ACK)
 80007cc:	4b43      	ldr	r3, [pc, #268]	@ (80008dc <GNSS_Gorev+0x20c>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b05      	cmp	r3, #5
 80007d2:	d17a      	bne.n	80008ca <GNSS_Gorev+0x1fa>
						&& (U_Blox_frame_rx.message_id == UBX_MESSAGE_ID_ACK)) {
 80007d4:	4b41      	ldr	r3, [pc, #260]	@ (80008dc <GNSS_Gorev+0x20c>)
 80007d6:	785b      	ldrb	r3, [r3, #1]
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d176      	bne.n	80008ca <GNSS_Gorev+0x1fa>
					//Acknowledgement alındı.
					GNSS_t->SM = SM_GNSS_SEND;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2203      	movs	r2, #3
 80007e0:	741a      	strb	r2, [r3, #16]
				}
			} else if (SystickCheckMs(zamanlama, 1500)) {
				GNSS_t->SM = SM_GNSS_NO_REPLY;
			}
		}
		break;
 80007e2:	e072      	b.n	80008ca <GNSS_Gorev+0x1fa>
			} else if (SystickCheckMs(zamanlama, 1500)) {
 80007e4:	4b3c      	ldr	r3, [pc, #240]	@ (80008d8 <GNSS_Gorev+0x208>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fdb9 	bl	8001364 <SystickCheckMs>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d068      	beq.n	80008ca <GNSS_Gorev+0x1fa>
				GNSS_t->SM = SM_GNSS_NO_REPLY;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2202      	movs	r2, #2
 80007fc:	741a      	strb	r2, [r3, #16]
		break;
 80007fe:	e064      	b.n	80008ca <GNSS_Gorev+0x1fa>
		} else if (GNSS_t->onceki_durum == SM_GNSS_SEND) {
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	7c5b      	ldrb	r3, [r3, #17]
 8000804:	2b03      	cmp	r3, #3
 8000806:	d160      	bne.n	80008ca <GNSS_Gorev+0x1fa>
			if (U_Blox_Is_Packet_Ready()) {
 8000808:	f000 f964 	bl	8000ad4 <U_Blox_Is_Packet_Ready>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d02e      	beq.n	8000870 <GNSS_Gorev+0x1a0>
				U_Blox_Get_Package(&U_Blox_frame_rx);
 8000812:	4832      	ldr	r0, [pc, #200]	@ (80008dc <GNSS_Gorev+0x20c>)
 8000814:	f000 f992 	bl	8000b3c <U_Blox_Get_Package>
				if ((U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_NAV)
 8000818:	4b30      	ldr	r3, [pc, #192]	@ (80008dc <GNSS_Gorev+0x20c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	2b01      	cmp	r3, #1
 800081e:	d154      	bne.n	80008ca <GNSS_Gorev+0x1fa>
						&& (U_Blox_frame_rx.message_id == UBX_MESSAGE_ID_PVT)) {
 8000820:	4b2e      	ldr	r3, [pc, #184]	@ (80008dc <GNSS_Gorev+0x20c>)
 8000822:	785b      	ldrb	r3, [r3, #1]
 8000824:	2b07      	cmp	r3, #7
 8000826:	d150      	bne.n	80008ca <GNSS_Gorev+0x1fa>
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.month;
 8000828:	4b2c      	ldr	r3, [pc, #176]	@ (80008dc <GNSS_Gorev+0x20c>)
 800082a:	7a9a      	ldrb	r2, [r3, #10]
					GNSS_t->ay =
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	709a      	strb	r2, [r3, #2]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lon;
 8000830:	4b2a      	ldr	r3, [pc, #168]	@ (80008dc <GNSS_Gorev+0x20c>)
 8000832:	69da      	ldr	r2, [r3, #28]
					GNSS_t->boylam =
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	609a      	str	r2, [r3, #8]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lat;
 8000838:	4b28      	ldr	r3, [pc, #160]	@ (80008dc <GNSS_Gorev+0x20c>)
 800083a:	6a1a      	ldr	r2, [r3, #32]
					GNSS_t->enlem =
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	60da      	str	r2, [r3, #12]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.day;
 8000840:	4b26      	ldr	r3, [pc, #152]	@ (80008dc <GNSS_Gorev+0x20c>)
 8000842:	7ada      	ldrb	r2, [r3, #11]
					GNSS_t->gun =
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	70da      	strb	r2, [r3, #3]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.min;
 8000848:	4b24      	ldr	r3, [pc, #144]	@ (80008dc <GNSS_Gorev+0x20c>)
 800084a:	7b5a      	ldrb	r2, [r3, #13]
					GNSS_t->dakika =
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	715a      	strb	r2, [r3, #5]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.year;
 8000850:	4b22      	ldr	r3, [pc, #136]	@ (80008dc <GNSS_Gorev+0x20c>)
 8000852:	891a      	ldrh	r2, [r3, #8]
					GNSS_t->yil =
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	801a      	strh	r2, [r3, #0]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.sec;
 8000858:	4b20      	ldr	r3, [pc, #128]	@ (80008dc <GNSS_Gorev+0x20c>)
 800085a:	7b9a      	ldrb	r2, [r3, #14]
					GNSS_t->saniye =
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	719a      	strb	r2, [r3, #6]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.hour;
 8000860:	4b1e      	ldr	r3, [pc, #120]	@ (80008dc <GNSS_Gorev+0x20c>)
 8000862:	7b1a      	ldrb	r2, [r3, #12]
					GNSS_t->saat =
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	711a      	strb	r2, [r3, #4]
					GNSS_t->SM = SM_GNSS_SEND;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2203      	movs	r2, #3
 800086c:	741a      	strb	r2, [r3, #16]
		break;
 800086e:	e02c      	b.n	80008ca <GNSS_Gorev+0x1fa>
			} else if (SystickCheckMs(zamanlama, 1500)) {
 8000870:	4b19      	ldr	r3, [pc, #100]	@ (80008d8 <GNSS_Gorev+0x208>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fd73 	bl	8001364 <SystickCheckMs>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d022      	beq.n	80008ca <GNSS_Gorev+0x1fa>
				GNSS_t->SM = SM_GNSS_NO_REPLY;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2202      	movs	r2, #2
 8000888:	741a      	strb	r2, [r3, #16]
		break;
 800088a:	e01e      	b.n	80008ca <GNSS_Gorev+0x1fa>
	case SM_GNSS_SEND:
		GNSS_t->onceki_durum = SM_GNSS_SEND;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2203      	movs	r2, #3
 8000890:	745a      	strb	r2, [r3, #17]
		U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_NAV;
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <GNSS_Gorev+0x204>)
 8000894:	2201      	movs	r2, #1
 8000896:	701a      	strb	r2, [r3, #0]
		U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PVT;
 8000898:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <GNSS_Gorev+0x204>)
 800089a:	2207      	movs	r2, #7
 800089c:	705a      	strb	r2, [r3, #1]
		U_Blox_frame_tx.length = 0;
 800089e:	4b0d      	ldr	r3, [pc, #52]	@ (80008d4 <GNSS_Gorev+0x204>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	805a      	strh	r2, [r3, #2]
		if (U_Blox_Is_Packet_Ready_To_Send()) {
 80008a4:	f000 f926 	bl	8000af4 <U_Blox_Is_Packet_Ready_To_Send>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d004      	beq.n	80008b8 <GNSS_Gorev+0x1e8>
			U_Blox_Set_Frame(&U_Blox_frame_tx);
 80008ae:	4809      	ldr	r0, [pc, #36]	@ (80008d4 <GNSS_Gorev+0x204>)
 80008b0:	f000 f8a6 	bl	8000a00 <U_Blox_Set_Frame>
			U_Blox_Send_Packet();
 80008b4:	f000 f92e 	bl	8000b14 <U_Blox_Send_Packet>
		}
		GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2201      	movs	r2, #1
 80008bc:	741a      	strb	r2, [r3, #16]
		zamanlama = SystickGetMs();
 80008be:	f000 fd45 	bl	800134c <SystickGetMs>
 80008c2:	4603      	mov	r3, r0
 80008c4:	4a04      	ldr	r2, [pc, #16]	@ (80008d8 <GNSS_Gorev+0x208>)
 80008c6:	6013      	str	r3, [r2, #0]
		break;
 80008c8:	e000      	b.n	80008cc <GNSS_Gorev+0x1fc>
		break;
 80008ca:	bf00      	nop
	}
}
 80008cc:	bf00      	nop
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	2400002c 	.word	0x2400002c
 80008d8:	24000420 	.word	0x24000420
 80008dc:	24000224 	.word	0x24000224

080008e0 <U_Blox_Init>:
	} Sm;
	uint8_t Buffer[500];
	uint16_t buffer_index;
} U_Blox_Tx;

void U_Blox_Init() {
 80008e0:	b580      	push	{r7, lr}
 80008e2:	af00      	add	r7, sp, #0
	U_Blox_Rx.Sm = SM_RX_IDLE;
 80008e4:	4b06      	ldr	r3, [pc, #24]	@ (8000900 <U_Blox_Init+0x20>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	701a      	strb	r2, [r3, #0]
	U_Blox_Tx.Sm = SM_TX_IDLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	@ (8000904 <U_Blox_Init+0x24>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 80008f0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80008f4:	4904      	ldr	r1, [pc, #16]	@ (8000908 <U_Blox_Init+0x28>)
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <U_Blox_Init+0x2c>)
 80008f8:	f006 fd98 	bl	800742c <HAL_UART_Receive_DMA>
}
 80008fc:	bf00      	nop
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	24000424 	.word	0x24000424
 8000904:	2400061c 	.word	0x2400061c
 8000908:	24000425 	.word	0x24000425
 800090c:	24000814 	.word	0x24000814

08000910 <U_Blox_Task>:
void U_Blox_Task() {
 8000910:	b590      	push	{r4, r7, lr}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t;
	switch (U_Blox_Tx.Sm) {
 8000916:	4b35      	ldr	r3, [pc, #212]	@ (80009ec <U_Blox_Task+0xdc>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b02      	cmp	r3, #2
 800091c:	d005      	beq.n	800092a <U_Blox_Task+0x1a>
 800091e:	2b02      	cmp	r3, #2
 8000920:	dc10      	bgt.n	8000944 <U_Blox_Task+0x34>
 8000922:	2b00      	cmp	r3, #0
 8000924:	d00d      	beq.n	8000942 <U_Blox_Task+0x32>
 8000926:	2b01      	cmp	r3, #1
	case SM_TX_IDLE:
		break;
	case SM_TX_PREPARE:
		break;
 8000928:	e00c      	b.n	8000944 <U_Blox_Task+0x34>
	case SM_TX_SEND:
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Tx.Buffer;
 800092a:	4b31      	ldr	r3, [pc, #196]	@ (80009f0 <U_Blox_Task+0xe0>)
 800092c:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart3,(uint8_t*)U_Blox_frame_low_layer_t,U_Blox_frame_low_layer_t->length+8);
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	889b      	ldrh	r3, [r3, #4]
 8000932:	3308      	adds	r3, #8
 8000934:	b29b      	uxth	r3, r3
 8000936:	461a      	mov	r2, r3
 8000938:	6879      	ldr	r1, [r7, #4]
 800093a:	482e      	ldr	r0, [pc, #184]	@ (80009f4 <U_Blox_Task+0xe4>)
 800093c:	f006 fcf6 	bl	800732c <HAL_UART_Transmit_DMA>
		//	U_Blox_Send_Data(U_Blox_Tx.Buffer[U_Blox_Tx.buffer_index]);
		//}
		//if (U_Blox_Tx.buffer_index >= U_Blox_frame_low_layer_t->length + 8) {
		//	U_Blox_Tx.Sm = SM_TX_IDLE;
		//}
		break;
 8000940:	e000      	b.n	8000944 <U_Blox_Task+0x34>
		break;
 8000942:	bf00      	nop
	}
	switch (U_Blox_Rx.Sm) {
 8000944:	4b2c      	ldr	r3, [pc, #176]	@ (80009f8 <U_Blox_Task+0xe8>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <U_Blox_Task+0x40>
 800094c:	2b01      	cmp	r3, #1
		//		}
		//	}
		//}
		break;
	case SM_RX_PROCESS:
		break;
 800094e:	e048      	b.n	80009e2 <U_Blox_Task+0xd2>
		U_Blox_Rx.buffer_index = GetRxBufferIndex();
 8000950:	f000 f950 	bl	8000bf4 <GetRxBufferIndex>
 8000954:	4603      	mov	r3, r0
 8000956:	461a      	mov	r2, r3
 8000958:	4b27      	ldr	r3, [pc, #156]	@ (80009f8 <U_Blox_Task+0xe8>)
 800095a:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) &U_Blox_Rx.Buffer;
 800095e:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <U_Blox_Task+0xec>)
 8000960:	607b      	str	r3, [r7, #4]
		if (U_Blox_Rx.buffer_index >= 2) {
 8000962:	4b25      	ldr	r3, [pc, #148]	@ (80009f8 <U_Blox_Task+0xe8>)
 8000964:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000968:	2b01      	cmp	r3, #1
 800096a:	d939      	bls.n	80009e0 <U_Blox_Task+0xd0>
			if ((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2bb5      	cmp	r3, #181	@ 0xb5
 8000972:	d12a      	bne.n	80009ca <U_Blox_Task+0xba>
					&& (U_Blox_frame_low_layer_t->sync_char_2 == 0x62)) {
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	785b      	ldrb	r3, [r3, #1]
 8000978:	2b62      	cmp	r3, #98	@ 0x62
 800097a:	d126      	bne.n	80009ca <U_Blox_Task+0xba>
				if (U_Blox_Rx.buffer_index >= 5) {
 800097c:	4b1e      	ldr	r3, [pc, #120]	@ (80009f8 <U_Blox_Task+0xe8>)
 800097e:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000982:	2b04      	cmp	r3, #4
 8000984:	d92b      	bls.n	80009de <U_Blox_Task+0xce>
							>= U_Blox_frame_low_layer_t->length + 7) {
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	889b      	ldrh	r3, [r3, #4]
 800098a:	3306      	adds	r3, #6
					if (U_Blox_Rx.buffer_index
 800098c:	4a1a      	ldr	r2, [pc, #104]	@ (80009f8 <U_Blox_Task+0xe8>)
 800098e:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 8000992:	4293      	cmp	r3, r2
 8000994:	da23      	bge.n	80009de <U_Blox_Task+0xce>
								+ U_Blox_frame_low_layer_t->length])
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	889b      	ldrh	r3, [r3, #4]
 800099a:	3306      	adds	r3, #6
						if ((*(uint16_t*) &U_Blox_Rx.Buffer[6
 800099c:	4a16      	ldr	r2, [pc, #88]	@ (80009f8 <U_Blox_Task+0xe8>)
 800099e:	4413      	add	r3, r2
 80009a0:	3301      	adds	r3, #1
 80009a2:	881c      	ldrh	r4, [r3, #0]
								== U_Blox_Calculate_Checksum(
 80009a4:	6878      	ldr	r0, [r7, #4]
 80009a6:	f000 f863 	bl	8000a70 <U_Blox_Calculate_Checksum>
 80009aa:	4603      	mov	r3, r0
						if ((*(uint16_t*) &U_Blox_Rx.Buffer[6
 80009ac:	429c      	cmp	r4, r3
 80009ae:	d116      	bne.n	80009de <U_Blox_Task+0xce>
							HAL_UART_DMAStop(&huart3);
 80009b0:	4810      	ldr	r0, [pc, #64]	@ (80009f4 <U_Blox_Task+0xe4>)
 80009b2:	f006 fd87 	bl	80074c4 <HAL_UART_DMAStop>
							HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer,
 80009b6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009ba:	4910      	ldr	r1, [pc, #64]	@ (80009fc <U_Blox_Task+0xec>)
 80009bc:	480d      	ldr	r0, [pc, #52]	@ (80009f4 <U_Blox_Task+0xe4>)
 80009be:	f006 fd35 	bl	800742c <HAL_UART_Receive_DMA>
							U_Blox_Rx.Sm = SM_RX_PROCESS;
 80009c2:	4b0d      	ldr	r3, [pc, #52]	@ (80009f8 <U_Blox_Task+0xe8>)
 80009c4:	2201      	movs	r2, #1
 80009c6:	701a      	strb	r2, [r3, #0]
				if (U_Blox_Rx.buffer_index >= 5) {
 80009c8:	e009      	b.n	80009de <U_Blox_Task+0xce>
				HAL_UART_DMAStop(&huart3);
 80009ca:	480a      	ldr	r0, [pc, #40]	@ (80009f4 <U_Blox_Task+0xe4>)
 80009cc:	f006 fd7a 	bl	80074c4 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 80009d0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009d4:	4909      	ldr	r1, [pc, #36]	@ (80009fc <U_Blox_Task+0xec>)
 80009d6:	4807      	ldr	r0, [pc, #28]	@ (80009f4 <U_Blox_Task+0xe4>)
 80009d8:	f006 fd28 	bl	800742c <HAL_UART_Receive_DMA>
		break;
 80009dc:	e000      	b.n	80009e0 <U_Blox_Task+0xd0>
				if (U_Blox_Rx.buffer_index >= 5) {
 80009de:	bf00      	nop
		break;
 80009e0:	bf00      	nop
	}
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd90      	pop	{r4, r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2400061c 	.word	0x2400061c
 80009f0:	2400061d 	.word	0x2400061d
 80009f4:	24000814 	.word	0x24000814
 80009f8:	24000424 	.word	0x24000424
 80009fc:	24000425 	.word	0x24000425

08000a00 <U_Blox_Set_Frame>:

void U_Blox_Set_Frame(U_Blox_frame_high_layer *U_Blox_frame_high_layer_t) {
 8000a00:	b590      	push	{r4, r7, lr}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t=(U_Blox_frame_low_layer*)U_Blox_Tx.Buffer;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <U_Blox_Set_Frame+0x68>)
 8000a0a:	60fb      	str	r3, [r7, #12]
	U_Blox_frame_low_layer_t->sync_char_1=0xB5;
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	22b5      	movs	r2, #181	@ 0xb5
 8000a10:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_low_layer_t->sync_char_2=0x62;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	2262      	movs	r2, #98	@ 0x62
 8000a16:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_low_layer_t->message_id=U_Blox_frame_high_layer_t->message_id;
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	785a      	ldrb	r2, [r3, #1]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	70da      	strb	r2, [r3, #3]
	U_Blox_frame_low_layer_t->message_class=U_Blox_frame_high_layer_t->message_class;
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	709a      	strb	r2, [r3, #2]
    U_Blox_frame_low_layer_t->length=U_Blox_frame_high_layer_t->length;
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	885a      	ldrh	r2, [r3, #2]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	809a      	strh	r2, [r3, #4]
    memcpy(U_Blox_frame_low_layer_t->payload,U_Blox_frame_high_layer_t->payload.data,U_Blox_frame_high_layer_t->length);
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	1d98      	adds	r0, r3, #6
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	1d19      	adds	r1, r3, #4
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	885b      	ldrh	r3, [r3, #2]
 8000a3c:	461a      	mov	r2, r3
 8000a3e:	f008 fdff 	bl	8009640 <memcpy>
    (*(uint16_t*)&U_Blox_frame_low_layer_t->payload[U_Blox_frame_low_layer_t->length])=U_Blox_Calculate_Checksum(U_Blox_frame_low_layer_t);
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	889b      	ldrh	r3, [r3, #4]
 8000a46:	461a      	mov	r2, r3
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	1d9c      	adds	r4, r3, #6
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 f80e 	bl	8000a70 <U_Blox_Calculate_Checksum>
 8000a54:	4603      	mov	r3, r0
 8000a56:	8023      	strh	r3, [r4, #0]
	U_Blox_Tx.Sm = SM_TX_PREPARE;
 8000a58:	4b04      	ldr	r3, [pc, #16]	@ (8000a6c <U_Blox_Set_Frame+0x6c>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
}
 8000a5e:	bf00      	nop
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	bf00      	nop
 8000a68:	2400061d 	.word	0x2400061d
 8000a6c:	2400061c 	.word	0x2400061c

08000a70 <U_Blox_Calculate_Checksum>:
	HAL_UART_Transmit(&huart3,
			(uint8_t*) &U_Blox_frame_low_layer_transmit.payload,
			U_Blox_frame_low_layer_transmit.length + 2, 100);
	return 1;
}
uint16_t U_Blox_Calculate_Checksum(U_Blox_frame_low_layer *U_blox_Frame) {
 8000a70:	b480      	push	{r7}
 8000a72:	b087      	sub	sp, #28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
	uint8_t ck_a = 0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	75fb      	strb	r3, [r7, #23]
	uint8_t ck_b = 0;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	75bb      	strb	r3, [r7, #22]
	uint8_t *data = (uint8_t*) &U_blox_Frame->message_class;
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3302      	adds	r3, #2
 8000a84:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 8000a86:	2300      	movs	r3, #0
 8000a88:	60fb      	str	r3, [r7, #12]
 8000a8a:	e00e      	b.n	8000aaa <U_Blox_Calculate_Checksum+0x3a>
		ck_a = ck_a + *data;
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	7dfb      	ldrb	r3, [r7, #23]
 8000a92:	4413      	add	r3, r2
 8000a94:	75fb      	strb	r3, [r7, #23]
		ck_b = ck_b + ck_a;
 8000a96:	7dba      	ldrb	r2, [r7, #22]
 8000a98:	7dfb      	ldrb	r3, [r7, #23]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	75bb      	strb	r3, [r7, #22]
		data++;
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	3301      	adds	r3, #1
 8000aa8:	60fb      	str	r3, [r7, #12]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	889b      	ldrh	r3, [r3, #4]
 8000aae:	3303      	adds	r3, #3
 8000ab0:	68fa      	ldr	r2, [r7, #12]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	ddea      	ble.n	8000a8c <U_Blox_Calculate_Checksum+0x1c>
	}
	return (uint16_t) (ck_a + (uint16_t) ((uint16_t) ck_b << 8));
 8000ab6:	7dfb      	ldrb	r3, [r7, #23]
 8000ab8:	b29a      	uxth	r2, r3
 8000aba:	7dbb      	ldrb	r3, [r7, #22]
 8000abc:	b29b      	uxth	r3, r3
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	b29b      	uxth	r3, r3
 8000ac2:	4413      	add	r3, r2
 8000ac4:	b29b      	uxth	r3, r3
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	371c      	adds	r7, #28
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
	...

08000ad4 <U_Blox_Is_Packet_Ready>:
	}
	U_Blox_Rx.Buffer[U_Blox_Rx.buffer_index] = data;
	U_Blox_Rx.buffer_index++;
}

uint8_t U_Blox_Is_Packet_Ready() {
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
	return (U_Blox_Rx.Sm == SM_RX_PROCESS);
 8000ad8:	4b05      	ldr	r3, [pc, #20]	@ (8000af0 <U_Blox_Is_Packet_Ready+0x1c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	bf0c      	ite	eq
 8000ae0:	2301      	moveq	r3, #1
 8000ae2:	2300      	movne	r3, #0
 8000ae4:	b2db      	uxtb	r3, r3
}
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	24000424 	.word	0x24000424

08000af4 <U_Blox_Is_Packet_Ready_To_Send>:

uint8_t U_Blox_Is_Packet_Ready_To_Send(void) {
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
	return (U_Blox_Tx.Sm == SM_TX_IDLE);
 8000af8:	4b05      	ldr	r3, [pc, #20]	@ (8000b10 <U_Blox_Is_Packet_Ready_To_Send+0x1c>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	bf0c      	ite	eq
 8000b00:	2301      	moveq	r3, #1
 8000b02:	2300      	movne	r3, #0
 8000b04:	b2db      	uxtb	r3, r3
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	2400061c 	.word	0x2400061c

08000b14 <U_Blox_Send_Packet>:

void U_Blox_Send_Packet() {
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
	if (U_Blox_Tx.Sm == SM_TX_PREPARE) {
 8000b18:	4b07      	ldr	r3, [pc, #28]	@ (8000b38 <U_Blox_Send_Packet+0x24>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	2b01      	cmp	r3, #1
 8000b1e:	d106      	bne.n	8000b2e <U_Blox_Send_Packet+0x1a>
		U_Blox_Tx.buffer_index = 0;
 8000b20:	4b05      	ldr	r3, [pc, #20]	@ (8000b38 <U_Blox_Send_Packet+0x24>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		U_Blox_Tx.Sm = SM_TX_SEND;
 8000b28:	4b03      	ldr	r3, [pc, #12]	@ (8000b38 <U_Blox_Send_Packet+0x24>)
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	701a      	strb	r2, [r3, #0]
	}
}
 8000b2e:	bf00      	nop
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	2400061c 	.word	0x2400061c

08000b3c <U_Blox_Get_Package>:
void U_Blox_Send_Data(uint8_t data) {
	HAL_UART_Transmit(&huart3, &data, 1, 10);
}
void U_Blox_Get_Package(U_Blox_frame_high_layer *U_Blox_frame_high_layer_t) {
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t =
 8000b44:	4b18      	ldr	r3, [pc, #96]	@ (8000ba8 <U_Blox_Get_Package+0x6c>)
 8000b46:	60bb      	str	r3, [r7, #8]
			(U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;

	U_Blox_frame_high_layer_t->length = U_Blox_frame_low_layer_t->length;
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	889a      	ldrh	r2, [r3, #4]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	805a      	strh	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
			U_Blox_frame_low_layer_t->message_class;
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	789a      	ldrb	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_high_layer_t->message_id =
			U_Blox_frame_low_layer_t->message_id;
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	78da      	ldrb	r2, [r3, #3]
	U_Blox_frame_high_layer_t->message_id =
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 500; i++) {
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
 8000b64:	e00d      	b.n	8000b82 <U_Blox_Get_Package+0x46>
		U_Blox_frame_high_layer_t->payload.data[i] =
				U_Blox_frame_low_layer_t->payload[i];
 8000b66:	68ba      	ldr	r2, [r7, #8]
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	4413      	add	r3, r2
 8000b6c:	3306      	adds	r3, #6
 8000b6e:	7819      	ldrb	r1, [r3, #0]
		U_Blox_frame_high_layer_t->payload.data[i] =
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4413      	add	r3, r2
 8000b76:	3304      	adds	r3, #4
 8000b78:	460a      	mov	r2, r1
 8000b7a:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 500; i++) {
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	60fb      	str	r3, [r7, #12]
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b88:	dbed      	blt.n	8000b66 <U_Blox_Get_Package+0x2a>
	}
	memset(U_Blox_Rx.Buffer, 0, 8 + U_Blox_frame_low_layer_t->length);
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	889b      	ldrh	r3, [r3, #4]
 8000b8e:	3308      	adds	r3, #8
 8000b90:	461a      	mov	r2, r3
 8000b92:	2100      	movs	r1, #0
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <U_Blox_Get_Package+0x6c>)
 8000b96:	f008 fd27 	bl	80095e8 <memset>
	U_Blox_Rx.Sm = SM_RX_IDLE;
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <U_Blox_Get_Package+0x70>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	24000425 	.word	0x24000425
 8000bac:	24000424 	.word	0x24000424

08000bb0 <HAL_UART_TxCpltCallback>:
		U_Blox_Rx.Buffer[index++] = U_Blox_Rx.Buffer[size++];
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	U_Blox_Tx.Sm = SM_TX_IDLE;
 8000bb8:	4b04      	ldr	r3, [pc, #16]	@ (8000bcc <HAL_UART_TxCpltCallback+0x1c>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8000bbe:	bf00      	nop
 8000bc0:	370c      	adds	r7, #12
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2400061c 	.word	0x2400061c

08000bd0 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */

	HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 8000bd8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bdc:	4903      	ldr	r1, [pc, #12]	@ (8000bec <HAL_UART_RxCpltCallback+0x1c>)
 8000bde:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <HAL_UART_RxCpltCallback+0x20>)
 8000be0:	f006 fc24 	bl	800742c <HAL_UART_Receive_DMA>
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback can be implemented in the user file.
	 */
}
 8000be4:	bf00      	nop
 8000be6:	3708      	adds	r7, #8
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	24000425 	.word	0x24000425
 8000bf0:	24000814 	.word	0x24000814

08000bf4 <GetRxBufferIndex>:
uint16_t GetRxBufferIndex() {
 8000bf4:	b480      	push	{r7}
 8000bf6:	b083      	sub	sp, #12
 8000bf8:	af00      	add	r7, sp, #0
	int a = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	607b      	str	r3, [r7, #4]
	a = 499 - DMA1_Stream0->NDTR;
 8000bfe:	4b09      	ldr	r3, [pc, #36]	@ (8000c24 <GetRxBufferIndex+0x30>)
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000c06:	1a9b      	subs	r3, r3, r2
 8000c08:	607b      	str	r3, [r7, #4]
	if (a < 0) {
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	da01      	bge.n	8000c14 <GetRxBufferIndex+0x20>
		return 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	e001      	b.n	8000c18 <GetRxBufferIndex+0x24>
	} else {
		return a;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	b29b      	uxth	r3, r3
	}
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	370c      	adds	r7, #12
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	40020010 	.word	0x40020010

08000c28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c2c:	f000 f978 	bl	8000f20 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c30:	f000 fbbe 	bl	80013b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c34:	f000 f828 	bl	8000c88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c38:	f000 f908 	bl	8000e4c <MX_GPIO_Init>
  MX_DMA_Init();
 8000c3c:	f000 f8de 	bl	8000dfc <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c40:	f000 f890 	bl	8000d64 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart3, &data,1);
  //HAL_UART_Receive_DMA(&huart3, uart_buffer, 500);
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 8000c44:	2201      	movs	r2, #1
 8000c46:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c4a:	480a      	ldr	r0, [pc, #40]	@ (8000c74 <main+0x4c>)
 8000c4c:	f003 fda2 	bl	8004794 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,1);
 8000c50:	2201      	movs	r2, #1
 8000c52:	2102      	movs	r1, #2
 8000c54:	4808      	ldr	r0, [pc, #32]	@ (8000c78 <main+0x50>)
 8000c56:	f003 fd9d 	bl	8004794 <HAL_GPIO_WritePin>
  GNSS_Tanimla(&GNSS_t);
 8000c5a:	4808      	ldr	r0, [pc, #32]	@ (8000c7c <main+0x54>)
 8000c5c:	f7ff fcce 	bl	80005fc <GNSS_Tanimla>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    GNSS_Gorev(&GNSS_t);
 8000c60:	4806      	ldr	r0, [pc, #24]	@ (8000c7c <main+0x54>)
 8000c62:	f7ff fd35 	bl	80006d0 <GNSS_Gorev>
	    a=DMA1_Stream0->NDTR;
 8000c66:	4b06      	ldr	r3, [pc, #24]	@ (8000c80 <main+0x58>)
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	461a      	mov	r2, r3
 8000c6c:	4b05      	ldr	r3, [pc, #20]	@ (8000c84 <main+0x5c>)
 8000c6e:	601a      	str	r2, [r3, #0]
	    GNSS_Gorev(&GNSS_t);
 8000c70:	bf00      	nop
 8000c72:	e7f5      	b.n	8000c60 <main+0x38>
 8000c74:	58020400 	.word	0x58020400
 8000c78:	58021000 	.word	0x58021000
 8000c7c:	24000998 	.word	0x24000998
 8000c80:	40020010 	.word	0x40020010
 8000c84:	240009b4 	.word	0x240009b4

08000c88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09c      	sub	sp, #112	@ 0x70
 8000c8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c92:	224c      	movs	r2, #76	@ 0x4c
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f008 fca6 	bl	80095e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	2220      	movs	r2, #32
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f008 fca0 	bl	80095e8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000ca8:	2002      	movs	r0, #2
 8000caa:	f003 fd8d 	bl	80047c8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000cae:	2300      	movs	r3, #0
 8000cb0:	603b      	str	r3, [r7, #0]
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8000d60 <SystemClock_Config+0xd8>)
 8000cb4:	699b      	ldr	r3, [r3, #24]
 8000cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8000d60 <SystemClock_Config+0xd8>)
 8000cb8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cbc:	6193      	str	r3, [r2, #24]
 8000cbe:	4b28      	ldr	r3, [pc, #160]	@ (8000d60 <SystemClock_Config+0xd8>)
 8000cc0:	699b      	ldr	r3, [r3, #24]
 8000cc2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cc6:	603b      	str	r3, [r7, #0]
 8000cc8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cca:	bf00      	nop
 8000ccc:	4b24      	ldr	r3, [pc, #144]	@ (8000d60 <SystemClock_Config+0xd8>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cd8:	d1f8      	bne.n	8000ccc <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cde:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000cf0:	2322      	movs	r3, #34	@ 0x22
 8000cf2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d00:	230c      	movs	r3, #12
 8000d02:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d04:	2300      	movs	r3, #0
 8000d06:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000d08:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d0c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d12:	4618      	mov	r0, r3
 8000d14:	f003 fd92 	bl	800483c <HAL_RCC_OscConfig>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d001      	beq.n	8000d22 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d1e:	f000 f92b 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d22:	233f      	movs	r3, #63	@ 0x3f
 8000d24:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d26:	2303      	movs	r3, #3
 8000d28:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d32:	2340      	movs	r3, #64	@ 0x40
 8000d34:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d36:	2340      	movs	r3, #64	@ 0x40
 8000d38:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d3e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d40:	2340      	movs	r3, #64	@ 0x40
 8000d42:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d44:	1d3b      	adds	r3, r7, #4
 8000d46:	2103      	movs	r1, #3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f004 f951 	bl	8004ff0 <HAL_RCC_ClockConfig>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d54:	f000 f910 	bl	8000f78 <Error_Handler>
  }
}
 8000d58:	bf00      	nop
 8000d5a:	3770      	adds	r7, #112	@ 0x70
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	58024800 	.word	0x58024800

08000d64 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d68:	4b22      	ldr	r3, [pc, #136]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d6a:	4a23      	ldr	r2, [pc, #140]	@ (8000df8 <MX_USART3_UART_Init+0x94>)
 8000d6c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d6e:	4b21      	ldr	r3, [pc, #132]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d70:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d74:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d76:	4b1f      	ldr	r3, [pc, #124]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d82:	4b1c      	ldr	r3, [pc, #112]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d88:	4b1a      	ldr	r3, [pc, #104]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d8a:	220c      	movs	r2, #12
 8000d8c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d8e:	4b19      	ldr	r3, [pc, #100]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d94:	4b17      	ldr	r3, [pc, #92]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9a:	4b16      	ldr	r3, [pc, #88]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000dac:	4811      	ldr	r0, [pc, #68]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000dae:	f006 fa6d 	bl	800728c <HAL_UART_Init>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000db8:	f000 f8de 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	480d      	ldr	r0, [pc, #52]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000dc0:	f008 fb48 	bl	8009454 <HAL_UARTEx_SetTxFifoThreshold>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d001      	beq.n	8000dce <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000dca:	f000 f8d5 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4808      	ldr	r0, [pc, #32]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000dd2:	f008 fb7d 	bl	80094d0 <HAL_UARTEx_SetRxFifoThreshold>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000ddc:	f000 f8cc 	bl	8000f78 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000de0:	4804      	ldr	r0, [pc, #16]	@ (8000df4 <MX_USART3_UART_Init+0x90>)
 8000de2:	f008 fafe 	bl	80093e2 <HAL_UARTEx_DisableFifoMode>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dec:	f000 f8c4 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000df0:	bf00      	nop
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	24000814 	.word	0x24000814
 8000df8:	40004800 	.word	0x40004800

08000dfc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b11      	ldr	r3, [pc, #68]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e04:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e08:	4a0f      	ldr	r2, [pc, #60]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e0a:	f043 0301 	orr.w	r3, r3, #1
 8000e0e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000e12:	4b0d      	ldr	r3, [pc, #52]	@ (8000e48 <MX_DMA_Init+0x4c>)
 8000e14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000e20:	2200      	movs	r2, #0
 8000e22:	2100      	movs	r1, #0
 8000e24:	200b      	movs	r0, #11
 8000e26:	f000 fc1c 	bl	8001662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e2a:	200b      	movs	r0, #11
 8000e2c:	f000 fc33 	bl	8001696 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000e30:	2200      	movs	r2, #0
 8000e32:	2100      	movs	r1, #0
 8000e34:	200c      	movs	r0, #12
 8000e36:	f000 fc14 	bl	8001662 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e3a:	200c      	movs	r0, #12
 8000e3c:	f000 fc2b 	bl	8001696 <HAL_NVIC_EnableIRQ>

}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	58024400 	.word	0x58024400

08000e4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b088      	sub	sp, #32
 8000e50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e52:	f107 030c 	add.w	r3, r7, #12
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
 8000e5a:	605a      	str	r2, [r3, #4]
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	60da      	str	r2, [r3, #12]
 8000e60:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e62:	4b2c      	ldr	r3, [pc, #176]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000e64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e68:	4a2a      	ldr	r2, [pc, #168]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000e6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e6e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e72:	4b28      	ldr	r3, [pc, #160]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000e74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e7c:	60bb      	str	r3, [r7, #8]
 8000e7e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e80:	4b24      	ldr	r3, [pc, #144]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e86:	4a23      	ldr	r2, [pc, #140]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000e88:	f043 0302 	orr.w	r3, r3, #2
 8000e8c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e90:	4b20      	ldr	r3, [pc, #128]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000e92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e96:	f003 0302 	and.w	r3, r3, #2
 8000e9a:	607b      	str	r3, [r7, #4]
 8000e9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e9e:	4b1d      	ldr	r3, [pc, #116]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000ea0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ea4:	4a1b      	ldr	r2, [pc, #108]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000ea6:	f043 0310 	orr.w	r3, r3, #16
 8000eaa:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eae:	4b19      	ldr	r3, [pc, #100]	@ (8000f14 <MX_GPIO_Init+0xc8>)
 8000eb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	603b      	str	r3, [r7, #0]
 8000eba:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000ec2:	4815      	ldr	r0, [pc, #84]	@ (8000f18 <MX_GPIO_Init+0xcc>)
 8000ec4:	f003 fc66 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	2102      	movs	r1, #2
 8000ecc:	4813      	ldr	r0, [pc, #76]	@ (8000f1c <MX_GPIO_Init+0xd0>)
 8000ece:	f003 fc61 	bl	8004794 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000ed2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ed6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	4619      	mov	r1, r3
 8000eea:	480b      	ldr	r0, [pc, #44]	@ (8000f18 <MX_GPIO_Init+0xcc>)
 8000eec:	f003 faaa 	bl	8004444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ef0:	2302      	movs	r3, #2
 8000ef2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f00:	f107 030c 	add.w	r3, r7, #12
 8000f04:	4619      	mov	r1, r3
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_GPIO_Init+0xd0>)
 8000f08:	f003 fa9c 	bl	8004444 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f0c:	bf00      	nop
 8000f0e:	3720      	adds	r7, #32
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd80      	pop	{r7, pc}
 8000f14:	58024400 	.word	0x58024400
 8000f18:	58020400 	.word	0x58020400
 8000f1c:	58021000 	.word	0x58021000

08000f20 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b084      	sub	sp, #16
 8000f24:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000f26:	463b      	mov	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000f32:	f000 fbcb 	bl	80016cc <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f36:	2301      	movs	r3, #1
 8000f38:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f42:	231f      	movs	r3, #31
 8000f44:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f46:	2387      	movs	r3, #135	@ 0x87
 8000f48:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f52:	2301      	movs	r3, #1
 8000f54:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f56:	2301      	movs	r3, #1
 8000f58:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f62:	463b      	mov	r3, r7
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fbe9 	bl	800173c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f6a:	2004      	movs	r0, #4
 8000f6c:	f000 fbc6 	bl	80016fc <HAL_MPU_Enable>

}
 8000f70:	bf00      	nop
 8000f72:	3710      	adds	r7, #16
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	bf00      	nop
 8000f82:	e7fd      	b.n	8000f80 <Error_Handler+0x8>

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f8c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f90:	4a08      	ldr	r2, [pc, #32]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f92:	f043 0302 	orr.w	r3, r3, #2
 8000f96:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f9a:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_MspInit+0x30>)
 8000f9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000fa0:	f003 0302 	and.w	r3, r3, #2
 8000fa4:	607b      	str	r3, [r7, #4]
 8000fa6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fa8:	bf00      	nop
 8000faa:	370c      	adds	r7, #12
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	58024400 	.word	0x58024400

08000fb8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b0b8      	sub	sp, #224	@ 0xe0
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc0:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	601a      	str	r2, [r3, #0]
 8000fc8:	605a      	str	r2, [r3, #4]
 8000fca:	609a      	str	r2, [r3, #8]
 8000fcc:	60da      	str	r2, [r3, #12]
 8000fce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fd0:	f107 0310 	add.w	r3, r7, #16
 8000fd4:	22b8      	movs	r2, #184	@ 0xb8
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f008 fb05 	bl	80095e8 <memset>
  if(huart->Instance==USART3)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a59      	ldr	r2, [pc, #356]	@ (8001148 <HAL_UART_MspInit+0x190>)
 8000fe4:	4293      	cmp	r3, r2
 8000fe6:	f040 80ab 	bne.w	8001140 <HAL_UART_MspInit+0x188>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fea:	f04f 0202 	mov.w	r2, #2
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4618      	mov	r0, r3
 8001002:	f004 fb81 	bl	8005708 <HAL_RCCEx_PeriphCLKConfig>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <HAL_UART_MspInit+0x58>
    {
      Error_Handler();
 800100c:	f7ff ffb4 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001010:	4b4e      	ldr	r3, [pc, #312]	@ (800114c <HAL_UART_MspInit+0x194>)
 8001012:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001016:	4a4d      	ldr	r2, [pc, #308]	@ (800114c <HAL_UART_MspInit+0x194>)
 8001018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800101c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001020:	4b4a      	ldr	r3, [pc, #296]	@ (800114c <HAL_UART_MspInit+0x194>)
 8001022:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001026:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800102e:	4b47      	ldr	r3, [pc, #284]	@ (800114c <HAL_UART_MspInit+0x194>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a45      	ldr	r2, [pc, #276]	@ (800114c <HAL_UART_MspInit+0x194>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b43      	ldr	r3, [pc, #268]	@ (800114c <HAL_UART_MspInit+0x194>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800104c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001050:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001054:	2302      	movs	r3, #2
 8001056:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001066:	2307      	movs	r3, #7
 8001068:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8001070:	4619      	mov	r1, r3
 8001072:	4837      	ldr	r0, [pc, #220]	@ (8001150 <HAL_UART_MspInit+0x198>)
 8001074:	f003 f9e6 	bl	8004444 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001078:	4b36      	ldr	r3, [pc, #216]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 800107a:	4a37      	ldr	r2, [pc, #220]	@ (8001158 <HAL_UART_MspInit+0x1a0>)
 800107c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 800107e:	4b35      	ldr	r3, [pc, #212]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 8001080:	222d      	movs	r2, #45	@ 0x2d
 8001082:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001084:	4b33      	ldr	r3, [pc, #204]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 8001086:	2200      	movs	r2, #0
 8001088:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800108a:	4b32      	ldr	r3, [pc, #200]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 800108c:	2200      	movs	r2, #0
 800108e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001090:	4b30      	ldr	r3, [pc, #192]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 8001092:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001096:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001098:	4b2e      	ldr	r3, [pc, #184]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 800109a:	2200      	movs	r2, #0
 800109c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800109e:	4b2d      	ldr	r3, [pc, #180]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80010a4:	4b2b      	ldr	r3, [pc, #172]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 80010a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80010aa:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80010ac:	4b29      	ldr	r3, [pc, #164]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010b2:	4b28      	ldr	r3, [pc, #160]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80010b8:	4826      	ldr	r0, [pc, #152]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 80010ba:	f000 fb7f 	bl	80017bc <HAL_DMA_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <HAL_UART_MspInit+0x110>
    {
      Error_Handler();
 80010c4:	f7ff ff58 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	4a22      	ldr	r2, [pc, #136]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 80010cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80010d0:	4a20      	ldr	r2, [pc, #128]	@ (8001154 <HAL_UART_MspInit+0x19c>)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream1;
 80010d6:	4b21      	ldr	r3, [pc, #132]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 80010d8:	4a21      	ldr	r2, [pc, #132]	@ (8001160 <HAL_UART_MspInit+0x1a8>)
 80010da:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80010dc:	4b1f      	ldr	r3, [pc, #124]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 80010de:	222e      	movs	r2, #46	@ 0x2e
 80010e0:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010e2:	4b1e      	ldr	r3, [pc, #120]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 80010e4:	2240      	movs	r2, #64	@ 0x40
 80010e6:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 80010f0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010f4:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80010f6:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80010fc:	4b17      	ldr	r3, [pc, #92]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001102:	4b16      	ldr	r3, [pc, #88]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 8001104:	2200      	movs	r2, #0
 8001106:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001108:	4b14      	ldr	r3, [pc, #80]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 800110a:	2200      	movs	r2, #0
 800110c:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800110e:	4b13      	ldr	r3, [pc, #76]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 8001110:	2200      	movs	r2, #0
 8001112:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001114:	4811      	ldr	r0, [pc, #68]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 8001116:	f000 fb51 	bl	80017bc <HAL_DMA_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x16c>
    {
      Error_Handler();
 8001120:	f7ff ff2a 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a0d      	ldr	r2, [pc, #52]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 8001128:	67da      	str	r2, [r3, #124]	@ 0x7c
 800112a:	4a0c      	ldr	r2, [pc, #48]	@ (800115c <HAL_UART_MspInit+0x1a4>)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2103      	movs	r1, #3
 8001134:	2027      	movs	r0, #39	@ 0x27
 8001136:	f000 fa94 	bl	8001662 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800113a:	2027      	movs	r0, #39	@ 0x27
 800113c:	f000 faab 	bl	8001696 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001140:	bf00      	nop
 8001142:	37e0      	adds	r7, #224	@ 0xe0
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40004800 	.word	0x40004800
 800114c:	58024400 	.word	0x58024400
 8001150:	58020400 	.word	0x58020400
 8001154:	240008a8 	.word	0x240008a8
 8001158:	40020010 	.word	0x40020010
 800115c:	24000920 	.word	0x24000920
 8001160:	40020028 	.word	0x40020028

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800119a:	b480      	push	{r7}
 800119c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800119e:	bf00      	nop
 80011a0:	46bd      	mov	sp, r7
 80011a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a6:	4770      	bx	lr

080011a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011ac:	bf00      	nop
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr
	...

080011b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80011bc:	4802      	ldr	r0, [pc, #8]	@ (80011c8 <DMA1_Stream0_IRQHandler+0x10>)
 80011be:	f001 fe23 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	240008a8 	.word	0x240008a8

080011cc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80011d0:	4802      	ldr	r0, [pc, #8]	@ (80011dc <DMA1_Stream1_IRQHandler+0x10>)
 80011d2:	f001 fe19 	bl	8002e08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	24000920 	.word	0x24000920

080011e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80011e4:	4802      	ldr	r0, [pc, #8]	@ (80011f0 <USART3_IRQHandler+0x10>)
 80011e6:	f006 fa03 	bl	80075f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, &data,1);
  //U_Blox_Receive_Data(data);
  /* USER CODE END USART3_IRQn 1 */
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	24000814 	.word	0x24000814

080011f4 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]

   //U_Blox_Receive_5_Byte(uart_buffer);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80011fc:	bf00      	nop
 80011fe:	370c      	adds	r7, #12
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr

08001208 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001208:	b480      	push	{r7}
 800120a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800120c:	4b32      	ldr	r3, [pc, #200]	@ (80012d8 <SystemInit+0xd0>)
 800120e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001212:	4a31      	ldr	r2, [pc, #196]	@ (80012d8 <SystemInit+0xd0>)
 8001214:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001218:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800121c:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <SystemInit+0xd4>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 030f 	and.w	r3, r3, #15
 8001224:	2b06      	cmp	r3, #6
 8001226:	d807      	bhi.n	8001238 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001228:	4b2c      	ldr	r3, [pc, #176]	@ (80012dc <SystemInit+0xd4>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f023 030f 	bic.w	r3, r3, #15
 8001230:	4a2a      	ldr	r2, [pc, #168]	@ (80012dc <SystemInit+0xd4>)
 8001232:	f043 0307 	orr.w	r3, r3, #7
 8001236:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001238:	4b29      	ldr	r3, [pc, #164]	@ (80012e0 <SystemInit+0xd8>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a28      	ldr	r2, [pc, #160]	@ (80012e0 <SystemInit+0xd8>)
 800123e:	f043 0301 	orr.w	r3, r3, #1
 8001242:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001244:	4b26      	ldr	r3, [pc, #152]	@ (80012e0 <SystemInit+0xd8>)
 8001246:	2200      	movs	r2, #0
 8001248:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800124a:	4b25      	ldr	r3, [pc, #148]	@ (80012e0 <SystemInit+0xd8>)
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	4924      	ldr	r1, [pc, #144]	@ (80012e0 <SystemInit+0xd8>)
 8001250:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <SystemInit+0xdc>)
 8001252:	4013      	ands	r3, r2
 8001254:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001256:	4b21      	ldr	r3, [pc, #132]	@ (80012dc <SystemInit+0xd4>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d007      	beq.n	8001272 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001262:	4b1e      	ldr	r3, [pc, #120]	@ (80012dc <SystemInit+0xd4>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f023 030f 	bic.w	r3, r3, #15
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <SystemInit+0xd4>)
 800126c:	f043 0307 	orr.w	r3, r3, #7
 8001270:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001272:	4b1b      	ldr	r3, [pc, #108]	@ (80012e0 <SystemInit+0xd8>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001278:	4b19      	ldr	r3, [pc, #100]	@ (80012e0 <SystemInit+0xd8>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800127e:	4b18      	ldr	r3, [pc, #96]	@ (80012e0 <SystemInit+0xd8>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001284:	4b16      	ldr	r3, [pc, #88]	@ (80012e0 <SystemInit+0xd8>)
 8001286:	4a18      	ldr	r2, [pc, #96]	@ (80012e8 <SystemInit+0xe0>)
 8001288:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <SystemInit+0xd8>)
 800128c:	4a17      	ldr	r2, [pc, #92]	@ (80012ec <SystemInit+0xe4>)
 800128e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001290:	4b13      	ldr	r3, [pc, #76]	@ (80012e0 <SystemInit+0xd8>)
 8001292:	4a17      	ldr	r2, [pc, #92]	@ (80012f0 <SystemInit+0xe8>)
 8001294:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001296:	4b12      	ldr	r3, [pc, #72]	@ (80012e0 <SystemInit+0xd8>)
 8001298:	2200      	movs	r2, #0
 800129a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800129c:	4b10      	ldr	r3, [pc, #64]	@ (80012e0 <SystemInit+0xd8>)
 800129e:	4a14      	ldr	r2, [pc, #80]	@ (80012f0 <SystemInit+0xe8>)
 80012a0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <SystemInit+0xd8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80012a8:	4b0d      	ldr	r3, [pc, #52]	@ (80012e0 <SystemInit+0xd8>)
 80012aa:	4a11      	ldr	r2, [pc, #68]	@ (80012f0 <SystemInit+0xe8>)
 80012ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80012ae:	4b0c      	ldr	r3, [pc, #48]	@ (80012e0 <SystemInit+0xd8>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80012b4:	4b0a      	ldr	r3, [pc, #40]	@ (80012e0 <SystemInit+0xd8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4a09      	ldr	r2, [pc, #36]	@ (80012e0 <SystemInit+0xd8>)
 80012ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012be:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80012c0:	4b07      	ldr	r3, [pc, #28]	@ (80012e0 <SystemInit+0xd8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80012c6:	4b0b      	ldr	r3, [pc, #44]	@ (80012f4 <SystemInit+0xec>)
 80012c8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80012cc:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80012ce:	bf00      	nop
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	e000ed00 	.word	0xe000ed00
 80012dc:	52002000 	.word	0x52002000
 80012e0:	58024400 	.word	0x58024400
 80012e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80012e8:	02020200 	.word	0x02020200
 80012ec:	01ff0000 	.word	0x01ff0000
 80012f0:	01010280 	.word	0x01010280
 80012f4:	52004000 	.word	0x52004000

080012f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80012f8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001330 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80012fc:	f7ff ff84 	bl	8001208 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001300:	480c      	ldr	r0, [pc, #48]	@ (8001334 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001302:	490d      	ldr	r1, [pc, #52]	@ (8001338 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001304:	4a0d      	ldr	r2, [pc, #52]	@ (800133c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001308:	e002      	b.n	8001310 <LoopCopyDataInit>

0800130a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800130a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800130c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800130e:	3304      	adds	r3, #4

08001310 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001310:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001312:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001314:	d3f9      	bcc.n	800130a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001316:	4a0a      	ldr	r2, [pc, #40]	@ (8001340 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001318:	4c0a      	ldr	r4, [pc, #40]	@ (8001344 <LoopFillZerobss+0x22>)
  movs r3, #0
 800131a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800131c:	e001      	b.n	8001322 <LoopFillZerobss>

0800131e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800131e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001320:	3204      	adds	r2, #4

08001322 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001322:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001324:	d3fb      	bcc.n	800131e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001326:	f008 f967 	bl	80095f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800132a:	f7ff fc7d 	bl	8000c28 <main>
  bx  lr
 800132e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001330:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001334:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001338:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800133c:	080096c4 	.word	0x080096c4
  ldr r2, =_sbss
 8001340:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001344:	240009c0 	.word	0x240009c0

08001348 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001348:	e7fe      	b.n	8001348 <ADC3_IRQHandler>
	...

0800134c <SystickGetMs>:
#include "stm32h7xx.h"

static uint32_t ms;

 uint32_t SystickGetMs()
 {
 800134c:	b480      	push	{r7}
 800134e:	af00      	add	r7, sp, #0
   return ms;
 8001350:	4b03      	ldr	r3, [pc, #12]	@ (8001360 <SystickGetMs+0x14>)
 8001352:	681b      	ldr	r3, [r3, #0]
 }
 8001354:	4618      	mov	r0, r3
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	240009b8 	.word	0x240009b8

08001364 <SystickCheckMs>:


 uint8_t SystickCheckMs(uint32_t reference,uint32_t time_passed)
 {
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	6039      	str	r1, [r7, #0]
   if((ms-reference)>=time_passed)
 800136e:	4b08      	ldr	r3, [pc, #32]	@ (8001390 <SystickCheckMs+0x2c>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	683a      	ldr	r2, [r7, #0]
 8001378:	429a      	cmp	r2, r3
 800137a:	d801      	bhi.n	8001380 <SystickCheckMs+0x1c>
	   return 1;
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <SystickCheckMs+0x1e>
   else
	  return 0;
 8001380:	2300      	movs	r3, #0
 }
 8001382:	4618      	mov	r0, r3
 8001384:	370c      	adds	r7, #12
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
 800138e:	bf00      	nop
 8001390:	240009b8 	.word	0x240009b8

08001394 <SysTick_Handler>:


 void SysTick_Handler(void)
 {
 8001394:	b480      	push	{r7}
 8001396:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN SysTick_IRQn 0 */
    ms++;
 8001398:	4b04      	ldr	r3, [pc, #16]	@ (80013ac <SysTick_Handler+0x18>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	3301      	adds	r3, #1
 800139e:	4a03      	ldr	r2, [pc, #12]	@ (80013ac <SysTick_Handler+0x18>)
 80013a0:	6013      	str	r3, [r2, #0]


   /* USER CODE BEGIN SysTick_IRQn 1 */

   /* USER CODE END SysTick_IRQn 1 */
 }
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	240009b8 	.word	0x240009b8

080013b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013b6:	2003      	movs	r0, #3
 80013b8:	f000 f948 	bl	800164c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013bc:	f003 ffce 	bl	800535c <HAL_RCC_GetSysClockFreq>
 80013c0:	4602      	mov	r2, r0
 80013c2:	4b15      	ldr	r3, [pc, #84]	@ (8001418 <HAL_Init+0x68>)
 80013c4:	699b      	ldr	r3, [r3, #24]
 80013c6:	0a1b      	lsrs	r3, r3, #8
 80013c8:	f003 030f 	and.w	r3, r3, #15
 80013cc:	4913      	ldr	r1, [pc, #76]	@ (800141c <HAL_Init+0x6c>)
 80013ce:	5ccb      	ldrb	r3, [r1, r3]
 80013d0:	f003 031f 	and.w	r3, r3, #31
 80013d4:	fa22 f303 	lsr.w	r3, r2, r3
 80013d8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013da:	4b0f      	ldr	r3, [pc, #60]	@ (8001418 <HAL_Init+0x68>)
 80013dc:	699b      	ldr	r3, [r3, #24]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	4a0e      	ldr	r2, [pc, #56]	@ (800141c <HAL_Init+0x6c>)
 80013e4:	5cd3      	ldrb	r3, [r2, r3]
 80013e6:	f003 031f 	and.w	r3, r3, #31
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	fa22 f303 	lsr.w	r3, r2, r3
 80013f0:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_Init+0x70>)
 80013f2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013f4:	4a0b      	ldr	r2, [pc, #44]	@ (8001424 <HAL_Init+0x74>)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013fa:	200f      	movs	r0, #15
 80013fc:	f000 f814 	bl	8001428 <HAL_InitTick>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001406:	2301      	movs	r3, #1
 8001408:	e002      	b.n	8001410 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800140a:	f7ff fdbb 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3708      	adds	r7, #8
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}
 8001418:	58024400 	.word	0x58024400
 800141c:	08009674 	.word	0x08009674
 8001420:	24000004 	.word	0x24000004
 8001424:	24000000 	.word	0x24000000

08001428 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001430:	4b15      	ldr	r3, [pc, #84]	@ (8001488 <HAL_InitTick+0x60>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d101      	bne.n	800143c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
 800143a:	e021      	b.n	8001480 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800143c:	4b13      	ldr	r3, [pc, #76]	@ (800148c <HAL_InitTick+0x64>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4b11      	ldr	r3, [pc, #68]	@ (8001488 <HAL_InitTick+0x60>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	4619      	mov	r1, r3
 8001446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800144a:	fbb3 f3f1 	udiv	r3, r3, r1
 800144e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001452:	4618      	mov	r0, r3
 8001454:	f000 f92d 	bl	80016b2 <HAL_SYSTICK_Config>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800145e:	2301      	movs	r3, #1
 8001460:	e00e      	b.n	8001480 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2b0f      	cmp	r3, #15
 8001466:	d80a      	bhi.n	800147e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001468:	2200      	movs	r2, #0
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	f04f 30ff 	mov.w	r0, #4294967295
 8001470:	f000 f8f7 	bl	8001662 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001474:	4a06      	ldr	r2, [pc, #24]	@ (8001490 <HAL_InitTick+0x68>)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	e000      	b.n	8001480 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
}
 8001480:	4618      	mov	r0, r3
 8001482:	3708      	adds	r7, #8
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	2400000c 	.word	0x2400000c
 800148c:	24000000 	.word	0x24000000
 8001490:	24000008 	.word	0x24000008

08001494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  return uwTick;
 8001498:	4b03      	ldr	r3, [pc, #12]	@ (80014a8 <HAL_GetTick+0x14>)
 800149a:	681b      	ldr	r3, [r3, #0]
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	240009bc 	.word	0x240009bc

080014ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	f003 0307 	and.w	r3, r3, #7
 80014ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <__NVIC_SetPriorityGrouping+0x40>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c2:	68ba      	ldr	r2, [r7, #8]
 80014c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014c8:	4013      	ands	r3, r2
 80014ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <__NVIC_SetPriorityGrouping+0x44>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014da:	4a04      	ldr	r2, [pc, #16]	@ (80014ec <__NVIC_SetPriorityGrouping+0x40>)
 80014dc:	68bb      	ldr	r3, [r7, #8]
 80014de:	60d3      	str	r3, [r2, #12]
}
 80014e0:	bf00      	nop
 80014e2:	3714      	adds	r7, #20
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00
 80014f0:	05fa0000 	.word	0x05fa0000

080014f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014f8:	4b04      	ldr	r3, [pc, #16]	@ (800150c <__NVIC_GetPriorityGrouping+0x18>)
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	0a1b      	lsrs	r3, r3, #8
 80014fe:	f003 0307 	and.w	r3, r3, #7
}
 8001502:	4618      	mov	r0, r3
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr
 800150c:	e000ed00 	.word	0xe000ed00

08001510 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800151a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800151e:	2b00      	cmp	r3, #0
 8001520:	db0b      	blt.n	800153a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001522:	88fb      	ldrh	r3, [r7, #6]
 8001524:	f003 021f 	and.w	r2, r3, #31
 8001528:	4907      	ldr	r1, [pc, #28]	@ (8001548 <__NVIC_EnableIRQ+0x38>)
 800152a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800152e:	095b      	lsrs	r3, r3, #5
 8001530:	2001      	movs	r0, #1
 8001532:	fa00 f202 	lsl.w	r2, r0, r2
 8001536:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800153a:	bf00      	nop
 800153c:	370c      	adds	r7, #12
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	e000e100 	.word	0xe000e100

0800154c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	6039      	str	r1, [r7, #0]
 8001556:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155c:	2b00      	cmp	r3, #0
 800155e:	db0a      	blt.n	8001576 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	b2da      	uxtb	r2, r3
 8001564:	490c      	ldr	r1, [pc, #48]	@ (8001598 <__NVIC_SetPriority+0x4c>)
 8001566:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156a:	0112      	lsls	r2, r2, #4
 800156c:	b2d2      	uxtb	r2, r2
 800156e:	440b      	add	r3, r1
 8001570:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001574:	e00a      	b.n	800158c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4908      	ldr	r1, [pc, #32]	@ (800159c <__NVIC_SetPriority+0x50>)
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	f003 030f 	and.w	r3, r3, #15
 8001582:	3b04      	subs	r3, #4
 8001584:	0112      	lsls	r2, r2, #4
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	440b      	add	r3, r1
 800158a:	761a      	strb	r2, [r3, #24]
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	e000e100 	.word	0xe000e100
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b089      	sub	sp, #36	@ 0x24
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	60f8      	str	r0, [r7, #12]
 80015a8:	60b9      	str	r1, [r7, #8]
 80015aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f1c3 0307 	rsb	r3, r3, #7
 80015ba:	2b04      	cmp	r3, #4
 80015bc:	bf28      	it	cs
 80015be:	2304      	movcs	r3, #4
 80015c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015c2:	69fb      	ldr	r3, [r7, #28]
 80015c4:	3304      	adds	r3, #4
 80015c6:	2b06      	cmp	r3, #6
 80015c8:	d902      	bls.n	80015d0 <NVIC_EncodePriority+0x30>
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	3b03      	subs	r3, #3
 80015ce:	e000      	b.n	80015d2 <NVIC_EncodePriority+0x32>
 80015d0:	2300      	movs	r3, #0
 80015d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d4:	f04f 32ff 	mov.w	r2, #4294967295
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	fa02 f303 	lsl.w	r3, r2, r3
 80015de:	43da      	mvns	r2, r3
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	401a      	ands	r2, r3
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015e8:	f04f 31ff 	mov.w	r1, #4294967295
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	fa01 f303 	lsl.w	r3, r1, r3
 80015f2:	43d9      	mvns	r1, r3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	4313      	orrs	r3, r2
         );
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3724      	adds	r7, #36	@ 0x24
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
	...

08001608 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001618:	d301      	bcc.n	800161e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800161a:	2301      	movs	r3, #1
 800161c:	e00f      	b.n	800163e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800161e:	4a0a      	ldr	r2, [pc, #40]	@ (8001648 <SysTick_Config+0x40>)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	3b01      	subs	r3, #1
 8001624:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001626:	210f      	movs	r1, #15
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	f7ff ff8e 	bl	800154c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001630:	4b05      	ldr	r3, [pc, #20]	@ (8001648 <SysTick_Config+0x40>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001636:	4b04      	ldr	r3, [pc, #16]	@ (8001648 <SysTick_Config+0x40>)
 8001638:	2207      	movs	r2, #7
 800163a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800163c:	2300      	movs	r3, #0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	e000e010 	.word	0xe000e010

0800164c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001654:	6878      	ldr	r0, [r7, #4]
 8001656:	f7ff ff29 	bl	80014ac <__NVIC_SetPriorityGrouping>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b086      	sub	sp, #24
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
 800166e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001670:	f7ff ff40 	bl	80014f4 <__NVIC_GetPriorityGrouping>
 8001674:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	68b9      	ldr	r1, [r7, #8]
 800167a:	6978      	ldr	r0, [r7, #20]
 800167c:	f7ff ff90 	bl	80015a0 <NVIC_EncodePriority>
 8001680:	4602      	mov	r2, r0
 8001682:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001686:	4611      	mov	r1, r2
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff5f 	bl	800154c <__NVIC_SetPriority>
}
 800168e:	bf00      	nop
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	4603      	mov	r3, r0
 800169e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f7ff ff33 	bl	8001510 <__NVIC_EnableIRQ>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}

080016b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016b2:	b580      	push	{r7, lr}
 80016b4:	b082      	sub	sp, #8
 80016b6:	af00      	add	r7, sp, #0
 80016b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffa4 	bl	8001608 <SysTick_Config>
 80016c0:	4603      	mov	r3, r0
}
 80016c2:	4618      	mov	r0, r3
 80016c4:	3708      	adds	r7, #8
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
	...

080016cc <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80016d0:	f3bf 8f5f 	dmb	sy
}
 80016d4:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80016d6:	4b07      	ldr	r3, [pc, #28]	@ (80016f4 <HAL_MPU_Disable+0x28>)
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	4a06      	ldr	r2, [pc, #24]	@ (80016f4 <HAL_MPU_Disable+0x28>)
 80016dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016e0:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80016e2:	4b05      	ldr	r3, [pc, #20]	@ (80016f8 <HAL_MPU_Disable+0x2c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	e000ed00 	.word	0xe000ed00
 80016f8:	e000ed90 	.word	0xe000ed90

080016fc <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001704:	4a0b      	ldr	r2, [pc, #44]	@ (8001734 <HAL_MPU_Enable+0x38>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	f043 0301 	orr.w	r3, r3, #1
 800170c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800170e:	4b0a      	ldr	r3, [pc, #40]	@ (8001738 <HAL_MPU_Enable+0x3c>)
 8001710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001712:	4a09      	ldr	r2, [pc, #36]	@ (8001738 <HAL_MPU_Enable+0x3c>)
 8001714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001718:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800171a:	f3bf 8f4f 	dsb	sy
}
 800171e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001720:	f3bf 8f6f 	isb	sy
}
 8001724:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001726:	bf00      	nop
 8001728:	370c      	adds	r7, #12
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	e000ed90 	.word	0xe000ed90
 8001738:	e000ed00 	.word	0xe000ed00

0800173c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	785a      	ldrb	r2, [r3, #1]
 8001748:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <HAL_MPU_ConfigRegion+0x7c>)
 800174a:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800174c:	4b1a      	ldr	r3, [pc, #104]	@ (80017b8 <HAL_MPU_ConfigRegion+0x7c>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	4a19      	ldr	r2, [pc, #100]	@ (80017b8 <HAL_MPU_ConfigRegion+0x7c>)
 8001752:	f023 0301 	bic.w	r3, r3, #1
 8001756:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001758:	4a17      	ldr	r2, [pc, #92]	@ (80017b8 <HAL_MPU_ConfigRegion+0x7c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	7b1b      	ldrb	r3, [r3, #12]
 8001764:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7adb      	ldrb	r3, [r3, #11]
 800176a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800176c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7a9b      	ldrb	r3, [r3, #10]
 8001772:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8001774:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	7b5b      	ldrb	r3, [r3, #13]
 800177a:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800177c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	7b9b      	ldrb	r3, [r3, #14]
 8001782:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8001784:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	7bdb      	ldrb	r3, [r3, #15]
 800178a:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800178c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	7a5b      	ldrb	r3, [r3, #9]
 8001792:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8001794:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	7a1b      	ldrb	r3, [r3, #8]
 800179a:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800179c:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	7812      	ldrb	r2, [r2, #0]
 80017a2:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a4:	4a04      	ldr	r2, [pc, #16]	@ (80017b8 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80017a6:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80017a8:	6113      	str	r3, [r2, #16]
}
 80017aa:	bf00      	nop
 80017ac:	370c      	adds	r7, #12
 80017ae:	46bd      	mov	sp, r7
 80017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b4:	4770      	bx	lr
 80017b6:	bf00      	nop
 80017b8:	e000ed90 	.word	0xe000ed90

080017bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80017c4:	f7ff fe66 	bl	8001494 <HAL_GetTick>
 80017c8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d101      	bne.n	80017d4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e312      	b.n	8001dfa <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a66      	ldr	r2, [pc, #408]	@ (8001974 <HAL_DMA_Init+0x1b8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d04a      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a65      	ldr	r2, [pc, #404]	@ (8001978 <HAL_DMA_Init+0x1bc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d045      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a63      	ldr	r2, [pc, #396]	@ (800197c <HAL_DMA_Init+0x1c0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d040      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a62      	ldr	r2, [pc, #392]	@ (8001980 <HAL_DMA_Init+0x1c4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d03b      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a60      	ldr	r2, [pc, #384]	@ (8001984 <HAL_DMA_Init+0x1c8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d036      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a5f      	ldr	r2, [pc, #380]	@ (8001988 <HAL_DMA_Init+0x1cc>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d031      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a5d      	ldr	r2, [pc, #372]	@ (800198c <HAL_DMA_Init+0x1d0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d02c      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a5c      	ldr	r2, [pc, #368]	@ (8001990 <HAL_DMA_Init+0x1d4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d027      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a5a      	ldr	r2, [pc, #360]	@ (8001994 <HAL_DMA_Init+0x1d8>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d022      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a59      	ldr	r2, [pc, #356]	@ (8001998 <HAL_DMA_Init+0x1dc>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d01d      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a57      	ldr	r2, [pc, #348]	@ (800199c <HAL_DMA_Init+0x1e0>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d018      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4a56      	ldr	r2, [pc, #344]	@ (80019a0 <HAL_DMA_Init+0x1e4>)
 8001848:	4293      	cmp	r3, r2
 800184a:	d013      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a54      	ldr	r2, [pc, #336]	@ (80019a4 <HAL_DMA_Init+0x1e8>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d00e      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a53      	ldr	r2, [pc, #332]	@ (80019a8 <HAL_DMA_Init+0x1ec>)
 800185c:	4293      	cmp	r3, r2
 800185e:	d009      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a51      	ldr	r2, [pc, #324]	@ (80019ac <HAL_DMA_Init+0x1f0>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d004      	beq.n	8001874 <HAL_DMA_Init+0xb8>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a50      	ldr	r2, [pc, #320]	@ (80019b0 <HAL_DMA_Init+0x1f4>)
 8001870:	4293      	cmp	r3, r2
 8001872:	d101      	bne.n	8001878 <HAL_DMA_Init+0xbc>
 8001874:	2301      	movs	r3, #1
 8001876:	e000      	b.n	800187a <HAL_DMA_Init+0xbe>
 8001878:	2300      	movs	r3, #0
 800187a:	2b00      	cmp	r3, #0
 800187c:	f000 813c 	beq.w	8001af8 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2202      	movs	r2, #2
 8001884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a37      	ldr	r2, [pc, #220]	@ (8001974 <HAL_DMA_Init+0x1b8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d04a      	beq.n	8001930 <HAL_DMA_Init+0x174>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a36      	ldr	r2, [pc, #216]	@ (8001978 <HAL_DMA_Init+0x1bc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d045      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a34      	ldr	r2, [pc, #208]	@ (800197c <HAL_DMA_Init+0x1c0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d040      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a33      	ldr	r2, [pc, #204]	@ (8001980 <HAL_DMA_Init+0x1c4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d03b      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a31      	ldr	r2, [pc, #196]	@ (8001984 <HAL_DMA_Init+0x1c8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d036      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a30      	ldr	r2, [pc, #192]	@ (8001988 <HAL_DMA_Init+0x1cc>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d031      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a2e      	ldr	r2, [pc, #184]	@ (800198c <HAL_DMA_Init+0x1d0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02c      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a2d      	ldr	r2, [pc, #180]	@ (8001990 <HAL_DMA_Init+0x1d4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d027      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a2b      	ldr	r2, [pc, #172]	@ (8001994 <HAL_DMA_Init+0x1d8>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d022      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	4a2a      	ldr	r2, [pc, #168]	@ (8001998 <HAL_DMA_Init+0x1dc>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d01d      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a28      	ldr	r2, [pc, #160]	@ (800199c <HAL_DMA_Init+0x1e0>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d018      	beq.n	8001930 <HAL_DMA_Init+0x174>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a27      	ldr	r2, [pc, #156]	@ (80019a0 <HAL_DMA_Init+0x1e4>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d013      	beq.n	8001930 <HAL_DMA_Init+0x174>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	4a25      	ldr	r2, [pc, #148]	@ (80019a4 <HAL_DMA_Init+0x1e8>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d00e      	beq.n	8001930 <HAL_DMA_Init+0x174>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a24      	ldr	r2, [pc, #144]	@ (80019a8 <HAL_DMA_Init+0x1ec>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d009      	beq.n	8001930 <HAL_DMA_Init+0x174>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a22      	ldr	r2, [pc, #136]	@ (80019ac <HAL_DMA_Init+0x1f0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d004      	beq.n	8001930 <HAL_DMA_Init+0x174>
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a21      	ldr	r2, [pc, #132]	@ (80019b0 <HAL_DMA_Init+0x1f4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d108      	bne.n	8001942 <HAL_DMA_Init+0x186>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0201 	bic.w	r2, r2, #1
 800193e:	601a      	str	r2, [r3, #0]
 8001940:	e007      	b.n	8001952 <HAL_DMA_Init+0x196>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	681a      	ldr	r2, [r3, #0]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 0201 	bic.w	r2, r2, #1
 8001950:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001952:	e02f      	b.n	80019b4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001954:	f7ff fd9e 	bl	8001494 <HAL_GetTick>
 8001958:	4602      	mov	r2, r0
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	1ad3      	subs	r3, r2, r3
 800195e:	2b05      	cmp	r3, #5
 8001960:	d928      	bls.n	80019b4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2220      	movs	r2, #32
 8001966:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2203      	movs	r2, #3
 800196c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001970:	2301      	movs	r3, #1
 8001972:	e242      	b.n	8001dfa <HAL_DMA_Init+0x63e>
 8001974:	40020010 	.word	0x40020010
 8001978:	40020028 	.word	0x40020028
 800197c:	40020040 	.word	0x40020040
 8001980:	40020058 	.word	0x40020058
 8001984:	40020070 	.word	0x40020070
 8001988:	40020088 	.word	0x40020088
 800198c:	400200a0 	.word	0x400200a0
 8001990:	400200b8 	.word	0x400200b8
 8001994:	40020410 	.word	0x40020410
 8001998:	40020428 	.word	0x40020428
 800199c:	40020440 	.word	0x40020440
 80019a0:	40020458 	.word	0x40020458
 80019a4:	40020470 	.word	0x40020470
 80019a8:	40020488 	.word	0x40020488
 80019ac:	400204a0 	.word	0x400204a0
 80019b0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1c8      	bne.n	8001954 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019ca:	697a      	ldr	r2, [r7, #20]
 80019cc:	4b83      	ldr	r3, [pc, #524]	@ (8001bdc <HAL_DMA_Init+0x420>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80019da:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	691b      	ldr	r3, [r3, #16]
 80019e0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019e6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019f2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019fa:	697a      	ldr	r2, [r7, #20]
 80019fc:	4313      	orrs	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d107      	bne.n	8001a18 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a10:	4313      	orrs	r3, r2
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	2b28      	cmp	r3, #40	@ 0x28
 8001a1e:	d903      	bls.n	8001a28 <HAL_DMA_Init+0x26c>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2b2e      	cmp	r3, #46	@ 0x2e
 8001a26:	d91f      	bls.n	8001a68 <HAL_DMA_Init+0x2ac>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8001a2e:	d903      	bls.n	8001a38 <HAL_DMA_Init+0x27c>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	2b42      	cmp	r3, #66	@ 0x42
 8001a36:	d917      	bls.n	8001a68 <HAL_DMA_Init+0x2ac>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	2b46      	cmp	r3, #70	@ 0x46
 8001a3e:	d903      	bls.n	8001a48 <HAL_DMA_Init+0x28c>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	2b48      	cmp	r3, #72	@ 0x48
 8001a46:	d90f      	bls.n	8001a68 <HAL_DMA_Init+0x2ac>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	685b      	ldr	r3, [r3, #4]
 8001a4c:	2b4e      	cmp	r3, #78	@ 0x4e
 8001a4e:	d903      	bls.n	8001a58 <HAL_DMA_Init+0x29c>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	2b52      	cmp	r3, #82	@ 0x52
 8001a56:	d907      	bls.n	8001a68 <HAL_DMA_Init+0x2ac>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	685b      	ldr	r3, [r3, #4]
 8001a5c:	2b73      	cmp	r3, #115	@ 0x73
 8001a5e:	d905      	bls.n	8001a6c <HAL_DMA_Init+0x2b0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b77      	cmp	r3, #119	@ 0x77
 8001a66:	d801      	bhi.n	8001a6c <HAL_DMA_Init+0x2b0>
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e000      	b.n	8001a6e <HAL_DMA_Init+0x2b2>
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d003      	beq.n	8001a7a <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a72:	697b      	ldr	r3, [r7, #20]
 8001a74:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001a78:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	697a      	ldr	r2, [r7, #20]
 8001a80:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	695b      	ldr	r3, [r3, #20]
 8001a88:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f023 0307 	bic.w	r3, r3, #7
 8001a90:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aa0:	2b04      	cmp	r3, #4
 8001aa2:	d117      	bne.n	8001ad4 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d00e      	beq.n	8001ad4 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ab6:	6878      	ldr	r0, [r7, #4]
 8001ab8:	f002 fb3a 	bl	8004130 <DMA_CheckFifoParam>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d008      	beq.n	8001ad4 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2240      	movs	r2, #64	@ 0x40
 8001ac6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2201      	movs	r2, #1
 8001acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	e192      	b.n	8001dfa <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f002 fa75 	bl	8003fcc <DMA_CalcBaseAndBitshift>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aea:	f003 031f 	and.w	r3, r3, #31
 8001aee:	223f      	movs	r2, #63	@ 0x3f
 8001af0:	409a      	lsls	r2, r3
 8001af2:	68bb      	ldr	r3, [r7, #8]
 8001af4:	609a      	str	r2, [r3, #8]
 8001af6:	e0c8      	b.n	8001c8a <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a38      	ldr	r2, [pc, #224]	@ (8001be0 <HAL_DMA_Init+0x424>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d022      	beq.n	8001b48 <HAL_DMA_Init+0x38c>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a37      	ldr	r2, [pc, #220]	@ (8001be4 <HAL_DMA_Init+0x428>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d01d      	beq.n	8001b48 <HAL_DMA_Init+0x38c>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a35      	ldr	r2, [pc, #212]	@ (8001be8 <HAL_DMA_Init+0x42c>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d018      	beq.n	8001b48 <HAL_DMA_Init+0x38c>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a34      	ldr	r2, [pc, #208]	@ (8001bec <HAL_DMA_Init+0x430>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d013      	beq.n	8001b48 <HAL_DMA_Init+0x38c>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a32      	ldr	r2, [pc, #200]	@ (8001bf0 <HAL_DMA_Init+0x434>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d00e      	beq.n	8001b48 <HAL_DMA_Init+0x38c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a31      	ldr	r2, [pc, #196]	@ (8001bf4 <HAL_DMA_Init+0x438>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d009      	beq.n	8001b48 <HAL_DMA_Init+0x38c>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2f      	ldr	r2, [pc, #188]	@ (8001bf8 <HAL_DMA_Init+0x43c>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d004      	beq.n	8001b48 <HAL_DMA_Init+0x38c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a2e      	ldr	r2, [pc, #184]	@ (8001bfc <HAL_DMA_Init+0x440>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d101      	bne.n	8001b4c <HAL_DMA_Init+0x390>
 8001b48:	2301      	movs	r3, #1
 8001b4a:	e000      	b.n	8001b4e <HAL_DMA_Init+0x392>
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 8092 	beq.w	8001c78 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a21      	ldr	r2, [pc, #132]	@ (8001be0 <HAL_DMA_Init+0x424>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d021      	beq.n	8001ba2 <HAL_DMA_Init+0x3e6>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a20      	ldr	r2, [pc, #128]	@ (8001be4 <HAL_DMA_Init+0x428>)
 8001b64:	4293      	cmp	r3, r2
 8001b66:	d01c      	beq.n	8001ba2 <HAL_DMA_Init+0x3e6>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a1e      	ldr	r2, [pc, #120]	@ (8001be8 <HAL_DMA_Init+0x42c>)
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d017      	beq.n	8001ba2 <HAL_DMA_Init+0x3e6>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4a1d      	ldr	r2, [pc, #116]	@ (8001bec <HAL_DMA_Init+0x430>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d012      	beq.n	8001ba2 <HAL_DMA_Init+0x3e6>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a1b      	ldr	r2, [pc, #108]	@ (8001bf0 <HAL_DMA_Init+0x434>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d00d      	beq.n	8001ba2 <HAL_DMA_Init+0x3e6>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a1a      	ldr	r2, [pc, #104]	@ (8001bf4 <HAL_DMA_Init+0x438>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d008      	beq.n	8001ba2 <HAL_DMA_Init+0x3e6>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a18      	ldr	r2, [pc, #96]	@ (8001bf8 <HAL_DMA_Init+0x43c>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d003      	beq.n	8001ba2 <HAL_DMA_Init+0x3e6>
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a17      	ldr	r2, [pc, #92]	@ (8001bfc <HAL_DMA_Init+0x440>)
 8001ba0:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2202      	movs	r2, #2
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001bba:	697a      	ldr	r2, [r7, #20]
 8001bbc:	4b10      	ldr	r3, [pc, #64]	@ (8001c00 <HAL_DMA_Init+0x444>)
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	2b40      	cmp	r3, #64	@ 0x40
 8001bc8:	d01c      	beq.n	8001c04 <HAL_DMA_Init+0x448>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	2b80      	cmp	r3, #128	@ 0x80
 8001bd0:	d102      	bne.n	8001bd8 <HAL_DMA_Init+0x41c>
 8001bd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bd6:	e016      	b.n	8001c06 <HAL_DMA_Init+0x44a>
 8001bd8:	2300      	movs	r3, #0
 8001bda:	e014      	b.n	8001c06 <HAL_DMA_Init+0x44a>
 8001bdc:	fe10803f 	.word	0xfe10803f
 8001be0:	58025408 	.word	0x58025408
 8001be4:	5802541c 	.word	0x5802541c
 8001be8:	58025430 	.word	0x58025430
 8001bec:	58025444 	.word	0x58025444
 8001bf0:	58025458 	.word	0x58025458
 8001bf4:	5802546c 	.word	0x5802546c
 8001bf8:	58025480 	.word	0x58025480
 8001bfc:	58025494 	.word	0x58025494
 8001c00:	fffe000f 	.word	0xfffe000f
 8001c04:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	68d2      	ldr	r2, [r2, #12]
 8001c0a:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c0c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	691b      	ldr	r3, [r3, #16]
 8001c12:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001c14:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	695b      	ldr	r3, [r3, #20]
 8001c1a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001c1c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	699b      	ldr	r3, [r3, #24]
 8001c22:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001c24:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	69db      	ldr	r3, [r3, #28]
 8001c2a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001c2c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6a1b      	ldr	r3, [r3, #32]
 8001c32:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001c34:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001c36:	697a      	ldr	r2, [r7, #20]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	697a      	ldr	r2, [r7, #20]
 8001c42:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001e04 <HAL_DMA_Init+0x648>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	@ (8001e08 <HAL_DMA_Init+0x64c>)
 8001c50:	fba2 2303 	umull	r2, r3, r2, r3
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	009a      	lsls	r2, r3, #2
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f002 f9b5 	bl	8003fcc <DMA_CalcBaseAndBitshift>
 8001c62:	4603      	mov	r3, r0
 8001c64:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001c6a:	f003 031f 	and.w	r3, r3, #31
 8001c6e:	2201      	movs	r2, #1
 8001c70:	409a      	lsls	r2, r3
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	e008      	b.n	8001c8a <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2240      	movs	r2, #64	@ 0x40
 8001c7c:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2203      	movs	r2, #3
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e0b7      	b.n	8001dfa <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a5f      	ldr	r2, [pc, #380]	@ (8001e0c <HAL_DMA_Init+0x650>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d072      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a5d      	ldr	r2, [pc, #372]	@ (8001e10 <HAL_DMA_Init+0x654>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d06d      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e14 <HAL_DMA_Init+0x658>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d068      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a5a      	ldr	r2, [pc, #360]	@ (8001e18 <HAL_DMA_Init+0x65c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d063      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a59      	ldr	r2, [pc, #356]	@ (8001e1c <HAL_DMA_Init+0x660>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d05e      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a57      	ldr	r2, [pc, #348]	@ (8001e20 <HAL_DMA_Init+0x664>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d059      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a56      	ldr	r2, [pc, #344]	@ (8001e24 <HAL_DMA_Init+0x668>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d054      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a54      	ldr	r2, [pc, #336]	@ (8001e28 <HAL_DMA_Init+0x66c>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d04f      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a53      	ldr	r2, [pc, #332]	@ (8001e2c <HAL_DMA_Init+0x670>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d04a      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a51      	ldr	r2, [pc, #324]	@ (8001e30 <HAL_DMA_Init+0x674>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d045      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a50      	ldr	r2, [pc, #320]	@ (8001e34 <HAL_DMA_Init+0x678>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d040      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4e      	ldr	r2, [pc, #312]	@ (8001e38 <HAL_DMA_Init+0x67c>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d03b      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a4d      	ldr	r2, [pc, #308]	@ (8001e3c <HAL_DMA_Init+0x680>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d036      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a4b      	ldr	r2, [pc, #300]	@ (8001e40 <HAL_DMA_Init+0x684>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d031      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a4a      	ldr	r2, [pc, #296]	@ (8001e44 <HAL_DMA_Init+0x688>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d02c      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a48      	ldr	r2, [pc, #288]	@ (8001e48 <HAL_DMA_Init+0x68c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d027      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a47      	ldr	r2, [pc, #284]	@ (8001e4c <HAL_DMA_Init+0x690>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d022      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a45      	ldr	r2, [pc, #276]	@ (8001e50 <HAL_DMA_Init+0x694>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01d      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a44      	ldr	r2, [pc, #272]	@ (8001e54 <HAL_DMA_Init+0x698>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d018      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a42      	ldr	r2, [pc, #264]	@ (8001e58 <HAL_DMA_Init+0x69c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a41      	ldr	r2, [pc, #260]	@ (8001e5c <HAL_DMA_Init+0x6a0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d00e      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a3f      	ldr	r2, [pc, #252]	@ (8001e60 <HAL_DMA_Init+0x6a4>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d009      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3e      	ldr	r2, [pc, #248]	@ (8001e64 <HAL_DMA_Init+0x6a8>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d004      	beq.n	8001d7a <HAL_DMA_Init+0x5be>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a3c      	ldr	r2, [pc, #240]	@ (8001e68 <HAL_DMA_Init+0x6ac>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d101      	bne.n	8001d7e <HAL_DMA_Init+0x5c2>
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e000      	b.n	8001d80 <HAL_DMA_Init+0x5c4>
 8001d7e:	2300      	movs	r3, #0
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d032      	beq.n	8001dea <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f002 fa4f 	bl	8004228 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b80      	cmp	r3, #128	@ 0x80
 8001d90:	d102      	bne.n	8001d98 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685a      	ldr	r2, [r3, #4]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001da0:	b2d2      	uxtb	r2, r2
 8001da2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001dac:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d010      	beq.n	8001dd8 <HAL_DMA_Init+0x61c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	2b08      	cmp	r3, #8
 8001dbc:	d80c      	bhi.n	8001dd8 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f002 facc 	bl	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001dc8:	2200      	movs	r2, #0
 8001dca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001dd0:	687a      	ldr	r2, [r7, #4]
 8001dd2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	e008      	b.n	8001dea <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2200      	movs	r2, #0
 8001de8:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001df8:	2300      	movs	r3, #0
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	a7fdabf8 	.word	0xa7fdabf8
 8001e08:	cccccccd 	.word	0xcccccccd
 8001e0c:	40020010 	.word	0x40020010
 8001e10:	40020028 	.word	0x40020028
 8001e14:	40020040 	.word	0x40020040
 8001e18:	40020058 	.word	0x40020058
 8001e1c:	40020070 	.word	0x40020070
 8001e20:	40020088 	.word	0x40020088
 8001e24:	400200a0 	.word	0x400200a0
 8001e28:	400200b8 	.word	0x400200b8
 8001e2c:	40020410 	.word	0x40020410
 8001e30:	40020428 	.word	0x40020428
 8001e34:	40020440 	.word	0x40020440
 8001e38:	40020458 	.word	0x40020458
 8001e3c:	40020470 	.word	0x40020470
 8001e40:	40020488 	.word	0x40020488
 8001e44:	400204a0 	.word	0x400204a0
 8001e48:	400204b8 	.word	0x400204b8
 8001e4c:	58025408 	.word	0x58025408
 8001e50:	5802541c 	.word	0x5802541c
 8001e54:	58025430 	.word	0x58025430
 8001e58:	58025444 	.word	0x58025444
 8001e5c:	58025458 	.word	0x58025458
 8001e60:	5802546c 	.word	0x5802546c
 8001e64:	58025480 	.word	0x58025480
 8001e68:	58025494 	.word	0x58025494

08001e6c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	60f8      	str	r0, [r7, #12]
 8001e74:	60b9      	str	r1, [r7, #8]
 8001e76:	607a      	str	r2, [r7, #4]
 8001e78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d101      	bne.n	8001e88 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001e84:	2301      	movs	r3, #1
 8001e86:	e226      	b.n	80022d6 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_DMA_Start_IT+0x2a>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e21f      	b.n	80022d6 <HAL_DMA_Start_IT+0x46a>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	f040 820a 	bne.w	80022c0 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2202      	movs	r2, #2
 8001eb0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a68      	ldr	r2, [pc, #416]	@ (8002060 <HAL_DMA_Start_IT+0x1f4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d04a      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a66      	ldr	r2, [pc, #408]	@ (8002064 <HAL_DMA_Start_IT+0x1f8>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d045      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4a65      	ldr	r2, [pc, #404]	@ (8002068 <HAL_DMA_Start_IT+0x1fc>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d040      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a63      	ldr	r2, [pc, #396]	@ (800206c <HAL_DMA_Start_IT+0x200>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d03b      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a62      	ldr	r2, [pc, #392]	@ (8002070 <HAL_DMA_Start_IT+0x204>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d036      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a60      	ldr	r2, [pc, #384]	@ (8002074 <HAL_DMA_Start_IT+0x208>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d031      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5f      	ldr	r2, [pc, #380]	@ (8002078 <HAL_DMA_Start_IT+0x20c>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d02c      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f00:	68fb      	ldr	r3, [r7, #12]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a5d      	ldr	r2, [pc, #372]	@ (800207c <HAL_DMA_Start_IT+0x210>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d027      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a5c      	ldr	r2, [pc, #368]	@ (8002080 <HAL_DMA_Start_IT+0x214>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d022      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a5a      	ldr	r2, [pc, #360]	@ (8002084 <HAL_DMA_Start_IT+0x218>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d01d      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a59      	ldr	r2, [pc, #356]	@ (8002088 <HAL_DMA_Start_IT+0x21c>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d018      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a57      	ldr	r2, [pc, #348]	@ (800208c <HAL_DMA_Start_IT+0x220>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d013      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a56      	ldr	r2, [pc, #344]	@ (8002090 <HAL_DMA_Start_IT+0x224>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d00e      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a54      	ldr	r2, [pc, #336]	@ (8002094 <HAL_DMA_Start_IT+0x228>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d009      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a53      	ldr	r2, [pc, #332]	@ (8002098 <HAL_DMA_Start_IT+0x22c>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d004      	beq.n	8001f5a <HAL_DMA_Start_IT+0xee>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a51      	ldr	r2, [pc, #324]	@ (800209c <HAL_DMA_Start_IT+0x230>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d108      	bne.n	8001f6c <HAL_DMA_Start_IT+0x100>
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f022 0201 	bic.w	r2, r2, #1
 8001f68:	601a      	str	r2, [r3, #0]
 8001f6a:	e007      	b.n	8001f7c <HAL_DMA_Start_IT+0x110>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0201 	bic.w	r2, r2, #1
 8001f7a:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f001 fe76 	bl	8003c74 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a34      	ldr	r2, [pc, #208]	@ (8002060 <HAL_DMA_Start_IT+0x1f4>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d04a      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a33      	ldr	r2, [pc, #204]	@ (8002064 <HAL_DMA_Start_IT+0x1f8>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d045      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a31      	ldr	r2, [pc, #196]	@ (8002068 <HAL_DMA_Start_IT+0x1fc>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d040      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a30      	ldr	r2, [pc, #192]	@ (800206c <HAL_DMA_Start_IT+0x200>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d03b      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2e      	ldr	r2, [pc, #184]	@ (8002070 <HAL_DMA_Start_IT+0x204>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d036      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2d      	ldr	r2, [pc, #180]	@ (8002074 <HAL_DMA_Start_IT+0x208>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d031      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a2b      	ldr	r2, [pc, #172]	@ (8002078 <HAL_DMA_Start_IT+0x20c>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d02c      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a2a      	ldr	r2, [pc, #168]	@ (800207c <HAL_DMA_Start_IT+0x210>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d027      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a28      	ldr	r2, [pc, #160]	@ (8002080 <HAL_DMA_Start_IT+0x214>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d022      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a27      	ldr	r2, [pc, #156]	@ (8002084 <HAL_DMA_Start_IT+0x218>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d01d      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a25      	ldr	r2, [pc, #148]	@ (8002088 <HAL_DMA_Start_IT+0x21c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d018      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a24      	ldr	r2, [pc, #144]	@ (800208c <HAL_DMA_Start_IT+0x220>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d013      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a22      	ldr	r2, [pc, #136]	@ (8002090 <HAL_DMA_Start_IT+0x224>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d00e      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a21      	ldr	r2, [pc, #132]	@ (8002094 <HAL_DMA_Start_IT+0x228>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d009      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1f      	ldr	r2, [pc, #124]	@ (8002098 <HAL_DMA_Start_IT+0x22c>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d004      	beq.n	8002028 <HAL_DMA_Start_IT+0x1bc>
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1e      	ldr	r2, [pc, #120]	@ (800209c <HAL_DMA_Start_IT+0x230>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d101      	bne.n	800202c <HAL_DMA_Start_IT+0x1c0>
 8002028:	2301      	movs	r3, #1
 800202a:	e000      	b.n	800202e <HAL_DMA_Start_IT+0x1c2>
 800202c:	2300      	movs	r3, #0
 800202e:	2b00      	cmp	r3, #0
 8002030:	d036      	beq.n	80020a0 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f023 021e 	bic.w	r2, r3, #30
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	f042 0216 	orr.w	r2, r2, #22
 8002044:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204a:	2b00      	cmp	r3, #0
 800204c:	d03e      	beq.n	80020cc <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f042 0208 	orr.w	r2, r2, #8
 800205c:	601a      	str	r2, [r3, #0]
 800205e:	e035      	b.n	80020cc <HAL_DMA_Start_IT+0x260>
 8002060:	40020010 	.word	0x40020010
 8002064:	40020028 	.word	0x40020028
 8002068:	40020040 	.word	0x40020040
 800206c:	40020058 	.word	0x40020058
 8002070:	40020070 	.word	0x40020070
 8002074:	40020088 	.word	0x40020088
 8002078:	400200a0 	.word	0x400200a0
 800207c:	400200b8 	.word	0x400200b8
 8002080:	40020410 	.word	0x40020410
 8002084:	40020428 	.word	0x40020428
 8002088:	40020440 	.word	0x40020440
 800208c:	40020458 	.word	0x40020458
 8002090:	40020470 	.word	0x40020470
 8002094:	40020488 	.word	0x40020488
 8002098:	400204a0 	.word	0x400204a0
 800209c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f023 020e 	bic.w	r2, r3, #14
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 020a 	orr.w	r2, r2, #10
 80020b2:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d007      	beq.n	80020cc <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f042 0204 	orr.w	r2, r2, #4
 80020ca:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a83      	ldr	r2, [pc, #524]	@ (80022e0 <HAL_DMA_Start_IT+0x474>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d072      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a82      	ldr	r2, [pc, #520]	@ (80022e4 <HAL_DMA_Start_IT+0x478>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d06d      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a80      	ldr	r2, [pc, #512]	@ (80022e8 <HAL_DMA_Start_IT+0x47c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d068      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a7f      	ldr	r2, [pc, #508]	@ (80022ec <HAL_DMA_Start_IT+0x480>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d063      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a7d      	ldr	r2, [pc, #500]	@ (80022f0 <HAL_DMA_Start_IT+0x484>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d05e      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a7c      	ldr	r2, [pc, #496]	@ (80022f4 <HAL_DMA_Start_IT+0x488>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d059      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a7a      	ldr	r2, [pc, #488]	@ (80022f8 <HAL_DMA_Start_IT+0x48c>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d054      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a79      	ldr	r2, [pc, #484]	@ (80022fc <HAL_DMA_Start_IT+0x490>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d04f      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a77      	ldr	r2, [pc, #476]	@ (8002300 <HAL_DMA_Start_IT+0x494>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d04a      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a76      	ldr	r2, [pc, #472]	@ (8002304 <HAL_DMA_Start_IT+0x498>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d045      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a74      	ldr	r2, [pc, #464]	@ (8002308 <HAL_DMA_Start_IT+0x49c>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d040      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a73      	ldr	r2, [pc, #460]	@ (800230c <HAL_DMA_Start_IT+0x4a0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d03b      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a71      	ldr	r2, [pc, #452]	@ (8002310 <HAL_DMA_Start_IT+0x4a4>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d036      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a70      	ldr	r2, [pc, #448]	@ (8002314 <HAL_DMA_Start_IT+0x4a8>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d031      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a6e      	ldr	r2, [pc, #440]	@ (8002318 <HAL_DMA_Start_IT+0x4ac>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d02c      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a6d      	ldr	r2, [pc, #436]	@ (800231c <HAL_DMA_Start_IT+0x4b0>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d027      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6b      	ldr	r2, [pc, #428]	@ (8002320 <HAL_DMA_Start_IT+0x4b4>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d022      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a6a      	ldr	r2, [pc, #424]	@ (8002324 <HAL_DMA_Start_IT+0x4b8>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d01d      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a68      	ldr	r2, [pc, #416]	@ (8002328 <HAL_DMA_Start_IT+0x4bc>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d018      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a67      	ldr	r2, [pc, #412]	@ (800232c <HAL_DMA_Start_IT+0x4c0>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d013      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a65      	ldr	r2, [pc, #404]	@ (8002330 <HAL_DMA_Start_IT+0x4c4>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d00e      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a64      	ldr	r2, [pc, #400]	@ (8002334 <HAL_DMA_Start_IT+0x4c8>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d009      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a62      	ldr	r2, [pc, #392]	@ (8002338 <HAL_DMA_Start_IT+0x4cc>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d004      	beq.n	80021bc <HAL_DMA_Start_IT+0x350>
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4a61      	ldr	r2, [pc, #388]	@ (800233c <HAL_DMA_Start_IT+0x4d0>)
 80021b8:	4293      	cmp	r3, r2
 80021ba:	d101      	bne.n	80021c0 <HAL_DMA_Start_IT+0x354>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_DMA_Start_IT+0x356>
 80021c0:	2300      	movs	r3, #0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01a      	beq.n	80021fc <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d007      	beq.n	80021e4 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021e2:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80021fa:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a37      	ldr	r2, [pc, #220]	@ (80022e0 <HAL_DMA_Start_IT+0x474>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d04a      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a36      	ldr	r2, [pc, #216]	@ (80022e4 <HAL_DMA_Start_IT+0x478>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d045      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a34      	ldr	r2, [pc, #208]	@ (80022e8 <HAL_DMA_Start_IT+0x47c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d040      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a33      	ldr	r2, [pc, #204]	@ (80022ec <HAL_DMA_Start_IT+0x480>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d03b      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a31      	ldr	r2, [pc, #196]	@ (80022f0 <HAL_DMA_Start_IT+0x484>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d036      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a30      	ldr	r2, [pc, #192]	@ (80022f4 <HAL_DMA_Start_IT+0x488>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d031      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a2e      	ldr	r2, [pc, #184]	@ (80022f8 <HAL_DMA_Start_IT+0x48c>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d02c      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2d      	ldr	r2, [pc, #180]	@ (80022fc <HAL_DMA_Start_IT+0x490>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d027      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a2b      	ldr	r2, [pc, #172]	@ (8002300 <HAL_DMA_Start_IT+0x494>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d022      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a2a      	ldr	r2, [pc, #168]	@ (8002304 <HAL_DMA_Start_IT+0x498>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d01d      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a28      	ldr	r2, [pc, #160]	@ (8002308 <HAL_DMA_Start_IT+0x49c>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d018      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a27      	ldr	r2, [pc, #156]	@ (800230c <HAL_DMA_Start_IT+0x4a0>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d013      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a25      	ldr	r2, [pc, #148]	@ (8002310 <HAL_DMA_Start_IT+0x4a4>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00e      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a24      	ldr	r2, [pc, #144]	@ (8002314 <HAL_DMA_Start_IT+0x4a8>)
 8002284:	4293      	cmp	r3, r2
 8002286:	d009      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a22      	ldr	r2, [pc, #136]	@ (8002318 <HAL_DMA_Start_IT+0x4ac>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d004      	beq.n	800229c <HAL_DMA_Start_IT+0x430>
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a21      	ldr	r2, [pc, #132]	@ (800231c <HAL_DMA_Start_IT+0x4b0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d108      	bne.n	80022ae <HAL_DMA_Start_IT+0x442>
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 0201 	orr.w	r2, r2, #1
 80022aa:	601a      	str	r2, [r3, #0]
 80022ac:	e012      	b.n	80022d4 <HAL_DMA_Start_IT+0x468>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f042 0201 	orr.w	r2, r2, #1
 80022bc:	601a      	str	r2, [r3, #0]
 80022be:	e009      	b.n	80022d4 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022c6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80022d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40020010 	.word	0x40020010
 80022e4:	40020028 	.word	0x40020028
 80022e8:	40020040 	.word	0x40020040
 80022ec:	40020058 	.word	0x40020058
 80022f0:	40020070 	.word	0x40020070
 80022f4:	40020088 	.word	0x40020088
 80022f8:	400200a0 	.word	0x400200a0
 80022fc:	400200b8 	.word	0x400200b8
 8002300:	40020410 	.word	0x40020410
 8002304:	40020428 	.word	0x40020428
 8002308:	40020440 	.word	0x40020440
 800230c:	40020458 	.word	0x40020458
 8002310:	40020470 	.word	0x40020470
 8002314:	40020488 	.word	0x40020488
 8002318:	400204a0 	.word	0x400204a0
 800231c:	400204b8 	.word	0x400204b8
 8002320:	58025408 	.word	0x58025408
 8002324:	5802541c 	.word	0x5802541c
 8002328:	58025430 	.word	0x58025430
 800232c:	58025444 	.word	0x58025444
 8002330:	58025458 	.word	0x58025458
 8002334:	5802546c 	.word	0x5802546c
 8002338:	58025480 	.word	0x58025480
 800233c:	58025494 	.word	0x58025494

08002340 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b086      	sub	sp, #24
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002348:	f7ff f8a4 	bl	8001494 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e2dc      	b.n	8002912 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800235e:	b2db      	uxtb	r3, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d008      	beq.n	8002376 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2280      	movs	r2, #128	@ 0x80
 8002368:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e2cd      	b.n	8002912 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a76      	ldr	r2, [pc, #472]	@ (8002554 <HAL_DMA_Abort+0x214>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04a      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a74      	ldr	r2, [pc, #464]	@ (8002558 <HAL_DMA_Abort+0x218>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d045      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a73      	ldr	r2, [pc, #460]	@ (800255c <HAL_DMA_Abort+0x21c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a71      	ldr	r2, [pc, #452]	@ (8002560 <HAL_DMA_Abort+0x220>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d03b      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a70      	ldr	r2, [pc, #448]	@ (8002564 <HAL_DMA_Abort+0x224>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d036      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a6e      	ldr	r2, [pc, #440]	@ (8002568 <HAL_DMA_Abort+0x228>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a6d      	ldr	r2, [pc, #436]	@ (800256c <HAL_DMA_Abort+0x22c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d02c      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a6b      	ldr	r2, [pc, #428]	@ (8002570 <HAL_DMA_Abort+0x230>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a6a      	ldr	r2, [pc, #424]	@ (8002574 <HAL_DMA_Abort+0x234>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a68      	ldr	r2, [pc, #416]	@ (8002578 <HAL_DMA_Abort+0x238>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01d      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a67      	ldr	r2, [pc, #412]	@ (800257c <HAL_DMA_Abort+0x23c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a65      	ldr	r2, [pc, #404]	@ (8002580 <HAL_DMA_Abort+0x240>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a64      	ldr	r2, [pc, #400]	@ (8002584 <HAL_DMA_Abort+0x244>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a62      	ldr	r2, [pc, #392]	@ (8002588 <HAL_DMA_Abort+0x248>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a61      	ldr	r2, [pc, #388]	@ (800258c <HAL_DMA_Abort+0x24c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_Abort+0xd6>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a5f      	ldr	r2, [pc, #380]	@ (8002590 <HAL_DMA_Abort+0x250>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d101      	bne.n	800241a <HAL_DMA_Abort+0xda>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_DMA_Abort+0xdc>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d013      	beq.n	8002448 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f022 021e 	bic.w	r2, r2, #30
 800242e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695a      	ldr	r2, [r3, #20]
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800243e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	617b      	str	r3, [r7, #20]
 8002446:	e00a      	b.n	800245e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f022 020e 	bic.w	r2, r2, #14
 8002456:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a3c      	ldr	r2, [pc, #240]	@ (8002554 <HAL_DMA_Abort+0x214>)
 8002464:	4293      	cmp	r3, r2
 8002466:	d072      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4a3a      	ldr	r2, [pc, #232]	@ (8002558 <HAL_DMA_Abort+0x218>)
 800246e:	4293      	cmp	r3, r2
 8002470:	d06d      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a39      	ldr	r2, [pc, #228]	@ (800255c <HAL_DMA_Abort+0x21c>)
 8002478:	4293      	cmp	r3, r2
 800247a:	d068      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a37      	ldr	r2, [pc, #220]	@ (8002560 <HAL_DMA_Abort+0x220>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d063      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a36      	ldr	r2, [pc, #216]	@ (8002564 <HAL_DMA_Abort+0x224>)
 800248c:	4293      	cmp	r3, r2
 800248e:	d05e      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a34      	ldr	r2, [pc, #208]	@ (8002568 <HAL_DMA_Abort+0x228>)
 8002496:	4293      	cmp	r3, r2
 8002498:	d059      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a33      	ldr	r2, [pc, #204]	@ (800256c <HAL_DMA_Abort+0x22c>)
 80024a0:	4293      	cmp	r3, r2
 80024a2:	d054      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a31      	ldr	r2, [pc, #196]	@ (8002570 <HAL_DMA_Abort+0x230>)
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d04f      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a30      	ldr	r2, [pc, #192]	@ (8002574 <HAL_DMA_Abort+0x234>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d04a      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a2e      	ldr	r2, [pc, #184]	@ (8002578 <HAL_DMA_Abort+0x238>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d045      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a2d      	ldr	r2, [pc, #180]	@ (800257c <HAL_DMA_Abort+0x23c>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d040      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	4a2b      	ldr	r2, [pc, #172]	@ (8002580 <HAL_DMA_Abort+0x240>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d03b      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a2a      	ldr	r2, [pc, #168]	@ (8002584 <HAL_DMA_Abort+0x244>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d036      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a28      	ldr	r2, [pc, #160]	@ (8002588 <HAL_DMA_Abort+0x248>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d031      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a27      	ldr	r2, [pc, #156]	@ (800258c <HAL_DMA_Abort+0x24c>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d02c      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4a25      	ldr	r2, [pc, #148]	@ (8002590 <HAL_DMA_Abort+0x250>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d027      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a24      	ldr	r2, [pc, #144]	@ (8002594 <HAL_DMA_Abort+0x254>)
 8002504:	4293      	cmp	r3, r2
 8002506:	d022      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a22      	ldr	r2, [pc, #136]	@ (8002598 <HAL_DMA_Abort+0x258>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d01d      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a21      	ldr	r2, [pc, #132]	@ (800259c <HAL_DMA_Abort+0x25c>)
 8002518:	4293      	cmp	r3, r2
 800251a:	d018      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a1f      	ldr	r2, [pc, #124]	@ (80025a0 <HAL_DMA_Abort+0x260>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a1e      	ldr	r2, [pc, #120]	@ (80025a4 <HAL_DMA_Abort+0x264>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d00e      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a1c      	ldr	r2, [pc, #112]	@ (80025a8 <HAL_DMA_Abort+0x268>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1b      	ldr	r2, [pc, #108]	@ (80025ac <HAL_DMA_Abort+0x26c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d004      	beq.n	800254e <HAL_DMA_Abort+0x20e>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a19      	ldr	r2, [pc, #100]	@ (80025b0 <HAL_DMA_Abort+0x270>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d132      	bne.n	80025b4 <HAL_DMA_Abort+0x274>
 800254e:	2301      	movs	r3, #1
 8002550:	e031      	b.n	80025b6 <HAL_DMA_Abort+0x276>
 8002552:	bf00      	nop
 8002554:	40020010 	.word	0x40020010
 8002558:	40020028 	.word	0x40020028
 800255c:	40020040 	.word	0x40020040
 8002560:	40020058 	.word	0x40020058
 8002564:	40020070 	.word	0x40020070
 8002568:	40020088 	.word	0x40020088
 800256c:	400200a0 	.word	0x400200a0
 8002570:	400200b8 	.word	0x400200b8
 8002574:	40020410 	.word	0x40020410
 8002578:	40020428 	.word	0x40020428
 800257c:	40020440 	.word	0x40020440
 8002580:	40020458 	.word	0x40020458
 8002584:	40020470 	.word	0x40020470
 8002588:	40020488 	.word	0x40020488
 800258c:	400204a0 	.word	0x400204a0
 8002590:	400204b8 	.word	0x400204b8
 8002594:	58025408 	.word	0x58025408
 8002598:	5802541c 	.word	0x5802541c
 800259c:	58025430 	.word	0x58025430
 80025a0:	58025444 	.word	0x58025444
 80025a4:	58025458 	.word	0x58025458
 80025a8:	5802546c 	.word	0x5802546c
 80025ac:	58025480 	.word	0x58025480
 80025b0:	58025494 	.word	0x58025494
 80025b4:	2300      	movs	r3, #0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d007      	beq.n	80025ca <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80025c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a6d      	ldr	r2, [pc, #436]	@ (8002784 <HAL_DMA_Abort+0x444>)
 80025d0:	4293      	cmp	r3, r2
 80025d2:	d04a      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6b      	ldr	r2, [pc, #428]	@ (8002788 <HAL_DMA_Abort+0x448>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d045      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a6a      	ldr	r2, [pc, #424]	@ (800278c <HAL_DMA_Abort+0x44c>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d040      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a68      	ldr	r2, [pc, #416]	@ (8002790 <HAL_DMA_Abort+0x450>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d03b      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a67      	ldr	r2, [pc, #412]	@ (8002794 <HAL_DMA_Abort+0x454>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d036      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a65      	ldr	r2, [pc, #404]	@ (8002798 <HAL_DMA_Abort+0x458>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d031      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a64      	ldr	r2, [pc, #400]	@ (800279c <HAL_DMA_Abort+0x45c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d02c      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a62      	ldr	r2, [pc, #392]	@ (80027a0 <HAL_DMA_Abort+0x460>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d027      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a61      	ldr	r2, [pc, #388]	@ (80027a4 <HAL_DMA_Abort+0x464>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d022      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a5f      	ldr	r2, [pc, #380]	@ (80027a8 <HAL_DMA_Abort+0x468>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d01d      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a5e      	ldr	r2, [pc, #376]	@ (80027ac <HAL_DMA_Abort+0x46c>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d018      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a5c      	ldr	r2, [pc, #368]	@ (80027b0 <HAL_DMA_Abort+0x470>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5b      	ldr	r2, [pc, #364]	@ (80027b4 <HAL_DMA_Abort+0x474>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d00e      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a59      	ldr	r2, [pc, #356]	@ (80027b8 <HAL_DMA_Abort+0x478>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a58      	ldr	r2, [pc, #352]	@ (80027bc <HAL_DMA_Abort+0x47c>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d004      	beq.n	800266a <HAL_DMA_Abort+0x32a>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a56      	ldr	r2, [pc, #344]	@ (80027c0 <HAL_DMA_Abort+0x480>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d108      	bne.n	800267c <HAL_DMA_Abort+0x33c>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f022 0201 	bic.w	r2, r2, #1
 8002678:	601a      	str	r2, [r3, #0]
 800267a:	e007      	b.n	800268c <HAL_DMA_Abort+0x34c>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f022 0201 	bic.w	r2, r2, #1
 800268a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800268c:	e013      	b.n	80026b6 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800268e:	f7fe ff01 	bl	8001494 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	2b05      	cmp	r3, #5
 800269a:	d90c      	bls.n	80026b6 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2220      	movs	r2, #32
 80026a0:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2203      	movs	r2, #3
 80026a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e12d      	b.n	8002912 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f003 0301 	and.w	r3, r3, #1
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1e5      	bne.n	800268e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002784 <HAL_DMA_Abort+0x444>)
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d04a      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a2d      	ldr	r2, [pc, #180]	@ (8002788 <HAL_DMA_Abort+0x448>)
 80026d2:	4293      	cmp	r3, r2
 80026d4:	d045      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4a2c      	ldr	r2, [pc, #176]	@ (800278c <HAL_DMA_Abort+0x44c>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d040      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a2a      	ldr	r2, [pc, #168]	@ (8002790 <HAL_DMA_Abort+0x450>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d03b      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a29      	ldr	r2, [pc, #164]	@ (8002794 <HAL_DMA_Abort+0x454>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	d036      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a27      	ldr	r2, [pc, #156]	@ (8002798 <HAL_DMA_Abort+0x458>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d031      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a26      	ldr	r2, [pc, #152]	@ (800279c <HAL_DMA_Abort+0x45c>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d02c      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a24      	ldr	r2, [pc, #144]	@ (80027a0 <HAL_DMA_Abort+0x460>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d027      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <HAL_DMA_Abort+0x464>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d022      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a21      	ldr	r2, [pc, #132]	@ (80027a8 <HAL_DMA_Abort+0x468>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d01d      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a20      	ldr	r2, [pc, #128]	@ (80027ac <HAL_DMA_Abort+0x46c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d018      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1e      	ldr	r2, [pc, #120]	@ (80027b0 <HAL_DMA_Abort+0x470>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d013      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1d      	ldr	r2, [pc, #116]	@ (80027b4 <HAL_DMA_Abort+0x474>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d00e      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a1b      	ldr	r2, [pc, #108]	@ (80027b8 <HAL_DMA_Abort+0x478>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d009      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a1a      	ldr	r2, [pc, #104]	@ (80027bc <HAL_DMA_Abort+0x47c>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d004      	beq.n	8002762 <HAL_DMA_Abort+0x422>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a18      	ldr	r2, [pc, #96]	@ (80027c0 <HAL_DMA_Abort+0x480>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d101      	bne.n	8002766 <HAL_DMA_Abort+0x426>
 8002762:	2301      	movs	r3, #1
 8002764:	e000      	b.n	8002768 <HAL_DMA_Abort+0x428>
 8002766:	2300      	movs	r3, #0
 8002768:	2b00      	cmp	r3, #0
 800276a:	d02b      	beq.n	80027c4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002770:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002776:	f003 031f 	and.w	r3, r3, #31
 800277a:	223f      	movs	r2, #63	@ 0x3f
 800277c:	409a      	lsls	r2, r3
 800277e:	68bb      	ldr	r3, [r7, #8]
 8002780:	609a      	str	r2, [r3, #8]
 8002782:	e02a      	b.n	80027da <HAL_DMA_Abort+0x49a>
 8002784:	40020010 	.word	0x40020010
 8002788:	40020028 	.word	0x40020028
 800278c:	40020040 	.word	0x40020040
 8002790:	40020058 	.word	0x40020058
 8002794:	40020070 	.word	0x40020070
 8002798:	40020088 	.word	0x40020088
 800279c:	400200a0 	.word	0x400200a0
 80027a0:	400200b8 	.word	0x400200b8
 80027a4:	40020410 	.word	0x40020410
 80027a8:	40020428 	.word	0x40020428
 80027ac:	40020440 	.word	0x40020440
 80027b0:	40020458 	.word	0x40020458
 80027b4:	40020470 	.word	0x40020470
 80027b8:	40020488 	.word	0x40020488
 80027bc:	400204a0 	.word	0x400204a0
 80027c0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027c8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027ce:	f003 031f 	and.w	r3, r3, #31
 80027d2:	2201      	movs	r2, #1
 80027d4:	409a      	lsls	r2, r3
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a4f      	ldr	r2, [pc, #316]	@ (800291c <HAL_DMA_Abort+0x5dc>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d072      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a4d      	ldr	r2, [pc, #308]	@ (8002920 <HAL_DMA_Abort+0x5e0>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d06d      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a4c      	ldr	r2, [pc, #304]	@ (8002924 <HAL_DMA_Abort+0x5e4>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d068      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a4a      	ldr	r2, [pc, #296]	@ (8002928 <HAL_DMA_Abort+0x5e8>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d063      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a49      	ldr	r2, [pc, #292]	@ (800292c <HAL_DMA_Abort+0x5ec>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d05e      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a47      	ldr	r2, [pc, #284]	@ (8002930 <HAL_DMA_Abort+0x5f0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d059      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a46      	ldr	r2, [pc, #280]	@ (8002934 <HAL_DMA_Abort+0x5f4>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d054      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a44      	ldr	r2, [pc, #272]	@ (8002938 <HAL_DMA_Abort+0x5f8>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d04f      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a43      	ldr	r2, [pc, #268]	@ (800293c <HAL_DMA_Abort+0x5fc>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d04a      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	4a41      	ldr	r2, [pc, #260]	@ (8002940 <HAL_DMA_Abort+0x600>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d045      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a40      	ldr	r2, [pc, #256]	@ (8002944 <HAL_DMA_Abort+0x604>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d040      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a3e      	ldr	r2, [pc, #248]	@ (8002948 <HAL_DMA_Abort+0x608>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d03b      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a3d      	ldr	r2, [pc, #244]	@ (800294c <HAL_DMA_Abort+0x60c>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d036      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a3b      	ldr	r2, [pc, #236]	@ (8002950 <HAL_DMA_Abort+0x610>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d031      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a3a      	ldr	r2, [pc, #232]	@ (8002954 <HAL_DMA_Abort+0x614>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d02c      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a38      	ldr	r2, [pc, #224]	@ (8002958 <HAL_DMA_Abort+0x618>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d027      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a37      	ldr	r2, [pc, #220]	@ (800295c <HAL_DMA_Abort+0x61c>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d022      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	4a35      	ldr	r2, [pc, #212]	@ (8002960 <HAL_DMA_Abort+0x620>)
 800288a:	4293      	cmp	r3, r2
 800288c:	d01d      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a34      	ldr	r2, [pc, #208]	@ (8002964 <HAL_DMA_Abort+0x624>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d018      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	4a32      	ldr	r2, [pc, #200]	@ (8002968 <HAL_DMA_Abort+0x628>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d013      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a31      	ldr	r2, [pc, #196]	@ (800296c <HAL_DMA_Abort+0x62c>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d00e      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002970 <HAL_DMA_Abort+0x630>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d009      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002974 <HAL_DMA_Abort+0x634>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d004      	beq.n	80028ca <HAL_DMA_Abort+0x58a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002978 <HAL_DMA_Abort+0x638>)
 80028c6:	4293      	cmp	r3, r2
 80028c8:	d101      	bne.n	80028ce <HAL_DMA_Abort+0x58e>
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_DMA_Abort+0x590>
 80028ce:	2300      	movs	r3, #0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d015      	beq.n	8002900 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80028d8:	687a      	ldr	r2, [r7, #4]
 80028da:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80028dc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d00c      	beq.n	8002900 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028ea:	681a      	ldr	r2, [r3, #0]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80028f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80028f4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80028fe:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40020010 	.word	0x40020010
 8002920:	40020028 	.word	0x40020028
 8002924:	40020040 	.word	0x40020040
 8002928:	40020058 	.word	0x40020058
 800292c:	40020070 	.word	0x40020070
 8002930:	40020088 	.word	0x40020088
 8002934:	400200a0 	.word	0x400200a0
 8002938:	400200b8 	.word	0x400200b8
 800293c:	40020410 	.word	0x40020410
 8002940:	40020428 	.word	0x40020428
 8002944:	40020440 	.word	0x40020440
 8002948:	40020458 	.word	0x40020458
 800294c:	40020470 	.word	0x40020470
 8002950:	40020488 	.word	0x40020488
 8002954:	400204a0 	.word	0x400204a0
 8002958:	400204b8 	.word	0x400204b8
 800295c:	58025408 	.word	0x58025408
 8002960:	5802541c 	.word	0x5802541c
 8002964:	58025430 	.word	0x58025430
 8002968:	58025444 	.word	0x58025444
 800296c:	58025458 	.word	0x58025458
 8002970:	5802546c 	.word	0x5802546c
 8002974:	58025480 	.word	0x58025480
 8002978:	58025494 	.word	0x58025494

0800297c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d101      	bne.n	800298e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e237      	b.n	8002dfe <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b02      	cmp	r3, #2
 8002998:	d004      	beq.n	80029a4 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2280      	movs	r2, #128	@ 0x80
 800299e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e22c      	b.n	8002dfe <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a5c      	ldr	r2, [pc, #368]	@ (8002b1c <HAL_DMA_Abort_IT+0x1a0>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d04a      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a5b      	ldr	r2, [pc, #364]	@ (8002b20 <HAL_DMA_Abort_IT+0x1a4>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d045      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a59      	ldr	r2, [pc, #356]	@ (8002b24 <HAL_DMA_Abort_IT+0x1a8>)
 80029be:	4293      	cmp	r3, r2
 80029c0:	d040      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a58      	ldr	r2, [pc, #352]	@ (8002b28 <HAL_DMA_Abort_IT+0x1ac>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d03b      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a56      	ldr	r2, [pc, #344]	@ (8002b2c <HAL_DMA_Abort_IT+0x1b0>)
 80029d2:	4293      	cmp	r3, r2
 80029d4:	d036      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	4a55      	ldr	r2, [pc, #340]	@ (8002b30 <HAL_DMA_Abort_IT+0x1b4>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d031      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a53      	ldr	r2, [pc, #332]	@ (8002b34 <HAL_DMA_Abort_IT+0x1b8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d02c      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a52      	ldr	r2, [pc, #328]	@ (8002b38 <HAL_DMA_Abort_IT+0x1bc>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d027      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a50      	ldr	r2, [pc, #320]	@ (8002b3c <HAL_DMA_Abort_IT+0x1c0>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d022      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a4f      	ldr	r2, [pc, #316]	@ (8002b40 <HAL_DMA_Abort_IT+0x1c4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d01d      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a4d      	ldr	r2, [pc, #308]	@ (8002b44 <HAL_DMA_Abort_IT+0x1c8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d018      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a4c      	ldr	r2, [pc, #304]	@ (8002b48 <HAL_DMA_Abort_IT+0x1cc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d013      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a4a      	ldr	r2, [pc, #296]	@ (8002b4c <HAL_DMA_Abort_IT+0x1d0>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d00e      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a49      	ldr	r2, [pc, #292]	@ (8002b50 <HAL_DMA_Abort_IT+0x1d4>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d009      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a47      	ldr	r2, [pc, #284]	@ (8002b54 <HAL_DMA_Abort_IT+0x1d8>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d004      	beq.n	8002a44 <HAL_DMA_Abort_IT+0xc8>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a46      	ldr	r2, [pc, #280]	@ (8002b58 <HAL_DMA_Abort_IT+0x1dc>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_DMA_Abort_IT+0xcc>
 8002a44:	2301      	movs	r3, #1
 8002a46:	e000      	b.n	8002a4a <HAL_DMA_Abort_IT+0xce>
 8002a48:	2300      	movs	r3, #0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 8086 	beq.w	8002b5c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2204      	movs	r2, #4
 8002a54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a2f      	ldr	r2, [pc, #188]	@ (8002b1c <HAL_DMA_Abort_IT+0x1a0>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d04a      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a2e      	ldr	r2, [pc, #184]	@ (8002b20 <HAL_DMA_Abort_IT+0x1a4>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d045      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a2c      	ldr	r2, [pc, #176]	@ (8002b24 <HAL_DMA_Abort_IT+0x1a8>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d040      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a2b      	ldr	r2, [pc, #172]	@ (8002b28 <HAL_DMA_Abort_IT+0x1ac>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d03b      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a29      	ldr	r2, [pc, #164]	@ (8002b2c <HAL_DMA_Abort_IT+0x1b0>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d036      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a28      	ldr	r2, [pc, #160]	@ (8002b30 <HAL_DMA_Abort_IT+0x1b4>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d031      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a26      	ldr	r2, [pc, #152]	@ (8002b34 <HAL_DMA_Abort_IT+0x1b8>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d02c      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a25      	ldr	r2, [pc, #148]	@ (8002b38 <HAL_DMA_Abort_IT+0x1bc>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d027      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a23      	ldr	r2, [pc, #140]	@ (8002b3c <HAL_DMA_Abort_IT+0x1c0>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d022      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a22      	ldr	r2, [pc, #136]	@ (8002b40 <HAL_DMA_Abort_IT+0x1c4>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d01d      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a20      	ldr	r2, [pc, #128]	@ (8002b44 <HAL_DMA_Abort_IT+0x1c8>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d018      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a1f      	ldr	r2, [pc, #124]	@ (8002b48 <HAL_DMA_Abort_IT+0x1cc>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d013      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a1d      	ldr	r2, [pc, #116]	@ (8002b4c <HAL_DMA_Abort_IT+0x1d0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d00e      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a1c      	ldr	r2, [pc, #112]	@ (8002b50 <HAL_DMA_Abort_IT+0x1d4>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d009      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a1a      	ldr	r2, [pc, #104]	@ (8002b54 <HAL_DMA_Abort_IT+0x1d8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_DMA_Abort_IT+0x17c>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a19      	ldr	r2, [pc, #100]	@ (8002b58 <HAL_DMA_Abort_IT+0x1dc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d108      	bne.n	8002b0a <HAL_DMA_Abort_IT+0x18e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0201 	bic.w	r2, r2, #1
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e178      	b.n	8002dfc <HAL_DMA_Abort_IT+0x480>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	e16f      	b.n	8002dfc <HAL_DMA_Abort_IT+0x480>
 8002b1c:	40020010 	.word	0x40020010
 8002b20:	40020028 	.word	0x40020028
 8002b24:	40020040 	.word	0x40020040
 8002b28:	40020058 	.word	0x40020058
 8002b2c:	40020070 	.word	0x40020070
 8002b30:	40020088 	.word	0x40020088
 8002b34:	400200a0 	.word	0x400200a0
 8002b38:	400200b8 	.word	0x400200b8
 8002b3c:	40020410 	.word	0x40020410
 8002b40:	40020428 	.word	0x40020428
 8002b44:	40020440 	.word	0x40020440
 8002b48:	40020458 	.word	0x40020458
 8002b4c:	40020470 	.word	0x40020470
 8002b50:	40020488 	.word	0x40020488
 8002b54:	400204a0 	.word	0x400204a0
 8002b58:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f022 020e 	bic.w	r2, r2, #14
 8002b6a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a6c      	ldr	r2, [pc, #432]	@ (8002d24 <HAL_DMA_Abort_IT+0x3a8>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d04a      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a6b      	ldr	r2, [pc, #428]	@ (8002d28 <HAL_DMA_Abort_IT+0x3ac>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d045      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a69      	ldr	r2, [pc, #420]	@ (8002d2c <HAL_DMA_Abort_IT+0x3b0>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d040      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a68      	ldr	r2, [pc, #416]	@ (8002d30 <HAL_DMA_Abort_IT+0x3b4>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d03b      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a66      	ldr	r2, [pc, #408]	@ (8002d34 <HAL_DMA_Abort_IT+0x3b8>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d036      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a65      	ldr	r2, [pc, #404]	@ (8002d38 <HAL_DMA_Abort_IT+0x3bc>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d031      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a63      	ldr	r2, [pc, #396]	@ (8002d3c <HAL_DMA_Abort_IT+0x3c0>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d02c      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a62      	ldr	r2, [pc, #392]	@ (8002d40 <HAL_DMA_Abort_IT+0x3c4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d027      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a60      	ldr	r2, [pc, #384]	@ (8002d44 <HAL_DMA_Abort_IT+0x3c8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d022      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a5f      	ldr	r2, [pc, #380]	@ (8002d48 <HAL_DMA_Abort_IT+0x3cc>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d01d      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a5d      	ldr	r2, [pc, #372]	@ (8002d4c <HAL_DMA_Abort_IT+0x3d0>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d018      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a5c      	ldr	r2, [pc, #368]	@ (8002d50 <HAL_DMA_Abort_IT+0x3d4>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d013      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	4a5a      	ldr	r2, [pc, #360]	@ (8002d54 <HAL_DMA_Abort_IT+0x3d8>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00e      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a59      	ldr	r2, [pc, #356]	@ (8002d58 <HAL_DMA_Abort_IT+0x3dc>)
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d009      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a57      	ldr	r2, [pc, #348]	@ (8002d5c <HAL_DMA_Abort_IT+0x3e0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d004      	beq.n	8002c0c <HAL_DMA_Abort_IT+0x290>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a56      	ldr	r2, [pc, #344]	@ (8002d60 <HAL_DMA_Abort_IT+0x3e4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d108      	bne.n	8002c1e <HAL_DMA_Abort_IT+0x2a2>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f022 0201 	bic.w	r2, r2, #1
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	e007      	b.n	8002c2e <HAL_DMA_Abort_IT+0x2b2>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	681a      	ldr	r2, [r3, #0]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f022 0201 	bic.w	r2, r2, #1
 8002c2c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a3c      	ldr	r2, [pc, #240]	@ (8002d24 <HAL_DMA_Abort_IT+0x3a8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d072      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3a      	ldr	r2, [pc, #232]	@ (8002d28 <HAL_DMA_Abort_IT+0x3ac>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d06d      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a39      	ldr	r2, [pc, #228]	@ (8002d2c <HAL_DMA_Abort_IT+0x3b0>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d068      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a37      	ldr	r2, [pc, #220]	@ (8002d30 <HAL_DMA_Abort_IT+0x3b4>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d063      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a36      	ldr	r2, [pc, #216]	@ (8002d34 <HAL_DMA_Abort_IT+0x3b8>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d05e      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a34      	ldr	r2, [pc, #208]	@ (8002d38 <HAL_DMA_Abort_IT+0x3bc>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d059      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a33      	ldr	r2, [pc, #204]	@ (8002d3c <HAL_DMA_Abort_IT+0x3c0>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d054      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a31      	ldr	r2, [pc, #196]	@ (8002d40 <HAL_DMA_Abort_IT+0x3c4>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d04f      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a30      	ldr	r2, [pc, #192]	@ (8002d44 <HAL_DMA_Abort_IT+0x3c8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d04a      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a2e      	ldr	r2, [pc, #184]	@ (8002d48 <HAL_DMA_Abort_IT+0x3cc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d045      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <HAL_DMA_Abort_IT+0x3d0>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d040      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a2b      	ldr	r2, [pc, #172]	@ (8002d50 <HAL_DMA_Abort_IT+0x3d4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d03b      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a2a      	ldr	r2, [pc, #168]	@ (8002d54 <HAL_DMA_Abort_IT+0x3d8>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d036      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a28      	ldr	r2, [pc, #160]	@ (8002d58 <HAL_DMA_Abort_IT+0x3dc>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d031      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a27      	ldr	r2, [pc, #156]	@ (8002d5c <HAL_DMA_Abort_IT+0x3e0>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d02c      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a25      	ldr	r2, [pc, #148]	@ (8002d60 <HAL_DMA_Abort_IT+0x3e4>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d027      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4a24      	ldr	r2, [pc, #144]	@ (8002d64 <HAL_DMA_Abort_IT+0x3e8>)
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	d022      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	4a22      	ldr	r2, [pc, #136]	@ (8002d68 <HAL_DMA_Abort_IT+0x3ec>)
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d01d      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a21      	ldr	r2, [pc, #132]	@ (8002d6c <HAL_DMA_Abort_IT+0x3f0>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d018      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a1f      	ldr	r2, [pc, #124]	@ (8002d70 <HAL_DMA_Abort_IT+0x3f4>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d013      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	@ (8002d74 <HAL_DMA_Abort_IT+0x3f8>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d00e      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <HAL_DMA_Abort_IT+0x3fc>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d009      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a1b      	ldr	r2, [pc, #108]	@ (8002d7c <HAL_DMA_Abort_IT+0x400>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d004      	beq.n	8002d1e <HAL_DMA_Abort_IT+0x3a2>
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a19      	ldr	r2, [pc, #100]	@ (8002d80 <HAL_DMA_Abort_IT+0x404>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d132      	bne.n	8002d84 <HAL_DMA_Abort_IT+0x408>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e031      	b.n	8002d86 <HAL_DMA_Abort_IT+0x40a>
 8002d22:	bf00      	nop
 8002d24:	40020010 	.word	0x40020010
 8002d28:	40020028 	.word	0x40020028
 8002d2c:	40020040 	.word	0x40020040
 8002d30:	40020058 	.word	0x40020058
 8002d34:	40020070 	.word	0x40020070
 8002d38:	40020088 	.word	0x40020088
 8002d3c:	400200a0 	.word	0x400200a0
 8002d40:	400200b8 	.word	0x400200b8
 8002d44:	40020410 	.word	0x40020410
 8002d48:	40020428 	.word	0x40020428
 8002d4c:	40020440 	.word	0x40020440
 8002d50:	40020458 	.word	0x40020458
 8002d54:	40020470 	.word	0x40020470
 8002d58:	40020488 	.word	0x40020488
 8002d5c:	400204a0 	.word	0x400204a0
 8002d60:	400204b8 	.word	0x400204b8
 8002d64:	58025408 	.word	0x58025408
 8002d68:	5802541c 	.word	0x5802541c
 8002d6c:	58025430 	.word	0x58025430
 8002d70:	58025444 	.word	0x58025444
 8002d74:	58025458 	.word	0x58025458
 8002d78:	5802546c 	.word	0x5802546c
 8002d7c:	58025480 	.word	0x58025480
 8002d80:	58025494 	.word	0x58025494
 8002d84:	2300      	movs	r3, #0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d028      	beq.n	8002ddc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d98:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d9e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002da4:	f003 031f 	and.w	r3, r3, #31
 8002da8:	2201      	movs	r2, #1
 8002daa:	409a      	lsls	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002db4:	687a      	ldr	r2, [r7, #4]
 8002db6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002db8:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00c      	beq.n	8002ddc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dc6:	681a      	ldr	r2, [r3, #0]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002dcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002dd0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002dda:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d003      	beq.n	8002dfc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002df8:	6878      	ldr	r0, [r7, #4]
 8002dfa:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop

08002e08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08a      	sub	sp, #40	@ 0x28
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e14:	4b67      	ldr	r3, [pc, #412]	@ (8002fb4 <HAL_DMA_IRQHandler+0x1ac>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a67      	ldr	r2, [pc, #412]	@ (8002fb8 <HAL_DMA_IRQHandler+0x1b0>)
 8002e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1e:	0a9b      	lsrs	r3, r3, #10
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e26:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e2c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002e2e:	6a3b      	ldr	r3, [r7, #32]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002e34:	69fb      	ldr	r3, [r7, #28]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a5f      	ldr	r2, [pc, #380]	@ (8002fbc <HAL_DMA_IRQHandler+0x1b4>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d04a      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a5d      	ldr	r2, [pc, #372]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1b8>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d045      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a5c      	ldr	r2, [pc, #368]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1bc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d040      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a5a      	ldr	r2, [pc, #360]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1c0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d03b      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a59      	ldr	r2, [pc, #356]	@ (8002fcc <HAL_DMA_IRQHandler+0x1c4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d036      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a57      	ldr	r2, [pc, #348]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1c8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d031      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a56      	ldr	r2, [pc, #344]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1cc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d02c      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a54      	ldr	r2, [pc, #336]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1d0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d027      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a53      	ldr	r2, [pc, #332]	@ (8002fdc <HAL_DMA_IRQHandler+0x1d4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d022      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a51      	ldr	r2, [pc, #324]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1d8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d01d      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a50      	ldr	r2, [pc, #320]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1dc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d018      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a4e      	ldr	r2, [pc, #312]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1e0>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d013      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a4d      	ldr	r2, [pc, #308]	@ (8002fec <HAL_DMA_IRQHandler+0x1e4>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d00e      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a4b      	ldr	r2, [pc, #300]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1e8>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d009      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a4a      	ldr	r2, [pc, #296]	@ (8002ff4 <HAL_DMA_IRQHandler+0x1ec>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d004      	beq.n	8002eda <HAL_DMA_IRQHandler+0xd2>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a48      	ldr	r2, [pc, #288]	@ (8002ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_DMA_IRQHandler+0xd6>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <HAL_DMA_IRQHandler+0xd8>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	f000 842b 	beq.w	800373c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002eea:	f003 031f 	and.w	r3, r3, #31
 8002eee:	2208      	movs	r2, #8
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	f000 80a2 	beq.w	8003040 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a2e      	ldr	r2, [pc, #184]	@ (8002fbc <HAL_DMA_IRQHandler+0x1b4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d04a      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fc0 <HAL_DMA_IRQHandler+0x1b8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d045      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a2b      	ldr	r2, [pc, #172]	@ (8002fc4 <HAL_DMA_IRQHandler+0x1bc>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d040      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4a2a      	ldr	r2, [pc, #168]	@ (8002fc8 <HAL_DMA_IRQHandler+0x1c0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d03b      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a28      	ldr	r2, [pc, #160]	@ (8002fcc <HAL_DMA_IRQHandler+0x1c4>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d036      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a27      	ldr	r2, [pc, #156]	@ (8002fd0 <HAL_DMA_IRQHandler+0x1c8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d031      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a25      	ldr	r2, [pc, #148]	@ (8002fd4 <HAL_DMA_IRQHandler+0x1cc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d02c      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a24      	ldr	r2, [pc, #144]	@ (8002fd8 <HAL_DMA_IRQHandler+0x1d0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d027      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a22      	ldr	r2, [pc, #136]	@ (8002fdc <HAL_DMA_IRQHandler+0x1d4>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d022      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a21      	ldr	r2, [pc, #132]	@ (8002fe0 <HAL_DMA_IRQHandler+0x1d8>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d01d      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a1f      	ldr	r2, [pc, #124]	@ (8002fe4 <HAL_DMA_IRQHandler+0x1dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d018      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe8 <HAL_DMA_IRQHandler+0x1e0>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d013      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a1c      	ldr	r2, [pc, #112]	@ (8002fec <HAL_DMA_IRQHandler+0x1e4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d00e      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a1b      	ldr	r2, [pc, #108]	@ (8002ff0 <HAL_DMA_IRQHandler+0x1e8>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d009      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a19      	ldr	r2, [pc, #100]	@ (8002ff4 <HAL_DMA_IRQHandler+0x1ec>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d004      	beq.n	8002f9c <HAL_DMA_IRQHandler+0x194>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a18      	ldr	r2, [pc, #96]	@ (8002ff8 <HAL_DMA_IRQHandler+0x1f0>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d12f      	bne.n	8002ffc <HAL_DMA_IRQHandler+0x1f4>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0304 	and.w	r3, r3, #4
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	bf14      	ite	ne
 8002faa:	2301      	movne	r3, #1
 8002fac:	2300      	moveq	r3, #0
 8002fae:	b2db      	uxtb	r3, r3
 8002fb0:	e02e      	b.n	8003010 <HAL_DMA_IRQHandler+0x208>
 8002fb2:	bf00      	nop
 8002fb4:	24000000 	.word	0x24000000
 8002fb8:	1b4e81b5 	.word	0x1b4e81b5
 8002fbc:	40020010 	.word	0x40020010
 8002fc0:	40020028 	.word	0x40020028
 8002fc4:	40020040 	.word	0x40020040
 8002fc8:	40020058 	.word	0x40020058
 8002fcc:	40020070 	.word	0x40020070
 8002fd0:	40020088 	.word	0x40020088
 8002fd4:	400200a0 	.word	0x400200a0
 8002fd8:	400200b8 	.word	0x400200b8
 8002fdc:	40020410 	.word	0x40020410
 8002fe0:	40020428 	.word	0x40020428
 8002fe4:	40020440 	.word	0x40020440
 8002fe8:	40020458 	.word	0x40020458
 8002fec:	40020470 	.word	0x40020470
 8002ff0:	40020488 	.word	0x40020488
 8002ff4:	400204a0 	.word	0x400204a0
 8002ff8:	400204b8 	.word	0x400204b8
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	bf14      	ite	ne
 800300a:	2301      	movne	r3, #1
 800300c:	2300      	moveq	r3, #0
 800300e:	b2db      	uxtb	r3, r3
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f022 0204 	bic.w	r2, r2, #4
 8003022:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003028:	f003 031f 	and.w	r3, r3, #31
 800302c:	2208      	movs	r2, #8
 800302e:	409a      	lsls	r2, r3
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003038:	f043 0201 	orr.w	r2, r3, #1
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003044:	f003 031f 	and.w	r3, r3, #31
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	fa22 f303 	lsr.w	r3, r2, r3
 800304e:	f003 0301 	and.w	r3, r3, #1
 8003052:	2b00      	cmp	r3, #0
 8003054:	d06e      	beq.n	8003134 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a69      	ldr	r2, [pc, #420]	@ (8003200 <HAL_DMA_IRQHandler+0x3f8>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d04a      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a67      	ldr	r2, [pc, #412]	@ (8003204 <HAL_DMA_IRQHandler+0x3fc>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d045      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a66      	ldr	r2, [pc, #408]	@ (8003208 <HAL_DMA_IRQHandler+0x400>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d040      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a64      	ldr	r2, [pc, #400]	@ (800320c <HAL_DMA_IRQHandler+0x404>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d03b      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a63      	ldr	r2, [pc, #396]	@ (8003210 <HAL_DMA_IRQHandler+0x408>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d036      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a61      	ldr	r2, [pc, #388]	@ (8003214 <HAL_DMA_IRQHandler+0x40c>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d031      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a60      	ldr	r2, [pc, #384]	@ (8003218 <HAL_DMA_IRQHandler+0x410>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d02c      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a5e      	ldr	r2, [pc, #376]	@ (800321c <HAL_DMA_IRQHandler+0x414>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d027      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a5d      	ldr	r2, [pc, #372]	@ (8003220 <HAL_DMA_IRQHandler+0x418>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d022      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a5b      	ldr	r2, [pc, #364]	@ (8003224 <HAL_DMA_IRQHandler+0x41c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01d      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a5a      	ldr	r2, [pc, #360]	@ (8003228 <HAL_DMA_IRQHandler+0x420>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d018      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a58      	ldr	r2, [pc, #352]	@ (800322c <HAL_DMA_IRQHandler+0x424>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a57      	ldr	r2, [pc, #348]	@ (8003230 <HAL_DMA_IRQHandler+0x428>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00e      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	4a55      	ldr	r2, [pc, #340]	@ (8003234 <HAL_DMA_IRQHandler+0x42c>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d009      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a54      	ldr	r2, [pc, #336]	@ (8003238 <HAL_DMA_IRQHandler+0x430>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d004      	beq.n	80030f6 <HAL_DMA_IRQHandler+0x2ee>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a52      	ldr	r2, [pc, #328]	@ (800323c <HAL_DMA_IRQHandler+0x434>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d10a      	bne.n	800310c <HAL_DMA_IRQHandler+0x304>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003100:	2b00      	cmp	r3, #0
 8003102:	bf14      	ite	ne
 8003104:	2301      	movne	r3, #1
 8003106:	2300      	moveq	r3, #0
 8003108:	b2db      	uxtb	r3, r3
 800310a:	e003      	b.n	8003114 <HAL_DMA_IRQHandler+0x30c>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00d      	beq.n	8003134 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800311c:	f003 031f 	and.w	r3, r3, #31
 8003120:	2201      	movs	r2, #1
 8003122:	409a      	lsls	r2, r3
 8003124:	6a3b      	ldr	r3, [r7, #32]
 8003126:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800312c:	f043 0202 	orr.w	r2, r3, #2
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003138:	f003 031f 	and.w	r3, r3, #31
 800313c:	2204      	movs	r2, #4
 800313e:	409a      	lsls	r2, r3
 8003140:	69bb      	ldr	r3, [r7, #24]
 8003142:	4013      	ands	r3, r2
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 808f 	beq.w	8003268 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a2c      	ldr	r2, [pc, #176]	@ (8003200 <HAL_DMA_IRQHandler+0x3f8>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d04a      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a2a      	ldr	r2, [pc, #168]	@ (8003204 <HAL_DMA_IRQHandler+0x3fc>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d045      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a29      	ldr	r2, [pc, #164]	@ (8003208 <HAL_DMA_IRQHandler+0x400>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d040      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a27      	ldr	r2, [pc, #156]	@ (800320c <HAL_DMA_IRQHandler+0x404>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d03b      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a26      	ldr	r2, [pc, #152]	@ (8003210 <HAL_DMA_IRQHandler+0x408>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d036      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a24      	ldr	r2, [pc, #144]	@ (8003214 <HAL_DMA_IRQHandler+0x40c>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d031      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a23      	ldr	r2, [pc, #140]	@ (8003218 <HAL_DMA_IRQHandler+0x410>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d02c      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a21      	ldr	r2, [pc, #132]	@ (800321c <HAL_DMA_IRQHandler+0x414>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d027      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a20      	ldr	r2, [pc, #128]	@ (8003220 <HAL_DMA_IRQHandler+0x418>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d022      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1e      	ldr	r2, [pc, #120]	@ (8003224 <HAL_DMA_IRQHandler+0x41c>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d01d      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1d      	ldr	r2, [pc, #116]	@ (8003228 <HAL_DMA_IRQHandler+0x420>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d018      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <HAL_DMA_IRQHandler+0x424>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d013      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a1a      	ldr	r2, [pc, #104]	@ (8003230 <HAL_DMA_IRQHandler+0x428>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d00e      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a18      	ldr	r2, [pc, #96]	@ (8003234 <HAL_DMA_IRQHandler+0x42c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d009      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a17      	ldr	r2, [pc, #92]	@ (8003238 <HAL_DMA_IRQHandler+0x430>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d004      	beq.n	80031ea <HAL_DMA_IRQHandler+0x3e2>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a15      	ldr	r2, [pc, #84]	@ (800323c <HAL_DMA_IRQHandler+0x434>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d12a      	bne.n	8003240 <HAL_DMA_IRQHandler+0x438>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f003 0302 	and.w	r3, r3, #2
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bf14      	ite	ne
 80031f8:	2301      	movne	r3, #1
 80031fa:	2300      	moveq	r3, #0
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	e023      	b.n	8003248 <HAL_DMA_IRQHandler+0x440>
 8003200:	40020010 	.word	0x40020010
 8003204:	40020028 	.word	0x40020028
 8003208:	40020040 	.word	0x40020040
 800320c:	40020058 	.word	0x40020058
 8003210:	40020070 	.word	0x40020070
 8003214:	40020088 	.word	0x40020088
 8003218:	400200a0 	.word	0x400200a0
 800321c:	400200b8 	.word	0x400200b8
 8003220:	40020410 	.word	0x40020410
 8003224:	40020428 	.word	0x40020428
 8003228:	40020440 	.word	0x40020440
 800322c:	40020458 	.word	0x40020458
 8003230:	40020470 	.word	0x40020470
 8003234:	40020488 	.word	0x40020488
 8003238:	400204a0 	.word	0x400204a0
 800323c:	400204b8 	.word	0x400204b8
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	2300      	movs	r3, #0
 8003248:	2b00      	cmp	r3, #0
 800324a:	d00d      	beq.n	8003268 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003250:	f003 031f 	and.w	r3, r3, #31
 8003254:	2204      	movs	r2, #4
 8003256:	409a      	lsls	r2, r3
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003260:	f043 0204 	orr.w	r2, r3, #4
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	2210      	movs	r2, #16
 8003272:	409a      	lsls	r2, r3
 8003274:	69bb      	ldr	r3, [r7, #24]
 8003276:	4013      	ands	r3, r2
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80a6 	beq.w	80033ca <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a85      	ldr	r2, [pc, #532]	@ (8003498 <HAL_DMA_IRQHandler+0x690>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d04a      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	4a83      	ldr	r2, [pc, #524]	@ (800349c <HAL_DMA_IRQHandler+0x694>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d045      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a82      	ldr	r2, [pc, #520]	@ (80034a0 <HAL_DMA_IRQHandler+0x698>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d040      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a80      	ldr	r2, [pc, #512]	@ (80034a4 <HAL_DMA_IRQHandler+0x69c>)
 80032a2:	4293      	cmp	r3, r2
 80032a4:	d03b      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4a7f      	ldr	r2, [pc, #508]	@ (80034a8 <HAL_DMA_IRQHandler+0x6a0>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d036      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a7d      	ldr	r2, [pc, #500]	@ (80034ac <HAL_DMA_IRQHandler+0x6a4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d031      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a7c      	ldr	r2, [pc, #496]	@ (80034b0 <HAL_DMA_IRQHandler+0x6a8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d02c      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a7a      	ldr	r2, [pc, #488]	@ (80034b4 <HAL_DMA_IRQHandler+0x6ac>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d027      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a79      	ldr	r2, [pc, #484]	@ (80034b8 <HAL_DMA_IRQHandler+0x6b0>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d022      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a77      	ldr	r2, [pc, #476]	@ (80034bc <HAL_DMA_IRQHandler+0x6b4>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d01d      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a76      	ldr	r2, [pc, #472]	@ (80034c0 <HAL_DMA_IRQHandler+0x6b8>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d018      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a74      	ldr	r2, [pc, #464]	@ (80034c4 <HAL_DMA_IRQHandler+0x6bc>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d013      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	4a73      	ldr	r2, [pc, #460]	@ (80034c8 <HAL_DMA_IRQHandler+0x6c0>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d00e      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a71      	ldr	r2, [pc, #452]	@ (80034cc <HAL_DMA_IRQHandler+0x6c4>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d009      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a70      	ldr	r2, [pc, #448]	@ (80034d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d004      	beq.n	800331e <HAL_DMA_IRQHandler+0x516>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a6e      	ldr	r2, [pc, #440]	@ (80034d4 <HAL_DMA_IRQHandler+0x6cc>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d10a      	bne.n	8003334 <HAL_DMA_IRQHandler+0x52c>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	bf14      	ite	ne
 800332c:	2301      	movne	r3, #1
 800332e:	2300      	moveq	r3, #0
 8003330:	b2db      	uxtb	r3, r3
 8003332:	e009      	b.n	8003348 <HAL_DMA_IRQHandler+0x540>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	bf14      	ite	ne
 8003342:	2301      	movne	r3, #1
 8003344:	2300      	moveq	r3, #0
 8003346:	b2db      	uxtb	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d03e      	beq.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003350:	f003 031f 	and.w	r3, r3, #31
 8003354:	2210      	movs	r2, #16
 8003356:	409a      	lsls	r2, r3
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d018      	beq.n	800339c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d108      	bne.n	800338a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	2b00      	cmp	r3, #0
 800337e:	d024      	beq.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	4798      	blx	r3
 8003388:	e01f      	b.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d01b      	beq.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	4798      	blx	r3
 800339a:	e016      	b.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d107      	bne.n	80033ba <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f022 0208 	bic.w	r2, r2, #8
 80033b8:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d003      	beq.n	80033ca <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2220      	movs	r2, #32
 80033d4:	409a      	lsls	r2, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 8110 	beq.w	8003600 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003498 <HAL_DMA_IRQHandler+0x690>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d04a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2b      	ldr	r2, [pc, #172]	@ (800349c <HAL_DMA_IRQHandler+0x694>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d045      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a29      	ldr	r2, [pc, #164]	@ (80034a0 <HAL_DMA_IRQHandler+0x698>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d040      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a28      	ldr	r2, [pc, #160]	@ (80034a4 <HAL_DMA_IRQHandler+0x69c>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d03b      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a26      	ldr	r2, [pc, #152]	@ (80034a8 <HAL_DMA_IRQHandler+0x6a0>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d036      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a25      	ldr	r2, [pc, #148]	@ (80034ac <HAL_DMA_IRQHandler+0x6a4>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d031      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a23      	ldr	r2, [pc, #140]	@ (80034b0 <HAL_DMA_IRQHandler+0x6a8>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02c      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a22      	ldr	r2, [pc, #136]	@ (80034b4 <HAL_DMA_IRQHandler+0x6ac>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d027      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a20      	ldr	r2, [pc, #128]	@ (80034b8 <HAL_DMA_IRQHandler+0x6b0>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a1f      	ldr	r2, [pc, #124]	@ (80034bc <HAL_DMA_IRQHandler+0x6b4>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01d      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1d      	ldr	r2, [pc, #116]	@ (80034c0 <HAL_DMA_IRQHandler+0x6b8>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d018      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1c      	ldr	r2, [pc, #112]	@ (80034c4 <HAL_DMA_IRQHandler+0x6bc>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1a      	ldr	r2, [pc, #104]	@ (80034c8 <HAL_DMA_IRQHandler+0x6c0>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a19      	ldr	r2, [pc, #100]	@ (80034cc <HAL_DMA_IRQHandler+0x6c4>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a17      	ldr	r2, [pc, #92]	@ (80034d0 <HAL_DMA_IRQHandler+0x6c8>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_DMA_IRQHandler+0x678>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a16      	ldr	r2, [pc, #88]	@ (80034d4 <HAL_DMA_IRQHandler+0x6cc>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d12b      	bne.n	80034d8 <HAL_DMA_IRQHandler+0x6d0>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0310 	and.w	r3, r3, #16
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e02a      	b.n	80034ec <HAL_DMA_IRQHandler+0x6e4>
 8003496:	bf00      	nop
 8003498:	40020010 	.word	0x40020010
 800349c:	40020028 	.word	0x40020028
 80034a0:	40020040 	.word	0x40020040
 80034a4:	40020058 	.word	0x40020058
 80034a8:	40020070 	.word	0x40020070
 80034ac:	40020088 	.word	0x40020088
 80034b0:	400200a0 	.word	0x400200a0
 80034b4:	400200b8 	.word	0x400200b8
 80034b8:	40020410 	.word	0x40020410
 80034bc:	40020428 	.word	0x40020428
 80034c0:	40020440 	.word	0x40020440
 80034c4:	40020458 	.word	0x40020458
 80034c8:	40020470 	.word	0x40020470
 80034cc:	40020488 	.word	0x40020488
 80034d0:	400204a0 	.word	0x400204a0
 80034d4:	400204b8 	.word	0x400204b8
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	bf14      	ite	ne
 80034e6:	2301      	movne	r3, #1
 80034e8:	2300      	moveq	r3, #0
 80034ea:	b2db      	uxtb	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	f000 8087 	beq.w	8003600 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034f6:	f003 031f 	and.w	r3, r3, #31
 80034fa:	2220      	movs	r2, #32
 80034fc:	409a      	lsls	r2, r3
 80034fe:	6a3b      	ldr	r3, [r7, #32]
 8003500:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b04      	cmp	r3, #4
 800350c:	d139      	bne.n	8003582 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0216 	bic.w	r2, r2, #22
 800351c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	695a      	ldr	r2, [r3, #20]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800352c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003532:	2b00      	cmp	r3, #0
 8003534:	d103      	bne.n	800353e <HAL_DMA_IRQHandler+0x736>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800353a:	2b00      	cmp	r3, #0
 800353c:	d007      	beq.n	800354e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0208 	bic.w	r2, r2, #8
 800354c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003552:	f003 031f 	and.w	r3, r3, #31
 8003556:	223f      	movs	r2, #63	@ 0x3f
 8003558:	409a      	lsls	r2, r3
 800355a:	6a3b      	ldr	r3, [r7, #32]
 800355c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2200      	movs	r2, #0
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	f000 834a 	beq.w	8003c0c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800357c:	6878      	ldr	r0, [r7, #4]
 800357e:	4798      	blx	r3
          }
          return;
 8003580:	e344      	b.n	8003c0c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d018      	beq.n	80035c2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d108      	bne.n	80035b0 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d02c      	beq.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	4798      	blx	r3
 80035ae:	e027      	b.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d023      	beq.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	4798      	blx	r3
 80035c0:	e01e      	b.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10f      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 0210 	bic.w	r2, r2, #16
 80035de:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d003      	beq.n	8003600 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 8306 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	f000 8088 	beq.w	8003728 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2204      	movs	r2, #4
 800361c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a7a      	ldr	r2, [pc, #488]	@ (8003810 <HAL_DMA_IRQHandler+0xa08>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d04a      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a79      	ldr	r2, [pc, #484]	@ (8003814 <HAL_DMA_IRQHandler+0xa0c>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d045      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a77      	ldr	r2, [pc, #476]	@ (8003818 <HAL_DMA_IRQHandler+0xa10>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d040      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a76      	ldr	r2, [pc, #472]	@ (800381c <HAL_DMA_IRQHandler+0xa14>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d03b      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4a74      	ldr	r2, [pc, #464]	@ (8003820 <HAL_DMA_IRQHandler+0xa18>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d036      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a73      	ldr	r2, [pc, #460]	@ (8003824 <HAL_DMA_IRQHandler+0xa1c>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d031      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a71      	ldr	r2, [pc, #452]	@ (8003828 <HAL_DMA_IRQHandler+0xa20>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d02c      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4a70      	ldr	r2, [pc, #448]	@ (800382c <HAL_DMA_IRQHandler+0xa24>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d027      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a6e      	ldr	r2, [pc, #440]	@ (8003830 <HAL_DMA_IRQHandler+0xa28>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d022      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a6d      	ldr	r2, [pc, #436]	@ (8003834 <HAL_DMA_IRQHandler+0xa2c>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d01d      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a6b      	ldr	r2, [pc, #428]	@ (8003838 <HAL_DMA_IRQHandler+0xa30>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d018      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4a6a      	ldr	r2, [pc, #424]	@ (800383c <HAL_DMA_IRQHandler+0xa34>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d013      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a68      	ldr	r2, [pc, #416]	@ (8003840 <HAL_DMA_IRQHandler+0xa38>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d00e      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a67      	ldr	r2, [pc, #412]	@ (8003844 <HAL_DMA_IRQHandler+0xa3c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d009      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a65      	ldr	r2, [pc, #404]	@ (8003848 <HAL_DMA_IRQHandler+0xa40>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d004      	beq.n	80036c0 <HAL_DMA_IRQHandler+0x8b8>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a64      	ldr	r2, [pc, #400]	@ (800384c <HAL_DMA_IRQHandler+0xa44>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d108      	bne.n	80036d2 <HAL_DMA_IRQHandler+0x8ca>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0201 	bic.w	r2, r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	e007      	b.n	80036e2 <HAL_DMA_IRQHandler+0x8da>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f022 0201 	bic.w	r2, r2, #1
 80036e0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	3301      	adds	r3, #1
 80036e6:	60fb      	str	r3, [r7, #12]
 80036e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036ea:	429a      	cmp	r2, r3
 80036ec:	d307      	bcc.n	80036fe <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1f2      	bne.n	80036e2 <HAL_DMA_IRQHandler+0x8da>
 80036fc:	e000      	b.n	8003700 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80036fe:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	2b00      	cmp	r3, #0
 800370c:	d004      	beq.n	8003718 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2203      	movs	r2, #3
 8003712:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8003716:	e003      	b.n	8003720 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2200      	movs	r2, #0
 8003724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 8272 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
 800373a:	e26c      	b.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a43      	ldr	r2, [pc, #268]	@ (8003850 <HAL_DMA_IRQHandler+0xa48>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d022      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a42      	ldr	r2, [pc, #264]	@ (8003854 <HAL_DMA_IRQHandler+0xa4c>)
 800374c:	4293      	cmp	r3, r2
 800374e:	d01d      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a40      	ldr	r2, [pc, #256]	@ (8003858 <HAL_DMA_IRQHandler+0xa50>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d018      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4a3f      	ldr	r2, [pc, #252]	@ (800385c <HAL_DMA_IRQHandler+0xa54>)
 8003760:	4293      	cmp	r3, r2
 8003762:	d013      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a3d      	ldr	r2, [pc, #244]	@ (8003860 <HAL_DMA_IRQHandler+0xa58>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d00e      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a3c      	ldr	r2, [pc, #240]	@ (8003864 <HAL_DMA_IRQHandler+0xa5c>)
 8003774:	4293      	cmp	r3, r2
 8003776:	d009      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a3a      	ldr	r2, [pc, #232]	@ (8003868 <HAL_DMA_IRQHandler+0xa60>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d004      	beq.n	800378c <HAL_DMA_IRQHandler+0x984>
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	4a39      	ldr	r2, [pc, #228]	@ (800386c <HAL_DMA_IRQHandler+0xa64>)
 8003788:	4293      	cmp	r3, r2
 800378a:	d101      	bne.n	8003790 <HAL_DMA_IRQHandler+0x988>
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_DMA_IRQHandler+0x98a>
 8003790:	2300      	movs	r3, #0
 8003792:	2b00      	cmp	r3, #0
 8003794:	f000 823f 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a4:	f003 031f 	and.w	r3, r3, #31
 80037a8:	2204      	movs	r2, #4
 80037aa:	409a      	lsls	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	4013      	ands	r3, r2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80cd 	beq.w	8003950 <HAL_DMA_IRQHandler+0xb48>
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	f003 0304 	and.w	r3, r3, #4
 80037bc:	2b00      	cmp	r3, #0
 80037be:	f000 80c7 	beq.w	8003950 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037c6:	f003 031f 	and.w	r3, r3, #31
 80037ca:	2204      	movs	r2, #4
 80037cc:	409a      	lsls	r2, r3
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d049      	beq.n	8003870 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 8210 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80037f8:	e20a      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	f000 8206 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800380c:	e200      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe08>
 800380e:	bf00      	nop
 8003810:	40020010 	.word	0x40020010
 8003814:	40020028 	.word	0x40020028
 8003818:	40020040 	.word	0x40020040
 800381c:	40020058 	.word	0x40020058
 8003820:	40020070 	.word	0x40020070
 8003824:	40020088 	.word	0x40020088
 8003828:	400200a0 	.word	0x400200a0
 800382c:	400200b8 	.word	0x400200b8
 8003830:	40020410 	.word	0x40020410
 8003834:	40020428 	.word	0x40020428
 8003838:	40020440 	.word	0x40020440
 800383c:	40020458 	.word	0x40020458
 8003840:	40020470 	.word	0x40020470
 8003844:	40020488 	.word	0x40020488
 8003848:	400204a0 	.word	0x400204a0
 800384c:	400204b8 	.word	0x400204b8
 8003850:	58025408 	.word	0x58025408
 8003854:	5802541c 	.word	0x5802541c
 8003858:	58025430 	.word	0x58025430
 800385c:	58025444 	.word	0x58025444
 8003860:	58025458 	.word	0x58025458
 8003864:	5802546c 	.word	0x5802546c
 8003868:	58025480 	.word	0x58025480
 800386c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0320 	and.w	r3, r3, #32
 8003876:	2b00      	cmp	r3, #0
 8003878:	d160      	bne.n	800393c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a7f      	ldr	r2, [pc, #508]	@ (8003a7c <HAL_DMA_IRQHandler+0xc74>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d04a      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a7d      	ldr	r2, [pc, #500]	@ (8003a80 <HAL_DMA_IRQHandler+0xc78>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d045      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4a7c      	ldr	r2, [pc, #496]	@ (8003a84 <HAL_DMA_IRQHandler+0xc7c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d040      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a7a      	ldr	r2, [pc, #488]	@ (8003a88 <HAL_DMA_IRQHandler+0xc80>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d03b      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	4a79      	ldr	r2, [pc, #484]	@ (8003a8c <HAL_DMA_IRQHandler+0xc84>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d036      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a77      	ldr	r2, [pc, #476]	@ (8003a90 <HAL_DMA_IRQHandler+0xc88>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d031      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4a76      	ldr	r2, [pc, #472]	@ (8003a94 <HAL_DMA_IRQHandler+0xc8c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d02c      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a74      	ldr	r2, [pc, #464]	@ (8003a98 <HAL_DMA_IRQHandler+0xc90>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d027      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a73      	ldr	r2, [pc, #460]	@ (8003a9c <HAL_DMA_IRQHandler+0xc94>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d022      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a71      	ldr	r2, [pc, #452]	@ (8003aa0 <HAL_DMA_IRQHandler+0xc98>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d01d      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a70      	ldr	r2, [pc, #448]	@ (8003aa4 <HAL_DMA_IRQHandler+0xc9c>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d018      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a6e      	ldr	r2, [pc, #440]	@ (8003aa8 <HAL_DMA_IRQHandler+0xca0>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a6d      	ldr	r2, [pc, #436]	@ (8003aac <HAL_DMA_IRQHandler+0xca4>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d00e      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a6b      	ldr	r2, [pc, #428]	@ (8003ab0 <HAL_DMA_IRQHandler+0xca8>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d009      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6a      	ldr	r2, [pc, #424]	@ (8003ab4 <HAL_DMA_IRQHandler+0xcac>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d004      	beq.n	800391a <HAL_DMA_IRQHandler+0xb12>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a68      	ldr	r2, [pc, #416]	@ (8003ab8 <HAL_DMA_IRQHandler+0xcb0>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <HAL_DMA_IRQHandler+0xb24>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0208 	bic.w	r2, r2, #8
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	e007      	b.n	800393c <HAL_DMA_IRQHandler+0xb34>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	f000 8165 	beq.w	8003c10 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800394e:	e15f      	b.n	8003c10 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2202      	movs	r2, #2
 800395a:	409a      	lsls	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	4013      	ands	r3, r2
 8003960:	2b00      	cmp	r3, #0
 8003962:	f000 80c5 	beq.w	8003af0 <HAL_DMA_IRQHandler+0xce8>
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	2b00      	cmp	r3, #0
 800396e:	f000 80bf 	beq.w	8003af0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2202      	movs	r2, #2
 800397c:	409a      	lsls	r2, r3
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d018      	beq.n	80039be <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d109      	bne.n	80039aa <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800399a:	2b00      	cmp	r3, #0
 800399c:	f000 813a 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039a8:	e134      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	f000 8130 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b8:	6878      	ldr	r0, [r7, #4]
 80039ba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039bc:	e12a      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	f003 0320 	and.w	r3, r3, #32
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	f040 8089 	bne.w	8003adc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2b      	ldr	r2, [pc, #172]	@ (8003a7c <HAL_DMA_IRQHandler+0xc74>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d04a      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a29      	ldr	r2, [pc, #164]	@ (8003a80 <HAL_DMA_IRQHandler+0xc78>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d045      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a28      	ldr	r2, [pc, #160]	@ (8003a84 <HAL_DMA_IRQHandler+0xc7c>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d040      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a26      	ldr	r2, [pc, #152]	@ (8003a88 <HAL_DMA_IRQHandler+0xc80>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d03b      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a25      	ldr	r2, [pc, #148]	@ (8003a8c <HAL_DMA_IRQHandler+0xc84>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d036      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4a23      	ldr	r2, [pc, #140]	@ (8003a90 <HAL_DMA_IRQHandler+0xc88>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d031      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a22      	ldr	r2, [pc, #136]	@ (8003a94 <HAL_DMA_IRQHandler+0xc8c>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d02c      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a20      	ldr	r2, [pc, #128]	@ (8003a98 <HAL_DMA_IRQHandler+0xc90>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d027      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8003a9c <HAL_DMA_IRQHandler+0xc94>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d022      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1d      	ldr	r2, [pc, #116]	@ (8003aa0 <HAL_DMA_IRQHandler+0xc98>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01d      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1c      	ldr	r2, [pc, #112]	@ (8003aa4 <HAL_DMA_IRQHandler+0xc9c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d018      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa8 <HAL_DMA_IRQHandler+0xca0>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d013      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a19      	ldr	r2, [pc, #100]	@ (8003aac <HAL_DMA_IRQHandler+0xca4>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00e      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a17      	ldr	r2, [pc, #92]	@ (8003ab0 <HAL_DMA_IRQHandler+0xca8>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d009      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a16      	ldr	r2, [pc, #88]	@ (8003ab4 <HAL_DMA_IRQHandler+0xcac>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d004      	beq.n	8003a6a <HAL_DMA_IRQHandler+0xc62>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a14      	ldr	r2, [pc, #80]	@ (8003ab8 <HAL_DMA_IRQHandler+0xcb0>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d128      	bne.n	8003abc <HAL_DMA_IRQHandler+0xcb4>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f022 0214 	bic.w	r2, r2, #20
 8003a78:	601a      	str	r2, [r3, #0]
 8003a7a:	e027      	b.n	8003acc <HAL_DMA_IRQHandler+0xcc4>
 8003a7c:	40020010 	.word	0x40020010
 8003a80:	40020028 	.word	0x40020028
 8003a84:	40020040 	.word	0x40020040
 8003a88:	40020058 	.word	0x40020058
 8003a8c:	40020070 	.word	0x40020070
 8003a90:	40020088 	.word	0x40020088
 8003a94:	400200a0 	.word	0x400200a0
 8003a98:	400200b8 	.word	0x400200b8
 8003a9c:	40020410 	.word	0x40020410
 8003aa0:	40020428 	.word	0x40020428
 8003aa4:	40020440 	.word	0x40020440
 8003aa8:	40020458 	.word	0x40020458
 8003aac:	40020470 	.word	0x40020470
 8003ab0:	40020488 	.word	0x40020488
 8003ab4:	400204a0 	.word	0x400204a0
 8003ab8:	400204b8 	.word	0x400204b8
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 020a 	bic.w	r2, r2, #10
 8003aca:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2201      	movs	r2, #1
 8003ad0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8097 	beq.w	8003c14 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003aee:	e091      	b.n	8003c14 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003af4:	f003 031f 	and.w	r3, r3, #31
 8003af8:	2208      	movs	r2, #8
 8003afa:	409a      	lsls	r2, r3
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	4013      	ands	r3, r2
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	f000 8088 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 8082 	beq.w	8003c16 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a41      	ldr	r2, [pc, #260]	@ (8003c1c <HAL_DMA_IRQHandler+0xe14>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d04a      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a3f      	ldr	r2, [pc, #252]	@ (8003c20 <HAL_DMA_IRQHandler+0xe18>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d045      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a3e      	ldr	r2, [pc, #248]	@ (8003c24 <HAL_DMA_IRQHandler+0xe1c>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d040      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a3c      	ldr	r2, [pc, #240]	@ (8003c28 <HAL_DMA_IRQHandler+0xe20>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d03b      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003c2c <HAL_DMA_IRQHandler+0xe24>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d036      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4a39      	ldr	r2, [pc, #228]	@ (8003c30 <HAL_DMA_IRQHandler+0xe28>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d031      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a38      	ldr	r2, [pc, #224]	@ (8003c34 <HAL_DMA_IRQHandler+0xe2c>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d02c      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a36      	ldr	r2, [pc, #216]	@ (8003c38 <HAL_DMA_IRQHandler+0xe30>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d027      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a35      	ldr	r2, [pc, #212]	@ (8003c3c <HAL_DMA_IRQHandler+0xe34>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d022      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a33      	ldr	r2, [pc, #204]	@ (8003c40 <HAL_DMA_IRQHandler+0xe38>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01d      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	4a32      	ldr	r2, [pc, #200]	@ (8003c44 <HAL_DMA_IRQHandler+0xe3c>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d018      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4a30      	ldr	r2, [pc, #192]	@ (8003c48 <HAL_DMA_IRQHandler+0xe40>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d013      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8003c4c <HAL_DMA_IRQHandler+0xe44>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a2d      	ldr	r2, [pc, #180]	@ (8003c50 <HAL_DMA_IRQHandler+0xe48>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d009      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c54 <HAL_DMA_IRQHandler+0xe4c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_DMA_IRQHandler+0xdaa>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2a      	ldr	r2, [pc, #168]	@ (8003c58 <HAL_DMA_IRQHandler+0xe50>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d108      	bne.n	8003bc4 <HAL_DMA_IRQHandler+0xdbc>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 021c 	bic.w	r2, r2, #28
 8003bc0:	601a      	str	r2, [r3, #0]
 8003bc2:	e007      	b.n	8003bd4 <HAL_DMA_IRQHandler+0xdcc>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f022 020e 	bic.w	r2, r2, #14
 8003bd2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bd8:	f003 031f 	and.w	r3, r3, #31
 8003bdc:	2201      	movs	r2, #1
 8003bde:	409a      	lsls	r2, r3
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	4798      	blx	r3
 8003c0a:	e004      	b.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003c0c:	bf00      	nop
 8003c0e:	e002      	b.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c10:	bf00      	nop
 8003c12:	e000      	b.n	8003c16 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003c14:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003c16:	3728      	adds	r7, #40	@ 0x28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	40020010 	.word	0x40020010
 8003c20:	40020028 	.word	0x40020028
 8003c24:	40020040 	.word	0x40020040
 8003c28:	40020058 	.word	0x40020058
 8003c2c:	40020070 	.word	0x40020070
 8003c30:	40020088 	.word	0x40020088
 8003c34:	400200a0 	.word	0x400200a0
 8003c38:	400200b8 	.word	0x400200b8
 8003c3c:	40020410 	.word	0x40020410
 8003c40:	40020428 	.word	0x40020428
 8003c44:	40020440 	.word	0x40020440
 8003c48:	40020458 	.word	0x40020458
 8003c4c:	40020470 	.word	0x40020470
 8003c50:	40020488 	.word	0x40020488
 8003c54:	400204a0 	.word	0x400204a0
 8003c58:	400204b8 	.word	0x400204b8

08003c5c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	370c      	adds	r7, #12
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr

08003c74 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b087      	sub	sp, #28
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
 8003c80:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c86:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c8c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a7f      	ldr	r2, [pc, #508]	@ (8003e90 <DMA_SetConfig+0x21c>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d072      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a7d      	ldr	r2, [pc, #500]	@ (8003e94 <DMA_SetConfig+0x220>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d06d      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a7c      	ldr	r2, [pc, #496]	@ (8003e98 <DMA_SetConfig+0x224>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d068      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a7a      	ldr	r2, [pc, #488]	@ (8003e9c <DMA_SetConfig+0x228>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d063      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a79      	ldr	r2, [pc, #484]	@ (8003ea0 <DMA_SetConfig+0x22c>)
 8003cbc:	4293      	cmp	r3, r2
 8003cbe:	d05e      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a77      	ldr	r2, [pc, #476]	@ (8003ea4 <DMA_SetConfig+0x230>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d059      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a76      	ldr	r2, [pc, #472]	@ (8003ea8 <DMA_SetConfig+0x234>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d054      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a74      	ldr	r2, [pc, #464]	@ (8003eac <DMA_SetConfig+0x238>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d04f      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4a73      	ldr	r2, [pc, #460]	@ (8003eb0 <DMA_SetConfig+0x23c>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d04a      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4a71      	ldr	r2, [pc, #452]	@ (8003eb4 <DMA_SetConfig+0x240>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d045      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a70      	ldr	r2, [pc, #448]	@ (8003eb8 <DMA_SetConfig+0x244>)
 8003cf8:	4293      	cmp	r3, r2
 8003cfa:	d040      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a6e      	ldr	r2, [pc, #440]	@ (8003ebc <DMA_SetConfig+0x248>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d03b      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ec0 <DMA_SetConfig+0x24c>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d036      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4a6b      	ldr	r2, [pc, #428]	@ (8003ec4 <DMA_SetConfig+0x250>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d031      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a6a      	ldr	r2, [pc, #424]	@ (8003ec8 <DMA_SetConfig+0x254>)
 8003d20:	4293      	cmp	r3, r2
 8003d22:	d02c      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a68      	ldr	r2, [pc, #416]	@ (8003ecc <DMA_SetConfig+0x258>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d027      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a67      	ldr	r2, [pc, #412]	@ (8003ed0 <DMA_SetConfig+0x25c>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d022      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a65      	ldr	r2, [pc, #404]	@ (8003ed4 <DMA_SetConfig+0x260>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d01d      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a64      	ldr	r2, [pc, #400]	@ (8003ed8 <DMA_SetConfig+0x264>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d018      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a62      	ldr	r2, [pc, #392]	@ (8003edc <DMA_SetConfig+0x268>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d013      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a61      	ldr	r2, [pc, #388]	@ (8003ee0 <DMA_SetConfig+0x26c>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d00e      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a5f      	ldr	r2, [pc, #380]	@ (8003ee4 <DMA_SetConfig+0x270>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d009      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee8 <DMA_SetConfig+0x274>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d004      	beq.n	8003d7e <DMA_SetConfig+0x10a>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a5c      	ldr	r2, [pc, #368]	@ (8003eec <DMA_SetConfig+0x278>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d101      	bne.n	8003d82 <DMA_SetConfig+0x10e>
 8003d7e:	2301      	movs	r3, #1
 8003d80:	e000      	b.n	8003d84 <DMA_SetConfig+0x110>
 8003d82:	2300      	movs	r3, #0
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d00d      	beq.n	8003da4 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003d90:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d004      	beq.n	8003da4 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003da2:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a39      	ldr	r2, [pc, #228]	@ (8003e90 <DMA_SetConfig+0x21c>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d04a      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a38      	ldr	r2, [pc, #224]	@ (8003e94 <DMA_SetConfig+0x220>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d045      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a36      	ldr	r2, [pc, #216]	@ (8003e98 <DMA_SetConfig+0x224>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d040      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a35      	ldr	r2, [pc, #212]	@ (8003e9c <DMA_SetConfig+0x228>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d03b      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a33      	ldr	r2, [pc, #204]	@ (8003ea0 <DMA_SetConfig+0x22c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d036      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a32      	ldr	r2, [pc, #200]	@ (8003ea4 <DMA_SetConfig+0x230>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d031      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a30      	ldr	r2, [pc, #192]	@ (8003ea8 <DMA_SetConfig+0x234>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d02c      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a2f      	ldr	r2, [pc, #188]	@ (8003eac <DMA_SetConfig+0x238>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d027      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a2d      	ldr	r2, [pc, #180]	@ (8003eb0 <DMA_SetConfig+0x23c>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d022      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a2c      	ldr	r2, [pc, #176]	@ (8003eb4 <DMA_SetConfig+0x240>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d01d      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a2a      	ldr	r2, [pc, #168]	@ (8003eb8 <DMA_SetConfig+0x244>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d018      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a29      	ldr	r2, [pc, #164]	@ (8003ebc <DMA_SetConfig+0x248>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d013      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a27      	ldr	r2, [pc, #156]	@ (8003ec0 <DMA_SetConfig+0x24c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d00e      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a26      	ldr	r2, [pc, #152]	@ (8003ec4 <DMA_SetConfig+0x250>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d009      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a24      	ldr	r2, [pc, #144]	@ (8003ec8 <DMA_SetConfig+0x254>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d004      	beq.n	8003e44 <DMA_SetConfig+0x1d0>
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a23      	ldr	r2, [pc, #140]	@ (8003ecc <DMA_SetConfig+0x258>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d101      	bne.n	8003e48 <DMA_SetConfig+0x1d4>
 8003e44:	2301      	movs	r3, #1
 8003e46:	e000      	b.n	8003e4a <DMA_SetConfig+0x1d6>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d059      	beq.n	8003f02 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e52:	f003 031f 	and.w	r3, r3, #31
 8003e56:	223f      	movs	r2, #63	@ 0x3f
 8003e58:	409a      	lsls	r2, r3
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003e6c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	689b      	ldr	r3, [r3, #8]
 8003e7a:	2b40      	cmp	r3, #64	@ 0x40
 8003e7c:	d138      	bne.n	8003ef0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003e8e:	e086      	b.n	8003f9e <DMA_SetConfig+0x32a>
 8003e90:	40020010 	.word	0x40020010
 8003e94:	40020028 	.word	0x40020028
 8003e98:	40020040 	.word	0x40020040
 8003e9c:	40020058 	.word	0x40020058
 8003ea0:	40020070 	.word	0x40020070
 8003ea4:	40020088 	.word	0x40020088
 8003ea8:	400200a0 	.word	0x400200a0
 8003eac:	400200b8 	.word	0x400200b8
 8003eb0:	40020410 	.word	0x40020410
 8003eb4:	40020428 	.word	0x40020428
 8003eb8:	40020440 	.word	0x40020440
 8003ebc:	40020458 	.word	0x40020458
 8003ec0:	40020470 	.word	0x40020470
 8003ec4:	40020488 	.word	0x40020488
 8003ec8:	400204a0 	.word	0x400204a0
 8003ecc:	400204b8 	.word	0x400204b8
 8003ed0:	58025408 	.word	0x58025408
 8003ed4:	5802541c 	.word	0x5802541c
 8003ed8:	58025430 	.word	0x58025430
 8003edc:	58025444 	.word	0x58025444
 8003ee0:	58025458 	.word	0x58025458
 8003ee4:	5802546c 	.word	0x5802546c
 8003ee8:	58025480 	.word	0x58025480
 8003eec:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	68ba      	ldr	r2, [r7, #8]
 8003ef6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	60da      	str	r2, [r3, #12]
}
 8003f00:	e04d      	b.n	8003f9e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a29      	ldr	r2, [pc, #164]	@ (8003fac <DMA_SetConfig+0x338>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d022      	beq.n	8003f52 <DMA_SetConfig+0x2de>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a27      	ldr	r2, [pc, #156]	@ (8003fb0 <DMA_SetConfig+0x33c>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d01d      	beq.n	8003f52 <DMA_SetConfig+0x2de>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a26      	ldr	r2, [pc, #152]	@ (8003fb4 <DMA_SetConfig+0x340>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d018      	beq.n	8003f52 <DMA_SetConfig+0x2de>
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a24      	ldr	r2, [pc, #144]	@ (8003fb8 <DMA_SetConfig+0x344>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d013      	beq.n	8003f52 <DMA_SetConfig+0x2de>
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a23      	ldr	r2, [pc, #140]	@ (8003fbc <DMA_SetConfig+0x348>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d00e      	beq.n	8003f52 <DMA_SetConfig+0x2de>
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a21      	ldr	r2, [pc, #132]	@ (8003fc0 <DMA_SetConfig+0x34c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d009      	beq.n	8003f52 <DMA_SetConfig+0x2de>
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a20      	ldr	r2, [pc, #128]	@ (8003fc4 <DMA_SetConfig+0x350>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d004      	beq.n	8003f52 <DMA_SetConfig+0x2de>
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc8 <DMA_SetConfig+0x354>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d101      	bne.n	8003f56 <DMA_SetConfig+0x2e2>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e000      	b.n	8003f58 <DMA_SetConfig+0x2e4>
 8003f56:	2300      	movs	r3, #0
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d020      	beq.n	8003f9e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f60:	f003 031f 	and.w	r3, r3, #31
 8003f64:	2201      	movs	r2, #1
 8003f66:	409a      	lsls	r2, r3
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b40      	cmp	r3, #64	@ 0x40
 8003f7a:	d108      	bne.n	8003f8e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68ba      	ldr	r2, [r7, #8]
 8003f8a:	60da      	str	r2, [r3, #12]
}
 8003f8c:	e007      	b.n	8003f9e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	68ba      	ldr	r2, [r7, #8]
 8003f94:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	687a      	ldr	r2, [r7, #4]
 8003f9c:	60da      	str	r2, [r3, #12]
}
 8003f9e:	bf00      	nop
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	58025408 	.word	0x58025408
 8003fb0:	5802541c 	.word	0x5802541c
 8003fb4:	58025430 	.word	0x58025430
 8003fb8:	58025444 	.word	0x58025444
 8003fbc:	58025458 	.word	0x58025458
 8003fc0:	5802546c 	.word	0x5802546c
 8003fc4:	58025480 	.word	0x58025480
 8003fc8:	58025494 	.word	0x58025494

08003fcc <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b085      	sub	sp, #20
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a42      	ldr	r2, [pc, #264]	@ (80040e4 <DMA_CalcBaseAndBitshift+0x118>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d04a      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a41      	ldr	r2, [pc, #260]	@ (80040e8 <DMA_CalcBaseAndBitshift+0x11c>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d045      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a3f      	ldr	r2, [pc, #252]	@ (80040ec <DMA_CalcBaseAndBitshift+0x120>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d040      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a3e      	ldr	r2, [pc, #248]	@ (80040f0 <DMA_CalcBaseAndBitshift+0x124>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d03b      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a3c      	ldr	r2, [pc, #240]	@ (80040f4 <DMA_CalcBaseAndBitshift+0x128>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d036      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a3b      	ldr	r2, [pc, #236]	@ (80040f8 <DMA_CalcBaseAndBitshift+0x12c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d031      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a39      	ldr	r2, [pc, #228]	@ (80040fc <DMA_CalcBaseAndBitshift+0x130>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02c      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a38      	ldr	r2, [pc, #224]	@ (8004100 <DMA_CalcBaseAndBitshift+0x134>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d027      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a36      	ldr	r2, [pc, #216]	@ (8004104 <DMA_CalcBaseAndBitshift+0x138>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d022      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4a35      	ldr	r2, [pc, #212]	@ (8004108 <DMA_CalcBaseAndBitshift+0x13c>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d01d      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a33      	ldr	r2, [pc, #204]	@ (800410c <DMA_CalcBaseAndBitshift+0x140>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d018      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a32      	ldr	r2, [pc, #200]	@ (8004110 <DMA_CalcBaseAndBitshift+0x144>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d013      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a30      	ldr	r2, [pc, #192]	@ (8004114 <DMA_CalcBaseAndBitshift+0x148>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d00e      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a2f      	ldr	r2, [pc, #188]	@ (8004118 <DMA_CalcBaseAndBitshift+0x14c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d009      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a2d      	ldr	r2, [pc, #180]	@ (800411c <DMA_CalcBaseAndBitshift+0x150>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d004      	beq.n	8004074 <DMA_CalcBaseAndBitshift+0xa8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a2c      	ldr	r2, [pc, #176]	@ (8004120 <DMA_CalcBaseAndBitshift+0x154>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d101      	bne.n	8004078 <DMA_CalcBaseAndBitshift+0xac>
 8004074:	2301      	movs	r3, #1
 8004076:	e000      	b.n	800407a <DMA_CalcBaseAndBitshift+0xae>
 8004078:	2300      	movs	r3, #0
 800407a:	2b00      	cmp	r3, #0
 800407c:	d024      	beq.n	80040c8 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	3b10      	subs	r3, #16
 8004086:	4a27      	ldr	r2, [pc, #156]	@ (8004124 <DMA_CalcBaseAndBitshift+0x158>)
 8004088:	fba2 2303 	umull	r2, r3, r2, r3
 800408c:	091b      	lsrs	r3, r3, #4
 800408e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	4a24      	ldr	r2, [pc, #144]	@ (8004128 <DMA_CalcBaseAndBitshift+0x15c>)
 8004098:	5cd3      	ldrb	r3, [r2, r3]
 800409a:	461a      	mov	r2, r3
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d908      	bls.n	80040b8 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	461a      	mov	r2, r3
 80040ac:	4b1f      	ldr	r3, [pc, #124]	@ (800412c <DMA_CalcBaseAndBitshift+0x160>)
 80040ae:	4013      	ands	r3, r2
 80040b0:	1d1a      	adds	r2, r3, #4
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80040b6:	e00d      	b.n	80040d4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	461a      	mov	r2, r3
 80040be:	4b1b      	ldr	r3, [pc, #108]	@ (800412c <DMA_CalcBaseAndBitshift+0x160>)
 80040c0:	4013      	ands	r3, r2
 80040c2:	687a      	ldr	r2, [r7, #4]
 80040c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80040c6:	e005      	b.n	80040d4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3714      	adds	r7, #20
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	40020010 	.word	0x40020010
 80040e8:	40020028 	.word	0x40020028
 80040ec:	40020040 	.word	0x40020040
 80040f0:	40020058 	.word	0x40020058
 80040f4:	40020070 	.word	0x40020070
 80040f8:	40020088 	.word	0x40020088
 80040fc:	400200a0 	.word	0x400200a0
 8004100:	400200b8 	.word	0x400200b8
 8004104:	40020410 	.word	0x40020410
 8004108:	40020428 	.word	0x40020428
 800410c:	40020440 	.word	0x40020440
 8004110:	40020458 	.word	0x40020458
 8004114:	40020470 	.word	0x40020470
 8004118:	40020488 	.word	0x40020488
 800411c:	400204a0 	.word	0x400204a0
 8004120:	400204b8 	.word	0x400204b8
 8004124:	aaaaaaab 	.word	0xaaaaaaab
 8004128:	08009684 	.word	0x08009684
 800412c:	fffffc00 	.word	0xfffffc00

08004130 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004130:	b480      	push	{r7}
 8004132:	b085      	sub	sp, #20
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004138:	2300      	movs	r3, #0
 800413a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	699b      	ldr	r3, [r3, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d120      	bne.n	8004186 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004148:	2b03      	cmp	r3, #3
 800414a:	d858      	bhi.n	80041fe <DMA_CheckFifoParam+0xce>
 800414c:	a201      	add	r2, pc, #4	@ (adr r2, 8004154 <DMA_CheckFifoParam+0x24>)
 800414e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004152:	bf00      	nop
 8004154:	08004165 	.word	0x08004165
 8004158:	08004177 	.word	0x08004177
 800415c:	08004165 	.word	0x08004165
 8004160:	080041ff 	.word	0x080041ff
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004168:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d048      	beq.n	8004202 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004174:	e045      	b.n	8004202 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800417a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800417e:	d142      	bne.n	8004206 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004184:	e03f      	b.n	8004206 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	699b      	ldr	r3, [r3, #24]
 800418a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800418e:	d123      	bne.n	80041d8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004194:	2b03      	cmp	r3, #3
 8004196:	d838      	bhi.n	800420a <DMA_CheckFifoParam+0xda>
 8004198:	a201      	add	r2, pc, #4	@ (adr r2, 80041a0 <DMA_CheckFifoParam+0x70>)
 800419a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419e:	bf00      	nop
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041b7 	.word	0x080041b7
 80041a8:	080041b1 	.word	0x080041b1
 80041ac:	080041c9 	.word	0x080041c9
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73fb      	strb	r3, [r7, #15]
        break;
 80041b4:	e030      	b.n	8004218 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ba:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d025      	beq.n	800420e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041c6:	e022      	b.n	800420e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041cc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80041d0:	d11f      	bne.n	8004212 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80041d2:	2301      	movs	r3, #1
 80041d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80041d6:	e01c      	b.n	8004212 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d902      	bls.n	80041e6 <DMA_CheckFifoParam+0xb6>
 80041e0:	2b03      	cmp	r3, #3
 80041e2:	d003      	beq.n	80041ec <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80041e4:	e018      	b.n	8004218 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	73fb      	strb	r3, [r7, #15]
        break;
 80041ea:	e015      	b.n	8004218 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041f0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00e      	beq.n	8004216 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	73fb      	strb	r3, [r7, #15]
    break;
 80041fc:	e00b      	b.n	8004216 <DMA_CheckFifoParam+0xe6>
        break;
 80041fe:	bf00      	nop
 8004200:	e00a      	b.n	8004218 <DMA_CheckFifoParam+0xe8>
        break;
 8004202:	bf00      	nop
 8004204:	e008      	b.n	8004218 <DMA_CheckFifoParam+0xe8>
        break;
 8004206:	bf00      	nop
 8004208:	e006      	b.n	8004218 <DMA_CheckFifoParam+0xe8>
        break;
 800420a:	bf00      	nop
 800420c:	e004      	b.n	8004218 <DMA_CheckFifoParam+0xe8>
        break;
 800420e:	bf00      	nop
 8004210:	e002      	b.n	8004218 <DMA_CheckFifoParam+0xe8>
        break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <DMA_CheckFifoParam+0xe8>
    break;
 8004216:	bf00      	nop
    }
  }

  return status;
 8004218:	7bfb      	ldrb	r3, [r7, #15]
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop

08004228 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a38      	ldr	r2, [pc, #224]	@ (800431c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d022      	beq.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a36      	ldr	r2, [pc, #216]	@ (8004320 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d01d      	beq.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a35      	ldr	r2, [pc, #212]	@ (8004324 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d018      	beq.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a33      	ldr	r2, [pc, #204]	@ (8004328 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d013      	beq.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a32      	ldr	r2, [pc, #200]	@ (800432c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d00e      	beq.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a30      	ldr	r2, [pc, #192]	@ (8004330 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d009      	beq.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a2f      	ldr	r2, [pc, #188]	@ (8004334 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d004      	beq.n	8004286 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2d      	ldr	r2, [pc, #180]	@ (8004338 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d101      	bne.n	800428a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d01a      	beq.n	80042c6 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	b2db      	uxtb	r3, r3
 8004296:	3b08      	subs	r3, #8
 8004298:	4a28      	ldr	r2, [pc, #160]	@ (800433c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800429a:	fba2 2303 	umull	r2, r3, r2, r3
 800429e:	091b      	lsrs	r3, r3, #4
 80042a0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	4b26      	ldr	r3, [pc, #152]	@ (8004340 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80042a6:	4413      	add	r3, r2
 80042a8:	009b      	lsls	r3, r3, #2
 80042aa:	461a      	mov	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a24      	ldr	r2, [pc, #144]	@ (8004344 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80042b4:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	f003 031f 	and.w	r3, r3, #31
 80042bc:	2201      	movs	r2, #1
 80042be:	409a      	lsls	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80042c4:	e024      	b.n	8004310 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	3b10      	subs	r3, #16
 80042ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004348 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	091b      	lsrs	r3, r3, #4
 80042d6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	4a1c      	ldr	r2, [pc, #112]	@ (800434c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d806      	bhi.n	80042ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004350 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d902      	bls.n	80042ee <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	3308      	adds	r3, #8
 80042ec:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	4b18      	ldr	r3, [pc, #96]	@ (8004354 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80042f2:	4413      	add	r3, r2
 80042f4:	009b      	lsls	r3, r3, #2
 80042f6:	461a      	mov	r2, r3
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	4a16      	ldr	r2, [pc, #88]	@ (8004358 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004300:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f003 031f 	and.w	r3, r3, #31
 8004308:	2201      	movs	r2, #1
 800430a:	409a      	lsls	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004310:	bf00      	nop
 8004312:	3714      	adds	r7, #20
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr
 800431c:	58025408 	.word	0x58025408
 8004320:	5802541c 	.word	0x5802541c
 8004324:	58025430 	.word	0x58025430
 8004328:	58025444 	.word	0x58025444
 800432c:	58025458 	.word	0x58025458
 8004330:	5802546c 	.word	0x5802546c
 8004334:	58025480 	.word	0x58025480
 8004338:	58025494 	.word	0x58025494
 800433c:	cccccccd 	.word	0xcccccccd
 8004340:	16009600 	.word	0x16009600
 8004344:	58025880 	.word	0x58025880
 8004348:	aaaaaaab 	.word	0xaaaaaaab
 800434c:	400204b8 	.word	0x400204b8
 8004350:	4002040f 	.word	0x4002040f
 8004354:	10008200 	.word	0x10008200
 8004358:	40020880 	.word	0x40020880

0800435c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800435c:	b480      	push	{r7}
 800435e:	b085      	sub	sp, #20
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04a      	beq.n	8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2b08      	cmp	r3, #8
 8004376:	d847      	bhi.n	8004408 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a25      	ldr	r2, [pc, #148]	@ (8004414 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d022      	beq.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a24      	ldr	r2, [pc, #144]	@ (8004418 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d01d      	beq.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a22      	ldr	r2, [pc, #136]	@ (800441c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d018      	beq.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a21      	ldr	r2, [pc, #132]	@ (8004420 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d013      	beq.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a1f      	ldr	r2, [pc, #124]	@ (8004424 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d00e      	beq.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a1e      	ldr	r2, [pc, #120]	@ (8004428 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d009      	beq.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a1c      	ldr	r2, [pc, #112]	@ (800442c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d004      	beq.n	80043c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a1b      	ldr	r2, [pc, #108]	@ (8004430 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d101      	bne.n	80043cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80043c8:	2301      	movs	r3, #1
 80043ca:	e000      	b.n	80043ce <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80043cc:	2300      	movs	r3, #0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80043d2:	68fa      	ldr	r2, [r7, #12]
 80043d4:	4b17      	ldr	r3, [pc, #92]	@ (8004434 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80043d6:	4413      	add	r3, r2
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	461a      	mov	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a15      	ldr	r2, [pc, #84]	@ (8004438 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80043e4:	671a      	str	r2, [r3, #112]	@ 0x70
 80043e6:	e009      	b.n	80043fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4b14      	ldr	r3, [pc, #80]	@ (800443c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80043ec:	4413      	add	r3, r2
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	461a      	mov	r2, r3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a11      	ldr	r2, [pc, #68]	@ (8004440 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80043fa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	3b01      	subs	r3, #1
 8004400:	2201      	movs	r2, #1
 8004402:	409a      	lsls	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	58025408 	.word	0x58025408
 8004418:	5802541c 	.word	0x5802541c
 800441c:	58025430 	.word	0x58025430
 8004420:	58025444 	.word	0x58025444
 8004424:	58025458 	.word	0x58025458
 8004428:	5802546c 	.word	0x5802546c
 800442c:	58025480 	.word	0x58025480
 8004430:	58025494 	.word	0x58025494
 8004434:	1600963f 	.word	0x1600963f
 8004438:	58025940 	.word	0x58025940
 800443c:	1000823f 	.word	0x1000823f
 8004440:	40020940 	.word	0x40020940

08004444 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004444:	b480      	push	{r7}
 8004446:	b089      	sub	sp, #36	@ 0x24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
 800444c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004452:	4b86      	ldr	r3, [pc, #536]	@ (800466c <HAL_GPIO_Init+0x228>)
 8004454:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004456:	e18c      	b.n	8004772 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	2101      	movs	r1, #1
 800445e:	69fb      	ldr	r3, [r7, #28]
 8004460:	fa01 f303 	lsl.w	r3, r1, r3
 8004464:	4013      	ands	r3, r2
 8004466:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	2b00      	cmp	r3, #0
 800446c:	f000 817e 	beq.w	800476c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0303 	and.w	r3, r3, #3
 8004478:	2b01      	cmp	r3, #1
 800447a:	d005      	beq.n	8004488 <HAL_GPIO_Init+0x44>
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f003 0303 	and.w	r3, r3, #3
 8004484:	2b02      	cmp	r3, #2
 8004486:	d130      	bne.n	80044ea <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	005b      	lsls	r3, r3, #1
 8004492:	2203      	movs	r2, #3
 8004494:	fa02 f303 	lsl.w	r3, r2, r3
 8004498:	43db      	mvns	r3, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4013      	ands	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	68da      	ldr	r2, [r3, #12]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	005b      	lsls	r3, r3, #1
 80044a8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	4313      	orrs	r3, r2
 80044b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	685b      	ldr	r3, [r3, #4]
 80044bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80044be:	2201      	movs	r2, #1
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	091b      	lsrs	r3, r3, #4
 80044d4:	f003 0201 	and.w	r2, r3, #1
 80044d8:	69fb      	ldr	r3, [r7, #28]
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0303 	and.w	r3, r3, #3
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d017      	beq.n	8004526 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	005b      	lsls	r3, r3, #1
 8004500:	2203      	movs	r2, #3
 8004502:	fa02 f303 	lsl.w	r3, r2, r3
 8004506:	43db      	mvns	r3, r3
 8004508:	69ba      	ldr	r2, [r7, #24]
 800450a:	4013      	ands	r3, r2
 800450c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	689a      	ldr	r2, [r3, #8]
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	fa02 f303 	lsl.w	r3, r2, r3
 800451a:	69ba      	ldr	r2, [r7, #24]
 800451c:	4313      	orrs	r3, r2
 800451e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d123      	bne.n	800457a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	08da      	lsrs	r2, r3, #3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	3208      	adds	r2, #8
 800453a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800453e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f003 0307 	and.w	r3, r3, #7
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	220f      	movs	r2, #15
 800454a:	fa02 f303 	lsl.w	r3, r2, r3
 800454e:	43db      	mvns	r3, r3
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	4013      	ands	r3, r2
 8004554:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	691a      	ldr	r2, [r3, #16]
 800455a:	69fb      	ldr	r3, [r7, #28]
 800455c:	f003 0307 	and.w	r3, r3, #7
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	fa02 f303 	lsl.w	r3, r2, r3
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800456c:	69fb      	ldr	r3, [r7, #28]
 800456e:	08da      	lsrs	r2, r3, #3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	3208      	adds	r2, #8
 8004574:	69b9      	ldr	r1, [r7, #24]
 8004576:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	2203      	movs	r2, #3
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43db      	mvns	r3, r3
 800458c:	69ba      	ldr	r2, [r7, #24]
 800458e:	4013      	ands	r3, r2
 8004590:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	f003 0203 	and.w	r2, r3, #3
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	005b      	lsls	r3, r3, #1
 800459e:	fa02 f303 	lsl.w	r3, r2, r3
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	69ba      	ldr	r2, [r7, #24]
 80045ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80d8 	beq.w	800476c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045bc:	4b2c      	ldr	r3, [pc, #176]	@ (8004670 <HAL_GPIO_Init+0x22c>)
 80045be:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045c2:	4a2b      	ldr	r2, [pc, #172]	@ (8004670 <HAL_GPIO_Init+0x22c>)
 80045c4:	f043 0302 	orr.w	r3, r3, #2
 80045c8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80045cc:	4b28      	ldr	r3, [pc, #160]	@ (8004670 <HAL_GPIO_Init+0x22c>)
 80045ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	60fb      	str	r3, [r7, #12]
 80045d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80045da:	4a26      	ldr	r2, [pc, #152]	@ (8004674 <HAL_GPIO_Init+0x230>)
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	089b      	lsrs	r3, r3, #2
 80045e0:	3302      	adds	r3, #2
 80045e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0303 	and.w	r3, r3, #3
 80045ee:	009b      	lsls	r3, r3, #2
 80045f0:	220f      	movs	r2, #15
 80045f2:	fa02 f303 	lsl.w	r3, r2, r3
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4a1d      	ldr	r2, [pc, #116]	@ (8004678 <HAL_GPIO_Init+0x234>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d04a      	beq.n	800469c <HAL_GPIO_Init+0x258>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	4a1c      	ldr	r2, [pc, #112]	@ (800467c <HAL_GPIO_Init+0x238>)
 800460a:	4293      	cmp	r3, r2
 800460c:	d02b      	beq.n	8004666 <HAL_GPIO_Init+0x222>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	4a1b      	ldr	r2, [pc, #108]	@ (8004680 <HAL_GPIO_Init+0x23c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d025      	beq.n	8004662 <HAL_GPIO_Init+0x21e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	4a1a      	ldr	r2, [pc, #104]	@ (8004684 <HAL_GPIO_Init+0x240>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d01f      	beq.n	800465e <HAL_GPIO_Init+0x21a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a19      	ldr	r2, [pc, #100]	@ (8004688 <HAL_GPIO_Init+0x244>)
 8004622:	4293      	cmp	r3, r2
 8004624:	d019      	beq.n	800465a <HAL_GPIO_Init+0x216>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	4a18      	ldr	r2, [pc, #96]	@ (800468c <HAL_GPIO_Init+0x248>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d013      	beq.n	8004656 <HAL_GPIO_Init+0x212>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a17      	ldr	r2, [pc, #92]	@ (8004690 <HAL_GPIO_Init+0x24c>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d00d      	beq.n	8004652 <HAL_GPIO_Init+0x20e>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	4a16      	ldr	r2, [pc, #88]	@ (8004694 <HAL_GPIO_Init+0x250>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d007      	beq.n	800464e <HAL_GPIO_Init+0x20a>
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	4a15      	ldr	r2, [pc, #84]	@ (8004698 <HAL_GPIO_Init+0x254>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d101      	bne.n	800464a <HAL_GPIO_Init+0x206>
 8004646:	2309      	movs	r3, #9
 8004648:	e029      	b.n	800469e <HAL_GPIO_Init+0x25a>
 800464a:	230a      	movs	r3, #10
 800464c:	e027      	b.n	800469e <HAL_GPIO_Init+0x25a>
 800464e:	2307      	movs	r3, #7
 8004650:	e025      	b.n	800469e <HAL_GPIO_Init+0x25a>
 8004652:	2306      	movs	r3, #6
 8004654:	e023      	b.n	800469e <HAL_GPIO_Init+0x25a>
 8004656:	2305      	movs	r3, #5
 8004658:	e021      	b.n	800469e <HAL_GPIO_Init+0x25a>
 800465a:	2304      	movs	r3, #4
 800465c:	e01f      	b.n	800469e <HAL_GPIO_Init+0x25a>
 800465e:	2303      	movs	r3, #3
 8004660:	e01d      	b.n	800469e <HAL_GPIO_Init+0x25a>
 8004662:	2302      	movs	r3, #2
 8004664:	e01b      	b.n	800469e <HAL_GPIO_Init+0x25a>
 8004666:	2301      	movs	r3, #1
 8004668:	e019      	b.n	800469e <HAL_GPIO_Init+0x25a>
 800466a:	bf00      	nop
 800466c:	58000080 	.word	0x58000080
 8004670:	58024400 	.word	0x58024400
 8004674:	58000400 	.word	0x58000400
 8004678:	58020000 	.word	0x58020000
 800467c:	58020400 	.word	0x58020400
 8004680:	58020800 	.word	0x58020800
 8004684:	58020c00 	.word	0x58020c00
 8004688:	58021000 	.word	0x58021000
 800468c:	58021400 	.word	0x58021400
 8004690:	58021800 	.word	0x58021800
 8004694:	58021c00 	.word	0x58021c00
 8004698:	58022400 	.word	0x58022400
 800469c:	2300      	movs	r3, #0
 800469e:	69fa      	ldr	r2, [r7, #28]
 80046a0:	f002 0203 	and.w	r2, r2, #3
 80046a4:	0092      	lsls	r2, r2, #2
 80046a6:	4093      	lsls	r3, r2
 80046a8:	69ba      	ldr	r2, [r7, #24]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046ae:	4938      	ldr	r1, [pc, #224]	@ (8004790 <HAL_GPIO_Init+0x34c>)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	089b      	lsrs	r3, r3, #2
 80046b4:	3302      	adds	r3, #2
 80046b6:	69ba      	ldr	r2, [r7, #24]
 80046b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046bc:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	43db      	mvns	r3, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	4013      	ands	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	4313      	orrs	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046e2:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80046e6:	69bb      	ldr	r3, [r7, #24]
 80046e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046ea:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	43db      	mvns	r3, r3
 80046f6:	69ba      	ldr	r2, [r7, #24]
 80046f8:	4013      	ands	r3, r2
 80046fa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d003      	beq.n	8004710 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	4313      	orrs	r3, r2
 800470e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004710:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004730:	2b00      	cmp	r3, #0
 8004732:	d003      	beq.n	800473c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	4313      	orrs	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	69ba      	ldr	r2, [r7, #24]
 8004740:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	43db      	mvns	r3, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4013      	ands	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800475a:	2b00      	cmp	r3, #0
 800475c:	d003      	beq.n	8004766 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800475e:	69ba      	ldr	r2, [r7, #24]
 8004760:	693b      	ldr	r3, [r7, #16]
 8004762:	4313      	orrs	r3, r2
 8004764:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	fa22 f303 	lsr.w	r3, r2, r3
 800477c:	2b00      	cmp	r3, #0
 800477e:	f47f ae6b 	bne.w	8004458 <HAL_GPIO_Init+0x14>
  }
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	3724      	adds	r7, #36	@ 0x24
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr
 8004790:	58000400 	.word	0x58000400

08004794 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	460b      	mov	r3, r1
 800479e:	807b      	strh	r3, [r7, #2]
 80047a0:	4613      	mov	r3, r2
 80047a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80047a4:	787b      	ldrb	r3, [r7, #1]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d003      	beq.n	80047b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047aa:	887a      	ldrh	r2, [r7, #2]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80047b0:	e003      	b.n	80047ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80047b2:	887b      	ldrh	r3, [r7, #2]
 80047b4:	041a      	lsls	r2, r3, #16
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	619a      	str	r2, [r3, #24]
}
 80047ba:	bf00      	nop
 80047bc:	370c      	adds	r7, #12
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80047d0:	4b19      	ldr	r3, [pc, #100]	@ (8004838 <HAL_PWREx_ConfigSupply+0x70>)
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f003 0304 	and.w	r3, r3, #4
 80047d8:	2b04      	cmp	r3, #4
 80047da:	d00a      	beq.n	80047f2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80047dc:	4b16      	ldr	r3, [pc, #88]	@ (8004838 <HAL_PWREx_ConfigSupply+0x70>)
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0307 	and.w	r3, r3, #7
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	429a      	cmp	r2, r3
 80047e8:	d001      	beq.n	80047ee <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e01f      	b.n	800482e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	e01d      	b.n	800482e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80047f2:	4b11      	ldr	r3, [pc, #68]	@ (8004838 <HAL_PWREx_ConfigSupply+0x70>)
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f023 0207 	bic.w	r2, r3, #7
 80047fa:	490f      	ldr	r1, [pc, #60]	@ (8004838 <HAL_PWREx_ConfigSupply+0x70>)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4313      	orrs	r3, r2
 8004800:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004802:	f7fc fe47 	bl	8001494 <HAL_GetTick>
 8004806:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004808:	e009      	b.n	800481e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800480a:	f7fc fe43 	bl	8001494 <HAL_GetTick>
 800480e:	4602      	mov	r2, r0
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	1ad3      	subs	r3, r2, r3
 8004814:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004818:	d901      	bls.n	800481e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e007      	b.n	800482e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800481e:	4b06      	ldr	r3, [pc, #24]	@ (8004838 <HAL_PWREx_ConfigSupply+0x70>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004826:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800482a:	d1ee      	bne.n	800480a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800482c:	2300      	movs	r3, #0
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	58024800 	.word	0x58024800

0800483c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b08c      	sub	sp, #48	@ 0x30
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d101      	bne.n	800484e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e3c8      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f003 0301 	and.w	r3, r3, #1
 8004856:	2b00      	cmp	r3, #0
 8004858:	f000 8087 	beq.w	800496a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800485c:	4b88      	ldr	r3, [pc, #544]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004866:	4b86      	ldr	r3, [pc, #536]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800486a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800486c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486e:	2b10      	cmp	r3, #16
 8004870:	d007      	beq.n	8004882 <HAL_RCC_OscConfig+0x46>
 8004872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004874:	2b18      	cmp	r3, #24
 8004876:	d110      	bne.n	800489a <HAL_RCC_OscConfig+0x5e>
 8004878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800487a:	f003 0303 	and.w	r3, r3, #3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d10b      	bne.n	800489a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004882:	4b7f      	ldr	r3, [pc, #508]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488a:	2b00      	cmp	r3, #0
 800488c:	d06c      	beq.n	8004968 <HAL_RCC_OscConfig+0x12c>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d168      	bne.n	8004968 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e3a2      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80048a2:	d106      	bne.n	80048b2 <HAL_RCC_OscConfig+0x76>
 80048a4:	4b76      	ldr	r3, [pc, #472]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a75      	ldr	r2, [pc, #468]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048aa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	e02e      	b.n	8004910 <HAL_RCC_OscConfig+0xd4>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10c      	bne.n	80048d4 <HAL_RCC_OscConfig+0x98>
 80048ba:	4b71      	ldr	r3, [pc, #452]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a70      	ldr	r2, [pc, #448]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	4b6e      	ldr	r3, [pc, #440]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a6d      	ldr	r2, [pc, #436]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048cc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80048d0:	6013      	str	r3, [r2, #0]
 80048d2:	e01d      	b.n	8004910 <HAL_RCC_OscConfig+0xd4>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80048dc:	d10c      	bne.n	80048f8 <HAL_RCC_OscConfig+0xbc>
 80048de:	4b68      	ldr	r3, [pc, #416]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a67      	ldr	r2, [pc, #412]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80048e8:	6013      	str	r3, [r2, #0]
 80048ea:	4b65      	ldr	r3, [pc, #404]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a64      	ldr	r2, [pc, #400]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	e00b      	b.n	8004910 <HAL_RCC_OscConfig+0xd4>
 80048f8:	4b61      	ldr	r3, [pc, #388]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a60      	ldr	r2, [pc, #384]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80048fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004902:	6013      	str	r3, [r2, #0]
 8004904:	4b5e      	ldr	r3, [pc, #376]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a5d      	ldr	r2, [pc, #372]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 800490a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800490e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d013      	beq.n	8004940 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004918:	f7fc fdbc 	bl	8001494 <HAL_GetTick>
 800491c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800491e:	e008      	b.n	8004932 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004920:	f7fc fdb8 	bl	8001494 <HAL_GetTick>
 8004924:	4602      	mov	r2, r0
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	1ad3      	subs	r3, r2, r3
 800492a:	2b64      	cmp	r3, #100	@ 0x64
 800492c:	d901      	bls.n	8004932 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800492e:	2303      	movs	r3, #3
 8004930:	e356      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004932:	4b53      	ldr	r3, [pc, #332]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0f0      	beq.n	8004920 <HAL_RCC_OscConfig+0xe4>
 800493e:	e014      	b.n	800496a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004940:	f7fc fda8 	bl	8001494 <HAL_GetTick>
 8004944:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004946:	e008      	b.n	800495a <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004948:	f7fc fda4 	bl	8001494 <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004950:	1ad3      	subs	r3, r2, r3
 8004952:	2b64      	cmp	r3, #100	@ 0x64
 8004954:	d901      	bls.n	800495a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004956:	2303      	movs	r3, #3
 8004958:	e342      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800495a:	4b49      	ldr	r3, [pc, #292]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1f0      	bne.n	8004948 <HAL_RCC_OscConfig+0x10c>
 8004966:	e000      	b.n	800496a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 808c 	beq.w	8004a90 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004978:	4b41      	ldr	r3, [pc, #260]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004980:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004982:	4b3f      	ldr	r3, [pc, #252]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004984:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004986:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d007      	beq.n	800499e <HAL_RCC_OscConfig+0x162>
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	2b18      	cmp	r3, #24
 8004992:	d137      	bne.n	8004a04 <HAL_RCC_OscConfig+0x1c8>
 8004994:	69fb      	ldr	r3, [r7, #28]
 8004996:	f003 0303 	and.w	r3, r3, #3
 800499a:	2b00      	cmp	r3, #0
 800499c:	d132      	bne.n	8004a04 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800499e:	4b38      	ldr	r3, [pc, #224]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d005      	beq.n	80049b6 <HAL_RCC_OscConfig+0x17a>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d101      	bne.n	80049b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e314      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80049b6:	4b32      	ldr	r3, [pc, #200]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f023 0219 	bic.w	r2, r3, #25
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	68db      	ldr	r3, [r3, #12]
 80049c2:	492f      	ldr	r1, [pc, #188]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c8:	f7fc fd64 	bl	8001494 <HAL_GetTick>
 80049cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049ce:	e008      	b.n	80049e2 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049d0:	f7fc fd60 	bl	8001494 <HAL_GetTick>
 80049d4:	4602      	mov	r2, r0
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d901      	bls.n	80049e2 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80049de:	2303      	movs	r3, #3
 80049e0:	e2fe      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80049e2:	4b27      	ldr	r3, [pc, #156]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0304 	and.w	r3, r3, #4
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d0f0      	beq.n	80049d0 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049ee:	4b24      	ldr	r3, [pc, #144]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	061b      	lsls	r3, r3, #24
 80049fc:	4920      	ldr	r1, [pc, #128]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004a02:	e045      	b.n	8004a90 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	68db      	ldr	r3, [r3, #12]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d026      	beq.n	8004a5a <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004a0c:	4b1c      	ldr	r3, [pc, #112]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f023 0219 	bic.w	r2, r3, #25
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	4919      	ldr	r1, [pc, #100]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a1e:	f7fc fd39 	bl	8001494 <HAL_GetTick>
 8004a22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a24:	e008      	b.n	8004a38 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a26:	f7fc fd35 	bl	8001494 <HAL_GetTick>
 8004a2a:	4602      	mov	r2, r0
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	1ad3      	subs	r3, r2, r3
 8004a30:	2b02      	cmp	r3, #2
 8004a32:	d901      	bls.n	8004a38 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e2d3      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0304 	and.w	r3, r3, #4
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0f0      	beq.n	8004a26 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a44:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004a46:	685b      	ldr	r3, [r3, #4]
 8004a48:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	061b      	lsls	r3, r3, #24
 8004a52:	490b      	ldr	r1, [pc, #44]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	604b      	str	r3, [r1, #4]
 8004a58:	e01a      	b.n	8004a90 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a5a:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a08      	ldr	r2, [pc, #32]	@ (8004a80 <HAL_RCC_OscConfig+0x244>)
 8004a60:	f023 0301 	bic.w	r3, r3, #1
 8004a64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a66:	f7fc fd15 	bl	8001494 <HAL_GetTick>
 8004a6a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a6c:	e00a      	b.n	8004a84 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a6e:	f7fc fd11 	bl	8001494 <HAL_GetTick>
 8004a72:	4602      	mov	r2, r0
 8004a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a76:	1ad3      	subs	r3, r2, r3
 8004a78:	2b02      	cmp	r3, #2
 8004a7a:	d903      	bls.n	8004a84 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e2af      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
 8004a80:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004a84:	4b96      	ldr	r3, [pc, #600]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1ee      	bne.n	8004a6e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d06a      	beq.n	8004b72 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004a9c:	4b90      	ldr	r3, [pc, #576]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aa4:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004aa6:	4b8e      	ldr	r3, [pc, #568]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aaa:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d007      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x286>
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b18      	cmp	r3, #24
 8004ab6:	d11b      	bne.n	8004af0 <HAL_RCC_OscConfig+0x2b4>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f003 0303 	and.w	r3, r3, #3
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d116      	bne.n	8004af0 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ac2:	4b87      	ldr	r3, [pc, #540]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d005      	beq.n	8004ada <HAL_RCC_OscConfig+0x29e>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	69db      	ldr	r3, [r3, #28]
 8004ad2:	2b80      	cmp	r3, #128	@ 0x80
 8004ad4:	d001      	beq.n	8004ada <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e282      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ada:	4b81      	ldr	r3, [pc, #516]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	497d      	ldr	r1, [pc, #500]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004aee:	e040      	b.n	8004b72 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	69db      	ldr	r3, [r3, #28]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d023      	beq.n	8004b40 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004af8:	4b79      	ldr	r3, [pc, #484]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a78      	ldr	r2, [pc, #480]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004afe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b04:	f7fc fcc6 	bl	8001494 <HAL_GetTick>
 8004b08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b0c:	f7fc fcc2 	bl	8001494 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b02      	cmp	r3, #2
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e260      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004b1e:	4b70      	ldr	r3, [pc, #448]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d0f0      	beq.n	8004b0c <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	061b      	lsls	r3, r3, #24
 8004b38:	4969      	ldr	r1, [pc, #420]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004b3a:	4313      	orrs	r3, r2
 8004b3c:	60cb      	str	r3, [r1, #12]
 8004b3e:	e018      	b.n	8004b72 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004b40:	4b67      	ldr	r3, [pc, #412]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a66      	ldr	r2, [pc, #408]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b4c:	f7fc fca2 	bl	8001494 <HAL_GetTick>
 8004b50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b52:	e008      	b.n	8004b66 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004b54:	f7fc fc9e 	bl	8001494 <HAL_GetTick>
 8004b58:	4602      	mov	r2, r0
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5c:	1ad3      	subs	r3, r2, r3
 8004b5e:	2b02      	cmp	r3, #2
 8004b60:	d901      	bls.n	8004b66 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004b62:	2303      	movs	r3, #3
 8004b64:	e23c      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004b66:	4b5e      	ldr	r3, [pc, #376]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d1f0      	bne.n	8004b54 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0308 	and.w	r3, r3, #8
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d036      	beq.n	8004bec <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d019      	beq.n	8004bba <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b86:	4b56      	ldr	r3, [pc, #344]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004b88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b8a:	4a55      	ldr	r2, [pc, #340]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004b8c:	f043 0301 	orr.w	r3, r3, #1
 8004b90:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b92:	f7fc fc7f 	bl	8001494 <HAL_GetTick>
 8004b96:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b98:	e008      	b.n	8004bac <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b9a:	f7fc fc7b 	bl	8001494 <HAL_GetTick>
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	1ad3      	subs	r3, r2, r3
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d901      	bls.n	8004bac <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004ba8:	2303      	movs	r3, #3
 8004baa:	e219      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004bac:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004bae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bb0:	f003 0302 	and.w	r3, r3, #2
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d0f0      	beq.n	8004b9a <HAL_RCC_OscConfig+0x35e>
 8004bb8:	e018      	b.n	8004bec <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bba:	4b49      	ldr	r3, [pc, #292]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bbe:	4a48      	ldr	r2, [pc, #288]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004bc0:	f023 0301 	bic.w	r3, r3, #1
 8004bc4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bc6:	f7fc fc65 	bl	8001494 <HAL_GetTick>
 8004bca:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004bcc:	e008      	b.n	8004be0 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bce:	f7fc fc61 	bl	8001494 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d901      	bls.n	8004be0 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e1ff      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004be0:	4b3f      	ldr	r3, [pc, #252]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004be2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d1f0      	bne.n	8004bce <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 0320 	and.w	r3, r3, #32
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d036      	beq.n	8004c66 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	699b      	ldr	r3, [r3, #24]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d019      	beq.n	8004c34 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004c00:	4b37      	ldr	r3, [pc, #220]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a36      	ldr	r2, [pc, #216]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004c06:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c0c:	f7fc fc42 	bl	8001494 <HAL_GetTick>
 8004c10:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c14:	f7fc fc3e 	bl	8001494 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e1dc      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004c26:	4b2e      	ldr	r3, [pc, #184]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x3d8>
 8004c32:	e018      	b.n	8004c66 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004c34:	4b2a      	ldr	r3, [pc, #168]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a29      	ldr	r2, [pc, #164]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004c3a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004c3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004c40:	f7fc fc28 	bl	8001494 <HAL_GetTick>
 8004c44:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004c48:	f7fc fc24 	bl	8001494 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e1c2      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004c5a:	4b21      	ldr	r3, [pc, #132]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0304 	and.w	r3, r3, #4
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	f000 8086 	beq.w	8004d80 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004c74:	4b1b      	ldr	r3, [pc, #108]	@ (8004ce4 <HAL_RCC_OscConfig+0x4a8>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1a      	ldr	r2, [pc, #104]	@ (8004ce4 <HAL_RCC_OscConfig+0x4a8>)
 8004c7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c80:	f7fc fc08 	bl	8001494 <HAL_GetTick>
 8004c84:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c88:	f7fc fc04 	bl	8001494 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b64      	cmp	r3, #100	@ 0x64
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e1a2      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c9a:	4b12      	ldr	r3, [pc, #72]	@ (8004ce4 <HAL_RCC_OscConfig+0x4a8>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d0f0      	beq.n	8004c88 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	689b      	ldr	r3, [r3, #8]
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d106      	bne.n	8004cbc <HAL_RCC_OscConfig+0x480>
 8004cae:	4b0c      	ldr	r3, [pc, #48]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004cb0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cb2:	4a0b      	ldr	r2, [pc, #44]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004cb4:	f043 0301 	orr.w	r3, r3, #1
 8004cb8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cba:	e032      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e6>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4ac>
 8004cc4:	4b06      	ldr	r3, [pc, #24]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc8:	4a05      	ldr	r2, [pc, #20]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004cca:	f023 0301 	bic.w	r3, r3, #1
 8004cce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cd0:	4b03      	ldr	r3, [pc, #12]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd4:	4a02      	ldr	r2, [pc, #8]	@ (8004ce0 <HAL_RCC_OscConfig+0x4a4>)
 8004cd6:	f023 0304 	bic.w	r3, r3, #4
 8004cda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cdc:	e021      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e6>
 8004cde:	bf00      	nop
 8004ce0:	58024400 	.word	0x58024400
 8004ce4:	58024800 	.word	0x58024800
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b05      	cmp	r3, #5
 8004cee:	d10c      	bne.n	8004d0a <HAL_RCC_OscConfig+0x4ce>
 8004cf0:	4b83      	ldr	r3, [pc, #524]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf4:	4a82      	ldr	r2, [pc, #520]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004cf6:	f043 0304 	orr.w	r3, r3, #4
 8004cfa:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cfc:	4b80      	ldr	r3, [pc, #512]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d00:	4a7f      	ldr	r2, [pc, #508]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004d02:	f043 0301 	orr.w	r3, r3, #1
 8004d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d08:	e00b      	b.n	8004d22 <HAL_RCC_OscConfig+0x4e6>
 8004d0a:	4b7d      	ldr	r3, [pc, #500]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0e:	4a7c      	ldr	r2, [pc, #496]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004d10:	f023 0301 	bic.w	r3, r3, #1
 8004d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d16:	4b7a      	ldr	r3, [pc, #488]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1a:	4a79      	ldr	r2, [pc, #484]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004d1c:	f023 0304 	bic.w	r3, r3, #4
 8004d20:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	689b      	ldr	r3, [r3, #8]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d015      	beq.n	8004d56 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d2a:	f7fc fbb3 	bl	8001494 <HAL_GetTick>
 8004d2e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d30:	e00a      	b.n	8004d48 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d32:	f7fc fbaf 	bl	8001494 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d40:	4293      	cmp	r3, r2
 8004d42:	d901      	bls.n	8004d48 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	e14b      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004d48:	4b6d      	ldr	r3, [pc, #436]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004d4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d4c:	f003 0302 	and.w	r3, r3, #2
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0ee      	beq.n	8004d32 <HAL_RCC_OscConfig+0x4f6>
 8004d54:	e014      	b.n	8004d80 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d56:	f7fc fb9d 	bl	8001494 <HAL_GetTick>
 8004d5a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d5c:	e00a      	b.n	8004d74 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d5e:	f7fc fb99 	bl	8001494 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d901      	bls.n	8004d74 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004d70:	2303      	movs	r3, #3
 8004d72:	e135      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004d74:	4b62      	ldr	r3, [pc, #392]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d1ee      	bne.n	8004d5e <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	f000 812a 	beq.w	8004fde <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004d8a:	4b5d      	ldr	r3, [pc, #372]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004d8c:	691b      	ldr	r3, [r3, #16]
 8004d8e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004d92:	2b18      	cmp	r3, #24
 8004d94:	f000 80ba 	beq.w	8004f0c <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d9c:	2b02      	cmp	r3, #2
 8004d9e:	f040 8095 	bne.w	8004ecc <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004da2:	4b57      	ldr	r3, [pc, #348]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	4a56      	ldr	r2, [pc, #344]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004da8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004dac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dae:	f7fc fb71 	bl	8001494 <HAL_GetTick>
 8004db2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004db4:	e008      	b.n	8004dc8 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db6:	f7fc fb6d 	bl	8001494 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d901      	bls.n	8004dc8 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e10b      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dc8:	4b4d      	ldr	r3, [pc, #308]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d1f0      	bne.n	8004db6 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004dd4:	4b4a      	ldr	r3, [pc, #296]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004dd6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004dd8:	4b4a      	ldr	r3, [pc, #296]	@ (8004f04 <HAL_RCC_OscConfig+0x6c8>)
 8004dda:	4013      	ands	r3, r2
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004de4:	0112      	lsls	r2, r2, #4
 8004de6:	430a      	orrs	r2, r1
 8004de8:	4945      	ldr	r1, [pc, #276]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004dea:	4313      	orrs	r3, r2
 8004dec:	628b      	str	r3, [r1, #40]	@ 0x28
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df2:	3b01      	subs	r3, #1
 8004df4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	025b      	lsls	r3, r3, #9
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e08:	3b01      	subs	r3, #1
 8004e0a:	041b      	lsls	r3, r3, #16
 8004e0c:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e16:	3b01      	subs	r3, #1
 8004e18:	061b      	lsls	r3, r3, #24
 8004e1a:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e1e:	4938      	ldr	r1, [pc, #224]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004e24:	4b36      	ldr	r3, [pc, #216]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e28:	4a35      	ldr	r2, [pc, #212]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e2a:	f023 0301 	bic.w	r3, r3, #1
 8004e2e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e30:	4b33      	ldr	r3, [pc, #204]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e34:	4b34      	ldr	r3, [pc, #208]	@ (8004f08 <HAL_RCC_OscConfig+0x6cc>)
 8004e36:	4013      	ands	r3, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e3c:	00d2      	lsls	r2, r2, #3
 8004e3e:	4930      	ldr	r1, [pc, #192]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e40:	4313      	orrs	r3, r2
 8004e42:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004e44:	4b2e      	ldr	r3, [pc, #184]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e48:	f023 020c 	bic.w	r2, r3, #12
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e50:	492b      	ldr	r1, [pc, #172]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e52:	4313      	orrs	r3, r2
 8004e54:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004e56:	4b2a      	ldr	r3, [pc, #168]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e5a:	f023 0202 	bic.w	r2, r3, #2
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e62:	4927      	ldr	r1, [pc, #156]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004e68:	4b25      	ldr	r3, [pc, #148]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	4a24      	ldr	r2, [pc, #144]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e72:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004e74:	4b22      	ldr	r3, [pc, #136]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	4a21      	ldr	r2, [pc, #132]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004e80:	4b1f      	ldr	r3, [pc, #124]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	4a1e      	ldr	r2, [pc, #120]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e86:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e8a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004e8c:	4b1c      	ldr	r3, [pc, #112]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e90:	4a1b      	ldr	r2, [pc, #108]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e98:	4b19      	ldr	r3, [pc, #100]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a18      	ldr	r2, [pc, #96]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004e9e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ea2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea4:	f7fc faf6 	bl	8001494 <HAL_GetTick>
 8004ea8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004eaa:	e008      	b.n	8004ebe <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eac:	f7fc faf2 	bl	8001494 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	2b02      	cmp	r3, #2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e090      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004ebe:	4b10      	ldr	r3, [pc, #64]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d0f0      	beq.n	8004eac <HAL_RCC_OscConfig+0x670>
 8004eca:	e088      	b.n	8004fde <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a0b      	ldr	r2, [pc, #44]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004ed2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ed8:	f7fc fadc 	bl	8001494 <HAL_GetTick>
 8004edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ede:	e008      	b.n	8004ef2 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ee0:	f7fc fad8 	bl	8001494 <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d901      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004eee:	2303      	movs	r3, #3
 8004ef0:	e076      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004ef2:	4b03      	ldr	r3, [pc, #12]	@ (8004f00 <HAL_RCC_OscConfig+0x6c4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1f0      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x6a4>
 8004efe:	e06e      	b.n	8004fde <HAL_RCC_OscConfig+0x7a2>
 8004f00:	58024400 	.word	0x58024400
 8004f04:	fffffc0c 	.word	0xfffffc0c
 8004f08:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004f0c:	4b36      	ldr	r3, [pc, #216]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f10:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004f12:	4b35      	ldr	r3, [pc, #212]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f16:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f1c:	2b01      	cmp	r3, #1
 8004f1e:	d031      	beq.n	8004f84 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	f003 0203 	and.w	r2, r3, #3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f2a:	429a      	cmp	r2, r3
 8004f2c:	d12a      	bne.n	8004f84 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d122      	bne.n	8004f84 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f48:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d11a      	bne.n	8004f84 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	0a5b      	lsrs	r3, r3, #9
 8004f52:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f5a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	d111      	bne.n	8004f84 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	0c1b      	lsrs	r3, r3, #16
 8004f64:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f6c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d108      	bne.n	8004f84 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	0e1b      	lsrs	r3, r3, #24
 8004f76:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f7e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e02b      	b.n	8004fe0 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004f88:	4b17      	ldr	r3, [pc, #92]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f8c:	08db      	lsrs	r3, r3, #3
 8004f8e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004f92:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d01f      	beq.n	8004fde <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004f9e:	4b12      	ldr	r3, [pc, #72]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fa2:	4a11      	ldr	r2, [pc, #68]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004faa:	f7fc fa73 	bl	8001494 <HAL_GetTick>
 8004fae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004fb0:	bf00      	nop
 8004fb2:	f7fc fa6f 	bl	8001494 <HAL_GetTick>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d0f9      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004fc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8004fec <HAL_RCC_OscConfig+0x7b0>)
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	687a      	ldr	r2, [r7, #4]
 8004fc8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004fca:	00d2      	lsls	r2, r2, #3
 8004fcc:	4906      	ldr	r1, [pc, #24]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004fd2:	4b05      	ldr	r3, [pc, #20]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004fd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fd6:	4a04      	ldr	r2, [pc, #16]	@ (8004fe8 <HAL_RCC_OscConfig+0x7ac>)
 8004fd8:	f043 0301 	orr.w	r3, r3, #1
 8004fdc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004fde:	2300      	movs	r3, #0
}
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	3730      	adds	r7, #48	@ 0x30
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	58024400 	.word	0x58024400
 8004fec:	ffff0007 	.word	0xffff0007

08004ff0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
 8004ff8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d101      	bne.n	8005004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e19c      	b.n	800533e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005004:	4b8a      	ldr	r3, [pc, #552]	@ (8005230 <HAL_RCC_ClockConfig+0x240>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 030f 	and.w	r3, r3, #15
 800500c:	683a      	ldr	r2, [r7, #0]
 800500e:	429a      	cmp	r2, r3
 8005010:	d910      	bls.n	8005034 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005012:	4b87      	ldr	r3, [pc, #540]	@ (8005230 <HAL_RCC_ClockConfig+0x240>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f023 020f 	bic.w	r2, r3, #15
 800501a:	4985      	ldr	r1, [pc, #532]	@ (8005230 <HAL_RCC_ClockConfig+0x240>)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005022:	4b83      	ldr	r3, [pc, #524]	@ (8005230 <HAL_RCC_ClockConfig+0x240>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	429a      	cmp	r2, r3
 800502e:	d001      	beq.n	8005034 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e184      	b.n	800533e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0304 	and.w	r3, r3, #4
 800503c:	2b00      	cmp	r3, #0
 800503e:	d010      	beq.n	8005062 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691a      	ldr	r2, [r3, #16]
 8005044:	4b7b      	ldr	r3, [pc, #492]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800504c:	429a      	cmp	r2, r3
 800504e:	d908      	bls.n	8005062 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005050:	4b78      	ldr	r3, [pc, #480]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	4975      	ldr	r1, [pc, #468]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 800505e:	4313      	orrs	r3, r2
 8005060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0308 	and.w	r3, r3, #8
 800506a:	2b00      	cmp	r3, #0
 800506c:	d010      	beq.n	8005090 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	695a      	ldr	r2, [r3, #20]
 8005072:	4b70      	ldr	r3, [pc, #448]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005074:	69db      	ldr	r3, [r3, #28]
 8005076:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800507a:	429a      	cmp	r2, r3
 800507c:	d908      	bls.n	8005090 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800507e:	4b6d      	ldr	r3, [pc, #436]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	695b      	ldr	r3, [r3, #20]
 800508a:	496a      	ldr	r1, [pc, #424]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 800508c:	4313      	orrs	r3, r2
 800508e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f003 0310 	and.w	r3, r3, #16
 8005098:	2b00      	cmp	r3, #0
 800509a:	d010      	beq.n	80050be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	699a      	ldr	r2, [r3, #24]
 80050a0:	4b64      	ldr	r3, [pc, #400]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80050a2:	69db      	ldr	r3, [r3, #28]
 80050a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d908      	bls.n	80050be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80050ac:	4b61      	ldr	r3, [pc, #388]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	699b      	ldr	r3, [r3, #24]
 80050b8:	495e      	ldr	r1, [pc, #376]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0320 	and.w	r3, r3, #32
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d010      	beq.n	80050ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	69da      	ldr	r2, [r3, #28]
 80050ce:	4b59      	ldr	r3, [pc, #356]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80050d6:	429a      	cmp	r2, r3
 80050d8:	d908      	bls.n	80050ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80050da:	4b56      	ldr	r3, [pc, #344]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	4953      	ldr	r1, [pc, #332]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80050e8:	4313      	orrs	r3, r2
 80050ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0302 	and.w	r3, r3, #2
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d010      	beq.n	800511a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	68da      	ldr	r2, [r3, #12]
 80050fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	429a      	cmp	r2, r3
 8005106:	d908      	bls.n	800511a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005108:	4b4a      	ldr	r3, [pc, #296]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	f023 020f 	bic.w	r2, r3, #15
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	4947      	ldr	r1, [pc, #284]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005116:	4313      	orrs	r3, r2
 8005118:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f003 0301 	and.w	r3, r3, #1
 8005122:	2b00      	cmp	r3, #0
 8005124:	d055      	beq.n	80051d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005126:	4b43      	ldr	r3, [pc, #268]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005128:	699b      	ldr	r3, [r3, #24]
 800512a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	4940      	ldr	r1, [pc, #256]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005134:	4313      	orrs	r3, r2
 8005136:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	2b02      	cmp	r3, #2
 800513e:	d107      	bne.n	8005150 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005140:	4b3c      	ldr	r3, [pc, #240]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d121      	bne.n	8005190 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	e0f6      	b.n	800533e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	685b      	ldr	r3, [r3, #4]
 8005154:	2b03      	cmp	r3, #3
 8005156:	d107      	bne.n	8005168 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005158:	4b36      	ldr	r3, [pc, #216]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d115      	bne.n	8005190 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e0ea      	b.n	800533e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	685b      	ldr	r3, [r3, #4]
 800516c:	2b01      	cmp	r3, #1
 800516e:	d107      	bne.n	8005180 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005170:	4b30      	ldr	r3, [pc, #192]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d109      	bne.n	8005190 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e0de      	b.n	800533e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005180:	4b2c      	ldr	r3, [pc, #176]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d101      	bne.n	8005190 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800518c:	2301      	movs	r3, #1
 800518e:	e0d6      	b.n	800533e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005190:	4b28      	ldr	r3, [pc, #160]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 8005192:	691b      	ldr	r3, [r3, #16]
 8005194:	f023 0207 	bic.w	r2, r3, #7
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	4925      	ldr	r1, [pc, #148]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051a2:	f7fc f977 	bl	8001494 <HAL_GetTick>
 80051a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a8:	e00a      	b.n	80051c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051aa:	f7fc f973 	bl	8001494 <HAL_GetTick>
 80051ae:	4602      	mov	r2, r0
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	1ad3      	subs	r3, r2, r3
 80051b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051b8:	4293      	cmp	r3, r2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e0be      	b.n	800533e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	00db      	lsls	r3, r3, #3
 80051ce:	429a      	cmp	r2, r3
 80051d0:	d1eb      	bne.n	80051aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0302 	and.w	r3, r3, #2
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d010      	beq.n	8005200 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	4b14      	ldr	r3, [pc, #80]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	f003 030f 	and.w	r3, r3, #15
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d208      	bcs.n	8005200 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80051ee:	4b11      	ldr	r3, [pc, #68]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	f023 020f 	bic.w	r2, r3, #15
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	490e      	ldr	r1, [pc, #56]	@ (8005234 <HAL_RCC_ClockConfig+0x244>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005200:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <HAL_RCC_ClockConfig+0x240>)
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f003 030f 	and.w	r3, r3, #15
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	429a      	cmp	r2, r3
 800520c:	d214      	bcs.n	8005238 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800520e:	4b08      	ldr	r3, [pc, #32]	@ (8005230 <HAL_RCC_ClockConfig+0x240>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f023 020f 	bic.w	r2, r3, #15
 8005216:	4906      	ldr	r1, [pc, #24]	@ (8005230 <HAL_RCC_ClockConfig+0x240>)
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	4313      	orrs	r3, r2
 800521c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800521e:	4b04      	ldr	r3, [pc, #16]	@ (8005230 <HAL_RCC_ClockConfig+0x240>)
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f003 030f 	and.w	r3, r3, #15
 8005226:	683a      	ldr	r2, [r7, #0]
 8005228:	429a      	cmp	r2, r3
 800522a:	d005      	beq.n	8005238 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800522c:	2301      	movs	r3, #1
 800522e:	e086      	b.n	800533e <HAL_RCC_ClockConfig+0x34e>
 8005230:	52002000 	.word	0x52002000
 8005234:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f003 0304 	and.w	r3, r3, #4
 8005240:	2b00      	cmp	r3, #0
 8005242:	d010      	beq.n	8005266 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	691a      	ldr	r2, [r3, #16]
 8005248:	4b3f      	ldr	r3, [pc, #252]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 800524a:	699b      	ldr	r3, [r3, #24]
 800524c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005250:	429a      	cmp	r2, r3
 8005252:	d208      	bcs.n	8005266 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005254:	4b3c      	ldr	r3, [pc, #240]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 8005256:	699b      	ldr	r3, [r3, #24]
 8005258:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	4939      	ldr	r1, [pc, #228]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 8005262:	4313      	orrs	r3, r2
 8005264:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f003 0308 	and.w	r3, r3, #8
 800526e:	2b00      	cmp	r3, #0
 8005270:	d010      	beq.n	8005294 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	695a      	ldr	r2, [r3, #20]
 8005276:	4b34      	ldr	r3, [pc, #208]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 8005278:	69db      	ldr	r3, [r3, #28]
 800527a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800527e:	429a      	cmp	r2, r3
 8005280:	d208      	bcs.n	8005294 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005282:	4b31      	ldr	r3, [pc, #196]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 8005284:	69db      	ldr	r3, [r3, #28]
 8005286:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	695b      	ldr	r3, [r3, #20]
 800528e:	492e      	ldr	r1, [pc, #184]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 8005290:	4313      	orrs	r3, r2
 8005292:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0310 	and.w	r3, r3, #16
 800529c:	2b00      	cmp	r3, #0
 800529e:	d010      	beq.n	80052c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	699a      	ldr	r2, [r3, #24]
 80052a4:	4b28      	ldr	r3, [pc, #160]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052ac:	429a      	cmp	r2, r3
 80052ae:	d208      	bcs.n	80052c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80052b0:	4b25      	ldr	r3, [pc, #148]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 80052b2:	69db      	ldr	r3, [r3, #28]
 80052b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	699b      	ldr	r3, [r3, #24]
 80052bc:	4922      	ldr	r1, [pc, #136]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 80052be:	4313      	orrs	r3, r2
 80052c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 0320 	and.w	r3, r3, #32
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d010      	beq.n	80052f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	69da      	ldr	r2, [r3, #28]
 80052d2:	4b1d      	ldr	r3, [pc, #116]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 80052d4:	6a1b      	ldr	r3, [r3, #32]
 80052d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80052da:	429a      	cmp	r2, r3
 80052dc:	d208      	bcs.n	80052f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80052de:	4b1a      	ldr	r3, [pc, #104]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	69db      	ldr	r3, [r3, #28]
 80052ea:	4917      	ldr	r1, [pc, #92]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80052f0:	f000 f834 	bl	800535c <HAL_RCC_GetSysClockFreq>
 80052f4:	4602      	mov	r2, r0
 80052f6:	4b14      	ldr	r3, [pc, #80]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 80052f8:	699b      	ldr	r3, [r3, #24]
 80052fa:	0a1b      	lsrs	r3, r3, #8
 80052fc:	f003 030f 	and.w	r3, r3, #15
 8005300:	4912      	ldr	r1, [pc, #72]	@ (800534c <HAL_RCC_ClockConfig+0x35c>)
 8005302:	5ccb      	ldrb	r3, [r1, r3]
 8005304:	f003 031f 	and.w	r3, r3, #31
 8005308:	fa22 f303 	lsr.w	r3, r2, r3
 800530c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800530e:	4b0e      	ldr	r3, [pc, #56]	@ (8005348 <HAL_RCC_ClockConfig+0x358>)
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	f003 030f 	and.w	r3, r3, #15
 8005316:	4a0d      	ldr	r2, [pc, #52]	@ (800534c <HAL_RCC_ClockConfig+0x35c>)
 8005318:	5cd3      	ldrb	r3, [r2, r3]
 800531a:	f003 031f 	and.w	r3, r3, #31
 800531e:	693a      	ldr	r2, [r7, #16]
 8005320:	fa22 f303 	lsr.w	r3, r2, r3
 8005324:	4a0a      	ldr	r2, [pc, #40]	@ (8005350 <HAL_RCC_ClockConfig+0x360>)
 8005326:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005328:	4a0a      	ldr	r2, [pc, #40]	@ (8005354 <HAL_RCC_ClockConfig+0x364>)
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800532e:	4b0a      	ldr	r3, [pc, #40]	@ (8005358 <HAL_RCC_ClockConfig+0x368>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4618      	mov	r0, r3
 8005334:	f7fc f878 	bl	8001428 <HAL_InitTick>
 8005338:	4603      	mov	r3, r0
 800533a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800533c:	7bfb      	ldrb	r3, [r7, #15]
}
 800533e:	4618      	mov	r0, r3
 8005340:	3718      	adds	r7, #24
 8005342:	46bd      	mov	sp, r7
 8005344:	bd80      	pop	{r7, pc}
 8005346:	bf00      	nop
 8005348:	58024400 	.word	0x58024400
 800534c:	08009674 	.word	0x08009674
 8005350:	24000004 	.word	0x24000004
 8005354:	24000000 	.word	0x24000000
 8005358:	24000008 	.word	0x24000008

0800535c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800535c:	b480      	push	{r7}
 800535e:	b089      	sub	sp, #36	@ 0x24
 8005360:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005362:	4bb3      	ldr	r3, [pc, #716]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800536a:	2b18      	cmp	r3, #24
 800536c:	f200 8155 	bhi.w	800561a <HAL_RCC_GetSysClockFreq+0x2be>
 8005370:	a201      	add	r2, pc, #4	@ (adr r2, 8005378 <HAL_RCC_GetSysClockFreq+0x1c>)
 8005372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005376:	bf00      	nop
 8005378:	080053dd 	.word	0x080053dd
 800537c:	0800561b 	.word	0x0800561b
 8005380:	0800561b 	.word	0x0800561b
 8005384:	0800561b 	.word	0x0800561b
 8005388:	0800561b 	.word	0x0800561b
 800538c:	0800561b 	.word	0x0800561b
 8005390:	0800561b 	.word	0x0800561b
 8005394:	0800561b 	.word	0x0800561b
 8005398:	08005403 	.word	0x08005403
 800539c:	0800561b 	.word	0x0800561b
 80053a0:	0800561b 	.word	0x0800561b
 80053a4:	0800561b 	.word	0x0800561b
 80053a8:	0800561b 	.word	0x0800561b
 80053ac:	0800561b 	.word	0x0800561b
 80053b0:	0800561b 	.word	0x0800561b
 80053b4:	0800561b 	.word	0x0800561b
 80053b8:	08005409 	.word	0x08005409
 80053bc:	0800561b 	.word	0x0800561b
 80053c0:	0800561b 	.word	0x0800561b
 80053c4:	0800561b 	.word	0x0800561b
 80053c8:	0800561b 	.word	0x0800561b
 80053cc:	0800561b 	.word	0x0800561b
 80053d0:	0800561b 	.word	0x0800561b
 80053d4:	0800561b 	.word	0x0800561b
 80053d8:	0800540f 	.word	0x0800540f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053dc:	4b94      	ldr	r3, [pc, #592]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0320 	and.w	r3, r3, #32
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d009      	beq.n	80053fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053e8:	4b91      	ldr	r3, [pc, #580]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	08db      	lsrs	r3, r3, #3
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	4a90      	ldr	r2, [pc, #576]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053f4:	fa22 f303 	lsr.w	r3, r2, r3
 80053f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80053fa:	e111      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80053fc:	4b8d      	ldr	r3, [pc, #564]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053fe:	61bb      	str	r3, [r7, #24]
      break;
 8005400:	e10e      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005402:	4b8d      	ldr	r3, [pc, #564]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005404:	61bb      	str	r3, [r7, #24]
      break;
 8005406:	e10b      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8005408:	4b8c      	ldr	r3, [pc, #560]	@ (800563c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800540a:	61bb      	str	r3, [r7, #24]
      break;
 800540c:	e108      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800540e:	4b88      	ldr	r3, [pc, #544]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005410:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8005418:	4b85      	ldr	r3, [pc, #532]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800541a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800541c:	091b      	lsrs	r3, r3, #4
 800541e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005422:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005424:	4b82      	ldr	r3, [pc, #520]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005426:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005428:	f003 0301 	and.w	r3, r3, #1
 800542c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800542e:	4b80      	ldr	r3, [pc, #512]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005430:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005432:	08db      	lsrs	r3, r3, #3
 8005434:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	fb02 f303 	mul.w	r3, r2, r3
 800543e:	ee07 3a90 	vmov	s15, r3
 8005442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005446:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 80e1 	beq.w	8005614 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	2b02      	cmp	r3, #2
 8005456:	f000 8083 	beq.w	8005560 <HAL_RCC_GetSysClockFreq+0x204>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	2b02      	cmp	r3, #2
 800545e:	f200 80a1 	bhi.w	80055a4 <HAL_RCC_GetSysClockFreq+0x248>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x114>
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d056      	beq.n	800551c <HAL_RCC_GetSysClockFreq+0x1c0>
 800546e:	e099      	b.n	80055a4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005470:	4b6f      	ldr	r3, [pc, #444]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 0320 	and.w	r3, r3, #32
 8005478:	2b00      	cmp	r3, #0
 800547a:	d02d      	beq.n	80054d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800547c:	4b6c      	ldr	r3, [pc, #432]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	08db      	lsrs	r3, r3, #3
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	4a6b      	ldr	r2, [pc, #428]	@ (8005634 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005488:	fa22 f303 	lsr.w	r3, r2, r3
 800548c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	ee07 3a90 	vmov	s15, r3
 800549e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054a6:	4b62      	ldr	r3, [pc, #392]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ae:	ee07 3a90 	vmov	s15, r3
 80054b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005640 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80054d6:	e087      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	ee07 3a90 	vmov	s15, r3
 80054de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005644 <HAL_RCC_GetSysClockFreq+0x2e8>
 80054e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054ea:	4b51      	ldr	r3, [pc, #324]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80054fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005640 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005502:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005506:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800550a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800550e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005512:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005516:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800551a:	e065      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	ee07 3a90 	vmov	s15, r3
 8005522:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005526:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005648 <HAL_RCC_GetSysClockFreq+0x2ec>
 800552a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800552e:	4b40      	ldr	r3, [pc, #256]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005532:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005536:	ee07 3a90 	vmov	s15, r3
 800553a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800553e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005542:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005640 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005546:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800554a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800554e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005556:	ee67 7a27 	vmul.f32	s15, s14, s15
 800555a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800555e:	e043      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	ee07 3a90 	vmov	s15, r3
 8005566:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800556a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800564c <HAL_RCC_GetSysClockFreq+0x2f0>
 800556e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005572:	4b2f      	ldr	r3, [pc, #188]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005574:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800557a:	ee07 3a90 	vmov	s15, r3
 800557e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005582:	ed97 6a02 	vldr	s12, [r7, #8]
 8005586:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005640 <HAL_RCC_GetSysClockFreq+0x2e4>
 800558a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800558e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005592:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800559a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800559e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055a2:	e021      	b.n	80055e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	ee07 3a90 	vmov	s15, r3
 80055aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80055ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005648 <HAL_RCC_GetSysClockFreq+0x2ec>
 80055b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80055b6:	4b1e      	ldr	r3, [pc, #120]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055be:	ee07 3a90 	vmov	s15, r3
 80055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80055c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80055ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005640 <HAL_RCC_GetSysClockFreq+0x2e4>
 80055ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80055d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80055d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80055da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80055e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80055e8:	4b11      	ldr	r3, [pc, #68]	@ (8005630 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80055ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ec:	0a5b      	lsrs	r3, r3, #9
 80055ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80055f2:	3301      	adds	r3, #1
 80055f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	ee07 3a90 	vmov	s15, r3
 80055fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005600:	edd7 6a07 	vldr	s13, [r7, #28]
 8005604:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005608:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800560c:	ee17 3a90 	vmov	r3, s15
 8005610:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005612:	e005      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	61bb      	str	r3, [r7, #24]
      break;
 8005618:	e002      	b.n	8005620 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800561a:	4b07      	ldr	r3, [pc, #28]	@ (8005638 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800561c:	61bb      	str	r3, [r7, #24]
      break;
 800561e:	bf00      	nop
  }

  return sysclockfreq;
 8005620:	69bb      	ldr	r3, [r7, #24]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3724      	adds	r7, #36	@ 0x24
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	58024400 	.word	0x58024400
 8005634:	03d09000 	.word	0x03d09000
 8005638:	003d0900 	.word	0x003d0900
 800563c:	007a1200 	.word	0x007a1200
 8005640:	46000000 	.word	0x46000000
 8005644:	4c742400 	.word	0x4c742400
 8005648:	4a742400 	.word	0x4a742400
 800564c:	4af42400 	.word	0x4af42400

08005650 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b082      	sub	sp, #8
 8005654:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005656:	f7ff fe81 	bl	800535c <HAL_RCC_GetSysClockFreq>
 800565a:	4602      	mov	r2, r0
 800565c:	4b10      	ldr	r3, [pc, #64]	@ (80056a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800565e:	699b      	ldr	r3, [r3, #24]
 8005660:	0a1b      	lsrs	r3, r3, #8
 8005662:	f003 030f 	and.w	r3, r3, #15
 8005666:	490f      	ldr	r1, [pc, #60]	@ (80056a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8005668:	5ccb      	ldrb	r3, [r1, r3]
 800566a:	f003 031f 	and.w	r3, r3, #31
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005674:	4b0a      	ldr	r3, [pc, #40]	@ (80056a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8005676:	699b      	ldr	r3, [r3, #24]
 8005678:	f003 030f 	and.w	r3, r3, #15
 800567c:	4a09      	ldr	r2, [pc, #36]	@ (80056a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800567e:	5cd3      	ldrb	r3, [r2, r3]
 8005680:	f003 031f 	and.w	r3, r3, #31
 8005684:	687a      	ldr	r2, [r7, #4]
 8005686:	fa22 f303 	lsr.w	r3, r2, r3
 800568a:	4a07      	ldr	r2, [pc, #28]	@ (80056a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800568c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800568e:	4a07      	ldr	r2, [pc, #28]	@ (80056ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005694:	4b04      	ldr	r3, [pc, #16]	@ (80056a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	58024400 	.word	0x58024400
 80056a4:	08009674 	.word	0x08009674
 80056a8:	24000004 	.word	0x24000004
 80056ac:	24000000 	.word	0x24000000

080056b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80056b4:	f7ff ffcc 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 80056b8:	4602      	mov	r2, r0
 80056ba:	4b06      	ldr	r3, [pc, #24]	@ (80056d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80056bc:	69db      	ldr	r3, [r3, #28]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	f003 0307 	and.w	r3, r3, #7
 80056c4:	4904      	ldr	r1, [pc, #16]	@ (80056d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80056c6:	5ccb      	ldrb	r3, [r1, r3]
 80056c8:	f003 031f 	and.w	r3, r3, #31
 80056cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	58024400 	.word	0x58024400
 80056d8:	08009674 	.word	0x08009674

080056dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80056e0:	f7ff ffb6 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 80056e4:	4602      	mov	r2, r0
 80056e6:	4b06      	ldr	r3, [pc, #24]	@ (8005700 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e8:	69db      	ldr	r3, [r3, #28]
 80056ea:	0a1b      	lsrs	r3, r3, #8
 80056ec:	f003 0307 	and.w	r3, r3, #7
 80056f0:	4904      	ldr	r1, [pc, #16]	@ (8005704 <HAL_RCC_GetPCLK2Freq+0x28>)
 80056f2:	5ccb      	ldrb	r3, [r1, r3]
 80056f4:	f003 031f 	and.w	r3, r3, #31
 80056f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	58024400 	.word	0x58024400
 8005704:	08009674 	.word	0x08009674

08005708 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005708:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800570c:	b0c6      	sub	sp, #280	@ 0x118
 800570e:	af00      	add	r7, sp, #0
 8005710:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005714:	2300      	movs	r3, #0
 8005716:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800571a:	2300      	movs	r3, #0
 800571c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005728:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800572c:	2500      	movs	r5, #0
 800572e:	ea54 0305 	orrs.w	r3, r4, r5
 8005732:	d049      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005734:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005738:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800573a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800573e:	d02f      	beq.n	80057a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005740:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005744:	d828      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005746:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800574a:	d01a      	beq.n	8005782 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800574c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005750:	d822      	bhi.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8005752:	2b00      	cmp	r3, #0
 8005754:	d003      	beq.n	800575e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005756:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800575a:	d007      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800575c:	e01c      	b.n	8005798 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800575e:	4bab      	ldr	r3, [pc, #684]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005762:	4aaa      	ldr	r2, [pc, #680]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005764:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005768:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800576a:	e01a      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800576c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005770:	3308      	adds	r3, #8
 8005772:	2102      	movs	r1, #2
 8005774:	4618      	mov	r0, r3
 8005776:	f001 fc25 	bl	8006fc4 <RCCEx_PLL2_Config>
 800577a:	4603      	mov	r3, r0
 800577c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005780:	e00f      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005782:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005786:	3328      	adds	r3, #40	@ 0x28
 8005788:	2102      	movs	r1, #2
 800578a:	4618      	mov	r0, r3
 800578c:	f001 fccc 	bl	8007128 <RCCEx_PLL3_Config>
 8005790:	4603      	mov	r3, r0
 8005792:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005796:	e004      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800579e:	e000      	b.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80057a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057a2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10a      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80057aa:	4b98      	ldr	r3, [pc, #608]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80057b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057b8:	4a94      	ldr	r2, [pc, #592]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057ba:	430b      	orrs	r3, r1
 80057bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80057be:	e003      	b.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80057c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80057d4:	f04f 0900 	mov.w	r9, #0
 80057d8:	ea58 0309 	orrs.w	r3, r8, r9
 80057dc:	d047      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80057de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d82a      	bhi.n	800583e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80057e8:	a201      	add	r2, pc, #4	@ (adr r2, 80057f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80057ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057ee:	bf00      	nop
 80057f0:	08005805 	.word	0x08005805
 80057f4:	08005813 	.word	0x08005813
 80057f8:	08005829 	.word	0x08005829
 80057fc:	08005847 	.word	0x08005847
 8005800:	08005847 	.word	0x08005847
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005804:	4b81      	ldr	r3, [pc, #516]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005806:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005808:	4a80      	ldr	r2, [pc, #512]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800580a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800580e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005810:	e01a      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005816:	3308      	adds	r3, #8
 8005818:	2100      	movs	r1, #0
 800581a:	4618      	mov	r0, r3
 800581c:	f001 fbd2 	bl	8006fc4 <RCCEx_PLL2_Config>
 8005820:	4603      	mov	r3, r0
 8005822:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005826:	e00f      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005828:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582c:	3328      	adds	r3, #40	@ 0x28
 800582e:	2100      	movs	r1, #0
 8005830:	4618      	mov	r0, r3
 8005832:	f001 fc79 	bl	8007128 <RCCEx_PLL3_Config>
 8005836:	4603      	mov	r3, r0
 8005838:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800583c:	e004      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005844:	e000      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8005846:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005848:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005850:	4b6e      	ldr	r3, [pc, #440]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005852:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005854:	f023 0107 	bic.w	r1, r3, #7
 8005858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800585c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800585e:	4a6b      	ldr	r2, [pc, #428]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005860:	430b      	orrs	r3, r1
 8005862:	6513      	str	r3, [r2, #80]	@ 0x50
 8005864:	e003      	b.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005866:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800586a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800586e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005876:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800587a:	f04f 0b00 	mov.w	fp, #0
 800587e:	ea5a 030b 	orrs.w	r3, sl, fp
 8005882:	d05b      	beq.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8005884:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005888:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800588c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005890:	d03b      	beq.n	800590a <HAL_RCCEx_PeriphCLKConfig+0x202>
 8005892:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005896:	d834      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005898:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800589c:	d037      	beq.n	800590e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800589e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058a2:	d82e      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80058a4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058a8:	d033      	beq.n	8005912 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80058aa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80058ae:	d828      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80058b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058b4:	d01a      	beq.n	80058ec <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 80058b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058ba:	d822      	bhi.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 80058c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058c4:	d007      	beq.n	80058d6 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 80058c6:	e01c      	b.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058c8:	4b50      	ldr	r3, [pc, #320]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058cc:	4a4f      	ldr	r2, [pc, #316]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058ce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058d2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058d4:	e01e      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80058d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058da:	3308      	adds	r3, #8
 80058dc:	2100      	movs	r1, #0
 80058de:	4618      	mov	r0, r3
 80058e0:	f001 fb70 	bl	8006fc4 <RCCEx_PLL2_Config>
 80058e4:	4603      	mov	r3, r0
 80058e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80058ea:	e013      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80058ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058f0:	3328      	adds	r3, #40	@ 0x28
 80058f2:	2100      	movs	r1, #0
 80058f4:	4618      	mov	r0, r3
 80058f6:	f001 fc17 	bl	8007128 <RCCEx_PLL3_Config>
 80058fa:	4603      	mov	r3, r0
 80058fc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005900:	e008      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005902:	2301      	movs	r3, #1
 8005904:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005908:	e004      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800590a:	bf00      	nop
 800590c:	e002      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800590e:	bf00      	nop
 8005910:	e000      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005914:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005918:	2b00      	cmp	r3, #0
 800591a:	d10b      	bne.n	8005934 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800591c:	4b3b      	ldr	r3, [pc, #236]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800591e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005920:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005924:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005928:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800592c:	4a37      	ldr	r2, [pc, #220]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800592e:	430b      	orrs	r3, r1
 8005930:	6593      	str	r3, [r2, #88]	@ 0x58
 8005932:	e003      	b.n	800593c <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005938:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800593c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005944:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005948:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800594c:	2300      	movs	r3, #0
 800594e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8005952:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8005956:	460b      	mov	r3, r1
 8005958:	4313      	orrs	r3, r2
 800595a:	d05d      	beq.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800595c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005960:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005964:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005968:	d03b      	beq.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800596a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800596e:	d834      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005970:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005974:	d037      	beq.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8005976:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800597a:	d82e      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800597c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005980:	d033      	beq.n	80059ea <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8005982:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005986:	d828      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005988:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800598c:	d01a      	beq.n	80059c4 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800598e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005992:	d822      	bhi.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005994:	2b00      	cmp	r3, #0
 8005996:	d003      	beq.n	80059a0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005998:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800599c:	d007      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800599e:	e01c      	b.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059a0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a4:	4a19      	ldr	r2, [pc, #100]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059a6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059aa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059ac:	e01e      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059b2:	3308      	adds	r3, #8
 80059b4:	2100      	movs	r1, #0
 80059b6:	4618      	mov	r0, r3
 80059b8:	f001 fb04 	bl	8006fc4 <RCCEx_PLL2_Config>
 80059bc:	4603      	mov	r3, r0
 80059be:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80059c2:	e013      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059c8:	3328      	adds	r3, #40	@ 0x28
 80059ca:	2100      	movs	r1, #0
 80059cc:	4618      	mov	r0, r3
 80059ce:	f001 fbab 	bl	8007128 <RCCEx_PLL3_Config>
 80059d2:	4603      	mov	r3, r0
 80059d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80059d8:	e008      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059e0:	e004      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80059e2:	bf00      	nop
 80059e4:	e002      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80059e6:	bf00      	nop
 80059e8:	e000      	b.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80059ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d10d      	bne.n	8005a10 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80059f4:	4b05      	ldr	r3, [pc, #20]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80059f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059f8:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80059fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a00:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005a04:	4a01      	ldr	r2, [pc, #4]	@ (8005a0c <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005a06:	430b      	orrs	r3, r1
 8005a08:	6593      	str	r3, [r2, #88]	@ 0x58
 8005a0a:	e005      	b.n	8005a18 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005a0c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a10:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a14:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005a18:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005a24:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005a2e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005a32:	460b      	mov	r3, r1
 8005a34:	4313      	orrs	r3, r2
 8005a36:	d03a      	beq.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005a38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a3e:	2b30      	cmp	r3, #48	@ 0x30
 8005a40:	d01f      	beq.n	8005a82 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005a42:	2b30      	cmp	r3, #48	@ 0x30
 8005a44:	d819      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005a46:	2b20      	cmp	r3, #32
 8005a48:	d00c      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005a4a:	2b20      	cmp	r3, #32
 8005a4c:	d815      	bhi.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d019      	beq.n	8005a86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8005a52:	2b10      	cmp	r3, #16
 8005a54:	d111      	bne.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a56:	4baa      	ldr	r3, [pc, #680]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5a:	4aa9      	ldr	r2, [pc, #676]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005a62:	e011      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005a64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a68:	3308      	adds	r3, #8
 8005a6a:	2102      	movs	r1, #2
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	f001 faa9 	bl	8006fc4 <RCCEx_PLL2_Config>
 8005a72:	4603      	mov	r3, r0
 8005a74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005a78:	e006      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a80:	e002      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005a82:	bf00      	nop
 8005a84:	e000      	b.n	8005a88 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8005a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a88:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005a90:	4b9b      	ldr	r3, [pc, #620]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005a98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005a9e:	4a98      	ldr	r2, [pc, #608]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005aa0:	430b      	orrs	r3, r1
 8005aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005aa4:	e003      	b.n	8005aae <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aaa:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005aae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005aba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005abe:	2300      	movs	r3, #0
 8005ac0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005ac4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005ac8:	460b      	mov	r3, r1
 8005aca:	4313      	orrs	r3, r2
 8005acc:	d051      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005ace:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ad8:	d035      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ade:	d82e      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005ae0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005ae4:	d031      	beq.n	8005b4a <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005ae6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005aea:	d828      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af0:	d01a      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005af6:	d822      	bhi.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d003      	beq.n	8005b04 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b00:	d007      	beq.n	8005b12 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005b02:	e01c      	b.n	8005b3e <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b04:	4b7e      	ldr	r3, [pc, #504]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b08:	4a7d      	ldr	r2, [pc, #500]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b10:	e01c      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005b12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b16:	3308      	adds	r3, #8
 8005b18:	2100      	movs	r1, #0
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	f001 fa52 	bl	8006fc4 <RCCEx_PLL2_Config>
 8005b20:	4603      	mov	r3, r0
 8005b22:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b26:	e011      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005b28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2c:	3328      	adds	r3, #40	@ 0x28
 8005b2e:	2100      	movs	r1, #0
 8005b30:	4618      	mov	r0, r3
 8005b32:	f001 faf9 	bl	8007128 <RCCEx_PLL3_Config>
 8005b36:	4603      	mov	r3, r0
 8005b38:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005b3c:	e006      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b44:	e002      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005b46:	bf00      	nop
 8005b48:	e000      	b.n	8005b4c <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b4c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d10a      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005b54:	4b6a      	ldr	r3, [pc, #424]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005b5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005b62:	4a67      	ldr	r2, [pc, #412]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b64:	430b      	orrs	r3, r1
 8005b66:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b68:	e003      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b6e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005b72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005b7e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005b82:	2300      	movs	r3, #0
 8005b84:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005b88:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	d053      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005b92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005b9c:	d033      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005b9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005ba2:	d82c      	bhi.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005ba4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005ba8:	d02f      	beq.n	8005c0a <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005baa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005bae:	d826      	bhi.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005bb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bb4:	d02b      	beq.n	8005c0e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005bb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005bba:	d820      	bhi.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc0:	d012      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005bc6:	d81a      	bhi.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d022      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005bd0:	d115      	bne.n	8005bfe <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	2101      	movs	r1, #1
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f001 f9f2 	bl	8006fc4 <RCCEx_PLL2_Config>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005be6:	e015      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005be8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bec:	3328      	adds	r3, #40	@ 0x28
 8005bee:	2101      	movs	r1, #1
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 fa99 	bl	8007128 <RCCEx_PLL3_Config>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005bfc:	e00a      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c04:	e006      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005c06:	bf00      	nop
 8005c08:	e004      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005c0a:	bf00      	nop
 8005c0c:	e002      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005c0e:	bf00      	nop
 8005c10:	e000      	b.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005c1c:	4b38      	ldr	r3, [pc, #224]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c2a:	4a35      	ldr	r2, [pc, #212]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c2c:	430b      	orrs	r3, r1
 8005c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c30:	e003      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005c3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c42:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005c46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005c50:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c54:	460b      	mov	r3, r1
 8005c56:	4313      	orrs	r3, r2
 8005c58:	d058      	beq.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005c5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c5e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c66:	d033      	beq.n	8005cd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005c6c:	d82c      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005c6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c72:	d02f      	beq.n	8005cd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c78:	d826      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005c7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c7e:	d02b      	beq.n	8005cd8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005c80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005c84:	d820      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8a:	d012      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c90:	d81a      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d022      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c9a:	d115      	bne.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ca0:	3308      	adds	r3, #8
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f001 f98d 	bl	8006fc4 <RCCEx_PLL2_Config>
 8005caa:	4603      	mov	r3, r0
 8005cac:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005cb0:	e015      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb6:	3328      	adds	r3, #40	@ 0x28
 8005cb8:	2101      	movs	r1, #1
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fa34 	bl	8007128 <RCCEx_PLL3_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005cc6:	e00a      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cce:	e006      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005cd0:	bf00      	nop
 8005cd2:	e004      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005cd4:	bf00      	nop
 8005cd6:	e002      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005cd8:	bf00      	nop
 8005cda:	e000      	b.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005cdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10e      	bne.n	8005d04 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005ce6:	4b06      	ldr	r3, [pc, #24]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ce8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005cea:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005cee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005cf6:	4a02      	ldr	r2, [pc, #8]	@ (8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005cf8:	430b      	orrs	r3, r1
 8005cfa:	6593      	str	r3, [r2, #88]	@ 0x58
 8005cfc:	e006      	b.n	8005d0c <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005cfe:	bf00      	nop
 8005d00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d04:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d08:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005d0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005d18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005d22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005d26:	460b      	mov	r3, r1
 8005d28:	4313      	orrs	r3, r2
 8005d2a:	d037      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d30:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d36:	d00e      	beq.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005d3c:	d816      	bhi.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d018      	beq.n	8005d74 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005d46:	d111      	bne.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d48:	4bc4      	ldr	r3, [pc, #784]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d4c:	4ac3      	ldr	r2, [pc, #780]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d54:	e00f      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005d56:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d5a:	3308      	adds	r3, #8
 8005d5c:	2101      	movs	r1, #1
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f001 f930 	bl	8006fc4 <RCCEx_PLL2_Config>
 8005d64:	4603      	mov	r3, r0
 8005d66:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005d6a:	e004      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d72:	e000      	b.n	8005d76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d10a      	bne.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005d7e:	4bb7      	ldr	r3, [pc, #732]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005d86:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d8a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005d8c:	4ab3      	ldr	r2, [pc, #716]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d8e:	430b      	orrs	r3, r1
 8005d90:	6513      	str	r3, [r2, #80]	@ 0x50
 8005d92:	e003      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d94:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d98:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005d9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005da4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005da8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dac:	2300      	movs	r3, #0
 8005dae:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005db2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005db6:	460b      	mov	r3, r1
 8005db8:	4313      	orrs	r3, r2
 8005dba:	d039      	beq.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005dbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dc2:	2b03      	cmp	r3, #3
 8005dc4:	d81c      	bhi.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005dcc <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dcc:	08005e09 	.word	0x08005e09
 8005dd0:	08005ddd 	.word	0x08005ddd
 8005dd4:	08005deb 	.word	0x08005deb
 8005dd8:	08005e09 	.word	0x08005e09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ddc:	4b9f      	ldr	r3, [pc, #636]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005de0:	4a9e      	ldr	r2, [pc, #632]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005de6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005de8:	e00f      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005dea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dee:	3308      	adds	r3, #8
 8005df0:	2102      	movs	r1, #2
 8005df2:	4618      	mov	r0, r3
 8005df4:	f001 f8e6 	bl	8006fc4 <RCCEx_PLL2_Config>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005dfe:	e004      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e06:	e000      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005e0a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005e12:	4b92      	ldr	r3, [pc, #584]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005e16:	f023 0103 	bic.w	r1, r3, #3
 8005e1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005e20:	4a8e      	ldr	r2, [pc, #568]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e22:	430b      	orrs	r3, r1
 8005e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005e26:	e003      	b.n	8005e30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e28:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e2c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005e3c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e40:	2300      	movs	r3, #0
 8005e42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005e46:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4313      	orrs	r3, r2
 8005e4e:	f000 8099 	beq.w	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e52:	4b83      	ldr	r3, [pc, #524]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a82      	ldr	r2, [pc, #520]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005e5e:	f7fb fb19 	bl	8001494 <HAL_GetTick>
 8005e62:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e66:	e00b      	b.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e68:	f7fb fb14 	bl	8001494 <HAL_GetTick>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	2b64      	cmp	r3, #100	@ 0x64
 8005e76:	d903      	bls.n	8005e80 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005e78:	2303      	movs	r3, #3
 8005e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005e7e:	e005      	b.n	8005e8c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e80:	4b77      	ldr	r3, [pc, #476]	@ (8006060 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d0ed      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005e8c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d173      	bne.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005e94:	4b71      	ldr	r3, [pc, #452]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005e98:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e9c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ea0:	4053      	eors	r3, r2
 8005ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d015      	beq.n	8005ed6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005eaa:	4b6c      	ldr	r3, [pc, #432]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005eb2:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005eb6:	4b69      	ldr	r3, [pc, #420]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005eba:	4a68      	ldr	r2, [pc, #416]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ec0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ec2:	4b66      	ldr	r3, [pc, #408]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ec6:	4a65      	ldr	r2, [pc, #404]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005ecc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005ece:	4a63      	ldr	r2, [pc, #396]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ed0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005ed4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005ed6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eda:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ee2:	d118      	bne.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ee4:	f7fb fad6 	bl	8001494 <HAL_GetTick>
 8005ee8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005eec:	e00d      	b.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005eee:	f7fb fad1 	bl	8001494 <HAL_GetTick>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005ef8:	1ad2      	subs	r2, r2, r3
 8005efa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d903      	bls.n	8005f0a <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005f02:	2303      	movs	r3, #3
 8005f04:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005f08:	e005      	b.n	8005f16 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005f0a:	4b54      	ldr	r3, [pc, #336]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005f0e:	f003 0302 	and.w	r3, r3, #2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d0eb      	beq.n	8005eee <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005f16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d129      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005f2e:	d10e      	bne.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005f30:	4b4a      	ldr	r3, [pc, #296]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f32:	691b      	ldr	r3, [r3, #16]
 8005f34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005f38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f40:	091a      	lsrs	r2, r3, #4
 8005f42:	4b48      	ldr	r3, [pc, #288]	@ (8006064 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	4a45      	ldr	r2, [pc, #276]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f48:	430b      	orrs	r3, r1
 8005f4a:	6113      	str	r3, [r2, #16]
 8005f4c:	e005      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005f4e:	4b43      	ldr	r3, [pc, #268]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	4a42      	ldr	r2, [pc, #264]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005f58:	6113      	str	r3, [r2, #16]
 8005f5a:	4b40      	ldr	r3, [pc, #256]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005f5e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f6a:	4a3c      	ldr	r2, [pc, #240]	@ (800605c <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005f6c:	430b      	orrs	r3, r1
 8005f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8005f70:	e008      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f72:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f76:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005f7a:	e003      	b.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005f84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8c:	f002 0301 	and.w	r3, r2, #1
 8005f90:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f94:	2300      	movs	r3, #0
 8005f96:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005f9a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	f000 808f 	beq.w	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005fa6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005faa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005fac:	2b28      	cmp	r3, #40	@ 0x28
 8005fae:	d871      	bhi.n	8006094 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005fb0:	a201      	add	r2, pc, #4	@ (adr r2, 8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb6:	bf00      	nop
 8005fb8:	0800609d 	.word	0x0800609d
 8005fbc:	08006095 	.word	0x08006095
 8005fc0:	08006095 	.word	0x08006095
 8005fc4:	08006095 	.word	0x08006095
 8005fc8:	08006095 	.word	0x08006095
 8005fcc:	08006095 	.word	0x08006095
 8005fd0:	08006095 	.word	0x08006095
 8005fd4:	08006095 	.word	0x08006095
 8005fd8:	08006069 	.word	0x08006069
 8005fdc:	08006095 	.word	0x08006095
 8005fe0:	08006095 	.word	0x08006095
 8005fe4:	08006095 	.word	0x08006095
 8005fe8:	08006095 	.word	0x08006095
 8005fec:	08006095 	.word	0x08006095
 8005ff0:	08006095 	.word	0x08006095
 8005ff4:	08006095 	.word	0x08006095
 8005ff8:	0800607f 	.word	0x0800607f
 8005ffc:	08006095 	.word	0x08006095
 8006000:	08006095 	.word	0x08006095
 8006004:	08006095 	.word	0x08006095
 8006008:	08006095 	.word	0x08006095
 800600c:	08006095 	.word	0x08006095
 8006010:	08006095 	.word	0x08006095
 8006014:	08006095 	.word	0x08006095
 8006018:	0800609d 	.word	0x0800609d
 800601c:	08006095 	.word	0x08006095
 8006020:	08006095 	.word	0x08006095
 8006024:	08006095 	.word	0x08006095
 8006028:	08006095 	.word	0x08006095
 800602c:	08006095 	.word	0x08006095
 8006030:	08006095 	.word	0x08006095
 8006034:	08006095 	.word	0x08006095
 8006038:	0800609d 	.word	0x0800609d
 800603c:	08006095 	.word	0x08006095
 8006040:	08006095 	.word	0x08006095
 8006044:	08006095 	.word	0x08006095
 8006048:	08006095 	.word	0x08006095
 800604c:	08006095 	.word	0x08006095
 8006050:	08006095 	.word	0x08006095
 8006054:	08006095 	.word	0x08006095
 8006058:	0800609d 	.word	0x0800609d
 800605c:	58024400 	.word	0x58024400
 8006060:	58024800 	.word	0x58024800
 8006064:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006068:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800606c:	3308      	adds	r3, #8
 800606e:	2101      	movs	r1, #1
 8006070:	4618      	mov	r0, r3
 8006072:	f000 ffa7 	bl	8006fc4 <RCCEx_PLL2_Config>
 8006076:	4603      	mov	r3, r0
 8006078:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800607c:	e00f      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800607e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006082:	3328      	adds	r3, #40	@ 0x28
 8006084:	2101      	movs	r1, #1
 8006086:	4618      	mov	r0, r3
 8006088:	f001 f84e 	bl	8007128 <RCCEx_PLL3_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8006092:	e004      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006094:	2301      	movs	r3, #1
 8006096:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800609a:	e000      	b.n	800609e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 800609c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800609e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d10a      	bne.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80060a6:	4bbf      	ldr	r3, [pc, #764]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80060ae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060b2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80060b4:	4abb      	ldr	r2, [pc, #748]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060b6:	430b      	orrs	r3, r1
 80060b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80060ba:	e003      	b.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060bc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80060c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060cc:	f002 0302 	and.w	r3, r2, #2
 80060d0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060d4:	2300      	movs	r3, #0
 80060d6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80060de:	460b      	mov	r3, r1
 80060e0:	4313      	orrs	r3, r2
 80060e2:	d041      	beq.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80060e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ea:	2b05      	cmp	r3, #5
 80060ec:	d824      	bhi.n	8006138 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 80060ee:	a201      	add	r2, pc, #4	@ (adr r2, 80060f4 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 80060f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f4:	08006141 	.word	0x08006141
 80060f8:	0800610d 	.word	0x0800610d
 80060fc:	08006123 	.word	0x08006123
 8006100:	08006141 	.word	0x08006141
 8006104:	08006141 	.word	0x08006141
 8006108:	08006141 	.word	0x08006141
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800610c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006110:	3308      	adds	r3, #8
 8006112:	2101      	movs	r1, #1
 8006114:	4618      	mov	r0, r3
 8006116:	f000 ff55 	bl	8006fc4 <RCCEx_PLL2_Config>
 800611a:	4603      	mov	r3, r0
 800611c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006120:	e00f      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006122:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006126:	3328      	adds	r3, #40	@ 0x28
 8006128:	2101      	movs	r1, #1
 800612a:	4618      	mov	r0, r3
 800612c:	f000 fffc 	bl	8007128 <RCCEx_PLL3_Config>
 8006130:	4603      	mov	r3, r0
 8006132:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006136:	e004      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006138:	2301      	movs	r3, #1
 800613a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800613e:	e000      	b.n	8006142 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006142:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006146:	2b00      	cmp	r3, #0
 8006148:	d10a      	bne.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800614a:	4b96      	ldr	r3, [pc, #600]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800614c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800614e:	f023 0107 	bic.w	r1, r3, #7
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006156:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006158:	4a92      	ldr	r2, [pc, #584]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800615a:	430b      	orrs	r3, r1
 800615c:	6553      	str	r3, [r2, #84]	@ 0x54
 800615e:	e003      	b.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006160:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006164:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006168:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006170:	f002 0304 	and.w	r3, r2, #4
 8006174:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006178:	2300      	movs	r3, #0
 800617a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800617e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006182:	460b      	mov	r3, r1
 8006184:	4313      	orrs	r3, r2
 8006186:	d044      	beq.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006188:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006190:	2b05      	cmp	r3, #5
 8006192:	d825      	bhi.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8006194:	a201      	add	r2, pc, #4	@ (adr r2, 800619c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	080061e9 	.word	0x080061e9
 80061a0:	080061b5 	.word	0x080061b5
 80061a4:	080061cb 	.word	0x080061cb
 80061a8:	080061e9 	.word	0x080061e9
 80061ac:	080061e9 	.word	0x080061e9
 80061b0:	080061e9 	.word	0x080061e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80061b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061b8:	3308      	adds	r3, #8
 80061ba:	2101      	movs	r1, #1
 80061bc:	4618      	mov	r0, r3
 80061be:	f000 ff01 	bl	8006fc4 <RCCEx_PLL2_Config>
 80061c2:	4603      	mov	r3, r0
 80061c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061c8:	e00f      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80061ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ce:	3328      	adds	r3, #40	@ 0x28
 80061d0:	2101      	movs	r1, #1
 80061d2:	4618      	mov	r0, r3
 80061d4:	f000 ffa8 	bl	8007128 <RCCEx_PLL3_Config>
 80061d8:	4603      	mov	r3, r0
 80061da:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80061de:	e004      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061e6:	e000      	b.n	80061ea <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80061e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80061ea:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d10b      	bne.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061f2:	4b6c      	ldr	r3, [pc, #432]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80061f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80061f6:	f023 0107 	bic.w	r1, r3, #7
 80061fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006202:	4a68      	ldr	r2, [pc, #416]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006204:	430b      	orrs	r3, r1
 8006206:	6593      	str	r3, [r2, #88]	@ 0x58
 8006208:	e003      	b.n	8006212 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800620a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800620e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006212:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800621a:	f002 0320 	and.w	r3, r2, #32
 800621e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006222:	2300      	movs	r3, #0
 8006224:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8006228:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800622c:	460b      	mov	r3, r1
 800622e:	4313      	orrs	r3, r2
 8006230:	d055      	beq.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006236:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800623a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800623e:	d033      	beq.n	80062a8 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006244:	d82c      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800624a:	d02f      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0xba4>
 800624c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006250:	d826      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006252:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006256:	d02b      	beq.n	80062b0 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006258:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800625c:	d820      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800625e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006262:	d012      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8006264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006268:	d81a      	bhi.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800626a:	2b00      	cmp	r3, #0
 800626c:	d022      	beq.n	80062b4 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 800626e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006272:	d115      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006274:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006278:	3308      	adds	r3, #8
 800627a:	2100      	movs	r1, #0
 800627c:	4618      	mov	r0, r3
 800627e:	f000 fea1 	bl	8006fc4 <RCCEx_PLL2_Config>
 8006282:	4603      	mov	r3, r0
 8006284:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006288:	e015      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800628a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800628e:	3328      	adds	r3, #40	@ 0x28
 8006290:	2102      	movs	r1, #2
 8006292:	4618      	mov	r0, r3
 8006294:	f000 ff48 	bl	8007128 <RCCEx_PLL3_Config>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800629e:	e00a      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062a0:	2301      	movs	r3, #1
 80062a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062a6:	e006      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80062a8:	bf00      	nop
 80062aa:	e004      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80062ac:	bf00      	nop
 80062ae:	e002      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80062b0:	bf00      	nop
 80062b2:	e000      	b.n	80062b6 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80062b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062b6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10b      	bne.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80062be:	4b39      	ldr	r3, [pc, #228]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80062c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80062ce:	4a35      	ldr	r2, [pc, #212]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062d0:	430b      	orrs	r3, r1
 80062d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80062d4:	e003      	b.n	80062de <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062da:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80062de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80062ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80062ee:	2300      	movs	r3, #0
 80062f0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80062f4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80062f8:	460b      	mov	r3, r1
 80062fa:	4313      	orrs	r3, r2
 80062fc:	d058      	beq.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006302:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006306:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800630a:	d033      	beq.n	8006374 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 800630c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006310:	d82c      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006316:	d02f      	beq.n	8006378 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8006318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800631c:	d826      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800631e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006322:	d02b      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006324:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006328:	d820      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800632a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800632e:	d012      	beq.n	8006356 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006334:	d81a      	bhi.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006336:	2b00      	cmp	r3, #0
 8006338:	d022      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800633a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800633e:	d115      	bne.n	800636c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006340:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006344:	3308      	adds	r3, #8
 8006346:	2100      	movs	r1, #0
 8006348:	4618      	mov	r0, r3
 800634a:	f000 fe3b 	bl	8006fc4 <RCCEx_PLL2_Config>
 800634e:	4603      	mov	r3, r0
 8006350:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006354:	e015      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006356:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800635a:	3328      	adds	r3, #40	@ 0x28
 800635c:	2102      	movs	r1, #2
 800635e:	4618      	mov	r0, r3
 8006360:	f000 fee2 	bl	8007128 <RCCEx_PLL3_Config>
 8006364:	4603      	mov	r3, r0
 8006366:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800636a:	e00a      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006372:	e006      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006374:	bf00      	nop
 8006376:	e004      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006378:	bf00      	nop
 800637a:	e002      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800637c:	bf00      	nop
 800637e:	e000      	b.n	8006382 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006382:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006386:	2b00      	cmp	r3, #0
 8006388:	d10e      	bne.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800638a:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800638c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800638e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8006392:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006396:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800639a:	4a02      	ldr	r2, [pc, #8]	@ (80063a4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800639c:	430b      	orrs	r3, r1
 800639e:	6593      	str	r3, [r2, #88]	@ 0x58
 80063a0:	e006      	b.n	80063b0 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80063a2:	bf00      	nop
 80063a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80063b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80063bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80063c0:	2300      	movs	r3, #0
 80063c2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80063c6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80063ca:	460b      	mov	r3, r1
 80063cc:	4313      	orrs	r3, r2
 80063ce:	d055      	beq.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063dc:	d033      	beq.n	8006446 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80063de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80063e2:	d82c      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80063e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063e8:	d02f      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80063ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80063ee:	d826      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80063f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063f4:	d02b      	beq.n	800644e <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80063f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80063fa:	d820      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80063fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006400:	d012      	beq.n	8006428 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006406:	d81a      	bhi.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d022      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 800640c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006410:	d115      	bne.n	800643e <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006412:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006416:	3308      	adds	r3, #8
 8006418:	2100      	movs	r1, #0
 800641a:	4618      	mov	r0, r3
 800641c:	f000 fdd2 	bl	8006fc4 <RCCEx_PLL2_Config>
 8006420:	4603      	mov	r3, r0
 8006422:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006426:	e015      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006428:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800642c:	3328      	adds	r3, #40	@ 0x28
 800642e:	2102      	movs	r1, #2
 8006430:	4618      	mov	r0, r3
 8006432:	f000 fe79 	bl	8007128 <RCCEx_PLL3_Config>
 8006436:	4603      	mov	r3, r0
 8006438:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800643c:	e00a      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800643e:	2301      	movs	r3, #1
 8006440:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006444:	e006      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006446:	bf00      	nop
 8006448:	e004      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800644a:	bf00      	nop
 800644c:	e002      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800644e:	bf00      	nop
 8006450:	e000      	b.n	8006454 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006454:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10b      	bne.n	8006474 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800645c:	4ba0      	ldr	r3, [pc, #640]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800645e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006460:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8006464:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006468:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800646c:	4a9c      	ldr	r2, [pc, #624]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800646e:	430b      	orrs	r3, r1
 8006470:	6593      	str	r3, [r2, #88]	@ 0x58
 8006472:	e003      	b.n	800647c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006474:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006478:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800647c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006484:	f002 0308 	and.w	r3, r2, #8
 8006488:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800648c:	2300      	movs	r3, #0
 800648e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8006492:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8006496:	460b      	mov	r3, r1
 8006498:	4313      	orrs	r3, r2
 800649a:	d01e      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800649c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80064a8:	d10c      	bne.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80064aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ae:	3328      	adds	r3, #40	@ 0x28
 80064b0:	2102      	movs	r1, #2
 80064b2:	4618      	mov	r0, r3
 80064b4:	f000 fe38 	bl	8007128 <RCCEx_PLL3_Config>
 80064b8:	4603      	mov	r3, r0
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d002      	beq.n	80064c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 80064c4:	4b86      	ldr	r3, [pc, #536]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80064c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80064cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064d4:	4a82      	ldr	r2, [pc, #520]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064d6:	430b      	orrs	r3, r1
 80064d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80064da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064e2:	f002 0310 	and.w	r3, r2, #16
 80064e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80064ea:	2300      	movs	r3, #0
 80064ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80064f0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80064f4:	460b      	mov	r3, r1
 80064f6:	4313      	orrs	r3, r2
 80064f8:	d01e      	beq.n	8006538 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80064fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006506:	d10c      	bne.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006508:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800650c:	3328      	adds	r3, #40	@ 0x28
 800650e:	2102      	movs	r1, #2
 8006510:	4618      	mov	r0, r3
 8006512:	f000 fe09 	bl	8007128 <RCCEx_PLL3_Config>
 8006516:	4603      	mov	r3, r0
 8006518:	2b00      	cmp	r3, #0
 800651a:	d002      	beq.n	8006522 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006522:	4b6f      	ldr	r3, [pc, #444]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006526:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800652a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006532:	4a6b      	ldr	r2, [pc, #428]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006534:	430b      	orrs	r3, r1
 8006536:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006538:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800653c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006540:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006544:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006546:	2300      	movs	r3, #0
 8006548:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800654a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800654e:	460b      	mov	r3, r1
 8006550:	4313      	orrs	r3, r2
 8006552:	d03e      	beq.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8006554:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006558:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800655c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006560:	d022      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8006562:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006566:	d81b      	bhi.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800656c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006570:	d00b      	beq.n	800658a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8006572:	e015      	b.n	80065a0 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006574:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006578:	3308      	adds	r3, #8
 800657a:	2100      	movs	r1, #0
 800657c:	4618      	mov	r0, r3
 800657e:	f000 fd21 	bl	8006fc4 <RCCEx_PLL2_Config>
 8006582:	4603      	mov	r3, r0
 8006584:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006588:	e00f      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800658a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800658e:	3328      	adds	r3, #40	@ 0x28
 8006590:	2102      	movs	r1, #2
 8006592:	4618      	mov	r0, r3
 8006594:	f000 fdc8 	bl	8007128 <RCCEx_PLL3_Config>
 8006598:	4603      	mov	r3, r0
 800659a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800659e:	e004      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80065a8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80065aa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d10b      	bne.n	80065ca <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80065b2:	4b4b      	ldr	r3, [pc, #300]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80065b6:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80065c2:	4a47      	ldr	r2, [pc, #284]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065c4:	430b      	orrs	r3, r1
 80065c6:	6593      	str	r3, [r2, #88]	@ 0x58
 80065c8:	e003      	b.n	80065d2 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065ce:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80065d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065da:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80065de:	673b      	str	r3, [r7, #112]	@ 0x70
 80065e0:	2300      	movs	r3, #0
 80065e2:	677b      	str	r3, [r7, #116]	@ 0x74
 80065e4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80065e8:	460b      	mov	r3, r1
 80065ea:	4313      	orrs	r3, r2
 80065ec:	d03b      	beq.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80065ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065f6:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80065fa:	d01f      	beq.n	800663c <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80065fc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006600:	d818      	bhi.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006602:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006606:	d003      	beq.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8006608:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800660c:	d007      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xf16>
 800660e:	e011      	b.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006610:	4b33      	ldr	r3, [pc, #204]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006614:	4a32      	ldr	r2, [pc, #200]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006616:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800661a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800661c:	e00f      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800661e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006622:	3328      	adds	r3, #40	@ 0x28
 8006624:	2101      	movs	r1, #1
 8006626:	4618      	mov	r0, r3
 8006628:	f000 fd7e 	bl	8007128 <RCCEx_PLL3_Config>
 800662c:	4603      	mov	r3, r0
 800662e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006632:	e004      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006634:	2301      	movs	r3, #1
 8006636:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800663a:	e000      	b.n	800663e <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 800663c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800663e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006646:	4b26      	ldr	r3, [pc, #152]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006648:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800664a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800664e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006652:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006656:	4a22      	ldr	r2, [pc, #136]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006658:	430b      	orrs	r3, r1
 800665a:	6553      	str	r3, [r2, #84]	@ 0x54
 800665c:	e003      	b.n	8006666 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800665e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006662:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8006666:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800666a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800666e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8006672:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006674:	2300      	movs	r3, #0
 8006676:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006678:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800667c:	460b      	mov	r3, r1
 800667e:	4313      	orrs	r3, r2
 8006680:	d034      	beq.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8006682:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800668c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006690:	d007      	beq.n	80066a2 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8006692:	e011      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006694:	4b12      	ldr	r3, [pc, #72]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006698:	4a11      	ldr	r2, [pc, #68]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800669a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800669e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80066a0:	e00e      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80066a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a6:	3308      	adds	r3, #8
 80066a8:	2102      	movs	r1, #2
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 fc8a 	bl	8006fc4 <RCCEx_PLL2_Config>
 80066b0:	4603      	mov	r3, r0
 80066b2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80066b6:	e003      	b.n	80066c0 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066be:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d10d      	bne.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80066c8:	4b05      	ldr	r3, [pc, #20]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066cc:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80066d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066d6:	4a02      	ldr	r2, [pc, #8]	@ (80066e0 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80066d8:	430b      	orrs	r3, r1
 80066da:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80066dc:	e006      	b.n	80066ec <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80066de:	bf00      	nop
 80066e0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066e8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80066ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80066f8:	663b      	str	r3, [r7, #96]	@ 0x60
 80066fa:	2300      	movs	r3, #0
 80066fc:	667b      	str	r3, [r7, #100]	@ 0x64
 80066fe:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006702:	460b      	mov	r3, r1
 8006704:	4313      	orrs	r3, r2
 8006706:	d00c      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006708:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800670c:	3328      	adds	r3, #40	@ 0x28
 800670e:	2102      	movs	r1, #2
 8006710:	4618      	mov	r0, r3
 8006712:	f000 fd09 	bl	8007128 <RCCEx_PLL3_Config>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006722:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800672a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800672e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006730:	2300      	movs	r3, #0
 8006732:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006734:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006738:	460b      	mov	r3, r1
 800673a:	4313      	orrs	r3, r2
 800673c:	d036      	beq.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006742:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006744:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006748:	d018      	beq.n	800677c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800674a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800674e:	d811      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006754:	d014      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8006756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800675a:	d80b      	bhi.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 800675c:	2b00      	cmp	r3, #0
 800675e:	d011      	beq.n	8006784 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006764:	d106      	bne.n	8006774 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006766:	4bb7      	ldr	r3, [pc, #732]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800676a:	4ab6      	ldr	r2, [pc, #728]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800676c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006770:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8006772:	e008      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006774:	2301      	movs	r3, #1
 8006776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800677a:	e004      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800677c:	bf00      	nop
 800677e:	e002      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006784:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006786:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800678a:	2b00      	cmp	r3, #0
 800678c:	d10a      	bne.n	80067a4 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800678e:	4bad      	ldr	r3, [pc, #692]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006792:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8006796:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800679c:	4aa9      	ldr	r2, [pc, #676]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800679e:	430b      	orrs	r3, r1
 80067a0:	6553      	str	r3, [r2, #84]	@ 0x54
 80067a2:	e003      	b.n	80067ac <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b4:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80067b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80067ba:	2300      	movs	r3, #0
 80067bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80067be:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80067c2:	460b      	mov	r3, r1
 80067c4:	4313      	orrs	r3, r2
 80067c6:	d009      	beq.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067c8:	4b9e      	ldr	r3, [pc, #632]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067cc:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80067d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80067d6:	4a9b      	ldr	r2, [pc, #620]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067d8:	430b      	orrs	r3, r1
 80067da:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067e4:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80067e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80067ea:	2300      	movs	r3, #0
 80067ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80067ee:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80067f2:	460b      	mov	r3, r1
 80067f4:	4313      	orrs	r3, r2
 80067f6:	d009      	beq.n	800680c <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067f8:	4b92      	ldr	r3, [pc, #584]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067fc:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006800:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006804:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006806:	4a8f      	ldr	r2, [pc, #572]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006808:	430b      	orrs	r3, r1
 800680a:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006814:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8006818:	643b      	str	r3, [r7, #64]	@ 0x40
 800681a:	2300      	movs	r3, #0
 800681c:	647b      	str	r3, [r7, #68]	@ 0x44
 800681e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006822:	460b      	mov	r3, r1
 8006824:	4313      	orrs	r3, r2
 8006826:	d00e      	beq.n	8006846 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006828:	4b86      	ldr	r3, [pc, #536]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	4a85      	ldr	r2, [pc, #532]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800682e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006832:	6113      	str	r3, [r2, #16]
 8006834:	4b83      	ldr	r3, [pc, #524]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006836:	6919      	ldr	r1, [r3, #16]
 8006838:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800683c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006840:	4a80      	ldr	r2, [pc, #512]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006842:	430b      	orrs	r3, r1
 8006844:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006846:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800684a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800684e:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8006852:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006854:	2300      	movs	r3, #0
 8006856:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006858:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800685c:	460b      	mov	r3, r1
 800685e:	4313      	orrs	r3, r2
 8006860:	d009      	beq.n	8006876 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8006862:	4b78      	ldr	r3, [pc, #480]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006864:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006866:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800686a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800686e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006870:	4a74      	ldr	r2, [pc, #464]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006872:	430b      	orrs	r3, r1
 8006874:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800687a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800687e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8006882:	633b      	str	r3, [r7, #48]	@ 0x30
 8006884:	2300      	movs	r3, #0
 8006886:	637b      	str	r3, [r7, #52]	@ 0x34
 8006888:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800688c:	460b      	mov	r3, r1
 800688e:	4313      	orrs	r3, r2
 8006890:	d00a      	beq.n	80068a8 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006892:	4b6c      	ldr	r3, [pc, #432]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006894:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006896:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800689a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a2:	4a68      	ldr	r2, [pc, #416]	@ (8006a44 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80068a4:	430b      	orrs	r3, r1
 80068a6:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80068a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b0:	2100      	movs	r1, #0
 80068b2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80068b4:	f003 0301 	and.w	r3, r3, #1
 80068b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068ba:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80068be:	460b      	mov	r3, r1
 80068c0:	4313      	orrs	r3, r2
 80068c2:	d011      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80068c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c8:	3308      	adds	r3, #8
 80068ca:	2100      	movs	r1, #0
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fb79 	bl	8006fc4 <RCCEx_PLL2_Config>
 80068d2:	4603      	mov	r3, r0
 80068d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80068d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d003      	beq.n	80068e8 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068f0:	2100      	movs	r1, #0
 80068f2:	6239      	str	r1, [r7, #32]
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80068fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80068fe:	460b      	mov	r3, r1
 8006900:	4313      	orrs	r3, r2
 8006902:	d011      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006904:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006908:	3308      	adds	r3, #8
 800690a:	2101      	movs	r1, #1
 800690c:	4618      	mov	r0, r3
 800690e:	f000 fb59 	bl	8006fc4 <RCCEx_PLL2_Config>
 8006912:	4603      	mov	r3, r0
 8006914:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006918:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800691c:	2b00      	cmp	r3, #0
 800691e:	d003      	beq.n	8006928 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006920:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006924:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8006928:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800692c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006930:	2100      	movs	r1, #0
 8006932:	61b9      	str	r1, [r7, #24]
 8006934:	f003 0304 	and.w	r3, r3, #4
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800693e:	460b      	mov	r3, r1
 8006940:	4313      	orrs	r3, r2
 8006942:	d011      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006944:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006948:	3308      	adds	r3, #8
 800694a:	2102      	movs	r1, #2
 800694c:	4618      	mov	r0, r3
 800694e:	f000 fb39 	bl	8006fc4 <RCCEx_PLL2_Config>
 8006952:	4603      	mov	r3, r0
 8006954:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006958:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006960:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006964:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006968:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800696c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006970:	2100      	movs	r1, #0
 8006972:	6139      	str	r1, [r7, #16]
 8006974:	f003 0308 	and.w	r3, r3, #8
 8006978:	617b      	str	r3, [r7, #20]
 800697a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800697e:	460b      	mov	r3, r1
 8006980:	4313      	orrs	r3, r2
 8006982:	d011      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006984:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006988:	3328      	adds	r3, #40	@ 0x28
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fbcb 	bl	8007128 <RCCEx_PLL3_Config>
 8006992:	4603      	mov	r3, r0
 8006994:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006998:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069a4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80069a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069b0:	2100      	movs	r1, #0
 80069b2:	60b9      	str	r1, [r7, #8]
 80069b4:	f003 0310 	and.w	r3, r3, #16
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80069be:	460b      	mov	r3, r1
 80069c0:	4313      	orrs	r3, r2
 80069c2:	d011      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80069c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069c8:	3328      	adds	r3, #40	@ 0x28
 80069ca:	2101      	movs	r1, #1
 80069cc:	4618      	mov	r0, r3
 80069ce:	f000 fbab 	bl	8007128 <RCCEx_PLL3_Config>
 80069d2:	4603      	mov	r3, r0
 80069d4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80069d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d003      	beq.n	80069e8 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80069e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80069e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80069ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069f0:	2100      	movs	r1, #0
 80069f2:	6039      	str	r1, [r7, #0]
 80069f4:	f003 0320 	and.w	r3, r3, #32
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	e9d7 1200 	ldrd	r1, r2, [r7]
 80069fe:	460b      	mov	r3, r1
 8006a00:	4313      	orrs	r3, r2
 8006a02:	d011      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006a04:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006a08:	3328      	adds	r3, #40	@ 0x28
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f000 fb8b 	bl	8007128 <RCCEx_PLL3_Config>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006a18:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a20:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006a24:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 8006a28:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d101      	bne.n	8006a34 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006a30:	2300      	movs	r3, #0
 8006a32:	e000      	b.n	8006a36 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a42:	bf00      	nop
 8006a44:	58024400 	.word	0x58024400

08006a48 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006a4c:	f7fe fe00 	bl	8005650 <HAL_RCC_GetHCLKFreq>
 8006a50:	4602      	mov	r2, r0
 8006a52:	4b06      	ldr	r3, [pc, #24]	@ (8006a6c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006a54:	6a1b      	ldr	r3, [r3, #32]
 8006a56:	091b      	lsrs	r3, r3, #4
 8006a58:	f003 0307 	and.w	r3, r3, #7
 8006a5c:	4904      	ldr	r1, [pc, #16]	@ (8006a70 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006a5e:	5ccb      	ldrb	r3, [r1, r3]
 8006a60:	f003 031f 	and.w	r3, r3, #31
 8006a64:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006a68:	4618      	mov	r0, r3
 8006a6a:	bd80      	pop	{r7, pc}
 8006a6c:	58024400 	.word	0x58024400
 8006a70:	08009674 	.word	0x08009674

08006a74 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b089      	sub	sp, #36	@ 0x24
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006a7c:	4ba1      	ldr	r3, [pc, #644]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a80:	f003 0303 	and.w	r3, r3, #3
 8006a84:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006a86:	4b9f      	ldr	r3, [pc, #636]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a8a:	0b1b      	lsrs	r3, r3, #12
 8006a8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a90:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8006a92:	4b9c      	ldr	r3, [pc, #624]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a96:	091b      	lsrs	r3, r3, #4
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006a9e:	4b99      	ldr	r3, [pc, #612]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006aa2:	08db      	lsrs	r3, r3, #3
 8006aa4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	fb02 f303 	mul.w	r3, r2, r3
 8006aae:	ee07 3a90 	vmov	s15, r3
 8006ab2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ab6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	f000 8111 	beq.w	8006ce4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006ac2:	69bb      	ldr	r3, [r7, #24]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	f000 8083 	beq.w	8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006aca:	69bb      	ldr	r3, [r7, #24]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	f200 80a1 	bhi.w	8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006ad2:	69bb      	ldr	r3, [r7, #24]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006ad8:	69bb      	ldr	r3, [r7, #24]
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d056      	beq.n	8006b8c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006ade:	e099      	b.n	8006c14 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006ae0:	4b88      	ldr	r3, [pc, #544]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f003 0320 	and.w	r3, r3, #32
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d02d      	beq.n	8006b48 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006aec:	4b85      	ldr	r3, [pc, #532]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	08db      	lsrs	r3, r3, #3
 8006af2:	f003 0303 	and.w	r3, r3, #3
 8006af6:	4a84      	ldr	r2, [pc, #528]	@ (8006d08 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006af8:	fa22 f303 	lsr.w	r3, r2, r3
 8006afc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006afe:	68bb      	ldr	r3, [r7, #8]
 8006b00:	ee07 3a90 	vmov	s15, r3
 8006b04:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b08:	697b      	ldr	r3, [r7, #20]
 8006b0a:	ee07 3a90 	vmov	s15, r3
 8006b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b16:	4b7b      	ldr	r3, [pc, #492]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b1e:	ee07 3a90 	vmov	s15, r3
 8006b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b26:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b2a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b42:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006b46:	e087      	b.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	ee07 3a90 	vmov	s15, r3
 8006b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b52:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006d10 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b5a:	4b6a      	ldr	r3, [pc, #424]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b62:	ee07 3a90 	vmov	s15, r3
 8006b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b6e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b86:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b8a:	e065      	b.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	ee07 3a90 	vmov	s15, r3
 8006b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b96:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b9e:	4b59      	ldr	r3, [pc, #356]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ba6:	ee07 3a90 	vmov	s15, r3
 8006baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bae:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bb2:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006bce:	e043      	b.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006bd0:	697b      	ldr	r3, [r7, #20]
 8006bd2:	ee07 3a90 	vmov	s15, r3
 8006bd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bda:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006bde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006be2:	4b48      	ldr	r3, [pc, #288]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006be4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bea:	ee07 3a90 	vmov	s15, r3
 8006bee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006bf2:	ed97 6a03 	vldr	s12, [r7, #12]
 8006bf6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006bfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006bfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c12:	e021      	b.n	8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006c14:	697b      	ldr	r3, [r7, #20]
 8006c16:	ee07 3a90 	vmov	s15, r3
 8006c1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006d14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006c22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c26:	4b37      	ldr	r3, [pc, #220]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c2e:	ee07 3a90 	vmov	s15, r3
 8006c32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c36:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c3a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006d0c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006c3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006c42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006c46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006c4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006c52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006c56:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006c58:	4b2a      	ldr	r3, [pc, #168]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c5c:	0a5b      	lsrs	r3, r3, #9
 8006c5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c62:	ee07 3a90 	vmov	s15, r3
 8006c66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c72:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c7e:	ee17 2a90 	vmov	r2, s15
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006c86:	4b1f      	ldr	r3, [pc, #124]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c8a:	0c1b      	lsrs	r3, r3, #16
 8006c8c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c90:	ee07 3a90 	vmov	s15, r3
 8006c94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c98:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c9c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006ca0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ca4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ca8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cac:	ee17 2a90 	vmov	r2, s15
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006cb4:	4b13      	ldr	r3, [pc, #76]	@ (8006d04 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006cb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb8:	0e1b      	lsrs	r3, r3, #24
 8006cba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006cbe:	ee07 3a90 	vmov	s15, r3
 8006cc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006cca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006cce:	edd7 6a07 	vldr	s13, [r7, #28]
 8006cd2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006cd6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006cda:	ee17 2a90 	vmov	r2, s15
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006ce2:	e008      	b.n	8006cf6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2200      	movs	r2, #0
 8006cee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	609a      	str	r2, [r3, #8]
}
 8006cf6:	bf00      	nop
 8006cf8:	3724      	adds	r7, #36	@ 0x24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
 8006d02:	bf00      	nop
 8006d04:	58024400 	.word	0x58024400
 8006d08:	03d09000 	.word	0x03d09000
 8006d0c:	46000000 	.word	0x46000000
 8006d10:	4c742400 	.word	0x4c742400
 8006d14:	4a742400 	.word	0x4a742400
 8006d18:	4af42400 	.word	0x4af42400

08006d1c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006d1c:	b480      	push	{r7}
 8006d1e:	b089      	sub	sp, #36	@ 0x24
 8006d20:	af00      	add	r7, sp, #0
 8006d22:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006d24:	4ba1      	ldr	r3, [pc, #644]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d28:	f003 0303 	and.w	r3, r3, #3
 8006d2c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006d2e:	4b9f      	ldr	r3, [pc, #636]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d32:	0d1b      	lsrs	r3, r3, #20
 8006d34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d38:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006d3a:	4b9c      	ldr	r3, [pc, #624]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d3e:	0a1b      	lsrs	r3, r3, #8
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006d46:	4b99      	ldr	r3, [pc, #612]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d4a:	08db      	lsrs	r3, r3, #3
 8006d4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006d50:	693a      	ldr	r2, [r7, #16]
 8006d52:	fb02 f303 	mul.w	r3, r2, r3
 8006d56:	ee07 3a90 	vmov	s15, r3
 8006d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d5e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006d62:	697b      	ldr	r3, [r7, #20]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	f000 8111 	beq.w	8006f8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006d6a:	69bb      	ldr	r3, [r7, #24]
 8006d6c:	2b02      	cmp	r3, #2
 8006d6e:	f000 8083 	beq.w	8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	2b02      	cmp	r3, #2
 8006d76:	f200 80a1 	bhi.w	8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d056      	beq.n	8006e34 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006d86:	e099      	b.n	8006ebc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006d88:	4b88      	ldr	r3, [pc, #544]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0320 	and.w	r3, r3, #32
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d02d      	beq.n	8006df0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006d94:	4b85      	ldr	r3, [pc, #532]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	08db      	lsrs	r3, r3, #3
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	4a84      	ldr	r2, [pc, #528]	@ (8006fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006da0:	fa22 f303 	lsr.w	r3, r2, r3
 8006da4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006da6:	68bb      	ldr	r3, [r7, #8]
 8006da8:	ee07 3a90 	vmov	s15, r3
 8006dac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	ee07 3a90 	vmov	s15, r3
 8006db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dbe:	4b7b      	ldr	r3, [pc, #492]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dc6:	ee07 3a90 	vmov	s15, r3
 8006dca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dce:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dd2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dde:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006de2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006de6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006dee:	e087      	b.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	ee07 3a90 	vmov	s15, r3
 8006df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dfa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006dfe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e02:	4b6a      	ldr	r3, [pc, #424]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e0a:	ee07 3a90 	vmov	s15, r3
 8006e0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e12:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e32:	e065      	b.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	ee07 3a90 	vmov	s15, r3
 8006e3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e46:	4b59      	ldr	r3, [pc, #356]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e4e:	ee07 3a90 	vmov	s15, r3
 8006e52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e56:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e76:	e043      	b.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	ee07 3a90 	vmov	s15, r3
 8006e7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006e86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e8a:	4b48      	ldr	r3, [pc, #288]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e92:	ee07 3a90 	vmov	s15, r3
 8006e96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ea2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ea6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006eae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006eb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006eb6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006eba:	e021      	b.n	8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	ee07 3a90 	vmov	s15, r3
 8006ec2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006fbc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006eca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ece:	4b37      	ldr	r3, [pc, #220]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ed6:	ee07 3a90 	vmov	s15, r3
 8006eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006ede:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ee2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006fb4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006eee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006efe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006f00:	4b2a      	ldr	r3, [pc, #168]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f04:	0a5b      	lsrs	r3, r3, #9
 8006f06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f0a:	ee07 3a90 	vmov	s15, r3
 8006f0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f26:	ee17 2a90 	vmov	r2, s15
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006f2e:	4b1f      	ldr	r3, [pc, #124]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f32:	0c1b      	lsrs	r3, r3, #16
 8006f34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f38:	ee07 3a90 	vmov	s15, r3
 8006f3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f48:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f54:	ee17 2a90 	vmov	r2, s15
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006f5c:	4b13      	ldr	r3, [pc, #76]	@ (8006fac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f60:	0e1b      	lsrs	r3, r3, #24
 8006f62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006f66:	ee07 3a90 	vmov	s15, r3
 8006f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006f6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8006f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f82:	ee17 2a90 	vmov	r2, s15
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006f8a:	e008      	b.n	8006f9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2200      	movs	r2, #0
 8006f96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	609a      	str	r2, [r3, #8]
}
 8006f9e:	bf00      	nop
 8006fa0:	3724      	adds	r7, #36	@ 0x24
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	58024400 	.word	0x58024400
 8006fb0:	03d09000 	.word	0x03d09000
 8006fb4:	46000000 	.word	0x46000000
 8006fb8:	4c742400 	.word	0x4c742400
 8006fbc:	4a742400 	.word	0x4a742400
 8006fc0:	4af42400 	.word	0x4af42400

08006fc4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b084      	sub	sp, #16
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006fd2:	4b53      	ldr	r3, [pc, #332]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8006fd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	2b03      	cmp	r3, #3
 8006fdc:	d101      	bne.n	8006fe2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e099      	b.n	8007116 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a4e      	ldr	r2, [pc, #312]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8006fe8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fee:	f7fa fa51 	bl	8001494 <HAL_GetTick>
 8006ff2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ff4:	e008      	b.n	8007008 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ff6:	f7fa fa4d 	bl	8001494 <HAL_GetTick>
 8006ffa:	4602      	mov	r2, r0
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	1ad3      	subs	r3, r2, r3
 8007000:	2b02      	cmp	r3, #2
 8007002:	d901      	bls.n	8007008 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007004:	2303      	movs	r3, #3
 8007006:	e086      	b.n	8007116 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007008:	4b45      	ldr	r3, [pc, #276]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007010:	2b00      	cmp	r3, #0
 8007012:	d1f0      	bne.n	8006ff6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007014:	4b42      	ldr	r3, [pc, #264]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8007016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007018:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	031b      	lsls	r3, r3, #12
 8007022:	493f      	ldr	r1, [pc, #252]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8007024:	4313      	orrs	r3, r2
 8007026:	628b      	str	r3, [r1, #40]	@ 0x28
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	3b01      	subs	r3, #1
 800702e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	689b      	ldr	r3, [r3, #8]
 8007036:	3b01      	subs	r3, #1
 8007038:	025b      	lsls	r3, r3, #9
 800703a:	b29b      	uxth	r3, r3
 800703c:	431a      	orrs	r2, r3
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	68db      	ldr	r3, [r3, #12]
 8007042:	3b01      	subs	r3, #1
 8007044:	041b      	lsls	r3, r3, #16
 8007046:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800704a:	431a      	orrs	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	3b01      	subs	r3, #1
 8007052:	061b      	lsls	r3, r3, #24
 8007054:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007058:	4931      	ldr	r1, [pc, #196]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 800705a:	4313      	orrs	r3, r2
 800705c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800705e:	4b30      	ldr	r3, [pc, #192]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8007060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007062:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	695b      	ldr	r3, [r3, #20]
 800706a:	492d      	ldr	r1, [pc, #180]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 800706c:	4313      	orrs	r3, r2
 800706e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007070:	4b2b      	ldr	r3, [pc, #172]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8007072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007074:	f023 0220 	bic.w	r2, r3, #32
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	4928      	ldr	r1, [pc, #160]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 800707e:	4313      	orrs	r3, r2
 8007080:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007082:	4b27      	ldr	r3, [pc, #156]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8007084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007086:	4a26      	ldr	r2, [pc, #152]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8007088:	f023 0310 	bic.w	r3, r3, #16
 800708c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800708e:	4b24      	ldr	r3, [pc, #144]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 8007090:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007092:	4b24      	ldr	r3, [pc, #144]	@ (8007124 <RCCEx_PLL2_Config+0x160>)
 8007094:	4013      	ands	r3, r2
 8007096:	687a      	ldr	r2, [r7, #4]
 8007098:	69d2      	ldr	r2, [r2, #28]
 800709a:	00d2      	lsls	r2, r2, #3
 800709c:	4920      	ldr	r1, [pc, #128]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80070a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a6:	4a1e      	ldr	r2, [pc, #120]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070a8:	f043 0310 	orr.w	r3, r3, #16
 80070ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d106      	bne.n	80070c2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80070b4:	4b1a      	ldr	r3, [pc, #104]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b8:	4a19      	ldr	r2, [pc, #100]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070ba:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80070be:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070c0:	e00f      	b.n	80070e2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d106      	bne.n	80070d6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80070c8:	4b15      	ldr	r3, [pc, #84]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070cc:	4a14      	ldr	r2, [pc, #80]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070ce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80070d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070d4:	e005      	b.n	80070e2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80070d6:	4b12      	ldr	r3, [pc, #72]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070da:	4a11      	ldr	r2, [pc, #68]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80070e0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80070e2:	4b0f      	ldr	r3, [pc, #60]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a0e      	ldr	r2, [pc, #56]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 80070e8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80070ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070ee:	f7fa f9d1 	bl	8001494 <HAL_GetTick>
 80070f2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80070f4:	e008      	b.n	8007108 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80070f6:	f7fa f9cd 	bl	8001494 <HAL_GetTick>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	1ad3      	subs	r3, r2, r3
 8007100:	2b02      	cmp	r3, #2
 8007102:	d901      	bls.n	8007108 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007104:	2303      	movs	r3, #3
 8007106:	e006      	b.n	8007116 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007108:	4b05      	ldr	r3, [pc, #20]	@ (8007120 <RCCEx_PLL2_Config+0x15c>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0f0      	beq.n	80070f6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007114:	7bfb      	ldrb	r3, [r7, #15]
}
 8007116:	4618      	mov	r0, r3
 8007118:	3710      	adds	r7, #16
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}
 800711e:	bf00      	nop
 8007120:	58024400 	.word	0x58024400
 8007124:	ffff0007 	.word	0xffff0007

08007128 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007132:	2300      	movs	r3, #0
 8007134:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007136:	4b53      	ldr	r3, [pc, #332]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 8007138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800713a:	f003 0303 	and.w	r3, r3, #3
 800713e:	2b03      	cmp	r3, #3
 8007140:	d101      	bne.n	8007146 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e099      	b.n	800727a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007146:	4b4f      	ldr	r3, [pc, #316]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a4e      	ldr	r2, [pc, #312]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800714c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007150:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007152:	f7fa f99f 	bl	8001494 <HAL_GetTick>
 8007156:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007158:	e008      	b.n	800716c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800715a:	f7fa f99b 	bl	8001494 <HAL_GetTick>
 800715e:	4602      	mov	r2, r0
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	1ad3      	subs	r3, r2, r3
 8007164:	2b02      	cmp	r3, #2
 8007166:	d901      	bls.n	800716c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007168:	2303      	movs	r3, #3
 800716a:	e086      	b.n	800727a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800716c:	4b45      	ldr	r3, [pc, #276]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007174:	2b00      	cmp	r3, #0
 8007176:	d1f0      	bne.n	800715a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007178:	4b42      	ldr	r3, [pc, #264]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800717a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800717c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	051b      	lsls	r3, r3, #20
 8007186:	493f      	ldr	r1, [pc, #252]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 8007188:	4313      	orrs	r3, r2
 800718a:	628b      	str	r3, [r1, #40]	@ 0x28
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	3b01      	subs	r3, #1
 8007192:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	689b      	ldr	r3, [r3, #8]
 800719a:	3b01      	subs	r3, #1
 800719c:	025b      	lsls	r3, r3, #9
 800719e:	b29b      	uxth	r3, r3
 80071a0:	431a      	orrs	r2, r3
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	3b01      	subs	r3, #1
 80071a8:	041b      	lsls	r3, r3, #16
 80071aa:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80071ae:	431a      	orrs	r2, r3
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	691b      	ldr	r3, [r3, #16]
 80071b4:	3b01      	subs	r3, #1
 80071b6:	061b      	lsls	r3, r3, #24
 80071b8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80071bc:	4931      	ldr	r1, [pc, #196]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 80071be:	4313      	orrs	r3, r2
 80071c0:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80071c2:	4b30      	ldr	r3, [pc, #192]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 80071c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071c6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	492d      	ldr	r1, [pc, #180]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 80071d0:	4313      	orrs	r3, r2
 80071d2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80071d4:	4b2b      	ldr	r3, [pc, #172]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 80071d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071d8:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	4928      	ldr	r1, [pc, #160]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 80071e2:	4313      	orrs	r3, r2
 80071e4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80071e6:	4b27      	ldr	r3, [pc, #156]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 80071e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071ea:	4a26      	ldr	r2, [pc, #152]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 80071ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80071f2:	4b24      	ldr	r3, [pc, #144]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 80071f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80071f6:	4b24      	ldr	r3, [pc, #144]	@ (8007288 <RCCEx_PLL3_Config+0x160>)
 80071f8:	4013      	ands	r3, r2
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	69d2      	ldr	r2, [r2, #28]
 80071fe:	00d2      	lsls	r2, r2, #3
 8007200:	4920      	ldr	r1, [pc, #128]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 8007202:	4313      	orrs	r3, r2
 8007204:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007206:	4b1f      	ldr	r3, [pc, #124]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 8007208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800720a:	4a1e      	ldr	r2, [pc, #120]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800720c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007210:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007212:	683b      	ldr	r3, [r7, #0]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d106      	bne.n	8007226 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007218:	4b1a      	ldr	r3, [pc, #104]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800721a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800721c:	4a19      	ldr	r2, [pc, #100]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800721e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007222:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007224:	e00f      	b.n	8007246 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d106      	bne.n	800723a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800722c:	4b15      	ldr	r3, [pc, #84]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800722e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007230:	4a14      	ldr	r2, [pc, #80]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 8007232:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8007236:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007238:	e005      	b.n	8007246 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800723a:	4b12      	ldr	r3, [pc, #72]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	4a11      	ldr	r2, [pc, #68]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 8007240:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007244:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007246:	4b0f      	ldr	r3, [pc, #60]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a0e      	ldr	r2, [pc, #56]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800724c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007250:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007252:	f7fa f91f 	bl	8001494 <HAL_GetTick>
 8007256:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007258:	e008      	b.n	800726c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800725a:	f7fa f91b 	bl	8001494 <HAL_GetTick>
 800725e:	4602      	mov	r2, r0
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	2b02      	cmp	r3, #2
 8007266:	d901      	bls.n	800726c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007268:	2303      	movs	r3, #3
 800726a:	e006      	b.n	800727a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800726c:	4b05      	ldr	r3, [pc, #20]	@ (8007284 <RCCEx_PLL3_Config+0x15c>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d0f0      	beq.n	800725a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007278:	7bfb      	ldrb	r3, [r7, #15]
}
 800727a:	4618      	mov	r0, r3
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
 8007282:	bf00      	nop
 8007284:	58024400 	.word	0x58024400
 8007288:	ffff0007 	.word	0xffff0007

0800728c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e042      	b.n	8007324 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d106      	bne.n	80072b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	2200      	movs	r2, #0
 80072ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7f9 fe81 	bl	8000fb8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2224      	movs	r2, #36	@ 0x24
 80072ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f022 0201 	bic.w	r2, r2, #1
 80072cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d002      	beq.n	80072dc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f001 fbd0 	bl	8008a7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80072dc:	6878      	ldr	r0, [r7, #4]
 80072de:	f000 fd61 	bl	8007da4 <UART_SetConfig>
 80072e2:	4603      	mov	r3, r0
 80072e4:	2b01      	cmp	r3, #1
 80072e6:	d101      	bne.n	80072ec <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80072e8:	2301      	movs	r3, #1
 80072ea:	e01b      	b.n	8007324 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	685a      	ldr	r2, [r3, #4]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	689a      	ldr	r2, [r3, #8]
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800730a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681a      	ldr	r2, [r3, #0]
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	f042 0201 	orr.w	r2, r2, #1
 800731a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f001 fc4f 	bl	8008bc0 <UART_CheckIdleState>
 8007322:	4603      	mov	r3, r0
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}

0800732c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	@ 0x28
 8007330:	af00      	add	r7, sp, #0
 8007332:	60f8      	str	r0, [r7, #12]
 8007334:	60b9      	str	r1, [r7, #8]
 8007336:	4613      	mov	r3, r2
 8007338:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007340:	2b20      	cmp	r3, #32
 8007342:	d167      	bne.n	8007414 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d002      	beq.n	8007350 <HAL_UART_Transmit_DMA+0x24>
 800734a:	88fb      	ldrh	r3, [r7, #6]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d101      	bne.n	8007354 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e060      	b.n	8007416 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	68ba      	ldr	r2, [r7, #8]
 8007358:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	88fa      	ldrh	r2, [r7, #6]
 800735e:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	88fa      	ldrh	r2, [r7, #6]
 8007366:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2200      	movs	r2, #0
 800736e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	2221      	movs	r2, #33	@ 0x21
 8007376:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800737e:	2b00      	cmp	r3, #0
 8007380:	d028      	beq.n	80073d4 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007386:	4a26      	ldr	r2, [pc, #152]	@ (8007420 <HAL_UART_Transmit_DMA+0xf4>)
 8007388:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800738e:	4a25      	ldr	r2, [pc, #148]	@ (8007424 <HAL_UART_Transmit_DMA+0xf8>)
 8007390:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007396:	4a24      	ldr	r2, [pc, #144]	@ (8007428 <HAL_UART_Transmit_DMA+0xfc>)
 8007398:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800739e:	2200      	movs	r2, #0
 80073a0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80073aa:	4619      	mov	r1, r3
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	3328      	adds	r3, #40	@ 0x28
 80073b2:	461a      	mov	r2, r3
 80073b4:	88fb      	ldrh	r3, [r7, #6]
 80073b6:	f7fa fd59 	bl	8001e6c <HAL_DMA_Start_IT>
 80073ba:	4603      	mov	r3, r0
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d009      	beq.n	80073d4 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2210      	movs	r2, #16
 80073c4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2220      	movs	r2, #32
 80073cc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e020      	b.n	8007416 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2240      	movs	r2, #64	@ 0x40
 80073da:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	3308      	adds	r3, #8
 80073e2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	e853 3f00 	ldrex	r3, [r3]
 80073ea:	613b      	str	r3, [r7, #16]
   return(result);
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80073f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	3308      	adds	r3, #8
 80073fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073fc:	623a      	str	r2, [r7, #32]
 80073fe:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007400:	69f9      	ldr	r1, [r7, #28]
 8007402:	6a3a      	ldr	r2, [r7, #32]
 8007404:	e841 2300 	strex	r3, r2, [r1]
 8007408:	61bb      	str	r3, [r7, #24]
   return(result);
 800740a:	69bb      	ldr	r3, [r7, #24]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d1e5      	bne.n	80073dc <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007410:	2300      	movs	r3, #0
 8007412:	e000      	b.n	8007416 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007414:	2302      	movs	r3, #2
  }
}
 8007416:	4618      	mov	r0, r3
 8007418:	3728      	adds	r7, #40	@ 0x28
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}
 800741e:	bf00      	nop
 8007420:	0800908d 	.word	0x0800908d
 8007424:	08009123 	.word	0x08009123
 8007428:	080092a5 	.word	0x080092a5

0800742c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08a      	sub	sp, #40	@ 0x28
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	4613      	mov	r3, r2
 8007438:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007440:	2b20      	cmp	r3, #32
 8007442:	d137      	bne.n	80074b4 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d002      	beq.n	8007450 <HAL_UART_Receive_DMA+0x24>
 800744a:	88fb      	ldrh	r3, [r7, #6]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d101      	bne.n	8007454 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007450:	2301      	movs	r3, #1
 8007452:	e030      	b.n	80074b6 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a18      	ldr	r2, [pc, #96]	@ (80074c0 <HAL_UART_Receive_DMA+0x94>)
 8007460:	4293      	cmp	r3, r2
 8007462:	d01f      	beq.n	80074a4 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800746e:	2b00      	cmp	r3, #0
 8007470:	d018      	beq.n	80074a4 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	e853 3f00 	ldrex	r3, [r3]
 800747e:	613b      	str	r3, [r7, #16]
   return(result);
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007490:	623b      	str	r3, [r7, #32]
 8007492:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	69f9      	ldr	r1, [r7, #28]
 8007496:	6a3a      	ldr	r2, [r7, #32]
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	61bb      	str	r3, [r7, #24]
   return(result);
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e6      	bne.n	8007472 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80074a4:	88fb      	ldrh	r3, [r7, #6]
 80074a6:	461a      	mov	r2, r3
 80074a8:	68b9      	ldr	r1, [r7, #8]
 80074aa:	68f8      	ldr	r0, [r7, #12]
 80074ac:	f001 fca0 	bl	8008df0 <UART_Start_Receive_DMA>
 80074b0:	4603      	mov	r3, r0
 80074b2:	e000      	b.n	80074b6 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80074b4:	2302      	movs	r3, #2
  }
}
 80074b6:	4618      	mov	r0, r3
 80074b8:	3728      	adds	r7, #40	@ 0x28
 80074ba:	46bd      	mov	sp, r7
 80074bc:	bd80      	pop	{r7, pc}
 80074be:	bf00      	nop
 80074c0:	58000c00 	.word	0x58000c00

080074c4 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b090      	sub	sp, #64	@ 0x40
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074da:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	689b      	ldr	r3, [r3, #8]
 80074e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074e6:	2b80      	cmp	r3, #128	@ 0x80
 80074e8:	d139      	bne.n	800755e <HAL_UART_DMAStop+0x9a>
 80074ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074ec:	2b21      	cmp	r3, #33	@ 0x21
 80074ee:	d136      	bne.n	800755e <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	3308      	adds	r3, #8
 80074f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074f8:	6a3b      	ldr	r3, [r7, #32]
 80074fa:	e853 3f00 	ldrex	r3, [r3]
 80074fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8007500:	69fb      	ldr	r3, [r7, #28]
 8007502:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007506:	637b      	str	r3, [r7, #52]	@ 0x34
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3308      	adds	r3, #8
 800750e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007510:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007512:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007516:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007518:	e841 2300 	strex	r3, r2, [r1]
 800751c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1e5      	bne.n	80074f0 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d015      	beq.n	8007558 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007530:	4618      	mov	r0, r3
 8007532:	f7fa ff05 	bl	8002340 <HAL_DMA_Abort>
 8007536:	4603      	mov	r3, r0
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00d      	beq.n	8007558 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007540:	4618      	mov	r0, r3
 8007542:	f7fc fb8b 	bl	8003c5c <HAL_DMA_GetError>
 8007546:	4603      	mov	r3, r0
 8007548:	2b20      	cmp	r3, #32
 800754a:	d105      	bne.n	8007558 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	2210      	movs	r2, #16
 8007550:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007554:	2303      	movs	r3, #3
 8007556:	e047      	b.n	80075e8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8007558:	6878      	ldr	r0, [r7, #4]
 800755a:	f001 fcef 	bl	8008f3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	689b      	ldr	r3, [r3, #8]
 8007564:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007568:	2b40      	cmp	r3, #64	@ 0x40
 800756a:	d13c      	bne.n	80075e6 <HAL_UART_DMAStop+0x122>
 800756c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800756e:	2b22      	cmp	r3, #34	@ 0x22
 8007570:	d139      	bne.n	80075e6 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3308      	adds	r3, #8
 8007578:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	e853 3f00 	ldrex	r3, [r3]
 8007580:	60bb      	str	r3, [r7, #8]
   return(result);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007588:	633b      	str	r3, [r7, #48]	@ 0x30
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	3308      	adds	r3, #8
 8007590:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007592:	61ba      	str	r2, [r7, #24]
 8007594:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007596:	6979      	ldr	r1, [r7, #20]
 8007598:	69ba      	ldr	r2, [r7, #24]
 800759a:	e841 2300 	strex	r3, r2, [r1]
 800759e:	613b      	str	r3, [r7, #16]
   return(result);
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1e5      	bne.n	8007572 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d017      	beq.n	80075e0 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fa fec2 	bl	8002340 <HAL_DMA_Abort>
 80075bc:	4603      	mov	r3, r0
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d00e      	beq.n	80075e0 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fc fb47 	bl	8003c5c <HAL_DMA_GetError>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b20      	cmp	r3, #32
 80075d2:	d105      	bne.n	80075e0 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2210      	movs	r2, #16
 80075d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80075dc:	2303      	movs	r3, #3
 80075de:	e003      	b.n	80075e8 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80075e0:	6878      	ldr	r0, [r7, #4]
 80075e2:	f001 fced 	bl	8008fc0 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80075e6:	2300      	movs	r3, #0
}
 80075e8:	4618      	mov	r0, r3
 80075ea:	3740      	adds	r7, #64	@ 0x40
 80075ec:	46bd      	mov	sp, r7
 80075ee:	bd80      	pop	{r7, pc}

080075f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	b0ba      	sub	sp, #232	@ 0xe8
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	69db      	ldr	r3, [r3, #28]
 80075fe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800761a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800761e:	4013      	ands	r3, r2
 8007620:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007628:	2b00      	cmp	r3, #0
 800762a:	d11b      	bne.n	8007664 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800762c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007630:	f003 0320 	and.w	r3, r3, #32
 8007634:	2b00      	cmp	r3, #0
 8007636:	d015      	beq.n	8007664 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800763c:	f003 0320 	and.w	r3, r3, #32
 8007640:	2b00      	cmp	r3, #0
 8007642:	d105      	bne.n	8007650 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007648:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d009      	beq.n	8007664 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007654:	2b00      	cmp	r3, #0
 8007656:	f000 8377 	beq.w	8007d48 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800765e:	6878      	ldr	r0, [r7, #4]
 8007660:	4798      	blx	r3
      }
      return;
 8007662:	e371      	b.n	8007d48 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 8123 	beq.w	80078b4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800766e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007672:	4b8d      	ldr	r3, [pc, #564]	@ (80078a8 <HAL_UART_IRQHandler+0x2b8>)
 8007674:	4013      	ands	r3, r2
 8007676:	2b00      	cmp	r3, #0
 8007678:	d106      	bne.n	8007688 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800767a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800767e:	4b8b      	ldr	r3, [pc, #556]	@ (80078ac <HAL_UART_IRQHandler+0x2bc>)
 8007680:	4013      	ands	r3, r2
 8007682:	2b00      	cmp	r3, #0
 8007684:	f000 8116 	beq.w	80078b4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800768c:	f003 0301 	and.w	r3, r3, #1
 8007690:	2b00      	cmp	r3, #0
 8007692:	d011      	beq.n	80076b8 <HAL_UART_IRQHandler+0xc8>
 8007694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800769c:	2b00      	cmp	r3, #0
 800769e:	d00b      	beq.n	80076b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	2201      	movs	r2, #1
 80076a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076ae:	f043 0201 	orr.w	r2, r3, #1
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076bc:	f003 0302 	and.w	r3, r3, #2
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d011      	beq.n	80076e8 <HAL_UART_IRQHandler+0xf8>
 80076c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076c8:	f003 0301 	and.w	r3, r3, #1
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d00b      	beq.n	80076e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2202      	movs	r2, #2
 80076d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076de:	f043 0204 	orr.w	r2, r3, #4
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80076e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076ec:	f003 0304 	and.w	r3, r3, #4
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d011      	beq.n	8007718 <HAL_UART_IRQHandler+0x128>
 80076f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076f8:	f003 0301 	and.w	r3, r3, #1
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d00b      	beq.n	8007718 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2204      	movs	r2, #4
 8007706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800770e:	f043 0202 	orr.w	r2, r3, #2
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800771c:	f003 0308 	and.w	r3, r3, #8
 8007720:	2b00      	cmp	r3, #0
 8007722:	d017      	beq.n	8007754 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007728:	f003 0320 	and.w	r3, r3, #32
 800772c:	2b00      	cmp	r3, #0
 800772e:	d105      	bne.n	800773c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007730:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007734:	4b5c      	ldr	r3, [pc, #368]	@ (80078a8 <HAL_UART_IRQHandler+0x2b8>)
 8007736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00b      	beq.n	8007754 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2208      	movs	r2, #8
 8007742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774a:	f043 0208 	orr.w	r2, r3, #8
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007758:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800775c:	2b00      	cmp	r3, #0
 800775e:	d012      	beq.n	8007786 <HAL_UART_IRQHandler+0x196>
 8007760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007764:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8007768:	2b00      	cmp	r3, #0
 800776a:	d00c      	beq.n	8007786 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777c:	f043 0220 	orr.w	r2, r3, #32
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 82dd 	beq.w	8007d4c <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007796:	f003 0320 	and.w	r3, r3, #32
 800779a:	2b00      	cmp	r3, #0
 800779c:	d013      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800779e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077a2:	f003 0320 	and.w	r3, r3, #32
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d105      	bne.n	80077b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d007      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077cc:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	689b      	ldr	r3, [r3, #8]
 80077d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077da:	2b40      	cmp	r3, #64	@ 0x40
 80077dc:	d005      	beq.n	80077ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80077de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80077e2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d054      	beq.n	8007894 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f001 fbe8 	bl	8008fc0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	689b      	ldr	r3, [r3, #8]
 80077f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077fa:	2b40      	cmp	r3, #64	@ 0x40
 80077fc:	d146      	bne.n	800788c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007808:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007814:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007818:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800781c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3308      	adds	r3, #8
 8007826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800782a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800782e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800783a:	e841 2300 	strex	r3, r2, [r1]
 800783e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007846:	2b00      	cmp	r3, #0
 8007848:	d1d9      	bne.n	80077fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007850:	2b00      	cmp	r3, #0
 8007852:	d017      	beq.n	8007884 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800785a:	4a15      	ldr	r2, [pc, #84]	@ (80078b0 <HAL_UART_IRQHandler+0x2c0>)
 800785c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007864:	4618      	mov	r0, r3
 8007866:	f7fb f889 	bl	800297c <HAL_DMA_Abort_IT>
 800786a:	4603      	mov	r3, r0
 800786c:	2b00      	cmp	r3, #0
 800786e:	d019      	beq.n	80078a4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007876:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800787e:	4610      	mov	r0, r2
 8007880:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007882:	e00f      	b.n	80078a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f000 fa77 	bl	8007d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800788a:	e00b      	b.n	80078a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa73 	bl	8007d78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007892:	e007      	b.n	80078a4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f000 fa6f 	bl	8007d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	2200      	movs	r2, #0
 800789e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80078a2:	e253      	b.n	8007d4c <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078a4:	bf00      	nop
    return;
 80078a6:	e251      	b.n	8007d4c <HAL_UART_IRQHandler+0x75c>
 80078a8:	10000001 	.word	0x10000001
 80078ac:	04000120 	.word	0x04000120
 80078b0:	08009325 	.word	0x08009325

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	f040 81e7 	bne.w	8007c8c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80078be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c2:	f003 0310 	and.w	r3, r3, #16
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	f000 81e0 	beq.w	8007c8c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80078cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078d0:	f003 0310 	and.w	r3, r3, #16
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	f000 81d9 	beq.w	8007c8c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	2210      	movs	r2, #16
 80078e0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078ec:	2b40      	cmp	r3, #64	@ 0x40
 80078ee:	f040 8151 	bne.w	8007b94 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	4a96      	ldr	r2, [pc, #600]	@ (8007b54 <HAL_UART_IRQHandler+0x564>)
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d068      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a93      	ldr	r2, [pc, #588]	@ (8007b58 <HAL_UART_IRQHandler+0x568>)
 800790a:	4293      	cmp	r3, r2
 800790c:	d061      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a91      	ldr	r2, [pc, #580]	@ (8007b5c <HAL_UART_IRQHandler+0x56c>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d05a      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a8e      	ldr	r2, [pc, #568]	@ (8007b60 <HAL_UART_IRQHandler+0x570>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d053      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a8c      	ldr	r2, [pc, #560]	@ (8007b64 <HAL_UART_IRQHandler+0x574>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d04c      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a89      	ldr	r2, [pc, #548]	@ (8007b68 <HAL_UART_IRQHandler+0x578>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d045      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4a87      	ldr	r2, [pc, #540]	@ (8007b6c <HAL_UART_IRQHandler+0x57c>)
 8007950:	4293      	cmp	r3, r2
 8007952:	d03e      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a84      	ldr	r2, [pc, #528]	@ (8007b70 <HAL_UART_IRQHandler+0x580>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d037      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a82      	ldr	r2, [pc, #520]	@ (8007b74 <HAL_UART_IRQHandler+0x584>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d030      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a7f      	ldr	r2, [pc, #508]	@ (8007b78 <HAL_UART_IRQHandler+0x588>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d029      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a7d      	ldr	r2, [pc, #500]	@ (8007b7c <HAL_UART_IRQHandler+0x58c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d022      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a7a      	ldr	r2, [pc, #488]	@ (8007b80 <HAL_UART_IRQHandler+0x590>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d01b      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a78      	ldr	r2, [pc, #480]	@ (8007b84 <HAL_UART_IRQHandler+0x594>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d014      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a75      	ldr	r2, [pc, #468]	@ (8007b88 <HAL_UART_IRQHandler+0x598>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d00d      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a73      	ldr	r2, [pc, #460]	@ (8007b8c <HAL_UART_IRQHandler+0x59c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d006      	beq.n	80079d2 <HAL_UART_IRQHandler+0x3e2>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a70      	ldr	r2, [pc, #448]	@ (8007b90 <HAL_UART_IRQHandler+0x5a0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d106      	bne.n	80079e0 <HAL_UART_IRQHandler+0x3f0>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	685b      	ldr	r3, [r3, #4]
 80079dc:	b29b      	uxth	r3, r3
 80079de:	e005      	b.n	80079ec <HAL_UART_IRQHandler+0x3fc>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	b29b      	uxth	r3, r3
 80079ec:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80079f0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	f000 81ab 	beq.w	8007d50 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a00:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a04:	429a      	cmp	r2, r3
 8007a06:	f080 81a3 	bcs.w	8007d50 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a10:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a1a:	69db      	ldr	r3, [r3, #28]
 8007a1c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a20:	f000 8087 	beq.w	8007b32 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007a30:	e853 3f00 	ldrex	r3, [r3]
 8007a34:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007a38:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007a3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	461a      	mov	r2, r3
 8007a4a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007a4e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007a52:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a56:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007a5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007a5e:	e841 2300 	strex	r3, r2, [r1]
 8007a62:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007a66:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d1da      	bne.n	8007a24 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	3308      	adds	r3, #8
 8007a74:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a76:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007a78:	e853 3f00 	ldrex	r3, [r3]
 8007a7c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007a7e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007a80:	f023 0301 	bic.w	r3, r3, #1
 8007a84:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	3308      	adds	r3, #8
 8007a8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007a92:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007a96:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a98:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007a9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007a9e:	e841 2300 	strex	r3, r2, [r1]
 8007aa2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007aa4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1e1      	bne.n	8007a6e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	3308      	adds	r3, #8
 8007ab0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ab2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007ab4:	e853 3f00 	ldrex	r3, [r3]
 8007ab8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007aba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007abc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	3308      	adds	r3, #8
 8007aca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007ace:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ad2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007ad4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007ad6:	e841 2300 	strex	r3, r2, [r1]
 8007ada:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007adc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1e3      	bne.n	8007aaa <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2220      	movs	r2, #32
 8007ae6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007af6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007af8:	e853 3f00 	ldrex	r3, [r3]
 8007afc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007afe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b00:	f023 0310 	bic.w	r3, r3, #16
 8007b04:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b12:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b14:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b16:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b18:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b1a:	e841 2300 	strex	r3, r2, [r1]
 8007b1e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1e4      	bne.n	8007af0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	f7fa fc07 	bl	8002340 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2202      	movs	r2, #2
 8007b36:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	1ad3      	subs	r3, r2, r3
 8007b48:	b29b      	uxth	r3, r3
 8007b4a:	4619      	mov	r1, r3
 8007b4c:	6878      	ldr	r0, [r7, #4]
 8007b4e:	f000 f91d 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b52:	e0fd      	b.n	8007d50 <HAL_UART_IRQHandler+0x760>
 8007b54:	40020010 	.word	0x40020010
 8007b58:	40020028 	.word	0x40020028
 8007b5c:	40020040 	.word	0x40020040
 8007b60:	40020058 	.word	0x40020058
 8007b64:	40020070 	.word	0x40020070
 8007b68:	40020088 	.word	0x40020088
 8007b6c:	400200a0 	.word	0x400200a0
 8007b70:	400200b8 	.word	0x400200b8
 8007b74:	40020410 	.word	0x40020410
 8007b78:	40020428 	.word	0x40020428
 8007b7c:	40020440 	.word	0x40020440
 8007b80:	40020458 	.word	0x40020458
 8007b84:	40020470 	.word	0x40020470
 8007b88:	40020488 	.word	0x40020488
 8007b8c:	400204a0 	.word	0x400204a0
 8007b90:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	f000 80cf 	beq.w	8007d54 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007bb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	f000 80ca 	beq.w	8007d54 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc8:	e853 3f00 	ldrex	r3, [r3]
 8007bcc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007bce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007bd4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	461a      	mov	r2, r3
 8007bde:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007be2:	647b      	str	r3, [r7, #68]	@ 0x44
 8007be4:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007be8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007bea:	e841 2300 	strex	r3, r2, [r1]
 8007bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d1e4      	bne.n	8007bc0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	3308      	adds	r3, #8
 8007bfc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c00:	e853 3f00 	ldrex	r3, [r3]
 8007c04:	623b      	str	r3, [r7, #32]
   return(result);
 8007c06:	6a3a      	ldr	r2, [r7, #32]
 8007c08:	4b55      	ldr	r3, [pc, #340]	@ (8007d60 <HAL_UART_IRQHandler+0x770>)
 8007c0a:	4013      	ands	r3, r2
 8007c0c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	3308      	adds	r3, #8
 8007c16:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c1a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c1e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c22:	e841 2300 	strex	r3, r2, [r1]
 8007c26:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d1e3      	bne.n	8007bf6 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2220      	movs	r2, #32
 8007c32:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c48:	693b      	ldr	r3, [r7, #16]
 8007c4a:	e853 3f00 	ldrex	r3, [r3]
 8007c4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f023 0310 	bic.w	r3, r3, #16
 8007c56:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007c64:	61fb      	str	r3, [r7, #28]
 8007c66:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	69b9      	ldr	r1, [r7, #24]
 8007c6a:	69fa      	ldr	r2, [r7, #28]
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	617b      	str	r3, [r7, #20]
   return(result);
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e4      	bne.n	8007c42 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2202      	movs	r2, #2
 8007c7c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007c7e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f000 f881 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007c8a:	e063      	b.n	8007d54 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007c8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c90:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d00e      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x6c6>
 8007c98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007c9c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d008      	beq.n	8007cb6 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007cac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007cae:	6878      	ldr	r0, [r7, #4]
 8007cb0:	f001 fb79 	bl	80093a6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007cb4:	e051      	b.n	8007d5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d014      	beq.n	8007cec <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007cc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d105      	bne.n	8007cda <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007cd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d008      	beq.n	8007cec <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d03a      	beq.n	8007d58 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	4798      	blx	r3
    }
    return;
 8007cea:	e035      	b.n	8007d58 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007cf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d009      	beq.n	8007d0c <HAL_UART_IRQHandler+0x71c>
 8007cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007cfc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d003      	beq.n	8007d0c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f001 fb23 	bl	8009350 <UART_EndTransmit_IT>
    return;
 8007d0a:	e026      	b.n	8007d5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d10:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d009      	beq.n	8007d2c <HAL_UART_IRQHandler+0x73c>
 8007d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d1c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d003      	beq.n	8007d2c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f001 fb52 	bl	80093ce <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d2a:	e016      	b.n	8007d5a <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d30:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d010      	beq.n	8007d5a <HAL_UART_IRQHandler+0x76a>
 8007d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	da0c      	bge.n	8007d5a <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f001 fb3a 	bl	80093ba <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d46:	e008      	b.n	8007d5a <HAL_UART_IRQHandler+0x76a>
      return;
 8007d48:	bf00      	nop
 8007d4a:	e006      	b.n	8007d5a <HAL_UART_IRQHandler+0x76a>
    return;
 8007d4c:	bf00      	nop
 8007d4e:	e004      	b.n	8007d5a <HAL_UART_IRQHandler+0x76a>
      return;
 8007d50:	bf00      	nop
 8007d52:	e002      	b.n	8007d5a <HAL_UART_IRQHandler+0x76a>
      return;
 8007d54:	bf00      	nop
 8007d56:	e000      	b.n	8007d5a <HAL_UART_IRQHandler+0x76a>
    return;
 8007d58:	bf00      	nop
  }
}
 8007d5a:	37e8      	adds	r7, #232	@ 0xe8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}
 8007d60:	effffffe 	.word	0xeffffffe

08007d64 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	460b      	mov	r3, r1
 8007d96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007d98:	bf00      	nop
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007da4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007da8:	b092      	sub	sp, #72	@ 0x48
 8007daa:	af00      	add	r7, sp, #0
 8007dac:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007dae:	2300      	movs	r3, #0
 8007db0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007db4:	697b      	ldr	r3, [r7, #20]
 8007db6:	689a      	ldr	r2, [r3, #8]
 8007db8:	697b      	ldr	r3, [r7, #20]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	695b      	ldr	r3, [r3, #20]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	69db      	ldr	r3, [r3, #28]
 8007dc8:	4313      	orrs	r3, r2
 8007dca:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4bbe      	ldr	r3, [pc, #760]	@ (80080cc <UART_SetConfig+0x328>)
 8007dd4:	4013      	ands	r3, r2
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	6812      	ldr	r2, [r2, #0]
 8007dda:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007ddc:	430b      	orrs	r3, r1
 8007dde:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	68da      	ldr	r2, [r3, #12]
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	430a      	orrs	r2, r1
 8007df4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007df6:	697b      	ldr	r3, [r7, #20]
 8007df8:	699b      	ldr	r3, [r3, #24]
 8007dfa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4ab3      	ldr	r2, [pc, #716]	@ (80080d0 <UART_SetConfig+0x32c>)
 8007e02:	4293      	cmp	r3, r2
 8007e04:	d004      	beq.n	8007e10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	6a1b      	ldr	r3, [r3, #32]
 8007e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	689a      	ldr	r2, [r3, #8]
 8007e16:	4baf      	ldr	r3, [pc, #700]	@ (80080d4 <UART_SetConfig+0x330>)
 8007e18:	4013      	ands	r3, r2
 8007e1a:	697a      	ldr	r2, [r7, #20]
 8007e1c:	6812      	ldr	r2, [r2, #0]
 8007e1e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e20:	430b      	orrs	r3, r1
 8007e22:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e2a:	f023 010f 	bic.w	r1, r3, #15
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	430a      	orrs	r2, r1
 8007e38:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e3a:	697b      	ldr	r3, [r7, #20]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4aa6      	ldr	r2, [pc, #664]	@ (80080d8 <UART_SetConfig+0x334>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d177      	bne.n	8007f34 <UART_SetConfig+0x190>
 8007e44:	4ba5      	ldr	r3, [pc, #660]	@ (80080dc <UART_SetConfig+0x338>)
 8007e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e48:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e4c:	2b28      	cmp	r3, #40	@ 0x28
 8007e4e:	d86d      	bhi.n	8007f2c <UART_SetConfig+0x188>
 8007e50:	a201      	add	r2, pc, #4	@ (adr r2, 8007e58 <UART_SetConfig+0xb4>)
 8007e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e56:	bf00      	nop
 8007e58:	08007efd 	.word	0x08007efd
 8007e5c:	08007f2d 	.word	0x08007f2d
 8007e60:	08007f2d 	.word	0x08007f2d
 8007e64:	08007f2d 	.word	0x08007f2d
 8007e68:	08007f2d 	.word	0x08007f2d
 8007e6c:	08007f2d 	.word	0x08007f2d
 8007e70:	08007f2d 	.word	0x08007f2d
 8007e74:	08007f2d 	.word	0x08007f2d
 8007e78:	08007f05 	.word	0x08007f05
 8007e7c:	08007f2d 	.word	0x08007f2d
 8007e80:	08007f2d 	.word	0x08007f2d
 8007e84:	08007f2d 	.word	0x08007f2d
 8007e88:	08007f2d 	.word	0x08007f2d
 8007e8c:	08007f2d 	.word	0x08007f2d
 8007e90:	08007f2d 	.word	0x08007f2d
 8007e94:	08007f2d 	.word	0x08007f2d
 8007e98:	08007f0d 	.word	0x08007f0d
 8007e9c:	08007f2d 	.word	0x08007f2d
 8007ea0:	08007f2d 	.word	0x08007f2d
 8007ea4:	08007f2d 	.word	0x08007f2d
 8007ea8:	08007f2d 	.word	0x08007f2d
 8007eac:	08007f2d 	.word	0x08007f2d
 8007eb0:	08007f2d 	.word	0x08007f2d
 8007eb4:	08007f2d 	.word	0x08007f2d
 8007eb8:	08007f15 	.word	0x08007f15
 8007ebc:	08007f2d 	.word	0x08007f2d
 8007ec0:	08007f2d 	.word	0x08007f2d
 8007ec4:	08007f2d 	.word	0x08007f2d
 8007ec8:	08007f2d 	.word	0x08007f2d
 8007ecc:	08007f2d 	.word	0x08007f2d
 8007ed0:	08007f2d 	.word	0x08007f2d
 8007ed4:	08007f2d 	.word	0x08007f2d
 8007ed8:	08007f1d 	.word	0x08007f1d
 8007edc:	08007f2d 	.word	0x08007f2d
 8007ee0:	08007f2d 	.word	0x08007f2d
 8007ee4:	08007f2d 	.word	0x08007f2d
 8007ee8:	08007f2d 	.word	0x08007f2d
 8007eec:	08007f2d 	.word	0x08007f2d
 8007ef0:	08007f2d 	.word	0x08007f2d
 8007ef4:	08007f2d 	.word	0x08007f2d
 8007ef8:	08007f25 	.word	0x08007f25
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f02:	e326      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f04:	2304      	movs	r3, #4
 8007f06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f0a:	e322      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f0c:	2308      	movs	r3, #8
 8007f0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f12:	e31e      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f14:	2310      	movs	r3, #16
 8007f16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f1a:	e31a      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f1c:	2320      	movs	r3, #32
 8007f1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f22:	e316      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f24:	2340      	movs	r3, #64	@ 0x40
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e312      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f2c:	2380      	movs	r3, #128	@ 0x80
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f32:	e30e      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a69      	ldr	r2, [pc, #420]	@ (80080e0 <UART_SetConfig+0x33c>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d130      	bne.n	8007fa0 <UART_SetConfig+0x1fc>
 8007f3e:	4b67      	ldr	r3, [pc, #412]	@ (80080dc <UART_SetConfig+0x338>)
 8007f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f42:	f003 0307 	and.w	r3, r3, #7
 8007f46:	2b05      	cmp	r3, #5
 8007f48:	d826      	bhi.n	8007f98 <UART_SetConfig+0x1f4>
 8007f4a:	a201      	add	r2, pc, #4	@ (adr r2, 8007f50 <UART_SetConfig+0x1ac>)
 8007f4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f50:	08007f69 	.word	0x08007f69
 8007f54:	08007f71 	.word	0x08007f71
 8007f58:	08007f79 	.word	0x08007f79
 8007f5c:	08007f81 	.word	0x08007f81
 8007f60:	08007f89 	.word	0x08007f89
 8007f64:	08007f91 	.word	0x08007f91
 8007f68:	2300      	movs	r3, #0
 8007f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f6e:	e2f0      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f70:	2304      	movs	r3, #4
 8007f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f76:	e2ec      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f78:	2308      	movs	r3, #8
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7e:	e2e8      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f80:	2310      	movs	r3, #16
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f86:	e2e4      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f88:	2320      	movs	r3, #32
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8e:	e2e0      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f90:	2340      	movs	r3, #64	@ 0x40
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e2dc      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007f98:	2380      	movs	r3, #128	@ 0x80
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e2d8      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a4f      	ldr	r2, [pc, #316]	@ (80080e4 <UART_SetConfig+0x340>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d130      	bne.n	800800c <UART_SetConfig+0x268>
 8007faa:	4b4c      	ldr	r3, [pc, #304]	@ (80080dc <UART_SetConfig+0x338>)
 8007fac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	d826      	bhi.n	8008004 <UART_SetConfig+0x260>
 8007fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <UART_SetConfig+0x218>)
 8007fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbc:	08007fd5 	.word	0x08007fd5
 8007fc0:	08007fdd 	.word	0x08007fdd
 8007fc4:	08007fe5 	.word	0x08007fe5
 8007fc8:	08007fed 	.word	0x08007fed
 8007fcc:	08007ff5 	.word	0x08007ff5
 8007fd0:	08007ffd 	.word	0x08007ffd
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fda:	e2ba      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007fdc:	2304      	movs	r3, #4
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e2b6      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007fe4:	2308      	movs	r3, #8
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e2b2      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007fec:	2310      	movs	r3, #16
 8007fee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff2:	e2ae      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007ff4:	2320      	movs	r3, #32
 8007ff6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffa:	e2aa      	b.n	8008552 <UART_SetConfig+0x7ae>
 8007ffc:	2340      	movs	r3, #64	@ 0x40
 8007ffe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008002:	e2a6      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008004:	2380      	movs	r3, #128	@ 0x80
 8008006:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800a:	e2a2      	b.n	8008552 <UART_SetConfig+0x7ae>
 800800c:	697b      	ldr	r3, [r7, #20]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4a35      	ldr	r2, [pc, #212]	@ (80080e8 <UART_SetConfig+0x344>)
 8008012:	4293      	cmp	r3, r2
 8008014:	d130      	bne.n	8008078 <UART_SetConfig+0x2d4>
 8008016:	4b31      	ldr	r3, [pc, #196]	@ (80080dc <UART_SetConfig+0x338>)
 8008018:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801a:	f003 0307 	and.w	r3, r3, #7
 800801e:	2b05      	cmp	r3, #5
 8008020:	d826      	bhi.n	8008070 <UART_SetConfig+0x2cc>
 8008022:	a201      	add	r2, pc, #4	@ (adr r2, 8008028 <UART_SetConfig+0x284>)
 8008024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008028:	08008041 	.word	0x08008041
 800802c:	08008049 	.word	0x08008049
 8008030:	08008051 	.word	0x08008051
 8008034:	08008059 	.word	0x08008059
 8008038:	08008061 	.word	0x08008061
 800803c:	08008069 	.word	0x08008069
 8008040:	2300      	movs	r3, #0
 8008042:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008046:	e284      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008048:	2304      	movs	r3, #4
 800804a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804e:	e280      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008050:	2308      	movs	r3, #8
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008056:	e27c      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008058:	2310      	movs	r3, #16
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805e:	e278      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008060:	2320      	movs	r3, #32
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008066:	e274      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008068:	2340      	movs	r3, #64	@ 0x40
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806e:	e270      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008070:	2380      	movs	r3, #128	@ 0x80
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008076:	e26c      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a1b      	ldr	r2, [pc, #108]	@ (80080ec <UART_SetConfig+0x348>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d142      	bne.n	8008108 <UART_SetConfig+0x364>
 8008082:	4b16      	ldr	r3, [pc, #88]	@ (80080dc <UART_SetConfig+0x338>)
 8008084:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008086:	f003 0307 	and.w	r3, r3, #7
 800808a:	2b05      	cmp	r3, #5
 800808c:	d838      	bhi.n	8008100 <UART_SetConfig+0x35c>
 800808e:	a201      	add	r2, pc, #4	@ (adr r2, 8008094 <UART_SetConfig+0x2f0>)
 8008090:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008094:	080080ad 	.word	0x080080ad
 8008098:	080080b5 	.word	0x080080b5
 800809c:	080080bd 	.word	0x080080bd
 80080a0:	080080c5 	.word	0x080080c5
 80080a4:	080080f1 	.word	0x080080f1
 80080a8:	080080f9 	.word	0x080080f9
 80080ac:	2300      	movs	r3, #0
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b2:	e24e      	b.n	8008552 <UART_SetConfig+0x7ae>
 80080b4:	2304      	movs	r3, #4
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ba:	e24a      	b.n	8008552 <UART_SetConfig+0x7ae>
 80080bc:	2308      	movs	r3, #8
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c2:	e246      	b.n	8008552 <UART_SetConfig+0x7ae>
 80080c4:	2310      	movs	r3, #16
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ca:	e242      	b.n	8008552 <UART_SetConfig+0x7ae>
 80080cc:	cfff69f3 	.word	0xcfff69f3
 80080d0:	58000c00 	.word	0x58000c00
 80080d4:	11fff4ff 	.word	0x11fff4ff
 80080d8:	40011000 	.word	0x40011000
 80080dc:	58024400 	.word	0x58024400
 80080e0:	40004400 	.word	0x40004400
 80080e4:	40004800 	.word	0x40004800
 80080e8:	40004c00 	.word	0x40004c00
 80080ec:	40005000 	.word	0x40005000
 80080f0:	2320      	movs	r3, #32
 80080f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080f6:	e22c      	b.n	8008552 <UART_SetConfig+0x7ae>
 80080f8:	2340      	movs	r3, #64	@ 0x40
 80080fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080fe:	e228      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008100:	2380      	movs	r3, #128	@ 0x80
 8008102:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008106:	e224      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4ab1      	ldr	r2, [pc, #708]	@ (80083d4 <UART_SetConfig+0x630>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d176      	bne.n	8008200 <UART_SetConfig+0x45c>
 8008112:	4bb1      	ldr	r3, [pc, #708]	@ (80083d8 <UART_SetConfig+0x634>)
 8008114:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008116:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800811a:	2b28      	cmp	r3, #40	@ 0x28
 800811c:	d86c      	bhi.n	80081f8 <UART_SetConfig+0x454>
 800811e:	a201      	add	r2, pc, #4	@ (adr r2, 8008124 <UART_SetConfig+0x380>)
 8008120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008124:	080081c9 	.word	0x080081c9
 8008128:	080081f9 	.word	0x080081f9
 800812c:	080081f9 	.word	0x080081f9
 8008130:	080081f9 	.word	0x080081f9
 8008134:	080081f9 	.word	0x080081f9
 8008138:	080081f9 	.word	0x080081f9
 800813c:	080081f9 	.word	0x080081f9
 8008140:	080081f9 	.word	0x080081f9
 8008144:	080081d1 	.word	0x080081d1
 8008148:	080081f9 	.word	0x080081f9
 800814c:	080081f9 	.word	0x080081f9
 8008150:	080081f9 	.word	0x080081f9
 8008154:	080081f9 	.word	0x080081f9
 8008158:	080081f9 	.word	0x080081f9
 800815c:	080081f9 	.word	0x080081f9
 8008160:	080081f9 	.word	0x080081f9
 8008164:	080081d9 	.word	0x080081d9
 8008168:	080081f9 	.word	0x080081f9
 800816c:	080081f9 	.word	0x080081f9
 8008170:	080081f9 	.word	0x080081f9
 8008174:	080081f9 	.word	0x080081f9
 8008178:	080081f9 	.word	0x080081f9
 800817c:	080081f9 	.word	0x080081f9
 8008180:	080081f9 	.word	0x080081f9
 8008184:	080081e1 	.word	0x080081e1
 8008188:	080081f9 	.word	0x080081f9
 800818c:	080081f9 	.word	0x080081f9
 8008190:	080081f9 	.word	0x080081f9
 8008194:	080081f9 	.word	0x080081f9
 8008198:	080081f9 	.word	0x080081f9
 800819c:	080081f9 	.word	0x080081f9
 80081a0:	080081f9 	.word	0x080081f9
 80081a4:	080081e9 	.word	0x080081e9
 80081a8:	080081f9 	.word	0x080081f9
 80081ac:	080081f9 	.word	0x080081f9
 80081b0:	080081f9 	.word	0x080081f9
 80081b4:	080081f9 	.word	0x080081f9
 80081b8:	080081f9 	.word	0x080081f9
 80081bc:	080081f9 	.word	0x080081f9
 80081c0:	080081f9 	.word	0x080081f9
 80081c4:	080081f1 	.word	0x080081f1
 80081c8:	2301      	movs	r3, #1
 80081ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ce:	e1c0      	b.n	8008552 <UART_SetConfig+0x7ae>
 80081d0:	2304      	movs	r3, #4
 80081d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081d6:	e1bc      	b.n	8008552 <UART_SetConfig+0x7ae>
 80081d8:	2308      	movs	r3, #8
 80081da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081de:	e1b8      	b.n	8008552 <UART_SetConfig+0x7ae>
 80081e0:	2310      	movs	r3, #16
 80081e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081e6:	e1b4      	b.n	8008552 <UART_SetConfig+0x7ae>
 80081e8:	2320      	movs	r3, #32
 80081ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ee:	e1b0      	b.n	8008552 <UART_SetConfig+0x7ae>
 80081f0:	2340      	movs	r3, #64	@ 0x40
 80081f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081f6:	e1ac      	b.n	8008552 <UART_SetConfig+0x7ae>
 80081f8:	2380      	movs	r3, #128	@ 0x80
 80081fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081fe:	e1a8      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	4a75      	ldr	r2, [pc, #468]	@ (80083dc <UART_SetConfig+0x638>)
 8008206:	4293      	cmp	r3, r2
 8008208:	d130      	bne.n	800826c <UART_SetConfig+0x4c8>
 800820a:	4b73      	ldr	r3, [pc, #460]	@ (80083d8 <UART_SetConfig+0x634>)
 800820c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800820e:	f003 0307 	and.w	r3, r3, #7
 8008212:	2b05      	cmp	r3, #5
 8008214:	d826      	bhi.n	8008264 <UART_SetConfig+0x4c0>
 8008216:	a201      	add	r2, pc, #4	@ (adr r2, 800821c <UART_SetConfig+0x478>)
 8008218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800821c:	08008235 	.word	0x08008235
 8008220:	0800823d 	.word	0x0800823d
 8008224:	08008245 	.word	0x08008245
 8008228:	0800824d 	.word	0x0800824d
 800822c:	08008255 	.word	0x08008255
 8008230:	0800825d 	.word	0x0800825d
 8008234:	2300      	movs	r3, #0
 8008236:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823a:	e18a      	b.n	8008552 <UART_SetConfig+0x7ae>
 800823c:	2304      	movs	r3, #4
 800823e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008242:	e186      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008244:	2308      	movs	r3, #8
 8008246:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824a:	e182      	b.n	8008552 <UART_SetConfig+0x7ae>
 800824c:	2310      	movs	r3, #16
 800824e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008252:	e17e      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008254:	2320      	movs	r3, #32
 8008256:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825a:	e17a      	b.n	8008552 <UART_SetConfig+0x7ae>
 800825c:	2340      	movs	r3, #64	@ 0x40
 800825e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008262:	e176      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008264:	2380      	movs	r3, #128	@ 0x80
 8008266:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826a:	e172      	b.n	8008552 <UART_SetConfig+0x7ae>
 800826c:	697b      	ldr	r3, [r7, #20]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	4a5b      	ldr	r2, [pc, #364]	@ (80083e0 <UART_SetConfig+0x63c>)
 8008272:	4293      	cmp	r3, r2
 8008274:	d130      	bne.n	80082d8 <UART_SetConfig+0x534>
 8008276:	4b58      	ldr	r3, [pc, #352]	@ (80083d8 <UART_SetConfig+0x634>)
 8008278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800827a:	f003 0307 	and.w	r3, r3, #7
 800827e:	2b05      	cmp	r3, #5
 8008280:	d826      	bhi.n	80082d0 <UART_SetConfig+0x52c>
 8008282:	a201      	add	r2, pc, #4	@ (adr r2, 8008288 <UART_SetConfig+0x4e4>)
 8008284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008288:	080082a1 	.word	0x080082a1
 800828c:	080082a9 	.word	0x080082a9
 8008290:	080082b1 	.word	0x080082b1
 8008294:	080082b9 	.word	0x080082b9
 8008298:	080082c1 	.word	0x080082c1
 800829c:	080082c9 	.word	0x080082c9
 80082a0:	2300      	movs	r3, #0
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a6:	e154      	b.n	8008552 <UART_SetConfig+0x7ae>
 80082a8:	2304      	movs	r3, #4
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e150      	b.n	8008552 <UART_SetConfig+0x7ae>
 80082b0:	2308      	movs	r3, #8
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e14c      	b.n	8008552 <UART_SetConfig+0x7ae>
 80082b8:	2310      	movs	r3, #16
 80082ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082be:	e148      	b.n	8008552 <UART_SetConfig+0x7ae>
 80082c0:	2320      	movs	r3, #32
 80082c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c6:	e144      	b.n	8008552 <UART_SetConfig+0x7ae>
 80082c8:	2340      	movs	r3, #64	@ 0x40
 80082ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ce:	e140      	b.n	8008552 <UART_SetConfig+0x7ae>
 80082d0:	2380      	movs	r3, #128	@ 0x80
 80082d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d6:	e13c      	b.n	8008552 <UART_SetConfig+0x7ae>
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a41      	ldr	r2, [pc, #260]	@ (80083e4 <UART_SetConfig+0x640>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	f040 8082 	bne.w	80083e8 <UART_SetConfig+0x644>
 80082e4:	4b3c      	ldr	r3, [pc, #240]	@ (80083d8 <UART_SetConfig+0x634>)
 80082e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082ec:	2b28      	cmp	r3, #40	@ 0x28
 80082ee:	d86d      	bhi.n	80083cc <UART_SetConfig+0x628>
 80082f0:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <UART_SetConfig+0x554>)
 80082f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f6:	bf00      	nop
 80082f8:	0800839d 	.word	0x0800839d
 80082fc:	080083cd 	.word	0x080083cd
 8008300:	080083cd 	.word	0x080083cd
 8008304:	080083cd 	.word	0x080083cd
 8008308:	080083cd 	.word	0x080083cd
 800830c:	080083cd 	.word	0x080083cd
 8008310:	080083cd 	.word	0x080083cd
 8008314:	080083cd 	.word	0x080083cd
 8008318:	080083a5 	.word	0x080083a5
 800831c:	080083cd 	.word	0x080083cd
 8008320:	080083cd 	.word	0x080083cd
 8008324:	080083cd 	.word	0x080083cd
 8008328:	080083cd 	.word	0x080083cd
 800832c:	080083cd 	.word	0x080083cd
 8008330:	080083cd 	.word	0x080083cd
 8008334:	080083cd 	.word	0x080083cd
 8008338:	080083ad 	.word	0x080083ad
 800833c:	080083cd 	.word	0x080083cd
 8008340:	080083cd 	.word	0x080083cd
 8008344:	080083cd 	.word	0x080083cd
 8008348:	080083cd 	.word	0x080083cd
 800834c:	080083cd 	.word	0x080083cd
 8008350:	080083cd 	.word	0x080083cd
 8008354:	080083cd 	.word	0x080083cd
 8008358:	080083b5 	.word	0x080083b5
 800835c:	080083cd 	.word	0x080083cd
 8008360:	080083cd 	.word	0x080083cd
 8008364:	080083cd 	.word	0x080083cd
 8008368:	080083cd 	.word	0x080083cd
 800836c:	080083cd 	.word	0x080083cd
 8008370:	080083cd 	.word	0x080083cd
 8008374:	080083cd 	.word	0x080083cd
 8008378:	080083bd 	.word	0x080083bd
 800837c:	080083cd 	.word	0x080083cd
 8008380:	080083cd 	.word	0x080083cd
 8008384:	080083cd 	.word	0x080083cd
 8008388:	080083cd 	.word	0x080083cd
 800838c:	080083cd 	.word	0x080083cd
 8008390:	080083cd 	.word	0x080083cd
 8008394:	080083cd 	.word	0x080083cd
 8008398:	080083c5 	.word	0x080083c5
 800839c:	2301      	movs	r3, #1
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e0d6      	b.n	8008552 <UART_SetConfig+0x7ae>
 80083a4:	2304      	movs	r3, #4
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e0d2      	b.n	8008552 <UART_SetConfig+0x7ae>
 80083ac:	2308      	movs	r3, #8
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e0ce      	b.n	8008552 <UART_SetConfig+0x7ae>
 80083b4:	2310      	movs	r3, #16
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ba:	e0ca      	b.n	8008552 <UART_SetConfig+0x7ae>
 80083bc:	2320      	movs	r3, #32
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c2:	e0c6      	b.n	8008552 <UART_SetConfig+0x7ae>
 80083c4:	2340      	movs	r3, #64	@ 0x40
 80083c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ca:	e0c2      	b.n	8008552 <UART_SetConfig+0x7ae>
 80083cc:	2380      	movs	r3, #128	@ 0x80
 80083ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083d2:	e0be      	b.n	8008552 <UART_SetConfig+0x7ae>
 80083d4:	40011400 	.word	0x40011400
 80083d8:	58024400 	.word	0x58024400
 80083dc:	40007800 	.word	0x40007800
 80083e0:	40007c00 	.word	0x40007c00
 80083e4:	40011800 	.word	0x40011800
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	4aad      	ldr	r2, [pc, #692]	@ (80086a4 <UART_SetConfig+0x900>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d176      	bne.n	80084e0 <UART_SetConfig+0x73c>
 80083f2:	4bad      	ldr	r3, [pc, #692]	@ (80086a8 <UART_SetConfig+0x904>)
 80083f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80083f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80083fa:	2b28      	cmp	r3, #40	@ 0x28
 80083fc:	d86c      	bhi.n	80084d8 <UART_SetConfig+0x734>
 80083fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008404 <UART_SetConfig+0x660>)
 8008400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008404:	080084a9 	.word	0x080084a9
 8008408:	080084d9 	.word	0x080084d9
 800840c:	080084d9 	.word	0x080084d9
 8008410:	080084d9 	.word	0x080084d9
 8008414:	080084d9 	.word	0x080084d9
 8008418:	080084d9 	.word	0x080084d9
 800841c:	080084d9 	.word	0x080084d9
 8008420:	080084d9 	.word	0x080084d9
 8008424:	080084b1 	.word	0x080084b1
 8008428:	080084d9 	.word	0x080084d9
 800842c:	080084d9 	.word	0x080084d9
 8008430:	080084d9 	.word	0x080084d9
 8008434:	080084d9 	.word	0x080084d9
 8008438:	080084d9 	.word	0x080084d9
 800843c:	080084d9 	.word	0x080084d9
 8008440:	080084d9 	.word	0x080084d9
 8008444:	080084b9 	.word	0x080084b9
 8008448:	080084d9 	.word	0x080084d9
 800844c:	080084d9 	.word	0x080084d9
 8008450:	080084d9 	.word	0x080084d9
 8008454:	080084d9 	.word	0x080084d9
 8008458:	080084d9 	.word	0x080084d9
 800845c:	080084d9 	.word	0x080084d9
 8008460:	080084d9 	.word	0x080084d9
 8008464:	080084c1 	.word	0x080084c1
 8008468:	080084d9 	.word	0x080084d9
 800846c:	080084d9 	.word	0x080084d9
 8008470:	080084d9 	.word	0x080084d9
 8008474:	080084d9 	.word	0x080084d9
 8008478:	080084d9 	.word	0x080084d9
 800847c:	080084d9 	.word	0x080084d9
 8008480:	080084d9 	.word	0x080084d9
 8008484:	080084c9 	.word	0x080084c9
 8008488:	080084d9 	.word	0x080084d9
 800848c:	080084d9 	.word	0x080084d9
 8008490:	080084d9 	.word	0x080084d9
 8008494:	080084d9 	.word	0x080084d9
 8008498:	080084d9 	.word	0x080084d9
 800849c:	080084d9 	.word	0x080084d9
 80084a0:	080084d9 	.word	0x080084d9
 80084a4:	080084d1 	.word	0x080084d1
 80084a8:	2301      	movs	r3, #1
 80084aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ae:	e050      	b.n	8008552 <UART_SetConfig+0x7ae>
 80084b0:	2304      	movs	r3, #4
 80084b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084b6:	e04c      	b.n	8008552 <UART_SetConfig+0x7ae>
 80084b8:	2308      	movs	r3, #8
 80084ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084be:	e048      	b.n	8008552 <UART_SetConfig+0x7ae>
 80084c0:	2310      	movs	r3, #16
 80084c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084c6:	e044      	b.n	8008552 <UART_SetConfig+0x7ae>
 80084c8:	2320      	movs	r3, #32
 80084ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084ce:	e040      	b.n	8008552 <UART_SetConfig+0x7ae>
 80084d0:	2340      	movs	r3, #64	@ 0x40
 80084d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084d6:	e03c      	b.n	8008552 <UART_SetConfig+0x7ae>
 80084d8:	2380      	movs	r3, #128	@ 0x80
 80084da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80084de:	e038      	b.n	8008552 <UART_SetConfig+0x7ae>
 80084e0:	697b      	ldr	r3, [r7, #20]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a71      	ldr	r2, [pc, #452]	@ (80086ac <UART_SetConfig+0x908>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d130      	bne.n	800854c <UART_SetConfig+0x7a8>
 80084ea:	4b6f      	ldr	r3, [pc, #444]	@ (80086a8 <UART_SetConfig+0x904>)
 80084ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80084ee:	f003 0307 	and.w	r3, r3, #7
 80084f2:	2b05      	cmp	r3, #5
 80084f4:	d826      	bhi.n	8008544 <UART_SetConfig+0x7a0>
 80084f6:	a201      	add	r2, pc, #4	@ (adr r2, 80084fc <UART_SetConfig+0x758>)
 80084f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fc:	08008515 	.word	0x08008515
 8008500:	0800851d 	.word	0x0800851d
 8008504:	08008525 	.word	0x08008525
 8008508:	0800852d 	.word	0x0800852d
 800850c:	08008535 	.word	0x08008535
 8008510:	0800853d 	.word	0x0800853d
 8008514:	2302      	movs	r3, #2
 8008516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851a:	e01a      	b.n	8008552 <UART_SetConfig+0x7ae>
 800851c:	2304      	movs	r3, #4
 800851e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008522:	e016      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008524:	2308      	movs	r3, #8
 8008526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852a:	e012      	b.n	8008552 <UART_SetConfig+0x7ae>
 800852c:	2310      	movs	r3, #16
 800852e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008532:	e00e      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008534:	2320      	movs	r3, #32
 8008536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853a:	e00a      	b.n	8008552 <UART_SetConfig+0x7ae>
 800853c:	2340      	movs	r3, #64	@ 0x40
 800853e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008542:	e006      	b.n	8008552 <UART_SetConfig+0x7ae>
 8008544:	2380      	movs	r3, #128	@ 0x80
 8008546:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854a:	e002      	b.n	8008552 <UART_SetConfig+0x7ae>
 800854c:	2380      	movs	r3, #128	@ 0x80
 800854e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	4a55      	ldr	r2, [pc, #340]	@ (80086ac <UART_SetConfig+0x908>)
 8008558:	4293      	cmp	r3, r2
 800855a:	f040 80f8 	bne.w	800874e <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800855e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008562:	2b20      	cmp	r3, #32
 8008564:	dc46      	bgt.n	80085f4 <UART_SetConfig+0x850>
 8008566:	2b02      	cmp	r3, #2
 8008568:	db75      	blt.n	8008656 <UART_SetConfig+0x8b2>
 800856a:	3b02      	subs	r3, #2
 800856c:	2b1e      	cmp	r3, #30
 800856e:	d872      	bhi.n	8008656 <UART_SetConfig+0x8b2>
 8008570:	a201      	add	r2, pc, #4	@ (adr r2, 8008578 <UART_SetConfig+0x7d4>)
 8008572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008576:	bf00      	nop
 8008578:	080085fb 	.word	0x080085fb
 800857c:	08008657 	.word	0x08008657
 8008580:	08008603 	.word	0x08008603
 8008584:	08008657 	.word	0x08008657
 8008588:	08008657 	.word	0x08008657
 800858c:	08008657 	.word	0x08008657
 8008590:	08008613 	.word	0x08008613
 8008594:	08008657 	.word	0x08008657
 8008598:	08008657 	.word	0x08008657
 800859c:	08008657 	.word	0x08008657
 80085a0:	08008657 	.word	0x08008657
 80085a4:	08008657 	.word	0x08008657
 80085a8:	08008657 	.word	0x08008657
 80085ac:	08008657 	.word	0x08008657
 80085b0:	08008623 	.word	0x08008623
 80085b4:	08008657 	.word	0x08008657
 80085b8:	08008657 	.word	0x08008657
 80085bc:	08008657 	.word	0x08008657
 80085c0:	08008657 	.word	0x08008657
 80085c4:	08008657 	.word	0x08008657
 80085c8:	08008657 	.word	0x08008657
 80085cc:	08008657 	.word	0x08008657
 80085d0:	08008657 	.word	0x08008657
 80085d4:	08008657 	.word	0x08008657
 80085d8:	08008657 	.word	0x08008657
 80085dc:	08008657 	.word	0x08008657
 80085e0:	08008657 	.word	0x08008657
 80085e4:	08008657 	.word	0x08008657
 80085e8:	08008657 	.word	0x08008657
 80085ec:	08008657 	.word	0x08008657
 80085f0:	08008649 	.word	0x08008649
 80085f4:	2b40      	cmp	r3, #64	@ 0x40
 80085f6:	d02a      	beq.n	800864e <UART_SetConfig+0x8aa>
 80085f8:	e02d      	b.n	8008656 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80085fa:	f7fe fa25 	bl	8006a48 <HAL_RCCEx_GetD3PCLK1Freq>
 80085fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008600:	e02f      	b.n	8008662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008602:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008606:	4618      	mov	r0, r3
 8008608:	f7fe fa34 	bl	8006a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800860c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800860e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008610:	e027      	b.n	8008662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008612:	f107 0318 	add.w	r3, r7, #24
 8008616:	4618      	mov	r0, r3
 8008618:	f7fe fb80 	bl	8006d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800861c:	69fb      	ldr	r3, [r7, #28]
 800861e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008620:	e01f      	b.n	8008662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008622:	4b21      	ldr	r3, [pc, #132]	@ (80086a8 <UART_SetConfig+0x904>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0320 	and.w	r3, r3, #32
 800862a:	2b00      	cmp	r3, #0
 800862c:	d009      	beq.n	8008642 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800862e:	4b1e      	ldr	r3, [pc, #120]	@ (80086a8 <UART_SetConfig+0x904>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	08db      	lsrs	r3, r3, #3
 8008634:	f003 0303 	and.w	r3, r3, #3
 8008638:	4a1d      	ldr	r2, [pc, #116]	@ (80086b0 <UART_SetConfig+0x90c>)
 800863a:	fa22 f303 	lsr.w	r3, r2, r3
 800863e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008640:	e00f      	b.n	8008662 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008642:	4b1b      	ldr	r3, [pc, #108]	@ (80086b0 <UART_SetConfig+0x90c>)
 8008644:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008646:	e00c      	b.n	8008662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008648:	4b1a      	ldr	r3, [pc, #104]	@ (80086b4 <UART_SetConfig+0x910>)
 800864a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800864c:	e009      	b.n	8008662 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800864e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008652:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008654:	e005      	b.n	8008662 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8008656:	2300      	movs	r3, #0
 8008658:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008660:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008662:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 81ee 	beq.w	8008a46 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800866a:	697b      	ldr	r3, [r7, #20]
 800866c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800866e:	4a12      	ldr	r2, [pc, #72]	@ (80086b8 <UART_SetConfig+0x914>)
 8008670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008674:	461a      	mov	r2, r3
 8008676:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008678:	fbb3 f3f2 	udiv	r3, r3, r2
 800867c:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	4613      	mov	r3, r2
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	4413      	add	r3, r2
 8008688:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800868a:	429a      	cmp	r2, r3
 800868c:	d305      	bcc.n	800869a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008694:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008696:	429a      	cmp	r2, r3
 8008698:	d910      	bls.n	80086bc <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80086a0:	e1d1      	b.n	8008a46 <UART_SetConfig+0xca2>
 80086a2:	bf00      	nop
 80086a4:	40011c00 	.word	0x40011c00
 80086a8:	58024400 	.word	0x58024400
 80086ac:	58000c00 	.word	0x58000c00
 80086b0:	03d09000 	.word	0x03d09000
 80086b4:	003d0900 	.word	0x003d0900
 80086b8:	0800968c 	.word	0x0800968c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80086bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086be:	2200      	movs	r2, #0
 80086c0:	60bb      	str	r3, [r7, #8]
 80086c2:	60fa      	str	r2, [r7, #12]
 80086c4:	697b      	ldr	r3, [r7, #20]
 80086c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086c8:	4ac0      	ldr	r2, [pc, #768]	@ (80089cc <UART_SetConfig+0xc28>)
 80086ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086ce:	b29b      	uxth	r3, r3
 80086d0:	2200      	movs	r2, #0
 80086d2:	603b      	str	r3, [r7, #0]
 80086d4:	607a      	str	r2, [r7, #4]
 80086d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80086de:	f7f7 fe15 	bl	800030c <__aeabi_uldivmod>
 80086e2:	4602      	mov	r2, r0
 80086e4:	460b      	mov	r3, r1
 80086e6:	4610      	mov	r0, r2
 80086e8:	4619      	mov	r1, r3
 80086ea:	f04f 0200 	mov.w	r2, #0
 80086ee:	f04f 0300 	mov.w	r3, #0
 80086f2:	020b      	lsls	r3, r1, #8
 80086f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80086f8:	0202      	lsls	r2, r0, #8
 80086fa:	6979      	ldr	r1, [r7, #20]
 80086fc:	6849      	ldr	r1, [r1, #4]
 80086fe:	0849      	lsrs	r1, r1, #1
 8008700:	2000      	movs	r0, #0
 8008702:	460c      	mov	r4, r1
 8008704:	4605      	mov	r5, r0
 8008706:	eb12 0804 	adds.w	r8, r2, r4
 800870a:	eb43 0905 	adc.w	r9, r3, r5
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	685b      	ldr	r3, [r3, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	469a      	mov	sl, r3
 8008716:	4693      	mov	fp, r2
 8008718:	4652      	mov	r2, sl
 800871a:	465b      	mov	r3, fp
 800871c:	4640      	mov	r0, r8
 800871e:	4649      	mov	r1, r9
 8008720:	f7f7 fdf4 	bl	800030c <__aeabi_uldivmod>
 8008724:	4602      	mov	r2, r0
 8008726:	460b      	mov	r3, r1
 8008728:	4613      	mov	r3, r2
 800872a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800872c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800872e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008732:	d308      	bcc.n	8008746 <UART_SetConfig+0x9a2>
 8008734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008736:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800873a:	d204      	bcs.n	8008746 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008742:	60da      	str	r2, [r3, #12]
 8008744:	e17f      	b.n	8008a46 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800874c:	e17b      	b.n	8008a46 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	69db      	ldr	r3, [r3, #28]
 8008752:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008756:	f040 80bd 	bne.w	80088d4 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800875a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800875e:	2b20      	cmp	r3, #32
 8008760:	dc48      	bgt.n	80087f4 <UART_SetConfig+0xa50>
 8008762:	2b00      	cmp	r3, #0
 8008764:	db7b      	blt.n	800885e <UART_SetConfig+0xaba>
 8008766:	2b20      	cmp	r3, #32
 8008768:	d879      	bhi.n	800885e <UART_SetConfig+0xaba>
 800876a:	a201      	add	r2, pc, #4	@ (adr r2, 8008770 <UART_SetConfig+0x9cc>)
 800876c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008770:	080087fb 	.word	0x080087fb
 8008774:	08008803 	.word	0x08008803
 8008778:	0800885f 	.word	0x0800885f
 800877c:	0800885f 	.word	0x0800885f
 8008780:	0800880b 	.word	0x0800880b
 8008784:	0800885f 	.word	0x0800885f
 8008788:	0800885f 	.word	0x0800885f
 800878c:	0800885f 	.word	0x0800885f
 8008790:	0800881b 	.word	0x0800881b
 8008794:	0800885f 	.word	0x0800885f
 8008798:	0800885f 	.word	0x0800885f
 800879c:	0800885f 	.word	0x0800885f
 80087a0:	0800885f 	.word	0x0800885f
 80087a4:	0800885f 	.word	0x0800885f
 80087a8:	0800885f 	.word	0x0800885f
 80087ac:	0800885f 	.word	0x0800885f
 80087b0:	0800882b 	.word	0x0800882b
 80087b4:	0800885f 	.word	0x0800885f
 80087b8:	0800885f 	.word	0x0800885f
 80087bc:	0800885f 	.word	0x0800885f
 80087c0:	0800885f 	.word	0x0800885f
 80087c4:	0800885f 	.word	0x0800885f
 80087c8:	0800885f 	.word	0x0800885f
 80087cc:	0800885f 	.word	0x0800885f
 80087d0:	0800885f 	.word	0x0800885f
 80087d4:	0800885f 	.word	0x0800885f
 80087d8:	0800885f 	.word	0x0800885f
 80087dc:	0800885f 	.word	0x0800885f
 80087e0:	0800885f 	.word	0x0800885f
 80087e4:	0800885f 	.word	0x0800885f
 80087e8:	0800885f 	.word	0x0800885f
 80087ec:	0800885f 	.word	0x0800885f
 80087f0:	08008851 	.word	0x08008851
 80087f4:	2b40      	cmp	r3, #64	@ 0x40
 80087f6:	d02e      	beq.n	8008856 <UART_SetConfig+0xab2>
 80087f8:	e031      	b.n	800885e <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087fa:	f7fc ff59 	bl	80056b0 <HAL_RCC_GetPCLK1Freq>
 80087fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008800:	e033      	b.n	800886a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008802:	f7fc ff6b 	bl	80056dc <HAL_RCC_GetPCLK2Freq>
 8008806:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008808:	e02f      	b.n	800886a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800880a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800880e:	4618      	mov	r0, r3
 8008810:	f7fe f930 	bl	8006a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008816:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008818:	e027      	b.n	800886a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800881a:	f107 0318 	add.w	r3, r7, #24
 800881e:	4618      	mov	r0, r3
 8008820:	f7fe fa7c 	bl	8006d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008824:	69fb      	ldr	r3, [r7, #28]
 8008826:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008828:	e01f      	b.n	800886a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800882a:	4b69      	ldr	r3, [pc, #420]	@ (80089d0 <UART_SetConfig+0xc2c>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	f003 0320 	and.w	r3, r3, #32
 8008832:	2b00      	cmp	r3, #0
 8008834:	d009      	beq.n	800884a <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008836:	4b66      	ldr	r3, [pc, #408]	@ (80089d0 <UART_SetConfig+0xc2c>)
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	08db      	lsrs	r3, r3, #3
 800883c:	f003 0303 	and.w	r3, r3, #3
 8008840:	4a64      	ldr	r2, [pc, #400]	@ (80089d4 <UART_SetConfig+0xc30>)
 8008842:	fa22 f303 	lsr.w	r3, r2, r3
 8008846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008848:	e00f      	b.n	800886a <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800884a:	4b62      	ldr	r3, [pc, #392]	@ (80089d4 <UART_SetConfig+0xc30>)
 800884c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800884e:	e00c      	b.n	800886a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008850:	4b61      	ldr	r3, [pc, #388]	@ (80089d8 <UART_SetConfig+0xc34>)
 8008852:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008854:	e009      	b.n	800886a <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008856:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800885a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800885c:	e005      	b.n	800886a <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 800885e:	2300      	movs	r3, #0
 8008860:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008862:	2301      	movs	r3, #1
 8008864:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008868:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800886a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800886c:	2b00      	cmp	r3, #0
 800886e:	f000 80ea 	beq.w	8008a46 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008876:	4a55      	ldr	r2, [pc, #340]	@ (80089cc <UART_SetConfig+0xc28>)
 8008878:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800887c:	461a      	mov	r2, r3
 800887e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008880:	fbb3 f3f2 	udiv	r3, r3, r2
 8008884:	005a      	lsls	r2, r3, #1
 8008886:	697b      	ldr	r3, [r7, #20]
 8008888:	685b      	ldr	r3, [r3, #4]
 800888a:	085b      	lsrs	r3, r3, #1
 800888c:	441a      	add	r2, r3
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	685b      	ldr	r3, [r3, #4]
 8008892:	fbb2 f3f3 	udiv	r3, r2, r3
 8008896:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800889a:	2b0f      	cmp	r3, #15
 800889c:	d916      	bls.n	80088cc <UART_SetConfig+0xb28>
 800889e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80088a4:	d212      	bcs.n	80088cc <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80088a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	f023 030f 	bic.w	r3, r3, #15
 80088ae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80088b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80088b2:	085b      	lsrs	r3, r3, #1
 80088b4:	b29b      	uxth	r3, r3
 80088b6:	f003 0307 	and.w	r3, r3, #7
 80088ba:	b29a      	uxth	r2, r3
 80088bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80088be:	4313      	orrs	r3, r2
 80088c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80088c2:	697b      	ldr	r3, [r7, #20]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80088c8:	60da      	str	r2, [r3, #12]
 80088ca:	e0bc      	b.n	8008a46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80088cc:	2301      	movs	r3, #1
 80088ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80088d2:	e0b8      	b.n	8008a46 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80088d4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80088d8:	2b20      	cmp	r3, #32
 80088da:	dc4b      	bgt.n	8008974 <UART_SetConfig+0xbd0>
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f2c0 8087 	blt.w	80089f0 <UART_SetConfig+0xc4c>
 80088e2:	2b20      	cmp	r3, #32
 80088e4:	f200 8084 	bhi.w	80089f0 <UART_SetConfig+0xc4c>
 80088e8:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <UART_SetConfig+0xb4c>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	0800897b 	.word	0x0800897b
 80088f4:	08008983 	.word	0x08008983
 80088f8:	080089f1 	.word	0x080089f1
 80088fc:	080089f1 	.word	0x080089f1
 8008900:	0800898b 	.word	0x0800898b
 8008904:	080089f1 	.word	0x080089f1
 8008908:	080089f1 	.word	0x080089f1
 800890c:	080089f1 	.word	0x080089f1
 8008910:	0800899b 	.word	0x0800899b
 8008914:	080089f1 	.word	0x080089f1
 8008918:	080089f1 	.word	0x080089f1
 800891c:	080089f1 	.word	0x080089f1
 8008920:	080089f1 	.word	0x080089f1
 8008924:	080089f1 	.word	0x080089f1
 8008928:	080089f1 	.word	0x080089f1
 800892c:	080089f1 	.word	0x080089f1
 8008930:	080089ab 	.word	0x080089ab
 8008934:	080089f1 	.word	0x080089f1
 8008938:	080089f1 	.word	0x080089f1
 800893c:	080089f1 	.word	0x080089f1
 8008940:	080089f1 	.word	0x080089f1
 8008944:	080089f1 	.word	0x080089f1
 8008948:	080089f1 	.word	0x080089f1
 800894c:	080089f1 	.word	0x080089f1
 8008950:	080089f1 	.word	0x080089f1
 8008954:	080089f1 	.word	0x080089f1
 8008958:	080089f1 	.word	0x080089f1
 800895c:	080089f1 	.word	0x080089f1
 8008960:	080089f1 	.word	0x080089f1
 8008964:	080089f1 	.word	0x080089f1
 8008968:	080089f1 	.word	0x080089f1
 800896c:	080089f1 	.word	0x080089f1
 8008970:	080089e3 	.word	0x080089e3
 8008974:	2b40      	cmp	r3, #64	@ 0x40
 8008976:	d037      	beq.n	80089e8 <UART_SetConfig+0xc44>
 8008978:	e03a      	b.n	80089f0 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800897a:	f7fc fe99 	bl	80056b0 <HAL_RCC_GetPCLK1Freq>
 800897e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008980:	e03c      	b.n	80089fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008982:	f7fc feab 	bl	80056dc <HAL_RCC_GetPCLK2Freq>
 8008986:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008988:	e038      	b.n	80089fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800898a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe f870 	bl	8006a74 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008996:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008998:	e030      	b.n	80089fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800899a:	f107 0318 	add.w	r3, r7, #24
 800899e:	4618      	mov	r0, r3
 80089a0:	f7fe f9bc 	bl	8006d1c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80089a4:	69fb      	ldr	r3, [r7, #28]
 80089a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089a8:	e028      	b.n	80089fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80089aa:	4b09      	ldr	r3, [pc, #36]	@ (80089d0 <UART_SetConfig+0xc2c>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0320 	and.w	r3, r3, #32
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d012      	beq.n	80089dc <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80089b6:	4b06      	ldr	r3, [pc, #24]	@ (80089d0 <UART_SetConfig+0xc2c>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	08db      	lsrs	r3, r3, #3
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	4a04      	ldr	r2, [pc, #16]	@ (80089d4 <UART_SetConfig+0xc30>)
 80089c2:	fa22 f303 	lsr.w	r3, r2, r3
 80089c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80089c8:	e018      	b.n	80089fc <UART_SetConfig+0xc58>
 80089ca:	bf00      	nop
 80089cc:	0800968c 	.word	0x0800968c
 80089d0:	58024400 	.word	0x58024400
 80089d4:	03d09000 	.word	0x03d09000
 80089d8:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80089dc:	4b24      	ldr	r3, [pc, #144]	@ (8008a70 <UART_SetConfig+0xccc>)
 80089de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e0:	e00c      	b.n	80089fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80089e2:	4b24      	ldr	r3, [pc, #144]	@ (8008a74 <UART_SetConfig+0xcd0>)
 80089e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089e6:	e009      	b.n	80089fc <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089e8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80089ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80089ee:	e005      	b.n	80089fc <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80089f0:	2300      	movs	r3, #0
 80089f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80089fa:	bf00      	nop
    }

    if (pclk != 0U)
 80089fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d021      	beq.n	8008a46 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a06:	4a1c      	ldr	r2, [pc, #112]	@ (8008a78 <UART_SetConfig+0xcd4>)
 8008a08:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a0c:	461a      	mov	r2, r3
 8008a0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a10:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a14:	697b      	ldr	r3, [r7, #20]
 8008a16:	685b      	ldr	r3, [r3, #4]
 8008a18:	085b      	lsrs	r3, r3, #1
 8008a1a:	441a      	add	r2, r3
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	685b      	ldr	r3, [r3, #4]
 8008a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a24:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a28:	2b0f      	cmp	r3, #15
 8008a2a:	d909      	bls.n	8008a40 <UART_SetConfig+0xc9c>
 8008a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008a32:	d205      	bcs.n	8008a40 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a36:	b29a      	uxth	r2, r3
 8008a38:	697b      	ldr	r3, [r7, #20]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	60da      	str	r2, [r3, #12]
 8008a3e:	e002      	b.n	8008a46 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008a4e:	697b      	ldr	r3, [r7, #20]
 8008a50:	2201      	movs	r2, #1
 8008a52:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a56:	697b      	ldr	r3, [r7, #20]
 8008a58:	2200      	movs	r2, #0
 8008a5a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	2200      	movs	r2, #0
 8008a60:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008a62:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3748      	adds	r7, #72	@ 0x48
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a70:	03d09000 	.word	0x03d09000
 8008a74:	003d0900 	.word	0x003d0900
 8008a78:	0800968c 	.word	0x0800968c

08008a7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a88:	f003 0308 	and.w	r3, r3, #8
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d00a      	beq.n	8008aa6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	685b      	ldr	r3, [r3, #4]
 8008a96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	430a      	orrs	r2, r1
 8008aa4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aaa:	f003 0301 	and.w	r3, r3, #1
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00a      	beq.n	8008ac8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	685b      	ldr	r3, [r3, #4]
 8008ab8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	430a      	orrs	r2, r1
 8008ac6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d00a      	beq.n	8008aea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	685b      	ldr	r3, [r3, #4]
 8008ada:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	430a      	orrs	r2, r1
 8008ae8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008aee:	f003 0304 	and.w	r3, r3, #4
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00a      	beq.n	8008b0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	430a      	orrs	r2, r1
 8008b0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b10:	f003 0310 	and.w	r3, r3, #16
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d00a      	beq.n	8008b2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b26:	687b      	ldr	r3, [r7, #4]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	430a      	orrs	r2, r1
 8008b2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b32:	f003 0320 	and.w	r3, r3, #32
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	689b      	ldr	r3, [r3, #8]
 8008b40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d01a      	beq.n	8008b92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008b76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008b7a:	d10a      	bne.n	8008b92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	685b      	ldr	r3, [r3, #4]
 8008b82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	430a      	orrs	r2, r1
 8008b90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d00a      	beq.n	8008bb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	605a      	str	r2, [r3, #4]
  }
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b098      	sub	sp, #96	@ 0x60
 8008bc4:	af02      	add	r7, sp, #8
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2200      	movs	r2, #0
 8008bcc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bd0:	f7f8 fc60 	bl	8001494 <HAL_GetTick>
 8008bd4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0308 	and.w	r3, r3, #8
 8008be0:	2b08      	cmp	r3, #8
 8008be2:	d12f      	bne.n	8008c44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008be4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008bec:	2200      	movs	r2, #0
 8008bee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 f88e 	bl	8008d14 <UART_WaitOnFlagUntilTimeout>
 8008bf8:	4603      	mov	r3, r0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d022      	beq.n	8008c44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c06:	e853 3f00 	ldrex	r3, [r3]
 8008c0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c12:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c1e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c24:	e841 2300 	strex	r3, r2, [r1]
 8008c28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d1e6      	bne.n	8008bfe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2220      	movs	r2, #32
 8008c34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e063      	b.n	8008d0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f003 0304 	and.w	r3, r3, #4
 8008c4e:	2b04      	cmp	r3, #4
 8008c50:	d149      	bne.n	8008ce6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008c60:	6878      	ldr	r0, [r7, #4]
 8008c62:	f000 f857 	bl	8008d14 <UART_WaitOnFlagUntilTimeout>
 8008c66:	4603      	mov	r3, r0
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d03c      	beq.n	8008ce6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c74:	e853 3f00 	ldrex	r3, [r3]
 8008c78:	623b      	str	r3, [r7, #32]
   return(result);
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008c80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	461a      	mov	r2, r3
 8008c88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008c8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8008c8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c92:	e841 2300 	strex	r3, r2, [r1]
 8008c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d1e6      	bne.n	8008c6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	3308      	adds	r3, #8
 8008ca4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	e853 3f00 	ldrex	r3, [r3]
 8008cac:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	f023 0301 	bic.w	r3, r3, #1
 8008cb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	3308      	adds	r3, #8
 8008cbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008cbe:	61fa      	str	r2, [r7, #28]
 8008cc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc2:	69b9      	ldr	r1, [r7, #24]
 8008cc4:	69fa      	ldr	r2, [r7, #28]
 8008cc6:	e841 2300 	strex	r3, r2, [r1]
 8008cca:	617b      	str	r3, [r7, #20]
   return(result);
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1e5      	bne.n	8008c9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2220      	movs	r2, #32
 8008cd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	2200      	movs	r2, #0
 8008cde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e012      	b.n	8008d0c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2220      	movs	r2, #32
 8008cf2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2200      	movs	r2, #0
 8008d00:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	2200      	movs	r2, #0
 8008d06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3758      	adds	r7, #88	@ 0x58
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}

08008d14 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b084      	sub	sp, #16
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	60f8      	str	r0, [r7, #12]
 8008d1c:	60b9      	str	r1, [r7, #8]
 8008d1e:	603b      	str	r3, [r7, #0]
 8008d20:	4613      	mov	r3, r2
 8008d22:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d24:	e04f      	b.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d2c:	d04b      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d2e:	f7f8 fbb1 	bl	8001494 <HAL_GetTick>
 8008d32:	4602      	mov	r2, r0
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	1ad3      	subs	r3, r2, r3
 8008d38:	69ba      	ldr	r2, [r7, #24]
 8008d3a:	429a      	cmp	r2, r3
 8008d3c:	d302      	bcc.n	8008d44 <UART_WaitOnFlagUntilTimeout+0x30>
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008d44:	2303      	movs	r3, #3
 8008d46:	e04e      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f003 0304 	and.w	r3, r3, #4
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d037      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d56:	68bb      	ldr	r3, [r7, #8]
 8008d58:	2b80      	cmp	r3, #128	@ 0x80
 8008d5a:	d034      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	2b40      	cmp	r3, #64	@ 0x40
 8008d60:	d031      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	f003 0308 	and.w	r3, r3, #8
 8008d6c:	2b08      	cmp	r3, #8
 8008d6e:	d110      	bne.n	8008d92 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2208      	movs	r2, #8
 8008d76:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008d78:	68f8      	ldr	r0, [r7, #12]
 8008d7a:	f000 f921 	bl	8008fc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	2208      	movs	r2, #8
 8008d82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2200      	movs	r2, #0
 8008d8a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008d8e:	2301      	movs	r3, #1
 8008d90:	e029      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008da0:	d111      	bne.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008daa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008dac:	68f8      	ldr	r0, [r7, #12]
 8008dae:	f000 f907 	bl	8008fc0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	2220      	movs	r2, #32
 8008db6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008dc2:	2303      	movs	r3, #3
 8008dc4:	e00f      	b.n	8008de6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	69da      	ldr	r2, [r3, #28]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	4013      	ands	r3, r2
 8008dd0:	68ba      	ldr	r2, [r7, #8]
 8008dd2:	429a      	cmp	r2, r3
 8008dd4:	bf0c      	ite	eq
 8008dd6:	2301      	moveq	r3, #1
 8008dd8:	2300      	movne	r3, #0
 8008dda:	b2db      	uxtb	r3, r3
 8008ddc:	461a      	mov	r2, r3
 8008dde:	79fb      	ldrb	r3, [r7, #7]
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d0a0      	beq.n	8008d26 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008de4:	2300      	movs	r3, #0
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3710      	adds	r7, #16
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b096      	sub	sp, #88	@ 0x58
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	60f8      	str	r0, [r7, #12]
 8008df8:	60b9      	str	r1, [r7, #8]
 8008dfa:	4613      	mov	r3, r2
 8008dfc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	68ba      	ldr	r2, [r7, #8]
 8008e02:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008e04:	68fb      	ldr	r3, [r7, #12]
 8008e06:	88fa      	ldrh	r2, [r7, #6]
 8008e08:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	2222      	movs	r2, #34	@ 0x22
 8008e18:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d02d      	beq.n	8008e82 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e2c:	4a40      	ldr	r2, [pc, #256]	@ (8008f30 <UART_Start_Receive_DMA+0x140>)
 8008e2e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e36:	4a3f      	ldr	r2, [pc, #252]	@ (8008f34 <UART_Start_Receive_DMA+0x144>)
 8008e38:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e40:	4a3d      	ldr	r2, [pc, #244]	@ (8008f38 <UART_Start_Receive_DMA+0x148>)
 8008e42:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008e44:	68fb      	ldr	r3, [r7, #12]
 8008e46:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008e4e:	68fb      	ldr	r3, [r7, #12]
 8008e50:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3324      	adds	r3, #36	@ 0x24
 8008e5a:	4619      	mov	r1, r3
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e60:	461a      	mov	r2, r3
 8008e62:	88fb      	ldrh	r3, [r7, #6]
 8008e64:	f7f9 f802 	bl	8001e6c <HAL_DMA_Start_IT>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d009      	beq.n	8008e82 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	2210      	movs	r2, #16
 8008e72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	2220      	movs	r2, #32
 8008e7a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e051      	b.n	8008f26 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	691b      	ldr	r3, [r3, #16]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d018      	beq.n	8008ebc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008e92:	e853 3f00 	ldrex	r3, [r3]
 8008e96:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008e9a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008e9e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ea8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008eaa:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008eae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008eb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e6      	bne.n	8008e8a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ec6:	e853 3f00 	ldrex	r3, [r3]
 8008eca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008ecc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ece:	f043 0301 	orr.w	r3, r3, #1
 8008ed2:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008edc:	637a      	str	r2, [r7, #52]	@ 0x34
 8008ede:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ee2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ee4:	e841 2300 	strex	r3, r2, [r1]
 8008ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e5      	bne.n	8008ebc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3308      	adds	r3, #8
 8008ef6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef8:	697b      	ldr	r3, [r7, #20]
 8008efa:	e853 3f00 	ldrex	r3, [r3]
 8008efe:	613b      	str	r3, [r7, #16]
   return(result);
 8008f00:	693b      	ldr	r3, [r7, #16]
 8008f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	3308      	adds	r3, #8
 8008f0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f10:	623a      	str	r2, [r7, #32]
 8008f12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f14:	69f9      	ldr	r1, [r7, #28]
 8008f16:	6a3a      	ldr	r2, [r7, #32]
 8008f18:	e841 2300 	strex	r3, r2, [r1]
 8008f1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f1e:	69bb      	ldr	r3, [r7, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d1e5      	bne.n	8008ef0 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008f24:	2300      	movs	r3, #0
}
 8008f26:	4618      	mov	r0, r3
 8008f28:	3758      	adds	r7, #88	@ 0x58
 8008f2a:	46bd      	mov	sp, r7
 8008f2c:	bd80      	pop	{r7, pc}
 8008f2e:	bf00      	nop
 8008f30:	0800913f 	.word	0x0800913f
 8008f34:	08009267 	.word	0x08009267
 8008f38:	080092a5 	.word	0x080092a5

08008f3c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b08f      	sub	sp, #60	@ 0x3c
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4a:	6a3b      	ldr	r3, [r7, #32]
 8008f4c:	e853 3f00 	ldrex	r3, [r3]
 8008f50:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f52:	69fb      	ldr	r3, [r7, #28]
 8008f54:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008f58:	637b      	str	r3, [r7, #52]	@ 0x34
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	461a      	mov	r2, r3
 8008f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f62:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f64:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f6a:	e841 2300 	strex	r3, r2, [r1]
 8008f6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d1e6      	bne.n	8008f44 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	3308      	adds	r3, #8
 8008f7c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	e853 3f00 	ldrex	r3, [r3]
 8008f84:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008f8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	3308      	adds	r3, #8
 8008f94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f96:	61ba      	str	r2, [r7, #24]
 8008f98:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9a:	6979      	ldr	r1, [r7, #20]
 8008f9c:	69ba      	ldr	r2, [r7, #24]
 8008f9e:	e841 2300 	strex	r3, r2, [r1]
 8008fa2:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d1e5      	bne.n	8008f76 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2220      	movs	r2, #32
 8008fae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008fb2:	bf00      	nop
 8008fb4:	373c      	adds	r7, #60	@ 0x3c
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbc:	4770      	bx	lr
	...

08008fc0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b095      	sub	sp, #84	@ 0x54
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd0:	e853 3f00 	ldrex	r3, [r3]
 8008fd4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	461a      	mov	r2, r3
 8008fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008fe6:	643b      	str	r3, [r7, #64]	@ 0x40
 8008fe8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fea:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008fec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008fee:	e841 2300 	strex	r3, r2, [r1]
 8008ff2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ff4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d1e6      	bne.n	8008fc8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	3308      	adds	r3, #8
 8009000:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009002:	6a3b      	ldr	r3, [r7, #32]
 8009004:	e853 3f00 	ldrex	r3, [r3]
 8009008:	61fb      	str	r3, [r7, #28]
   return(result);
 800900a:	69fa      	ldr	r2, [r7, #28]
 800900c:	4b1e      	ldr	r3, [pc, #120]	@ (8009088 <UART_EndRxTransfer+0xc8>)
 800900e:	4013      	ands	r3, r2
 8009010:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	3308      	adds	r3, #8
 8009018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800901a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800901c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009020:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009022:	e841 2300 	strex	r3, r2, [r1]
 8009026:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902a:	2b00      	cmp	r3, #0
 800902c:	d1e5      	bne.n	8008ffa <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009032:	2b01      	cmp	r3, #1
 8009034:	d118      	bne.n	8009068 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	60bb      	str	r3, [r7, #8]
   return(result);
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	f023 0310 	bic.w	r3, r3, #16
 800904a:	647b      	str	r3, [r7, #68]	@ 0x44
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	461a      	mov	r2, r3
 8009052:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009054:	61bb      	str	r3, [r7, #24]
 8009056:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009058:	6979      	ldr	r1, [r7, #20]
 800905a:	69ba      	ldr	r2, [r7, #24]
 800905c:	e841 2300 	strex	r3, r2, [r1]
 8009060:	613b      	str	r3, [r7, #16]
   return(result);
 8009062:	693b      	ldr	r3, [r7, #16]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d1e6      	bne.n	8009036 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2220      	movs	r2, #32
 800906c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2200      	movs	r2, #0
 8009074:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800907c:	bf00      	nop
 800907e:	3754      	adds	r7, #84	@ 0x54
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	effffffe 	.word	0xeffffffe

0800908c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800908c:	b580      	push	{r7, lr}
 800908e:	b090      	sub	sp, #64	@ 0x40
 8009090:	af00      	add	r7, sp, #0
 8009092:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009098:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80090a2:	d037      	beq.n	8009114 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 80090a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090a6:	2200      	movs	r2, #0
 80090a8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80090ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	3308      	adds	r3, #8
 80090b2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	623b      	str	r3, [r7, #32]
   return(result);
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80090c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	3308      	adds	r3, #8
 80090ca:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80090cc:	633a      	str	r2, [r7, #48]	@ 0x30
 80090ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80090d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80090da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e5      	bne.n	80090ac <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80090e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e6:	693b      	ldr	r3, [r7, #16]
 80090e8:	e853 3f00 	ldrex	r3, [r3]
 80090ec:	60fb      	str	r3, [r7, #12]
   return(result);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80090f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	461a      	mov	r2, r3
 80090fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090fe:	61fb      	str	r3, [r7, #28]
 8009100:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009102:	69b9      	ldr	r1, [r7, #24]
 8009104:	69fa      	ldr	r2, [r7, #28]
 8009106:	e841 2300 	strex	r3, r2, [r1]
 800910a:	617b      	str	r3, [r7, #20]
   return(result);
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d1e6      	bne.n	80090e0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009112:	e002      	b.n	800911a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009114:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009116:	f7f7 fd4b 	bl	8000bb0 <HAL_UART_TxCpltCallback>
}
 800911a:	bf00      	nop
 800911c:	3740      	adds	r7, #64	@ 0x40
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}

08009122 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009122:	b580      	push	{r7, lr}
 8009124:	b084      	sub	sp, #16
 8009126:	af00      	add	r7, sp, #0
 8009128:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8009130:	68f8      	ldr	r0, [r7, #12]
 8009132:	f7fe fe17 	bl	8007d64 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009136:	bf00      	nop
 8009138:	3710      	adds	r7, #16
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b09c      	sub	sp, #112	@ 0x70
 8009142:	af00      	add	r7, sp, #0
 8009144:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800914a:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	69db      	ldr	r3, [r3, #28]
 8009150:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009154:	d071      	beq.n	800923a <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8009156:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009158:	2200      	movs	r2, #0
 800915a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800915e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009166:	e853 3f00 	ldrex	r3, [r3]
 800916a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800916c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800916e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009172:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009174:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	461a      	mov	r2, r3
 800917a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800917c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800917e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009180:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009182:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009184:	e841 2300 	strex	r3, r2, [r1]
 8009188:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800918a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800918c:	2b00      	cmp	r3, #0
 800918e:	d1e6      	bne.n	800915e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	3308      	adds	r3, #8
 8009196:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800919a:	e853 3f00 	ldrex	r3, [r3]
 800919e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80091a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091a2:	f023 0301 	bic.w	r3, r3, #1
 80091a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80091a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80091b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80091b2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80091b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80091b8:	e841 2300 	strex	r3, r2, [r1]
 80091bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80091be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d1e5      	bne.n	8009190 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	3308      	adds	r3, #8
 80091ca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80091ce:	e853 3f00 	ldrex	r3, [r3]
 80091d2:	623b      	str	r3, [r7, #32]
   return(result);
 80091d4:	6a3b      	ldr	r3, [r7, #32]
 80091d6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091da:	663b      	str	r3, [r7, #96]	@ 0x60
 80091dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	3308      	adds	r3, #8
 80091e2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80091e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80091e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091e8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80091ea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091ec:	e841 2300 	strex	r3, r2, [r1]
 80091f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80091f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d1e5      	bne.n	80091c4 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80091f8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091fa:	2220      	movs	r2, #32
 80091fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009202:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009204:	2b01      	cmp	r3, #1
 8009206:	d118      	bne.n	800923a <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009208:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800920e:	693b      	ldr	r3, [r7, #16]
 8009210:	e853 3f00 	ldrex	r3, [r3]
 8009214:	60fb      	str	r3, [r7, #12]
   return(result);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	f023 0310 	bic.w	r3, r3, #16
 800921c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800921e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	461a      	mov	r2, r3
 8009224:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009226:	61fb      	str	r3, [r7, #28]
 8009228:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800922a:	69b9      	ldr	r1, [r7, #24]
 800922c:	69fa      	ldr	r2, [r7, #28]
 800922e:	e841 2300 	strex	r3, r2, [r1]
 8009232:	617b      	str	r3, [r7, #20]
   return(result);
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d1e6      	bne.n	8009208 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800923a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800923c:	2200      	movs	r2, #0
 800923e:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009240:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009242:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009244:	2b01      	cmp	r3, #1
 8009246:	d107      	bne.n	8009258 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009248:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800924a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800924e:	4619      	mov	r1, r3
 8009250:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009252:	f7fe fd9b 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009256:	e002      	b.n	800925e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 8009258:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800925a:	f7f7 fcb9 	bl	8000bd0 <HAL_UART_RxCpltCallback>
}
 800925e:	bf00      	nop
 8009260:	3770      	adds	r7, #112	@ 0x70
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}

08009266 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009266:	b580      	push	{r7, lr}
 8009268:	b084      	sub	sp, #16
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009272:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	2201      	movs	r2, #1
 8009278:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800927e:	2b01      	cmp	r3, #1
 8009280:	d109      	bne.n	8009296 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009288:	085b      	lsrs	r3, r3, #1
 800928a:	b29b      	uxth	r3, r3
 800928c:	4619      	mov	r1, r3
 800928e:	68f8      	ldr	r0, [r7, #12]
 8009290:	f7fe fd7c 	bl	8007d8c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009294:	e002      	b.n	800929c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009296:	68f8      	ldr	r0, [r7, #12]
 8009298:	f7f7 ffac 	bl	80011f4 <HAL_UART_RxHalfCpltCallback>
}
 800929c:	bf00      	nop
 800929e:	3710      	adds	r7, #16
 80092a0:	46bd      	mov	sp, r7
 80092a2:	bd80      	pop	{r7, pc}

080092a4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b086      	sub	sp, #24
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092b0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80092b8:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80092ba:	697b      	ldr	r3, [r7, #20]
 80092bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092c0:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80092cc:	2b80      	cmp	r3, #128	@ 0x80
 80092ce:	d109      	bne.n	80092e4 <UART_DMAError+0x40>
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	2b21      	cmp	r3, #33	@ 0x21
 80092d4:	d106      	bne.n	80092e4 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2200      	movs	r2, #0
 80092da:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 80092de:	6978      	ldr	r0, [r7, #20]
 80092e0:	f7ff fe2c 	bl	8008f3c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	689b      	ldr	r3, [r3, #8]
 80092ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80092ee:	2b40      	cmp	r3, #64	@ 0x40
 80092f0:	d109      	bne.n	8009306 <UART_DMAError+0x62>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2b22      	cmp	r3, #34	@ 0x22
 80092f6:	d106      	bne.n	8009306 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80092f8:	697b      	ldr	r3, [r7, #20]
 80092fa:	2200      	movs	r2, #0
 80092fc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009300:	6978      	ldr	r0, [r7, #20]
 8009302:	f7ff fe5d 	bl	8008fc0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800930c:	f043 0210 	orr.w	r2, r3, #16
 8009310:	697b      	ldr	r3, [r7, #20]
 8009312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009316:	6978      	ldr	r0, [r7, #20]
 8009318:	f7fe fd2e 	bl	8007d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800931c:	bf00      	nop
 800931e:	3718      	adds	r7, #24
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}

08009324 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009324:	b580      	push	{r7, lr}
 8009326:	b084      	sub	sp, #16
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009330:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2200      	movs	r2, #0
 8009336:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2200      	movs	r2, #0
 800933e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009342:	68f8      	ldr	r0, [r7, #12]
 8009344:	f7fe fd18 	bl	8007d78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009348:	bf00      	nop
 800934a:	3710      	adds	r7, #16
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	e853 3f00 	ldrex	r3, [r3]
 8009364:	60bb      	str	r3, [r7, #8]
   return(result);
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800936c:	61fb      	str	r3, [r7, #28]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	69fb      	ldr	r3, [r7, #28]
 8009376:	61bb      	str	r3, [r7, #24]
 8009378:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800937a:	6979      	ldr	r1, [r7, #20]
 800937c:	69ba      	ldr	r2, [r7, #24]
 800937e:	e841 2300 	strex	r3, r2, [r1]
 8009382:	613b      	str	r3, [r7, #16]
   return(result);
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d1e6      	bne.n	8009358 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	2220      	movs	r2, #32
 800938e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	2200      	movs	r2, #0
 8009396:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7f7 fc09 	bl	8000bb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800939e:	bf00      	nop
 80093a0:	3720      	adds	r7, #32
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bd80      	pop	{r7, pc}

080093a6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80093a6:	b480      	push	{r7}
 80093a8:	b083      	sub	sp, #12
 80093aa:	af00      	add	r7, sp, #0
 80093ac:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80093ae:	bf00      	nop
 80093b0:	370c      	adds	r7, #12
 80093b2:	46bd      	mov	sp, r7
 80093b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093b8:	4770      	bx	lr

080093ba <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80093ba:	b480      	push	{r7}
 80093bc:	b083      	sub	sp, #12
 80093be:	af00      	add	r7, sp, #0
 80093c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80093c2:	bf00      	nop
 80093c4:	370c      	adds	r7, #12
 80093c6:	46bd      	mov	sp, r7
 80093c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093cc:	4770      	bx	lr

080093ce <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80093ce:	b480      	push	{r7}
 80093d0:	b083      	sub	sp, #12
 80093d2:	af00      	add	r7, sp, #0
 80093d4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr

080093e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80093e2:	b480      	push	{r7}
 80093e4:	b085      	sub	sp, #20
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80093f0:	2b01      	cmp	r3, #1
 80093f2:	d101      	bne.n	80093f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80093f4:	2302      	movs	r3, #2
 80093f6:	e027      	b.n	8009448 <HAL_UARTEx_DisableFifoMode+0x66>
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2201      	movs	r2, #1
 80093fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2224      	movs	r2, #36	@ 0x24
 8009404:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	681a      	ldr	r2, [r3, #0]
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	f022 0201 	bic.w	r2, r2, #1
 800941e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009426:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2200      	movs	r2, #0
 800942c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	68fa      	ldr	r2, [r7, #12]
 8009434:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2220      	movs	r2, #32
 800943a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2200      	movs	r2, #0
 8009442:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3714      	adds	r7, #20
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009464:	2b01      	cmp	r3, #1
 8009466:	d101      	bne.n	800946c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009468:	2302      	movs	r3, #2
 800946a:	e02d      	b.n	80094c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2201      	movs	r2, #1
 8009470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2224      	movs	r2, #36	@ 0x24
 8009478:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	681a      	ldr	r2, [r3, #0]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	f022 0201 	bic.w	r2, r2, #1
 8009492:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	689b      	ldr	r3, [r3, #8]
 800949a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	683a      	ldr	r2, [r7, #0]
 80094a4:	430a      	orrs	r2, r1
 80094a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f000 f84f 	bl	800954c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094e0:	2b01      	cmp	r3, #1
 80094e2:	d101      	bne.n	80094e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80094e4:	2302      	movs	r3, #2
 80094e6:	e02d      	b.n	8009544 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2201      	movs	r2, #1
 80094ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2224      	movs	r2, #36	@ 0x24
 80094f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f022 0201 	bic.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689b      	ldr	r3, [r3, #8]
 8009516:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	683a      	ldr	r2, [r7, #0]
 8009520:	430a      	orrs	r2, r1
 8009522:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f811 	bl	800954c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	68fa      	ldr	r2, [r7, #12]
 8009530:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2220      	movs	r2, #32
 8009536:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2200      	movs	r2, #0
 800953e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3710      	adds	r7, #16
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}

0800954c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009558:	2b00      	cmp	r3, #0
 800955a:	d108      	bne.n	800956e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	2201      	movs	r2, #1
 8009560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800956c:	e031      	b.n	80095d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800956e:	2310      	movs	r3, #16
 8009570:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009572:	2310      	movs	r3, #16
 8009574:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	689b      	ldr	r3, [r3, #8]
 800957c:	0e5b      	lsrs	r3, r3, #25
 800957e:	b2db      	uxtb	r3, r3
 8009580:	f003 0307 	and.w	r3, r3, #7
 8009584:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	689b      	ldr	r3, [r3, #8]
 800958c:	0f5b      	lsrs	r3, r3, #29
 800958e:	b2db      	uxtb	r3, r3
 8009590:	f003 0307 	and.w	r3, r3, #7
 8009594:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009596:	7bbb      	ldrb	r3, [r7, #14]
 8009598:	7b3a      	ldrb	r2, [r7, #12]
 800959a:	4911      	ldr	r1, [pc, #68]	@ (80095e0 <UARTEx_SetNbDataToProcess+0x94>)
 800959c:	5c8a      	ldrb	r2, [r1, r2]
 800959e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80095a2:	7b3a      	ldrb	r2, [r7, #12]
 80095a4:	490f      	ldr	r1, [pc, #60]	@ (80095e4 <UARTEx_SetNbDataToProcess+0x98>)
 80095a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80095a8:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ac:	b29a      	uxth	r2, r3
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095b4:	7bfb      	ldrb	r3, [r7, #15]
 80095b6:	7b7a      	ldrb	r2, [r7, #13]
 80095b8:	4909      	ldr	r1, [pc, #36]	@ (80095e0 <UARTEx_SetNbDataToProcess+0x94>)
 80095ba:	5c8a      	ldrb	r2, [r1, r2]
 80095bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80095c0:	7b7a      	ldrb	r2, [r7, #13]
 80095c2:	4908      	ldr	r1, [pc, #32]	@ (80095e4 <UARTEx_SetNbDataToProcess+0x98>)
 80095c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80095c6:	fb93 f3f2 	sdiv	r3, r3, r2
 80095ca:	b29a      	uxth	r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80095d2:	bf00      	nop
 80095d4:	3714      	adds	r7, #20
 80095d6:	46bd      	mov	sp, r7
 80095d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095dc:	4770      	bx	lr
 80095de:	bf00      	nop
 80095e0:	080096a4 	.word	0x080096a4
 80095e4:	080096ac 	.word	0x080096ac

080095e8 <memset>:
 80095e8:	4402      	add	r2, r0
 80095ea:	4603      	mov	r3, r0
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d100      	bne.n	80095f2 <memset+0xa>
 80095f0:	4770      	bx	lr
 80095f2:	f803 1b01 	strb.w	r1, [r3], #1
 80095f6:	e7f9      	b.n	80095ec <memset+0x4>

080095f8 <__libc_init_array>:
 80095f8:	b570      	push	{r4, r5, r6, lr}
 80095fa:	4d0d      	ldr	r5, [pc, #52]	@ (8009630 <__libc_init_array+0x38>)
 80095fc:	4c0d      	ldr	r4, [pc, #52]	@ (8009634 <__libc_init_array+0x3c>)
 80095fe:	1b64      	subs	r4, r4, r5
 8009600:	10a4      	asrs	r4, r4, #2
 8009602:	2600      	movs	r6, #0
 8009604:	42a6      	cmp	r6, r4
 8009606:	d109      	bne.n	800961c <__libc_init_array+0x24>
 8009608:	4d0b      	ldr	r5, [pc, #44]	@ (8009638 <__libc_init_array+0x40>)
 800960a:	4c0c      	ldr	r4, [pc, #48]	@ (800963c <__libc_init_array+0x44>)
 800960c:	f000 f826 	bl	800965c <_init>
 8009610:	1b64      	subs	r4, r4, r5
 8009612:	10a4      	asrs	r4, r4, #2
 8009614:	2600      	movs	r6, #0
 8009616:	42a6      	cmp	r6, r4
 8009618:	d105      	bne.n	8009626 <__libc_init_array+0x2e>
 800961a:	bd70      	pop	{r4, r5, r6, pc}
 800961c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009620:	4798      	blx	r3
 8009622:	3601      	adds	r6, #1
 8009624:	e7ee      	b.n	8009604 <__libc_init_array+0xc>
 8009626:	f855 3b04 	ldr.w	r3, [r5], #4
 800962a:	4798      	blx	r3
 800962c:	3601      	adds	r6, #1
 800962e:	e7f2      	b.n	8009616 <__libc_init_array+0x1e>
 8009630:	080096bc 	.word	0x080096bc
 8009634:	080096bc 	.word	0x080096bc
 8009638:	080096bc 	.word	0x080096bc
 800963c:	080096c0 	.word	0x080096c0

08009640 <memcpy>:
 8009640:	440a      	add	r2, r1
 8009642:	4291      	cmp	r1, r2
 8009644:	f100 33ff 	add.w	r3, r0, #4294967295
 8009648:	d100      	bne.n	800964c <memcpy+0xc>
 800964a:	4770      	bx	lr
 800964c:	b510      	push	{r4, lr}
 800964e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009652:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009656:	4291      	cmp	r1, r2
 8009658:	d1f9      	bne.n	800964e <memcpy+0xe>
 800965a:	bd10      	pop	{r4, pc}

0800965c <_init>:
 800965c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800965e:	bf00      	nop
 8009660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009662:	bc08      	pop	{r3}
 8009664:	469e      	mov	lr, r3
 8009666:	4770      	bx	lr

08009668 <_fini>:
 8009668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800966a:	bf00      	nop
 800966c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800966e:	bc08      	pop	{r3}
 8009670:	469e      	mov	lr, r3
 8009672:	4770      	bx	lr
