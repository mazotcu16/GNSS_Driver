
GNSS_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091dc  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080094a8  080094a8  0000a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080094e8  080094e8  0000a4e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080094f0  080094f0  0000a4f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080094f4  080094f4  0000a4f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  080094f8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b34  24000010  08009508  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b44  08009508  0000bb44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00012641  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025e5  00000000  00000000  0001d67f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000be0  00000000  00000000  0001fc68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000917  00000000  00000000  00020848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031984  00000000  00000000  0002115f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00012369  00000000  00000000  00052ae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fb88  00000000  00000000  00064e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a49d4  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00003034  00000000  00000000  001a4a18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001a7a4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08009490 	.word	0x08009490

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08009490 	.word	0x08009490

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <GNSS_Tanimla>:
#include "SysTick_Timer.h"
U_Blox_frame_high_layer U_Blox_frame_tx;
U_Blox_frame_high_layer U_Blox_frame_rx;
int b = 0;
static uint32_t zaman;
void GNSS_Tanimla(GNSS *GNSS_t) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	U_Blox_Init();
 8000604:	f000 f910 	bl	8000828 <U_Blox_Init>
	//U_Blox_Set_Frame(&U_Blox_frame_tx);
	//U_Blox_Send_Frame();
	//while(!U_Blox_Is_Packet_Ready());
	 *
	 */
	GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2201      	movs	r2, #1
 800060c:	741a      	strb	r2, [r3, #16]
	GNSS_t->onceki_durum = SM_GNSS_IDLE;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	745a      	strb	r2, [r3, #17]
	zaman = SystickGetMs();
 8000614:	f000 fdfe 	bl	8001214 <SystickGetMs>
 8000618:	4603      	mov	r3, r0
 800061a:	4a03      	ldr	r2, [pc, #12]	@ (8000628 <GNSS_Tanimla+0x2c>)
 800061c:	6013      	str	r3, [r2, #0]
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	2400041c 	.word	0x2400041c

0800062c <GNSS_Gorev>:
	} else {
		return 0;
	}
}

void GNSS_Gorev(GNSS *GNSS_t) {
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	U_Blox_Task();
 8000634:	f000 f910 	bl	8000858 <U_Blox_Task>
	switch (GNSS_t->SM) {
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	7c1b      	ldrb	r3, [r3, #16]
 800063c:	2b03      	cmp	r3, #3
 800063e:	f200 80e9 	bhi.w	8000814 <GNSS_Gorev+0x1e8>
 8000642:	a201      	add	r2, pc, #4	@ (adr r2, 8000648 <GNSS_Gorev+0x1c>)
 8000644:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000648:	08000659 	.word	0x08000659
 800064c:	08000707 	.word	0x08000707
 8000650:	080006eb 	.word	0x080006eb
 8000654:	080007df 	.word	0x080007df
	case SM_GNSS_IDLE:
		U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 8000658:	4b70      	ldr	r3, [pc, #448]	@ (800081c <GNSS_Gorev+0x1f0>)
 800065a:	2206      	movs	r2, #6
 800065c:	701a      	strb	r2, [r3, #0]
		U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 800065e:	4b6f      	ldr	r3, [pc, #444]	@ (800081c <GNSS_Gorev+0x1f0>)
 8000660:	2200      	movs	r2, #0
 8000662:	705a      	strb	r2, [r3, #1]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000664:	4a6d      	ldr	r2, [pc, #436]	@ (800081c <GNSS_Gorev+0x1f0>)
 8000666:	7d13      	ldrb	r3, [r2, #20]
 8000668:	f36f 0341 	bfc	r3, #1, #1
 800066c:	7513      	strb	r3, [r2, #20]
				0;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 800066e:	4a6b      	ldr	r2, [pc, #428]	@ (800081c <GNSS_Gorev+0x1f0>)
 8000670:	7a13      	ldrb	r3, [r2, #8]
 8000672:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000676:	7213      	strb	r3, [r2, #8]
				3;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 8000678:	4a68      	ldr	r2, [pc, #416]	@ (800081c <GNSS_Gorev+0x1f0>)
 800067a:	7a13      	ldrb	r3, [r2, #8]
 800067c:	2110      	movs	r1, #16
 800067e:	f361 0305 	bfi	r3, r1, #0, #6
 8000682:	7213      	strb	r3, [r2, #8]
				16;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000684:	4a65      	ldr	r2, [pc, #404]	@ (800081c <GNSS_Gorev+0x1f0>)
 8000686:	7a53      	ldrb	r3, [r2, #9]
 8000688:	f36f 1305 	bfc	r3, #4, #2
 800068c:	7253      	strb	r3, [r2, #9]
				0;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 800068e:	4a63      	ldr	r2, [pc, #396]	@ (800081c <GNSS_Gorev+0x1f0>)
 8000690:	7a53      	ldrb	r3, [r2, #9]
 8000692:	2104      	movs	r1, #4
 8000694:	f361 0343 	bfi	r3, r1, #1, #3
 8000698:	7253      	strb	r3, [r2, #9]
				4;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 800069a:	4b60      	ldr	r3, [pc, #384]	@ (800081c <GNSS_Gorev+0x1f0>)
 800069c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80006a0:	60da      	str	r2, [r3, #12]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 80006a2:	4b5e      	ldr	r3, [pc, #376]	@ (800081c <GNSS_Gorev+0x1f0>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	80da      	strh	r2, [r3, #6]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 80006a8:	4a5c      	ldr	r2, [pc, #368]	@ (800081c <GNSS_Gorev+0x1f0>)
 80006aa:	7c13      	ldrb	r3, [r2, #16]
 80006ac:	f043 0301 	orr.w	r3, r3, #1
 80006b0:	7413      	strb	r3, [r2, #16]
				1;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 80006b2:	4a5a      	ldr	r2, [pc, #360]	@ (800081c <GNSS_Gorev+0x1f0>)
 80006b4:	7c93      	ldrb	r3, [r2, #18]
 80006b6:	f043 0301 	orr.w	r3, r3, #1
 80006ba:	7493      	strb	r3, [r2, #18]
				1;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 80006bc:	4b57      	ldr	r3, [pc, #348]	@ (800081c <GNSS_Gorev+0x1f0>)
 80006be:	2201      	movs	r2, #1
 80006c0:	711a      	strb	r2, [r3, #4]
		U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 80006c2:	4b56      	ldr	r3, [pc, #344]	@ (800081c <GNSS_Gorev+0x1f0>)
 80006c4:	2214      	movs	r2, #20
 80006c6:	805a      	strh	r2, [r3, #2]
		U_Blox_Set_Frame(&U_Blox_frame_tx);
 80006c8:	4854      	ldr	r0, [pc, #336]	@ (800081c <GNSS_Gorev+0x1f0>)
 80006ca:	f000 f943 	bl	8000954 <U_Blox_Set_Frame>
		U_Blox_Send_Frame();
 80006ce:	f000 f97f 	bl	80009d0 <U_Blox_Send_Frame>
		static uint32_t zamanlama;
		zamanlama = SystickGetMs();
 80006d2:	f000 fd9f 	bl	8001214 <SystickGetMs>
 80006d6:	4603      	mov	r3, r0
 80006d8:	4a51      	ldr	r2, [pc, #324]	@ (8000820 <GNSS_Gorev+0x1f4>)
 80006da:	6013      	str	r3, [r2, #0]
		GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	2201      	movs	r2, #1
 80006e0:	741a      	strb	r2, [r3, #16]
		GNSS_t->onceki_durum = SM_GNSS_IDLE;
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	2200      	movs	r2, #0
 80006e6:	745a      	strb	r2, [r3, #17]
		break;
 80006e8:	e094      	b.n	8000814 <GNSS_Gorev+0x1e8>
	case SM_GNSS_NO_REPLY:

		GNSS_t->İstatistikler_t.veri_gelmedi++;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	1c5a      	adds	r2, r3, #1
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	615a      	str	r2, [r3, #20]
		GNSS_t->SM = SM_GNSS_IDLE;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	2200      	movs	r2, #0
 80006f8:	741a      	strb	r2, [r3, #16]
		zamanlama = SystickGetMs();
 80006fa:	f000 fd8b 	bl	8001214 <SystickGetMs>
 80006fe:	4603      	mov	r3, r0
 8000700:	4a47      	ldr	r2, [pc, #284]	@ (8000820 <GNSS_Gorev+0x1f4>)
 8000702:	6013      	str	r3, [r2, #0]
		break;
 8000704:	e086      	b.n	8000814 <GNSS_Gorev+0x1e8>
	case SM_GNSS_WAIT_FOR_REPLY:

		if (GNSS_t->onceki_durum == SM_GNSS_IDLE) {
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	7c5b      	ldrb	r3, [r3, #17]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d121      	bne.n	8000752 <GNSS_Gorev+0x126>
			if (U_Blox_Is_Packet_Ready()) {
 800070e:	f000 f9ab 	bl	8000a68 <U_Blox_Is_Packet_Ready>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d00e      	beq.n	8000736 <GNSS_Gorev+0x10a>
				U_Blox_Get_Package(&U_Blox_frame_rx);
 8000718:	4842      	ldr	r0, [pc, #264]	@ (8000824 <GNSS_Gorev+0x1f8>)
 800071a:	f000 f9c7 	bl	8000aac <U_Blox_Get_Package>
				if ((U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_ACK)
 800071e:	4b41      	ldr	r3, [pc, #260]	@ (8000824 <GNSS_Gorev+0x1f8>)
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	2b05      	cmp	r3, #5
 8000724:	d175      	bne.n	8000812 <GNSS_Gorev+0x1e6>
						&& (U_Blox_frame_rx.message_id == UBX_MESSAGE_ID_ACK)) {
 8000726:	4b3f      	ldr	r3, [pc, #252]	@ (8000824 <GNSS_Gorev+0x1f8>)
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	2b01      	cmp	r3, #1
 800072c:	d171      	bne.n	8000812 <GNSS_Gorev+0x1e6>
					//Acknowledgement alındı.
					GNSS_t->SM = SM_GNSS_SEND;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	2203      	movs	r2, #3
 8000732:	741a      	strb	r2, [r3, #16]
				}
			} else if (SystickCheckMs(zamanlama, 1500)) {
				GNSS_t->SM = SM_GNSS_NO_REPLY;
			}
		}
		break;
 8000734:	e06d      	b.n	8000812 <GNSS_Gorev+0x1e6>
			} else if (SystickCheckMs(zamanlama, 1500)) {
 8000736:	4b3a      	ldr	r3, [pc, #232]	@ (8000820 <GNSS_Gorev+0x1f4>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 800073e:	4618      	mov	r0, r3
 8000740:	f000 fd74 	bl	800122c <SystickCheckMs>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d063      	beq.n	8000812 <GNSS_Gorev+0x1e6>
				GNSS_t->SM = SM_GNSS_NO_REPLY;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2202      	movs	r2, #2
 800074e:	741a      	strb	r2, [r3, #16]
		break;
 8000750:	e05f      	b.n	8000812 <GNSS_Gorev+0x1e6>
		} else if (GNSS_t->onceki_durum == SM_GNSS_SEND) {
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	7c5b      	ldrb	r3, [r3, #17]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d15b      	bne.n	8000812 <GNSS_Gorev+0x1e6>
			if (U_Blox_Is_Packet_Ready()) {
 800075a:	f000 f985 	bl	8000a68 <U_Blox_Is_Packet_Ready>
 800075e:	4603      	mov	r3, r0
 8000760:	2b00      	cmp	r3, #0
 8000762:	d02e      	beq.n	80007c2 <GNSS_Gorev+0x196>
				U_Blox_Get_Package(&U_Blox_frame_rx);
 8000764:	482f      	ldr	r0, [pc, #188]	@ (8000824 <GNSS_Gorev+0x1f8>)
 8000766:	f000 f9a1 	bl	8000aac <U_Blox_Get_Package>
				if ((U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_NAV)
 800076a:	4b2e      	ldr	r3, [pc, #184]	@ (8000824 <GNSS_Gorev+0x1f8>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b01      	cmp	r3, #1
 8000770:	d14f      	bne.n	8000812 <GNSS_Gorev+0x1e6>
						&& (U_Blox_frame_rx.message_id == UBX_MESSAGE_ID_PVT)) {
 8000772:	4b2c      	ldr	r3, [pc, #176]	@ (8000824 <GNSS_Gorev+0x1f8>)
 8000774:	785b      	ldrb	r3, [r3, #1]
 8000776:	2b07      	cmp	r3, #7
 8000778:	d14b      	bne.n	8000812 <GNSS_Gorev+0x1e6>
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.month;
 800077a:	4b2a      	ldr	r3, [pc, #168]	@ (8000824 <GNSS_Gorev+0x1f8>)
 800077c:	7a9a      	ldrb	r2, [r3, #10]
					GNSS_t->ay =
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	709a      	strb	r2, [r3, #2]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lon;
 8000782:	4b28      	ldr	r3, [pc, #160]	@ (8000824 <GNSS_Gorev+0x1f8>)
 8000784:	69da      	ldr	r2, [r3, #28]
					GNSS_t->boylam =
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	609a      	str	r2, [r3, #8]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lat;
 800078a:	4b26      	ldr	r3, [pc, #152]	@ (8000824 <GNSS_Gorev+0x1f8>)
 800078c:	6a1a      	ldr	r2, [r3, #32]
					GNSS_t->enlem =
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	60da      	str	r2, [r3, #12]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.day;
 8000792:	4b24      	ldr	r3, [pc, #144]	@ (8000824 <GNSS_Gorev+0x1f8>)
 8000794:	7ada      	ldrb	r2, [r3, #11]
					GNSS_t->gun =
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	70da      	strb	r2, [r3, #3]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.min;
 800079a:	4b22      	ldr	r3, [pc, #136]	@ (8000824 <GNSS_Gorev+0x1f8>)
 800079c:	7b5a      	ldrb	r2, [r3, #13]
					GNSS_t->dakika =
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	715a      	strb	r2, [r3, #5]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.year;
 80007a2:	4b20      	ldr	r3, [pc, #128]	@ (8000824 <GNSS_Gorev+0x1f8>)
 80007a4:	891a      	ldrh	r2, [r3, #8]
					GNSS_t->yil =
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	801a      	strh	r2, [r3, #0]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.sec;
 80007aa:	4b1e      	ldr	r3, [pc, #120]	@ (8000824 <GNSS_Gorev+0x1f8>)
 80007ac:	7b9a      	ldrb	r2, [r3, #14]
					GNSS_t->saniye =
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	719a      	strb	r2, [r3, #6]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.hour;
 80007b2:	4b1c      	ldr	r3, [pc, #112]	@ (8000824 <GNSS_Gorev+0x1f8>)
 80007b4:	7b1a      	ldrb	r2, [r3, #12]
					GNSS_t->saat =
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	711a      	strb	r2, [r3, #4]
					GNSS_t->SM = SM_GNSS_SEND;
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	2203      	movs	r2, #3
 80007be:	741a      	strb	r2, [r3, #16]
		break;
 80007c0:	e027      	b.n	8000812 <GNSS_Gorev+0x1e6>
			} else if (SystickCheckMs(zamanlama, 1500)) {
 80007c2:	4b17      	ldr	r3, [pc, #92]	@ (8000820 <GNSS_Gorev+0x1f4>)
 80007c4:	681b      	ldr	r3, [r3, #0]
 80007c6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fd2e 	bl	800122c <SystickCheckMs>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d01d      	beq.n	8000812 <GNSS_Gorev+0x1e6>
				GNSS_t->SM = SM_GNSS_NO_REPLY;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2202      	movs	r2, #2
 80007da:	741a      	strb	r2, [r3, #16]
		break;
 80007dc:	e019      	b.n	8000812 <GNSS_Gorev+0x1e6>
	case SM_GNSS_SEND:
		GNSS_t->onceki_durum = SM_GNSS_SEND;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2203      	movs	r2, #3
 80007e2:	745a      	strb	r2, [r3, #17]
		U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_NAV;
 80007e4:	4b0d      	ldr	r3, [pc, #52]	@ (800081c <GNSS_Gorev+0x1f0>)
 80007e6:	2201      	movs	r2, #1
 80007e8:	701a      	strb	r2, [r3, #0]
		U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PVT;
 80007ea:	4b0c      	ldr	r3, [pc, #48]	@ (800081c <GNSS_Gorev+0x1f0>)
 80007ec:	2207      	movs	r2, #7
 80007ee:	705a      	strb	r2, [r3, #1]
		U_Blox_frame_tx.length = 0;
 80007f0:	4b0a      	ldr	r3, [pc, #40]	@ (800081c <GNSS_Gorev+0x1f0>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	805a      	strh	r2, [r3, #2]
		U_Blox_Set_Frame(&U_Blox_frame_tx);
 80007f6:	4809      	ldr	r0, [pc, #36]	@ (800081c <GNSS_Gorev+0x1f0>)
 80007f8:	f000 f8ac 	bl	8000954 <U_Blox_Set_Frame>
		U_Blox_Send_Frame();
 80007fc:	f000 f8e8 	bl	80009d0 <U_Blox_Send_Frame>
		GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2201      	movs	r2, #1
 8000804:	741a      	strb	r2, [r3, #16]
		zamanlama = SystickGetMs();
 8000806:	f000 fd05 	bl	8001214 <SystickGetMs>
 800080a:	4603      	mov	r3, r0
 800080c:	4a04      	ldr	r2, [pc, #16]	@ (8000820 <GNSS_Gorev+0x1f4>)
 800080e:	6013      	str	r3, [r2, #0]
		break;
 8000810:	e000      	b.n	8000814 <GNSS_Gorev+0x1e8>
		break;
 8000812:	bf00      	nop
	}
}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	2400002c 	.word	0x2400002c
 8000820:	24000420 	.word	0x24000420
 8000824:	24000224 	.word	0x24000224

08000828 <U_Blox_Init>:
	} Sm;
	uint8_t Buffer[500];
	uint16_t buffer_index;
} U_Blox_Tx;

void U_Blox_Init() {
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
	U_Blox_Rx.Sm = SM_RX_IDLE;
 800082c:	4b06      	ldr	r3, [pc, #24]	@ (8000848 <U_Blox_Init+0x20>)
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]
	U_Blox_Tx.Sm = SM_TX_IDLE;
 8000832:	4b06      	ldr	r3, [pc, #24]	@ (800084c <U_Blox_Init+0x24>)
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 8000838:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800083c:	4904      	ldr	r1, [pc, #16]	@ (8000850 <U_Blox_Init+0x28>)
 800083e:	4805      	ldr	r0, [pc, #20]	@ (8000854 <U_Blox_Init+0x2c>)
 8000840:	f006 fd66 	bl	8007310 <HAL_UART_Receive_DMA>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	24000620 	.word	0x24000620
 800084c:	24000818 	.word	0x24000818
 8000850:	24000621 	.word	0x24000621
 8000854:	24000a10 	.word	0x24000a10

08000858 <U_Blox_Task>:
void U_Blox_Task() {
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t;
	switch (U_Blox_Tx.Sm) {
 800085e:	4b38      	ldr	r3, [pc, #224]	@ (8000940 <U_Blox_Task+0xe8>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b02      	cmp	r3, #2
 8000864:	d005      	beq.n	8000872 <U_Blox_Task+0x1a>
 8000866:	2b02      	cmp	r3, #2
 8000868:	dc27      	bgt.n	80008ba <U_Blox_Task+0x62>
 800086a:	2b00      	cmp	r3, #0
 800086c:	d022      	beq.n	80008b4 <U_Blox_Task+0x5c>
 800086e:	2b01      	cmp	r3, #1
	case SM_TX_IDLE:
		break;
	case SM_TX_PREPARE:
		break;
 8000870:	e023      	b.n	80008ba <U_Blox_Task+0x62>
	case SM_TX_SEND:
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Tx.Buffer;
 8000872:	4b34      	ldr	r3, [pc, #208]	@ (8000944 <U_Blox_Task+0xec>)
 8000874:	607b      	str	r3, [r7, #4]
		while (U_Blox_Tx.buffer_index < U_Blox_frame_low_layer_t->length + 8) {
 8000876:	e009      	b.n	800088c <U_Blox_Task+0x34>
			U_Blox_Send_Data(U_Blox_Tx.Buffer[U_Blox_Tx.buffer_index]);
 8000878:	4b31      	ldr	r3, [pc, #196]	@ (8000940 <U_Blox_Task+0xe8>)
 800087a:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 800087e:	461a      	mov	r2, r3
 8000880:	4b2f      	ldr	r3, [pc, #188]	@ (8000940 <U_Blox_Task+0xe8>)
 8000882:	4413      	add	r3, r2
 8000884:	785b      	ldrb	r3, [r3, #1]
 8000886:	4618      	mov	r0, r3
 8000888:	f000 f8fe 	bl	8000a88 <U_Blox_Send_Data>
		while (U_Blox_Tx.buffer_index < U_Blox_frame_low_layer_t->length + 8) {
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	889b      	ldrh	r3, [r3, #4]
 8000890:	3307      	adds	r3, #7
 8000892:	4a2b      	ldr	r2, [pc, #172]	@ (8000940 <U_Blox_Task+0xe8>)
 8000894:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 8000898:	4293      	cmp	r3, r2
 800089a:	daed      	bge.n	8000878 <U_Blox_Task+0x20>
		}
		if (U_Blox_Tx.buffer_index >= U_Blox_frame_low_layer_t->length + 8) {
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	889b      	ldrh	r3, [r3, #4]
 80008a0:	3307      	adds	r3, #7
 80008a2:	4a27      	ldr	r2, [pc, #156]	@ (8000940 <U_Blox_Task+0xe8>)
 80008a4:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 80008a8:	4293      	cmp	r3, r2
 80008aa:	da05      	bge.n	80008b8 <U_Blox_Task+0x60>
			U_Blox_Tx.Sm = SM_TX_IDLE;
 80008ac:	4b24      	ldr	r3, [pc, #144]	@ (8000940 <U_Blox_Task+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
		}
		break;
 80008b2:	e001      	b.n	80008b8 <U_Blox_Task+0x60>
		break;
 80008b4:	bf00      	nop
 80008b6:	e000      	b.n	80008ba <U_Blox_Task+0x62>
		break;
 80008b8:	bf00      	nop
	}
	switch (U_Blox_Rx.Sm) {
 80008ba:	4b23      	ldr	r3, [pc, #140]	@ (8000948 <U_Blox_Task+0xf0>)
 80008bc:	781b      	ldrb	r3, [r3, #0]
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <U_Blox_Task+0x6e>
 80008c2:	2b01      	cmp	r3, #1
	//		}
	//	}
	//}
	break;
	case SM_RX_PROCESS:
	break;
 80008c4:	e037      	b.n	8000936 <U_Blox_Task+0xde>
		U_Blox_Rx.buffer_index = GetRxBufferIndex();
 80008c6:	f000 f93d 	bl	8000b44 <GetRxBufferIndex>
 80008ca:	4603      	mov	r3, r0
 80008cc:	461a      	mov	r2, r3
 80008ce:	4b1e      	ldr	r3, [pc, #120]	@ (8000948 <U_Blox_Task+0xf0>)
 80008d0:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) &U_Blox_Rx.Buffer;
 80008d4:	4b1d      	ldr	r3, [pc, #116]	@ (800094c <U_Blox_Task+0xf4>)
 80008d6:	607b      	str	r3, [r7, #4]
		if ((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	2bb5      	cmp	r3, #181	@ 0xb5
 80008de:	d129      	bne.n	8000934 <U_Blox_Task+0xdc>
				&& (U_Blox_frame_low_layer_t->sync_char_2 == 0x62)) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	785b      	ldrb	r3, [r3, #1]
 80008e4:	2b62      	cmp	r3, #98	@ 0x62
 80008e6:	d125      	bne.n	8000934 <U_Blox_Task+0xdc>
			if (U_Blox_Rx.buffer_index >= 5) {
 80008e8:	4b17      	ldr	r3, [pc, #92]	@ (8000948 <U_Blox_Task+0xf0>)
 80008ea:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 80008ee:	2b04      	cmp	r3, #4
 80008f0:	d920      	bls.n	8000934 <U_Blox_Task+0xdc>
						>= U_Blox_frame_low_layer_t->length + 7) {
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	889b      	ldrh	r3, [r3, #4]
 80008f6:	3306      	adds	r3, #6
				if (U_Blox_Rx.buffer_index
 80008f8:	4a13      	ldr	r2, [pc, #76]	@ (8000948 <U_Blox_Task+0xf0>)
 80008fa:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 80008fe:	4293      	cmp	r3, r2
 8000900:	da18      	bge.n	8000934 <U_Blox_Task+0xdc>
							+ U_Blox_frame_low_layer_t->length])
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	889b      	ldrh	r3, [r3, #4]
 8000906:	3306      	adds	r3, #6
					if ((*(uint16_t*) &U_Blox_Rx.Buffer[6
 8000908:	4a0f      	ldr	r2, [pc, #60]	@ (8000948 <U_Blox_Task+0xf0>)
 800090a:	4413      	add	r3, r2
 800090c:	3301      	adds	r3, #1
 800090e:	881c      	ldrh	r4, [r3, #0]
							== U_Blox_Calculate_Checksum(
 8000910:	6878      	ldr	r0, [r7, #4]
 8000912:	f000 f877 	bl	8000a04 <U_Blox_Calculate_Checksum>
 8000916:	4603      	mov	r3, r0
					if ((*(uint16_t*) &U_Blox_Rx.Buffer[6
 8000918:	429c      	cmp	r4, r3
 800091a:	d10b      	bne.n	8000934 <U_Blox_Task+0xdc>
						HAL_UART_DMAStop(&huart3);
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <U_Blox_Task+0xf8>)
 800091e:	f006 fd43 	bl	80073a8 <HAL_UART_DMAStop>
						HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 8000922:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000926:	4909      	ldr	r1, [pc, #36]	@ (800094c <U_Blox_Task+0xf4>)
 8000928:	4809      	ldr	r0, [pc, #36]	@ (8000950 <U_Blox_Task+0xf8>)
 800092a:	f006 fcf1 	bl	8007310 <HAL_UART_Receive_DMA>
						U_Blox_Rx.Sm = SM_RX_PROCESS;
 800092e:	4b06      	ldr	r3, [pc, #24]	@ (8000948 <U_Blox_Task+0xf0>)
 8000930:	2201      	movs	r2, #1
 8000932:	701a      	strb	r2, [r3, #0]
	break;
 8000934:	bf00      	nop
}
}
 8000936:	bf00      	nop
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	bf00      	nop
 8000940:	24000818 	.word	0x24000818
 8000944:	24000819 	.word	0x24000819
 8000948:	24000620 	.word	0x24000620
 800094c:	24000621 	.word	0x24000621
 8000950:	24000a10 	.word	0x24000a10

08000954 <U_Blox_Set_Frame>:

void U_Blox_Set_Frame(U_Blox_frame_high_layer *U_blox_Frame) {
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
U_Blox_frame_low_layer_transmit.sync_char_1 = 0xB5;
 800095c:	4b19      	ldr	r3, [pc, #100]	@ (80009c4 <U_Blox_Set_Frame+0x70>)
 800095e:	22b5      	movs	r2, #181	@ 0xb5
 8000960:	701a      	strb	r2, [r3, #0]
U_Blox_frame_low_layer_transmit.sync_char_2 = 0x62;
 8000962:	4b18      	ldr	r3, [pc, #96]	@ (80009c4 <U_Blox_Set_Frame+0x70>)
 8000964:	2262      	movs	r2, #98	@ 0x62
 8000966:	705a      	strb	r2, [r3, #1]
U_Blox_frame_low_layer_transmit.length = U_blox_Frame->length;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	885a      	ldrh	r2, [r3, #2]
 800096c:	4b15      	ldr	r3, [pc, #84]	@ (80009c4 <U_Blox_Set_Frame+0x70>)
 800096e:	809a      	strh	r2, [r3, #4]
U_Blox_frame_low_layer_transmit.message_class = U_blox_Frame->message_class;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	781a      	ldrb	r2, [r3, #0]
 8000974:	4b13      	ldr	r3, [pc, #76]	@ (80009c4 <U_Blox_Set_Frame+0x70>)
 8000976:	709a      	strb	r2, [r3, #2]
U_Blox_frame_low_layer_transmit.message_id = U_blox_Frame->message_id;
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	785a      	ldrb	r2, [r3, #1]
 800097c:	4b11      	ldr	r3, [pc, #68]	@ (80009c4 <U_Blox_Set_Frame+0x70>)
 800097e:	70da      	strb	r2, [r3, #3]
memcpy(&U_Blox_frame_low_layer_transmit.payload, U_blox_Frame->payload.data,
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	1d19      	adds	r1, r3, #4
		U_blox_Frame->length);
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	885b      	ldrh	r3, [r3, #2]
memcpy(&U_Blox_frame_low_layer_transmit.payload, U_blox_Frame->payload.data,
 8000988:	461a      	mov	r2, r3
 800098a:	480f      	ldr	r0, [pc, #60]	@ (80009c8 <U_Blox_Set_Frame+0x74>)
 800098c:	f008 fd72 	bl	8009474 <memcpy>
(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000990:	4b0c      	ldr	r3, [pc, #48]	@ (80009c4 <U_Blox_Set_Frame+0x70>)
 8000992:	889b      	ldrh	r3, [r3, #4]
 8000994:	461a      	mov	r2, r3
 8000996:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <U_Blox_Set_Frame+0x70>)
 8000998:	4413      	add	r3, r2
 800099a:	1d9c      	adds	r4, r3, #6
		U_Blox_Calculate_Checksum(&U_Blox_frame_low_layer_transmit);
 800099c:	4809      	ldr	r0, [pc, #36]	@ (80009c4 <U_Blox_Set_Frame+0x70>)
 800099e:	f000 f831 	bl	8000a04 <U_Blox_Calculate_Checksum>
 80009a2:	4603      	mov	r3, r0
(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 80009a4:	8023      	strh	r3, [r4, #0]
memset(&U_blox_Frame->payload, 0, 500);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	3304      	adds	r3, #4
 80009aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009ae:	2100      	movs	r1, #0
 80009b0:	4618      	mov	r0, r3
 80009b2:	f008 fd33 	bl	800941c <memset>
U_Blox_Tx.Sm = SM_TX_PREPARE;
 80009b6:	4b05      	ldr	r3, [pc, #20]	@ (80009cc <U_Blox_Set_Frame+0x78>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd90      	pop	{r4, r7, pc}
 80009c4:	24000424 	.word	0x24000424
 80009c8:	2400042a 	.word	0x2400042a
 80009cc:	24000818 	.word	0x24000818

080009d0 <U_Blox_Send_Frame>:
uint8_t U_Blox_Send_Frame() {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
//paket hazır mı kontrolu gerek
HAL_UART_Transmit(&huart3,
 80009d4:	2364      	movs	r3, #100	@ 0x64
 80009d6:	2206      	movs	r2, #6
 80009d8:	4907      	ldr	r1, [pc, #28]	@ (80009f8 <U_Blox_Send_Frame+0x28>)
 80009da:	4808      	ldr	r0, [pc, #32]	@ (80009fc <U_Blox_Send_Frame+0x2c>)
 80009dc:	f006 fc0a 	bl	80071f4 <HAL_UART_Transmit>
		(uint8_t*) &U_Blox_frame_low_layer_transmit.sync_char_1, 6, 100);
HAL_UART_Transmit(&huart3, (uint8_t*) &U_Blox_frame_low_layer_transmit.payload,
		U_Blox_frame_low_layer_transmit.length + 2, 100);
 80009e0:	4b05      	ldr	r3, [pc, #20]	@ (80009f8 <U_Blox_Send_Frame+0x28>)
 80009e2:	889b      	ldrh	r3, [r3, #4]
HAL_UART_Transmit(&huart3, (uint8_t*) &U_Blox_frame_low_layer_transmit.payload,
 80009e4:	3302      	adds	r3, #2
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	2364      	movs	r3, #100	@ 0x64
 80009ea:	4905      	ldr	r1, [pc, #20]	@ (8000a00 <U_Blox_Send_Frame+0x30>)
 80009ec:	4803      	ldr	r0, [pc, #12]	@ (80009fc <U_Blox_Send_Frame+0x2c>)
 80009ee:	f006 fc01 	bl	80071f4 <HAL_UART_Transmit>
return 1;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	24000424 	.word	0x24000424
 80009fc:	24000a10 	.word	0x24000a10
 8000a00:	2400042a 	.word	0x2400042a

08000a04 <U_Blox_Calculate_Checksum>:
uint16_t U_Blox_Calculate_Checksum(U_Blox_frame_low_layer *U_blox_Frame) {
 8000a04:	b480      	push	{r7}
 8000a06:	b087      	sub	sp, #28
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
uint8_t ck_a = 0;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	75fb      	strb	r3, [r7, #23]
uint8_t ck_b = 0;
 8000a10:	2300      	movs	r3, #0
 8000a12:	75bb      	strb	r3, [r7, #22]
uint8_t *data = (uint8_t*) &U_blox_Frame->message_class;
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	3302      	adds	r3, #2
 8000a18:	613b      	str	r3, [r7, #16]
for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	e00e      	b.n	8000a3e <U_Blox_Calculate_Checksum+0x3a>
	ck_a = ck_a + *data;
 8000a20:	693b      	ldr	r3, [r7, #16]
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	4413      	add	r3, r2
 8000a28:	75fb      	strb	r3, [r7, #23]
	ck_b = ck_b + ck_a;
 8000a2a:	7dba      	ldrb	r2, [r7, #22]
 8000a2c:	7dfb      	ldrb	r3, [r7, #23]
 8000a2e:	4413      	add	r3, r2
 8000a30:	75bb      	strb	r3, [r7, #22]
	data++;
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	3301      	adds	r3, #1
 8000a36:	613b      	str	r3, [r7, #16]
for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	60fb      	str	r3, [r7, #12]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	889b      	ldrh	r3, [r3, #4]
 8000a42:	3303      	adds	r3, #3
 8000a44:	68fa      	ldr	r2, [r7, #12]
 8000a46:	429a      	cmp	r2, r3
 8000a48:	ddea      	ble.n	8000a20 <U_Blox_Calculate_Checksum+0x1c>
}
return (uint16_t) (ck_a + (uint16_t) ((uint16_t) ck_b << 8));
 8000a4a:	7dfb      	ldrb	r3, [r7, #23]
 8000a4c:	b29a      	uxth	r2, r3
 8000a4e:	7dbb      	ldrb	r3, [r7, #22]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	021b      	lsls	r3, r3, #8
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	4413      	add	r3, r2
 8000a58:	b29b      	uxth	r3, r3
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	371c      	adds	r7, #28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr
	...

08000a68 <U_Blox_Is_Packet_Ready>:
}
U_Blox_Rx.Buffer[U_Blox_Rx.buffer_index] = data;
U_Blox_Rx.buffer_index++;
}

uint8_t U_Blox_Is_Packet_Ready() {
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
return (U_Blox_Rx.Sm == SM_RX_PROCESS);
 8000a6c:	4b05      	ldr	r3, [pc, #20]	@ (8000a84 <U_Blox_Is_Packet_Ready+0x1c>)
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	2b01      	cmp	r3, #1
 8000a72:	bf0c      	ite	eq
 8000a74:	2301      	moveq	r3, #1
 8000a76:	2300      	movne	r3, #0
 8000a78:	b2db      	uxtb	r3, r3
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	24000620 	.word	0x24000620

08000a88 <U_Blox_Send_Data>:
if (U_Blox_Tx.Sm == SM_TX_PREPARE) {
	U_Blox_Tx.buffer_index = 0;
	U_Blox_Tx.Sm = SM_TX_SEND;
}
}
void U_Blox_Send_Data(uint8_t data) {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
HAL_UART_Transmit(&huart3, &data, 1, 10);
 8000a92:	1df9      	adds	r1, r7, #7
 8000a94:	230a      	movs	r3, #10
 8000a96:	2201      	movs	r2, #1
 8000a98:	4803      	ldr	r0, [pc, #12]	@ (8000aa8 <U_Blox_Send_Data+0x20>)
 8000a9a:	f006 fbab 	bl	80071f4 <HAL_UART_Transmit>
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	24000a10 	.word	0x24000a10

08000aac <U_Blox_Get_Package>:
void U_Blox_Get_Package(U_Blox_frame_high_layer *U_Blox_frame_high_layer_t) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
U_Blox_frame_low_layer *U_Blox_frame_low_layer_t =
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <U_Blox_Get_Package+0x6c>)
 8000ab6:	60bb      	str	r3, [r7, #8]
		(U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;

U_Blox_frame_high_layer_t->length = U_Blox_frame_low_layer_t->length;
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	889a      	ldrh	r2, [r3, #4]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	805a      	strh	r2, [r3, #2]
U_Blox_frame_high_layer_t->message_class =
		U_Blox_frame_low_layer_t->message_class;
 8000ac0:	68bb      	ldr	r3, [r7, #8]
 8000ac2:	789a      	ldrb	r2, [r3, #2]
U_Blox_frame_high_layer_t->message_class =
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	701a      	strb	r2, [r3, #0]
U_Blox_frame_high_layer_t->message_id = U_Blox_frame_low_layer_t->message_id;
 8000ac8:	68bb      	ldr	r3, [r7, #8]
 8000aca:	78da      	ldrb	r2, [r3, #3]
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	705a      	strb	r2, [r3, #1]
for (int i = 0; i < 500; i++) {
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	e00d      	b.n	8000af2 <U_Blox_Get_Package+0x46>
	U_Blox_frame_high_layer_t->payload.data[i] =
			U_Blox_frame_low_layer_t->payload[i];
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	3306      	adds	r3, #6
 8000ade:	7819      	ldrb	r1, [r3, #0]
	U_Blox_frame_high_layer_t->payload.data[i] =
 8000ae0:	687a      	ldr	r2, [r7, #4]
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	4413      	add	r3, r2
 8000ae6:	3304      	adds	r3, #4
 8000ae8:	460a      	mov	r2, r1
 8000aea:	701a      	strb	r2, [r3, #0]
for (int i = 0; i < 500; i++) {
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	3301      	adds	r3, #1
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000af8:	dbed      	blt.n	8000ad6 <U_Blox_Get_Package+0x2a>
}
memset(U_Blox_Rx.Buffer, 0, 8 + U_Blox_frame_low_layer_t->length);
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	889b      	ldrh	r3, [r3, #4]
 8000afe:	3308      	adds	r3, #8
 8000b00:	461a      	mov	r2, r3
 8000b02:	2100      	movs	r1, #0
 8000b04:	4804      	ldr	r0, [pc, #16]	@ (8000b18 <U_Blox_Get_Package+0x6c>)
 8000b06:	f008 fc89 	bl	800941c <memset>
U_Blox_Rx.Sm = SM_RX_IDLE;
 8000b0a:	4b04      	ldr	r3, [pc, #16]	@ (8000b1c <U_Blox_Get_Package+0x70>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	701a      	strb	r2, [r3, #0]
}
 8000b10:	bf00      	nop
 8000b12:	3710      	adds	r7, #16
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	24000621 	.word	0x24000621
 8000b1c:	24000620 	.word	0x24000620

08000b20 <HAL_UART_RxCpltCallback>:
uint32_t index = 0;
while (size < 500) {
	U_Blox_Rx.Buffer[index++] = U_Blox_Rx.Buffer[size++];
}
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b082      	sub	sp, #8
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
/* Prevent unused argument(s) compilation warning */

HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 8000b28:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000b2c:	4903      	ldr	r1, [pc, #12]	@ (8000b3c <HAL_UART_RxCpltCallback+0x1c>)
 8000b2e:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <HAL_UART_RxCpltCallback+0x20>)
 8000b30:	f006 fbee 	bl	8007310 <HAL_UART_Receive_DMA>
/* NOTE : This function should not be modified, when the callback is needed,
 the HAL_UART_RxCpltCallback can be implemented in the user file.
 */
}
 8000b34:	bf00      	nop
 8000b36:	3708      	adds	r7, #8
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	24000621 	.word	0x24000621
 8000b40:	24000a10 	.word	0x24000a10

08000b44 <GetRxBufferIndex>:
uint16_t GetRxBufferIndex() {
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
int a = 0;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	607b      	str	r3, [r7, #4]
a = 499 - DMA1_Stream0->NDTR;
 8000b4e:	4b09      	ldr	r3, [pc, #36]	@ (8000b74 <GetRxBufferIndex+0x30>)
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000b56:	1a9b      	subs	r3, r3, r2
 8000b58:	607b      	str	r3, [r7, #4]
if (a < 0) {
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	da01      	bge.n	8000b64 <GetRxBufferIndex+0x20>
	return 0;
 8000b60:	2300      	movs	r3, #0
 8000b62:	e001      	b.n	8000b68 <GetRxBufferIndex+0x24>
} else {
	return a;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	b29b      	uxth	r3, r3
}
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr
 8000b74:	40020010 	.word	0x40020010

08000b78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000b7c:	f000 f970 	bl	8000e60 <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b80:	f000 fb7a 	bl	8001278 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b84:	f000 f828 	bl	8000bd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b88:	f000 f900 	bl	8000d8c <MX_GPIO_Init>
  MX_DMA_Init();
 8000b8c:	f000 f8de 	bl	8000d4c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000b90:	f000 f890 	bl	8000cb4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart3, &data,1);
  //HAL_UART_Receive_DMA(&huart3, uart_buffer, 500);
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 8000b94:	2201      	movs	r2, #1
 8000b96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000b9a:	480a      	ldr	r0, [pc, #40]	@ (8000bc4 <main+0x4c>)
 8000b9c:	f003 fd5e 	bl	800465c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,1);
 8000ba0:	2201      	movs	r2, #1
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4808      	ldr	r0, [pc, #32]	@ (8000bc8 <main+0x50>)
 8000ba6:	f003 fd59 	bl	800465c <HAL_GPIO_WritePin>
  GNSS_Tanimla(&GNSS_t);
 8000baa:	4808      	ldr	r0, [pc, #32]	@ (8000bcc <main+0x54>)
 8000bac:	f7ff fd26 	bl	80005fc <GNSS_Tanimla>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    GNSS_Gorev(&GNSS_t);
 8000bb0:	4806      	ldr	r0, [pc, #24]	@ (8000bcc <main+0x54>)
 8000bb2:	f7ff fd3b 	bl	800062c <GNSS_Gorev>
	    a=DMA1_Stream0->NDTR;
 8000bb6:	4b06      	ldr	r3, [pc, #24]	@ (8000bd0 <main+0x58>)
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	461a      	mov	r2, r3
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <main+0x5c>)
 8000bbe:	601a      	str	r2, [r3, #0]
	    GNSS_Gorev(&GNSS_t);
 8000bc0:	bf00      	nop
 8000bc2:	e7f5      	b.n	8000bb0 <main+0x38>
 8000bc4:	58020400 	.word	0x58020400
 8000bc8:	58021000 	.word	0x58021000
 8000bcc:	24000b1c 	.word	0x24000b1c
 8000bd0:	40020010 	.word	0x40020010
 8000bd4:	24000b38 	.word	0x24000b38

08000bd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b09c      	sub	sp, #112	@ 0x70
 8000bdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000be2:	224c      	movs	r2, #76	@ 0x4c
 8000be4:	2100      	movs	r1, #0
 8000be6:	4618      	mov	r0, r3
 8000be8:	f008 fc18 	bl	800941c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bec:	1d3b      	adds	r3, r7, #4
 8000bee:	2220      	movs	r2, #32
 8000bf0:	2100      	movs	r1, #0
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f008 fc12 	bl	800941c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f003 fd49 	bl	8004690 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000bfe:	2300      	movs	r3, #0
 8000c00:	603b      	str	r3, [r7, #0]
 8000c02:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb0 <SystemClock_Config+0xd8>)
 8000c04:	699b      	ldr	r3, [r3, #24]
 8000c06:	4a2a      	ldr	r2, [pc, #168]	@ (8000cb0 <SystemClock_Config+0xd8>)
 8000c08:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c0c:	6193      	str	r3, [r2, #24]
 8000c0e:	4b28      	ldr	r3, [pc, #160]	@ (8000cb0 <SystemClock_Config+0xd8>)
 8000c10:	699b      	ldr	r3, [r3, #24]
 8000c12:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c16:	603b      	str	r3, [r7, #0]
 8000c18:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c1a:	bf00      	nop
 8000c1c:	4b24      	ldr	r3, [pc, #144]	@ (8000cb0 <SystemClock_Config+0xd8>)
 8000c1e:	699b      	ldr	r3, [r3, #24]
 8000c20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c28:	d1f8      	bne.n	8000c1c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c2e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c32:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c34:	2302      	movs	r3, #2
 8000c36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c3c:	2301      	movs	r3, #1
 8000c3e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000c40:	2322      	movs	r3, #34	@ 0x22
 8000c42:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c44:	2301      	movs	r3, #1
 8000c46:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c48:	2302      	movs	r3, #2
 8000c4a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c50:	230c      	movs	r3, #12
 8000c52:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000c54:	2300      	movs	r3, #0
 8000c56:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000c58:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c5c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c5e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c62:	4618      	mov	r0, r3
 8000c64:	f003 fd4e 	bl	8004704 <HAL_RCC_OscConfig>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c6e:	f000 f923 	bl	8000eb8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c72:	233f      	movs	r3, #63	@ 0x3f
 8000c74:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c76:	2303      	movs	r3, #3
 8000c78:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000c82:	2340      	movs	r3, #64	@ 0x40
 8000c84:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000c86:	2340      	movs	r3, #64	@ 0x40
 8000c88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c8e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000c90:	2340      	movs	r3, #64	@ 0x40
 8000c92:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000c94:	1d3b      	adds	r3, r7, #4
 8000c96:	2103      	movs	r1, #3
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f004 f90d 	bl	8004eb8 <HAL_RCC_ClockConfig>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000ca4:	f000 f908 	bl	8000eb8 <Error_Handler>
  }
}
 8000ca8:	bf00      	nop
 8000caa:	3770      	adds	r7, #112	@ 0x70
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	58024800 	.word	0x58024800

08000cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000cb8:	4b22      	ldr	r3, [pc, #136]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cba:	4a23      	ldr	r2, [pc, #140]	@ (8000d48 <MX_USART3_UART_Init+0x94>)
 8000cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000cbe:	4b21      	ldr	r3, [pc, #132]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cc0:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000cc4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cc6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000cd2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cda:	220c      	movs	r2, #12
 8000cdc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cde:	4b19      	ldr	r3, [pc, #100]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ce4:	4b17      	ldr	r3, [pc, #92]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cea:	4b16      	ldr	r3, [pc, #88]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cf0:	4b14      	ldr	r3, [pc, #80]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfc:	4811      	ldr	r0, [pc, #68]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000cfe:	f006 fa29 	bl	8007154 <HAL_UART_Init>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d08:	f000 f8d6 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	480d      	ldr	r0, [pc, #52]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000d10:	f008 fab9 	bl	8009286 <HAL_UARTEx_SetTxFifoThreshold>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d1a:	f000 f8cd 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d1e:	2100      	movs	r1, #0
 8000d20:	4808      	ldr	r0, [pc, #32]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000d22:	f008 faee 	bl	8009302 <HAL_UARTEx_SetRxFifoThreshold>
 8000d26:	4603      	mov	r3, r0
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d2c:	f000 f8c4 	bl	8000eb8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d30:	4804      	ldr	r0, [pc, #16]	@ (8000d44 <MX_USART3_UART_Init+0x90>)
 8000d32:	f008 fa6f 	bl	8009214 <HAL_UARTEx_DisableFifoMode>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d3c:	f000 f8bc 	bl	8000eb8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d40:	bf00      	nop
 8000d42:	bd80      	pop	{r7, pc}
 8000d44:	24000a10 	.word	0x24000a10
 8000d48:	40004800 	.word	0x40004800

08000d4c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <MX_DMA_Init+0x3c>)
 8000d54:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d58:	4a0b      	ldr	r2, [pc, #44]	@ (8000d88 <MX_DMA_Init+0x3c>)
 8000d5a:	f043 0301 	orr.w	r3, r3, #1
 8000d5e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000d62:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_DMA_Init+0x3c>)
 8000d64:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000d68:	f003 0301 	and.w	r3, r3, #1
 8000d6c:	607b      	str	r3, [r7, #4]
 8000d6e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000d70:	2200      	movs	r2, #0
 8000d72:	2100      	movs	r1, #0
 8000d74:	200b      	movs	r0, #11
 8000d76:	f000 fbd8 	bl	800152a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000d7a:	200b      	movs	r0, #11
 8000d7c:	f000 fbef 	bl	800155e <HAL_NVIC_EnableIRQ>

}
 8000d80:	bf00      	nop
 8000d82:	3708      	adds	r7, #8
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	58024400 	.word	0x58024400

08000d8c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b088      	sub	sp, #32
 8000d90:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d92:	f107 030c 	add.w	r3, r7, #12
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
 8000da0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000da2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	4a2a      	ldr	r2, [pc, #168]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000daa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc0:	4b24      	ldr	r3, [pc, #144]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	4a23      	ldr	r2, [pc, #140]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd0:	4b20      	ldr	r3, [pc, #128]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dde:	4b1d      	ldr	r3, [pc, #116]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000de0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de4:	4a1b      	ldr	r2, [pc, #108]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000de6:	f043 0310 	orr.w	r3, r3, #16
 8000dea:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dee:	4b19      	ldr	r3, [pc, #100]	@ (8000e54 <MX_GPIO_Init+0xc8>)
 8000df0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df4:	f003 0310 	and.w	r3, r3, #16
 8000df8:	603b      	str	r3, [r7, #0]
 8000dfa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e02:	4815      	ldr	r0, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xcc>)
 8000e04:	f003 fc2a 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2102      	movs	r1, #2
 8000e0c:	4813      	ldr	r0, [pc, #76]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000e0e:	f003 fc25 	bl	800465c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	4619      	mov	r1, r3
 8000e2a:	480b      	ldr	r0, [pc, #44]	@ (8000e58 <MX_GPIO_Init+0xcc>)
 8000e2c:	f003 fa6e 	bl	800430c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e30:	2302      	movs	r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e34:	2301      	movs	r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	4619      	mov	r1, r3
 8000e46:	4805      	ldr	r0, [pc, #20]	@ (8000e5c <MX_GPIO_Init+0xd0>)
 8000e48:	f003 fa60 	bl	800430c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4c:	bf00      	nop
 8000e4e:	3720      	adds	r7, #32
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	58024400 	.word	0x58024400
 8000e58:	58020400 	.word	0x58020400
 8000e5c:	58021000 	.word	0x58021000

08000e60 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e66:	463b      	mov	r3, r7
 8000e68:	2200      	movs	r2, #0
 8000e6a:	601a      	str	r2, [r3, #0]
 8000e6c:	605a      	str	r2, [r3, #4]
 8000e6e:	609a      	str	r2, [r3, #8]
 8000e70:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e72:	f000 fb8f 	bl	8001594 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e76:	2301      	movs	r3, #1
 8000e78:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e82:	231f      	movs	r3, #31
 8000e84:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e86:	2387      	movs	r3, #135	@ 0x87
 8000e88:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e92:	2301      	movs	r3, #1
 8000e94:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000e96:	2301      	movs	r3, #1
 8000e98:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f000 fbad 	bl	8001604 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000eaa:	2004      	movs	r0, #4
 8000eac:	f000 fb8a 	bl	80015c4 <HAL_MPU_Enable>

}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ebc:	b672      	cpsid	i
}
 8000ebe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ec0:	bf00      	nop
 8000ec2:	e7fd      	b.n	8000ec0 <Error_Handler+0x8>

08000ec4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef4 <HAL_MspInit+0x30>)
 8000ecc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ed0:	4a08      	ldr	r2, [pc, #32]	@ (8000ef4 <HAL_MspInit+0x30>)
 8000ed2:	f043 0302 	orr.w	r3, r3, #2
 8000ed6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000eda:	4b06      	ldr	r3, [pc, #24]	@ (8000ef4 <HAL_MspInit+0x30>)
 8000edc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ee0:	f003 0302 	and.w	r3, r3, #2
 8000ee4:	607b      	str	r3, [r7, #4]
 8000ee6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	370c      	adds	r7, #12
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b0b8      	sub	sp, #224	@ 0xe0
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f10:	f107 0310 	add.w	r3, r7, #16
 8000f14:	22b8      	movs	r2, #184	@ 0xb8
 8000f16:	2100      	movs	r1, #0
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f008 fa7f 	bl	800941c <memset>
  if(huart->Instance==USART3)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	4a42      	ldr	r2, [pc, #264]	@ (800102c <HAL_UART_MspInit+0x134>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d17d      	bne.n	8001024 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f28:	f04f 0202 	mov.w	r2, #2
 8000f2c:	f04f 0300 	mov.w	r3, #0
 8000f30:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f34:	2300      	movs	r3, #0
 8000f36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f3a:	f107 0310 	add.w	r3, r7, #16
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f004 fb46 	bl	80055d0 <HAL_RCCEx_PeriphCLKConfig>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d001      	beq.n	8000f4e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f4a:	f7ff ffb5 	bl	8000eb8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f4e:	4b38      	ldr	r3, [pc, #224]	@ (8001030 <HAL_UART_MspInit+0x138>)
 8000f50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f54:	4a36      	ldr	r2, [pc, #216]	@ (8001030 <HAL_UART_MspInit+0x138>)
 8000f56:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f5a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f5e:	4b34      	ldr	r3, [pc, #208]	@ (8001030 <HAL_UART_MspInit+0x138>)
 8000f60:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f6c:	4b30      	ldr	r3, [pc, #192]	@ (8001030 <HAL_UART_MspInit+0x138>)
 8000f6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f72:	4a2f      	ldr	r2, [pc, #188]	@ (8001030 <HAL_UART_MspInit+0x138>)
 8000f74:	f043 0302 	orr.w	r3, r3, #2
 8000f78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <HAL_UART_MspInit+0x138>)
 8000f7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f82:	f003 0302 	and.w	r3, r3, #2
 8000f86:	60bb      	str	r3, [r7, #8]
 8000f88:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f8a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f8e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f92:	2302      	movs	r3, #2
 8000f94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000faa:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4820      	ldr	r0, [pc, #128]	@ (8001034 <HAL_UART_MspInit+0x13c>)
 8000fb2:	f003 f9ab 	bl	800430c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8000fb6:	4b20      	ldr	r3, [pc, #128]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fb8:	4a20      	ldr	r2, [pc, #128]	@ (800103c <HAL_UART_MspInit+0x144>)
 8000fba:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8000fbc:	4b1e      	ldr	r3, [pc, #120]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fbe:	222d      	movs	r2, #45	@ 0x2d
 8000fc0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fd0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fd4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000fd6:	4b18      	ldr	r3, [pc, #96]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000fdc:	4b16      	ldr	r3, [pc, #88]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8000fe2:	4b15      	ldr	r3, [pc, #84]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fe4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fe8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000fea:	4b13      	ldr	r3, [pc, #76]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ff0:	4b11      	ldr	r3, [pc, #68]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000ff6:	4810      	ldr	r0, [pc, #64]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8000ff8:	f000 fb44 	bl	8001684 <HAL_DMA_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 8001002:	f7ff ff59 	bl	8000eb8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4a0b      	ldr	r2, [pc, #44]	@ (8001038 <HAL_UART_MspInit+0x140>)
 800100a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800100e:	4a0a      	ldr	r2, [pc, #40]	@ (8001038 <HAL_UART_MspInit+0x140>)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	2103      	movs	r1, #3
 8001018:	2027      	movs	r0, #39	@ 0x27
 800101a:	f000 fa86 	bl	800152a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800101e:	2027      	movs	r0, #39	@ 0x27
 8001020:	f000 fa9d 	bl	800155e <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001024:	bf00      	nop
 8001026:	37e0      	adds	r7, #224	@ 0xe0
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40004800 	.word	0x40004800
 8001030:	58024400 	.word	0x58024400
 8001034:	58020400 	.word	0x58020400
 8001038:	24000aa4 	.word	0x24000aa4
 800103c:	40020010 	.word	0x40020010

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001044:	bf00      	nop
 8001046:	e7fd      	b.n	8001044 <NMI_Handler+0x4>

08001048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104c:	bf00      	nop
 800104e:	e7fd      	b.n	800104c <HardFault_Handler+0x4>

08001050 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001054:	bf00      	nop
 8001056:	e7fd      	b.n	8001054 <MemManage_Handler+0x4>

08001058 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800105c:	bf00      	nop
 800105e:	e7fd      	b.n	800105c <BusFault_Handler+0x4>

08001060 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001064:	bf00      	nop
 8001066:	e7fd      	b.n	8001064 <UsageFault_Handler+0x4>

08001068 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001076:	b480      	push	{r7}
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001098:	4802      	ldr	r0, [pc, #8]	@ (80010a4 <DMA1_Stream0_IRQHandler+0x10>)
 800109a:	f001 fe19 	bl	8002cd0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	24000aa4 	.word	0x24000aa4

080010a8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80010ac:	4802      	ldr	r0, [pc, #8]	@ (80010b8 <USART3_IRQHandler+0x10>)
 80010ae:	f006 fa11 	bl	80074d4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, &data,1);
  //U_Blox_Receive_Data(data);
  /* USER CODE END USART3_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	24000a10 	.word	0x24000a10

080010bc <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]

   //U_Blox_Receive_5_Byte(uart_buffer);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010d4:	4b32      	ldr	r3, [pc, #200]	@ (80011a0 <SystemInit+0xd0>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010da:	4a31      	ldr	r2, [pc, #196]	@ (80011a0 <SystemInit+0xd0>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010e4:	4b2f      	ldr	r3, [pc, #188]	@ (80011a4 <SystemInit+0xd4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f003 030f 	and.w	r3, r3, #15
 80010ec:	2b06      	cmp	r3, #6
 80010ee:	d807      	bhi.n	8001100 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010f0:	4b2c      	ldr	r3, [pc, #176]	@ (80011a4 <SystemInit+0xd4>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f023 030f 	bic.w	r3, r3, #15
 80010f8:	4a2a      	ldr	r2, [pc, #168]	@ (80011a4 <SystemInit+0xd4>)
 80010fa:	f043 0307 	orr.w	r3, r3, #7
 80010fe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001100:	4b29      	ldr	r3, [pc, #164]	@ (80011a8 <SystemInit+0xd8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a28      	ldr	r2, [pc, #160]	@ (80011a8 <SystemInit+0xd8>)
 8001106:	f043 0301 	orr.w	r3, r3, #1
 800110a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800110c:	4b26      	ldr	r3, [pc, #152]	@ (80011a8 <SystemInit+0xd8>)
 800110e:	2200      	movs	r2, #0
 8001110:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001112:	4b25      	ldr	r3, [pc, #148]	@ (80011a8 <SystemInit+0xd8>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4924      	ldr	r1, [pc, #144]	@ (80011a8 <SystemInit+0xd8>)
 8001118:	4b24      	ldr	r3, [pc, #144]	@ (80011ac <SystemInit+0xdc>)
 800111a:	4013      	ands	r3, r2
 800111c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800111e:	4b21      	ldr	r3, [pc, #132]	@ (80011a4 <SystemInit+0xd4>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	2b00      	cmp	r3, #0
 8001128:	d007      	beq.n	800113a <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800112a:	4b1e      	ldr	r3, [pc, #120]	@ (80011a4 <SystemInit+0xd4>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f023 030f 	bic.w	r3, r3, #15
 8001132:	4a1c      	ldr	r2, [pc, #112]	@ (80011a4 <SystemInit+0xd4>)
 8001134:	f043 0307 	orr.w	r3, r3, #7
 8001138:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800113a:	4b1b      	ldr	r3, [pc, #108]	@ (80011a8 <SystemInit+0xd8>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001140:	4b19      	ldr	r3, [pc, #100]	@ (80011a8 <SystemInit+0xd8>)
 8001142:	2200      	movs	r2, #0
 8001144:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001146:	4b18      	ldr	r3, [pc, #96]	@ (80011a8 <SystemInit+0xd8>)
 8001148:	2200      	movs	r2, #0
 800114a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800114c:	4b16      	ldr	r3, [pc, #88]	@ (80011a8 <SystemInit+0xd8>)
 800114e:	4a18      	ldr	r2, [pc, #96]	@ (80011b0 <SystemInit+0xe0>)
 8001150:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <SystemInit+0xd8>)
 8001154:	4a17      	ldr	r2, [pc, #92]	@ (80011b4 <SystemInit+0xe4>)
 8001156:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001158:	4b13      	ldr	r3, [pc, #76]	@ (80011a8 <SystemInit+0xd8>)
 800115a:	4a17      	ldr	r2, [pc, #92]	@ (80011b8 <SystemInit+0xe8>)
 800115c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800115e:	4b12      	ldr	r3, [pc, #72]	@ (80011a8 <SystemInit+0xd8>)
 8001160:	2200      	movs	r2, #0
 8001162:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001164:	4b10      	ldr	r3, [pc, #64]	@ (80011a8 <SystemInit+0xd8>)
 8001166:	4a14      	ldr	r2, [pc, #80]	@ (80011b8 <SystemInit+0xe8>)
 8001168:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <SystemInit+0xd8>)
 800116c:	2200      	movs	r2, #0
 800116e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001170:	4b0d      	ldr	r3, [pc, #52]	@ (80011a8 <SystemInit+0xd8>)
 8001172:	4a11      	ldr	r2, [pc, #68]	@ (80011b8 <SystemInit+0xe8>)
 8001174:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001176:	4b0c      	ldr	r3, [pc, #48]	@ (80011a8 <SystemInit+0xd8>)
 8001178:	2200      	movs	r2, #0
 800117a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800117c:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <SystemInit+0xd8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a09      	ldr	r2, [pc, #36]	@ (80011a8 <SystemInit+0xd8>)
 8001182:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001186:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001188:	4b07      	ldr	r3, [pc, #28]	@ (80011a8 <SystemInit+0xd8>)
 800118a:	2200      	movs	r2, #0
 800118c:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800118e:	4b0b      	ldr	r3, [pc, #44]	@ (80011bc <SystemInit+0xec>)
 8001190:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001194:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001196:	bf00      	nop
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr
 80011a0:	e000ed00 	.word	0xe000ed00
 80011a4:	52002000 	.word	0x52002000
 80011a8:	58024400 	.word	0x58024400
 80011ac:	eaf6ed7f 	.word	0xeaf6ed7f
 80011b0:	02020200 	.word	0x02020200
 80011b4:	01ff0000 	.word	0x01ff0000
 80011b8:	01010280 	.word	0x01010280
 80011bc:	52004000 	.word	0x52004000

080011c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80011c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80011f8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80011c4:	f7ff ff84 	bl	80010d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011c8:	480c      	ldr	r0, [pc, #48]	@ (80011fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011ca:	490d      	ldr	r1, [pc, #52]	@ (8001200 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011d0:	e002      	b.n	80011d8 <LoopCopyDataInit>

080011d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011d6:	3304      	adds	r3, #4

080011d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011dc:	d3f9      	bcc.n	80011d2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011de:	4a0a      	ldr	r2, [pc, #40]	@ (8001208 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011e0:	4c0a      	ldr	r4, [pc, #40]	@ (800120c <LoopFillZerobss+0x22>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011e4:	e001      	b.n	80011ea <LoopFillZerobss>

080011e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011e8:	3204      	adds	r2, #4

080011ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ec:	d3fb      	bcc.n	80011e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011ee:	f008 f91d 	bl	800942c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011f2:	f7ff fcc1 	bl	8000b78 <main>
  bx  lr
 80011f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011f8:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 80011fc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001200:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001204:	080094f8 	.word	0x080094f8
  ldr r2, =_sbss
 8001208:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 800120c:	24000b44 	.word	0x24000b44

08001210 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001210:	e7fe      	b.n	8001210 <ADC3_IRQHandler>
	...

08001214 <SystickGetMs>:
#include "stm32h7xx.h"

static uint32_t ms;

 uint32_t SystickGetMs()
 {
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
   return ms;
 8001218:	4b03      	ldr	r3, [pc, #12]	@ (8001228 <SystickGetMs+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
 }
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	24000b3c 	.word	0x24000b3c

0800122c <SystickCheckMs>:


 uint8_t SystickCheckMs(uint32_t reference,uint32_t time_passed)
 {
 800122c:	b480      	push	{r7}
 800122e:	b083      	sub	sp, #12
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	6039      	str	r1, [r7, #0]
   if((ms-reference)>=time_passed)
 8001236:	4b08      	ldr	r3, [pc, #32]	@ (8001258 <SystickCheckMs+0x2c>)
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	683a      	ldr	r2, [r7, #0]
 8001240:	429a      	cmp	r2, r3
 8001242:	d801      	bhi.n	8001248 <SystickCheckMs+0x1c>
	   return 1;
 8001244:	2301      	movs	r3, #1
 8001246:	e000      	b.n	800124a <SystickCheckMs+0x1e>
   else
	  return 0;
 8001248:	2300      	movs	r3, #0
 }
 800124a:	4618      	mov	r0, r3
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	24000b3c 	.word	0x24000b3c

0800125c <SysTick_Handler>:


 void SysTick_Handler(void)
 {
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN SysTick_IRQn 0 */
    ms++;
 8001260:	4b04      	ldr	r3, [pc, #16]	@ (8001274 <SysTick_Handler+0x18>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a03      	ldr	r2, [pc, #12]	@ (8001274 <SysTick_Handler+0x18>)
 8001268:	6013      	str	r3, [r2, #0]


   /* USER CODE BEGIN SysTick_IRQn 1 */

   /* USER CODE END SysTick_IRQn 1 */
 }
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	24000b3c 	.word	0x24000b3c

08001278 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800127e:	2003      	movs	r0, #3
 8001280:	f000 f948 	bl	8001514 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001284:	f003 ffce 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 8001288:	4602      	mov	r2, r0
 800128a:	4b15      	ldr	r3, [pc, #84]	@ (80012e0 <HAL_Init+0x68>)
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	4913      	ldr	r1, [pc, #76]	@ (80012e4 <HAL_Init+0x6c>)
 8001296:	5ccb      	ldrb	r3, [r1, r3]
 8001298:	f003 031f 	and.w	r3, r3, #31
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <HAL_Init+0x68>)
 80012a4:	699b      	ldr	r3, [r3, #24]
 80012a6:	f003 030f 	and.w	r3, r3, #15
 80012aa:	4a0e      	ldr	r2, [pc, #56]	@ (80012e4 <HAL_Init+0x6c>)
 80012ac:	5cd3      	ldrb	r3, [r2, r3]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	687a      	ldr	r2, [r7, #4]
 80012b4:	fa22 f303 	lsr.w	r3, r2, r3
 80012b8:	4a0b      	ldr	r2, [pc, #44]	@ (80012e8 <HAL_Init+0x70>)
 80012ba:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80012bc:	4a0b      	ldr	r2, [pc, #44]	@ (80012ec <HAL_Init+0x74>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012c2:	200f      	movs	r0, #15
 80012c4:	f000 f814 	bl	80012f0 <HAL_InitTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d001      	beq.n	80012d2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e002      	b.n	80012d8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80012d2:	f7ff fdf7 	bl	8000ec4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d6:	2300      	movs	r3, #0
}
 80012d8:	4618      	mov	r0, r3
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	58024400 	.word	0x58024400
 80012e4:	080094a8 	.word	0x080094a8
 80012e8:	24000004 	.word	0x24000004
 80012ec:	24000000 	.word	0x24000000

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80012f8:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <HAL_InitTick+0x60>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d101      	bne.n	8001304 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001300:	2301      	movs	r3, #1
 8001302:	e021      	b.n	8001348 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001304:	4b13      	ldr	r3, [pc, #76]	@ (8001354 <HAL_InitTick+0x64>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <HAL_InitTick+0x60>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	4619      	mov	r1, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	fbb3 f3f1 	udiv	r3, r3, r1
 8001316:	fbb2 f3f3 	udiv	r3, r2, r3
 800131a:	4618      	mov	r0, r3
 800131c:	f000 f92d 	bl	800157a <HAL_SYSTICK_Config>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	e00e      	b.n	8001348 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2b0f      	cmp	r3, #15
 800132e:	d80a      	bhi.n	8001346 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001330:	2200      	movs	r2, #0
 8001332:	6879      	ldr	r1, [r7, #4]
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f000 f8f7 	bl	800152a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800133c:	4a06      	ldr	r2, [pc, #24]	@ (8001358 <HAL_InitTick+0x68>)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001342:	2300      	movs	r3, #0
 8001344:	e000      	b.n	8001348 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001346:	2301      	movs	r3, #1
}
 8001348:	4618      	mov	r0, r3
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	2400000c 	.word	0x2400000c
 8001354:	24000000 	.word	0x24000000
 8001358:	24000008 	.word	0x24000008

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	@ (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	24000b40 	.word	0x24000b40

08001374 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	f003 0307 	and.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001384:	4b0b      	ldr	r3, [pc, #44]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800138a:	68ba      	ldr	r2, [r7, #8]
 800138c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001390:	4013      	ands	r3, r2
 8001392:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001398:	68bb      	ldr	r3, [r7, #8]
 800139a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800139c:	4b06      	ldr	r3, [pc, #24]	@ (80013b8 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	4313      	orrs	r3, r2
 80013a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <__NVIC_SetPriorityGrouping+0x40>)
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	60d3      	str	r3, [r2, #12]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	e000ed00 	.word	0xe000ed00
 80013b8:	05fa0000 	.word	0x05fa0000

080013bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013c0:	4b04      	ldr	r3, [pc, #16]	@ (80013d4 <__NVIC_GetPriorityGrouping+0x18>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	0a1b      	lsrs	r3, r3, #8
 80013c6:	f003 0307 	and.w	r3, r3, #7
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr
 80013d4:	e000ed00 	.word	0xe000ed00

080013d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	db0b      	blt.n	8001402 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ea:	88fb      	ldrh	r3, [r7, #6]
 80013ec:	f003 021f 	and.w	r2, r3, #31
 80013f0:	4907      	ldr	r1, [pc, #28]	@ (8001410 <__NVIC_EnableIRQ+0x38>)
 80013f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013f6:	095b      	lsrs	r3, r3, #5
 80013f8:	2001      	movs	r0, #1
 80013fa:	fa00 f202 	lsl.w	r2, r0, r2
 80013fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001402:	bf00      	nop
 8001404:	370c      	adds	r7, #12
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr
 800140e:	bf00      	nop
 8001410:	e000e100 	.word	0xe000e100

08001414 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001414:	b480      	push	{r7}
 8001416:	b083      	sub	sp, #12
 8001418:	af00      	add	r7, sp, #0
 800141a:	4603      	mov	r3, r0
 800141c:	6039      	str	r1, [r7, #0]
 800141e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001420:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001424:	2b00      	cmp	r3, #0
 8001426:	db0a      	blt.n	800143e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	b2da      	uxtb	r2, r3
 800142c:	490c      	ldr	r1, [pc, #48]	@ (8001460 <__NVIC_SetPriority+0x4c>)
 800142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001432:	0112      	lsls	r2, r2, #4
 8001434:	b2d2      	uxtb	r2, r2
 8001436:	440b      	add	r3, r1
 8001438:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800143c:	e00a      	b.n	8001454 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	b2da      	uxtb	r2, r3
 8001442:	4908      	ldr	r1, [pc, #32]	@ (8001464 <__NVIC_SetPriority+0x50>)
 8001444:	88fb      	ldrh	r3, [r7, #6]
 8001446:	f003 030f 	and.w	r3, r3, #15
 800144a:	3b04      	subs	r3, #4
 800144c:	0112      	lsls	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	440b      	add	r3, r1
 8001452:	761a      	strb	r2, [r3, #24]
}
 8001454:	bf00      	nop
 8001456:	370c      	adds	r7, #12
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000e100 	.word	0xe000e100
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001468:	b480      	push	{r7}
 800146a:	b089      	sub	sp, #36	@ 0x24
 800146c:	af00      	add	r7, sp, #0
 800146e:	60f8      	str	r0, [r7, #12]
 8001470:	60b9      	str	r1, [r7, #8]
 8001472:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f003 0307 	and.w	r3, r3, #7
 800147a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800147c:	69fb      	ldr	r3, [r7, #28]
 800147e:	f1c3 0307 	rsb	r3, r3, #7
 8001482:	2b04      	cmp	r3, #4
 8001484:	bf28      	it	cs
 8001486:	2304      	movcs	r3, #4
 8001488:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	3304      	adds	r3, #4
 800148e:	2b06      	cmp	r3, #6
 8001490:	d902      	bls.n	8001498 <NVIC_EncodePriority+0x30>
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	3b03      	subs	r3, #3
 8001496:	e000      	b.n	800149a <NVIC_EncodePriority+0x32>
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	f04f 32ff 	mov.w	r2, #4294967295
 80014a0:	69bb      	ldr	r3, [r7, #24]
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	43da      	mvns	r2, r3
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	401a      	ands	r2, r3
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014b0:	f04f 31ff 	mov.w	r1, #4294967295
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ba:	43d9      	mvns	r1, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014c0:	4313      	orrs	r3, r2
         );
}
 80014c2:	4618      	mov	r0, r3
 80014c4:	3724      	adds	r7, #36	@ 0x24
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
	...

080014d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014e0:	d301      	bcc.n	80014e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014e2:	2301      	movs	r3, #1
 80014e4:	e00f      	b.n	8001506 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001510 <SysTick_Config+0x40>)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014ee:	210f      	movs	r1, #15
 80014f0:	f04f 30ff 	mov.w	r0, #4294967295
 80014f4:	f7ff ff8e 	bl	8001414 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014f8:	4b05      	ldr	r3, [pc, #20]	@ (8001510 <SysTick_Config+0x40>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014fe:	4b04      	ldr	r3, [pc, #16]	@ (8001510 <SysTick_Config+0x40>)
 8001500:	2207      	movs	r2, #7
 8001502:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	e000e010 	.word	0xe000e010

08001514 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff ff29 	bl	8001374 <__NVIC_SetPriorityGrouping>
}
 8001522:	bf00      	nop
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800152a:	b580      	push	{r7, lr}
 800152c:	b086      	sub	sp, #24
 800152e:	af00      	add	r7, sp, #0
 8001530:	4603      	mov	r3, r0
 8001532:	60b9      	str	r1, [r7, #8]
 8001534:	607a      	str	r2, [r7, #4]
 8001536:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001538:	f7ff ff40 	bl	80013bc <__NVIC_GetPriorityGrouping>
 800153c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	68b9      	ldr	r1, [r7, #8]
 8001542:	6978      	ldr	r0, [r7, #20]
 8001544:	f7ff ff90 	bl	8001468 <NVIC_EncodePriority>
 8001548:	4602      	mov	r2, r0
 800154a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800154e:	4611      	mov	r1, r2
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff ff5f 	bl	8001414 <__NVIC_SetPriority>
}
 8001556:	bf00      	nop
 8001558:	3718      	adds	r7, #24
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}

0800155e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800155e:	b580      	push	{r7, lr}
 8001560:	b082      	sub	sp, #8
 8001562:	af00      	add	r7, sp, #0
 8001564:	4603      	mov	r3, r0
 8001566:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001568:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff33 	bl	80013d8 <__NVIC_EnableIRQ>
}
 8001572:	bf00      	nop
 8001574:	3708      	adds	r7, #8
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff ffa4 	bl	80014d0 <SysTick_Config>
 8001588:	4603      	mov	r3, r0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3708      	adds	r7, #8
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001598:	f3bf 8f5f 	dmb	sy
}
 800159c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800159e:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <HAL_MPU_Disable+0x28>)
 80015a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015a2:	4a06      	ldr	r2, [pc, #24]	@ (80015bc <HAL_MPU_Disable+0x28>)
 80015a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a8:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80015aa:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <HAL_MPU_Disable+0x2c>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
}
 80015b0:	bf00      	nop
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	e000ed00 	.word	0xe000ed00
 80015c0:	e000ed90 	.word	0xe000ed90

080015c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80015cc:	4a0b      	ldr	r2, [pc, #44]	@ (80015fc <HAL_MPU_Enable+0x38>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	f043 0301 	orr.w	r3, r3, #1
 80015d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80015d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001600 <HAL_MPU_Enable+0x3c>)
 80015d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015da:	4a09      	ldr	r2, [pc, #36]	@ (8001600 <HAL_MPU_Enable+0x3c>)
 80015dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015e0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80015e2:	f3bf 8f4f 	dsb	sy
}
 80015e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80015e8:	f3bf 8f6f 	isb	sy
}
 80015ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	e000ed90 	.word	0xe000ed90
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	785a      	ldrb	r2, [r3, #1]
 8001610:	4b1b      	ldr	r3, [pc, #108]	@ (8001680 <HAL_MPU_ConfigRegion+0x7c>)
 8001612:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <HAL_MPU_ConfigRegion+0x7c>)
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	4a19      	ldr	r2, [pc, #100]	@ (8001680 <HAL_MPU_ConfigRegion+0x7c>)
 800161a:	f023 0301 	bic.w	r3, r3, #1
 800161e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001620:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_MPU_ConfigRegion+0x7c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	7b1b      	ldrb	r3, [r3, #12]
 800162c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	7adb      	ldrb	r3, [r3, #11]
 8001632:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001634:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	7a9b      	ldrb	r3, [r3, #10]
 800163a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800163c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	7b5b      	ldrb	r3, [r3, #13]
 8001642:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001644:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	7b9b      	ldrb	r3, [r3, #14]
 800164a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800164c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	7bdb      	ldrb	r3, [r3, #15]
 8001652:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001654:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	7a5b      	ldrb	r3, [r3, #9]
 800165a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800165c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	7a1b      	ldrb	r3, [r3, #8]
 8001662:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001664:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	7812      	ldrb	r2, [r2, #0]
 800166a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800166c:	4a04      	ldr	r2, [pc, #16]	@ (8001680 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800166e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001670:	6113      	str	r3, [r2, #16]
}
 8001672:	bf00      	nop
 8001674:	370c      	adds	r7, #12
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed90 	.word	0xe000ed90

08001684 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b086      	sub	sp, #24
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 800168c:	f7ff fe66 	bl	800135c <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d101      	bne.n	800169c <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	e312      	b.n	8001cc2 <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a66      	ldr	r2, [pc, #408]	@ (800183c <HAL_DMA_Init+0x1b8>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d04a      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a65      	ldr	r2, [pc, #404]	@ (8001840 <HAL_DMA_Init+0x1bc>)
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d045      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a63      	ldr	r2, [pc, #396]	@ (8001844 <HAL_DMA_Init+0x1c0>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d040      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	4a62      	ldr	r2, [pc, #392]	@ (8001848 <HAL_DMA_Init+0x1c4>)
 80016c0:	4293      	cmp	r3, r2
 80016c2:	d03b      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a60      	ldr	r2, [pc, #384]	@ (800184c <HAL_DMA_Init+0x1c8>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d036      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001850 <HAL_DMA_Init+0x1cc>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d031      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a5d      	ldr	r2, [pc, #372]	@ (8001854 <HAL_DMA_Init+0x1d0>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d02c      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a5c      	ldr	r2, [pc, #368]	@ (8001858 <HAL_DMA_Init+0x1d4>)
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d027      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a5a      	ldr	r2, [pc, #360]	@ (800185c <HAL_DMA_Init+0x1d8>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d022      	beq.n	800173c <HAL_DMA_Init+0xb8>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4a59      	ldr	r2, [pc, #356]	@ (8001860 <HAL_DMA_Init+0x1dc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d01d      	beq.n	800173c <HAL_DMA_Init+0xb8>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a57      	ldr	r2, [pc, #348]	@ (8001864 <HAL_DMA_Init+0x1e0>)
 8001706:	4293      	cmp	r3, r2
 8001708:	d018      	beq.n	800173c <HAL_DMA_Init+0xb8>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	4a56      	ldr	r2, [pc, #344]	@ (8001868 <HAL_DMA_Init+0x1e4>)
 8001710:	4293      	cmp	r3, r2
 8001712:	d013      	beq.n	800173c <HAL_DMA_Init+0xb8>
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a54      	ldr	r2, [pc, #336]	@ (800186c <HAL_DMA_Init+0x1e8>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d00e      	beq.n	800173c <HAL_DMA_Init+0xb8>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a53      	ldr	r2, [pc, #332]	@ (8001870 <HAL_DMA_Init+0x1ec>)
 8001724:	4293      	cmp	r3, r2
 8001726:	d009      	beq.n	800173c <HAL_DMA_Init+0xb8>
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a51      	ldr	r2, [pc, #324]	@ (8001874 <HAL_DMA_Init+0x1f0>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d004      	beq.n	800173c <HAL_DMA_Init+0xb8>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a50      	ldr	r2, [pc, #320]	@ (8001878 <HAL_DMA_Init+0x1f4>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d101      	bne.n	8001740 <HAL_DMA_Init+0xbc>
 800173c:	2301      	movs	r3, #1
 800173e:	e000      	b.n	8001742 <HAL_DMA_Init+0xbe>
 8001740:	2300      	movs	r3, #0
 8001742:	2b00      	cmp	r3, #0
 8001744:	f000 813c 	beq.w	80019c0 <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2202      	movs	r2, #2
 800174c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	2200      	movs	r2, #0
 8001754:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a37      	ldr	r2, [pc, #220]	@ (800183c <HAL_DMA_Init+0x1b8>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d04a      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a36      	ldr	r2, [pc, #216]	@ (8001840 <HAL_DMA_Init+0x1bc>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d045      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a34      	ldr	r2, [pc, #208]	@ (8001844 <HAL_DMA_Init+0x1c0>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d040      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a33      	ldr	r2, [pc, #204]	@ (8001848 <HAL_DMA_Init+0x1c4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d03b      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a31      	ldr	r2, [pc, #196]	@ (800184c <HAL_DMA_Init+0x1c8>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d036      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a30      	ldr	r2, [pc, #192]	@ (8001850 <HAL_DMA_Init+0x1cc>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d031      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2e      	ldr	r2, [pc, #184]	@ (8001854 <HAL_DMA_Init+0x1d0>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d02c      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001858 <HAL_DMA_Init+0x1d4>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d027      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2b      	ldr	r2, [pc, #172]	@ (800185c <HAL_DMA_Init+0x1d8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d022      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <HAL_DMA_Init+0x1dc>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d01d      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <HAL_DMA_Init+0x1e0>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d018      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a27      	ldr	r2, [pc, #156]	@ (8001868 <HAL_DMA_Init+0x1e4>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d013      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a25      	ldr	r2, [pc, #148]	@ (800186c <HAL_DMA_Init+0x1e8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00e      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a24      	ldr	r2, [pc, #144]	@ (8001870 <HAL_DMA_Init+0x1ec>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d009      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <HAL_DMA_Init+0x1f0>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d004      	beq.n	80017f8 <HAL_DMA_Init+0x174>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <HAL_DMA_Init+0x1f4>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d108      	bne.n	800180a <HAL_DMA_Init+0x186>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0201 	bic.w	r2, r2, #1
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	e007      	b.n	800181a <HAL_DMA_Init+0x196>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f022 0201 	bic.w	r2, r2, #1
 8001818:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800181a:	e02f      	b.n	800187c <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800181c:	f7ff fd9e 	bl	800135c <HAL_GetTick>
 8001820:	4602      	mov	r2, r0
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	2b05      	cmp	r3, #5
 8001828:	d928      	bls.n	800187c <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2220      	movs	r2, #32
 800182e:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2203      	movs	r2, #3
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e242      	b.n	8001cc2 <HAL_DMA_Init+0x63e>
 800183c:	40020010 	.word	0x40020010
 8001840:	40020028 	.word	0x40020028
 8001844:	40020040 	.word	0x40020040
 8001848:	40020058 	.word	0x40020058
 800184c:	40020070 	.word	0x40020070
 8001850:	40020088 	.word	0x40020088
 8001854:	400200a0 	.word	0x400200a0
 8001858:	400200b8 	.word	0x400200b8
 800185c:	40020410 	.word	0x40020410
 8001860:	40020428 	.word	0x40020428
 8001864:	40020440 	.word	0x40020440
 8001868:	40020458 	.word	0x40020458
 800186c:	40020470 	.word	0x40020470
 8001870:	40020488 	.word	0x40020488
 8001874:	400204a0 	.word	0x400204a0
 8001878:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0301 	and.w	r3, r3, #1
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1c8      	bne.n	800181c <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	4b83      	ldr	r3, [pc, #524]	@ (8001aa4 <HAL_DMA_Init+0x420>)
 8001896:	4013      	ands	r3, r2
 8001898:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80018a2:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	691b      	ldr	r3, [r3, #16]
 80018a8:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ae:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	699b      	ldr	r3, [r3, #24]
 80018b4:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018ba:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a1b      	ldr	r3, [r3, #32]
 80018c0:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018cc:	2b04      	cmp	r3, #4
 80018ce:	d107      	bne.n	80018e0 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d8:	4313      	orrs	r3, r2
 80018da:	697a      	ldr	r2, [r7, #20]
 80018dc:	4313      	orrs	r3, r2
 80018de:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	2b28      	cmp	r3, #40	@ 0x28
 80018e6:	d903      	bls.n	80018f0 <HAL_DMA_Init+0x26c>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80018ee:	d91f      	bls.n	8001930 <HAL_DMA_Init+0x2ac>
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b3e      	cmp	r3, #62	@ 0x3e
 80018f6:	d903      	bls.n	8001900 <HAL_DMA_Init+0x27c>
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	2b42      	cmp	r3, #66	@ 0x42
 80018fe:	d917      	bls.n	8001930 <HAL_DMA_Init+0x2ac>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2b46      	cmp	r3, #70	@ 0x46
 8001906:	d903      	bls.n	8001910 <HAL_DMA_Init+0x28c>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	2b48      	cmp	r3, #72	@ 0x48
 800190e:	d90f      	bls.n	8001930 <HAL_DMA_Init+0x2ac>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	2b4e      	cmp	r3, #78	@ 0x4e
 8001916:	d903      	bls.n	8001920 <HAL_DMA_Init+0x29c>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	2b52      	cmp	r3, #82	@ 0x52
 800191e:	d907      	bls.n	8001930 <HAL_DMA_Init+0x2ac>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	2b73      	cmp	r3, #115	@ 0x73
 8001926:	d905      	bls.n	8001934 <HAL_DMA_Init+0x2b0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	2b77      	cmp	r3, #119	@ 0x77
 800192e:	d801      	bhi.n	8001934 <HAL_DMA_Init+0x2b0>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_DMA_Init+0x2b2>
 8001934:	2300      	movs	r3, #0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d003      	beq.n	8001942 <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001940:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	697a      	ldr	r2, [r7, #20]
 8001948:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	695b      	ldr	r3, [r3, #20]
 8001950:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	f023 0307 	bic.w	r3, r3, #7
 8001958:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195e:	697a      	ldr	r2, [r7, #20]
 8001960:	4313      	orrs	r3, r2
 8001962:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001968:	2b04      	cmp	r3, #4
 800196a:	d117      	bne.n	800199c <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001970:	697a      	ldr	r2, [r7, #20]
 8001972:	4313      	orrs	r3, r2
 8001974:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800197a:	2b00      	cmp	r3, #0
 800197c:	d00e      	beq.n	800199c <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f002 fb3a 	bl	8003ff8 <DMA_CheckFifoParam>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d008      	beq.n	800199c <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2240      	movs	r2, #64	@ 0x40
 800198e:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e192      	b.n	8001cc2 <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	697a      	ldr	r2, [r7, #20]
 80019a2:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f002 fa75 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 80019aa:	4603      	mov	r3, r0
 80019ac:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019b2:	f003 031f 	and.w	r3, r3, #31
 80019b6:	223f      	movs	r2, #63	@ 0x3f
 80019b8:	409a      	lsls	r2, r3
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	609a      	str	r2, [r3, #8]
 80019be:	e0c8      	b.n	8001b52 <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a38      	ldr	r2, [pc, #224]	@ (8001aa8 <HAL_DMA_Init+0x424>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d022      	beq.n	8001a10 <HAL_DMA_Init+0x38c>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4a37      	ldr	r2, [pc, #220]	@ (8001aac <HAL_DMA_Init+0x428>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d01d      	beq.n	8001a10 <HAL_DMA_Init+0x38c>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a35      	ldr	r2, [pc, #212]	@ (8001ab0 <HAL_DMA_Init+0x42c>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d018      	beq.n	8001a10 <HAL_DMA_Init+0x38c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a34      	ldr	r2, [pc, #208]	@ (8001ab4 <HAL_DMA_Init+0x430>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d013      	beq.n	8001a10 <HAL_DMA_Init+0x38c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a32      	ldr	r2, [pc, #200]	@ (8001ab8 <HAL_DMA_Init+0x434>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d00e      	beq.n	8001a10 <HAL_DMA_Init+0x38c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a31      	ldr	r2, [pc, #196]	@ (8001abc <HAL_DMA_Init+0x438>)
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d009      	beq.n	8001a10 <HAL_DMA_Init+0x38c>
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a2f      	ldr	r2, [pc, #188]	@ (8001ac0 <HAL_DMA_Init+0x43c>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d004      	beq.n	8001a10 <HAL_DMA_Init+0x38c>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ac4 <HAL_DMA_Init+0x440>)
 8001a0c:	4293      	cmp	r3, r2
 8001a0e:	d101      	bne.n	8001a14 <HAL_DMA_Init+0x390>
 8001a10:	2301      	movs	r3, #1
 8001a12:	e000      	b.n	8001a16 <HAL_DMA_Init+0x392>
 8001a14:	2300      	movs	r3, #0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	f000 8092 	beq.w	8001b40 <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a21      	ldr	r2, [pc, #132]	@ (8001aa8 <HAL_DMA_Init+0x424>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d021      	beq.n	8001a6a <HAL_DMA_Init+0x3e6>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a20      	ldr	r2, [pc, #128]	@ (8001aac <HAL_DMA_Init+0x428>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d01c      	beq.n	8001a6a <HAL_DMA_Init+0x3e6>
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a1e      	ldr	r2, [pc, #120]	@ (8001ab0 <HAL_DMA_Init+0x42c>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d017      	beq.n	8001a6a <HAL_DMA_Init+0x3e6>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ab4 <HAL_DMA_Init+0x430>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	d012      	beq.n	8001a6a <HAL_DMA_Init+0x3e6>
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4a1b      	ldr	r2, [pc, #108]	@ (8001ab8 <HAL_DMA_Init+0x434>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d00d      	beq.n	8001a6a <HAL_DMA_Init+0x3e6>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a1a      	ldr	r2, [pc, #104]	@ (8001abc <HAL_DMA_Init+0x438>)
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d008      	beq.n	8001a6a <HAL_DMA_Init+0x3e6>
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a18      	ldr	r2, [pc, #96]	@ (8001ac0 <HAL_DMA_Init+0x43c>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d003      	beq.n	8001a6a <HAL_DMA_Init+0x3e6>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4a17      	ldr	r2, [pc, #92]	@ (8001ac4 <HAL_DMA_Init+0x440>)
 8001a68:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4b10      	ldr	r3, [pc, #64]	@ (8001ac8 <HAL_DMA_Init+0x444>)
 8001a86:	4013      	ands	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	689b      	ldr	r3, [r3, #8]
 8001a8e:	2b40      	cmp	r3, #64	@ 0x40
 8001a90:	d01c      	beq.n	8001acc <HAL_DMA_Init+0x448>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b80      	cmp	r3, #128	@ 0x80
 8001a98:	d102      	bne.n	8001aa0 <HAL_DMA_Init+0x41c>
 8001a9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a9e:	e016      	b.n	8001ace <HAL_DMA_Init+0x44a>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	e014      	b.n	8001ace <HAL_DMA_Init+0x44a>
 8001aa4:	fe10803f 	.word	0xfe10803f
 8001aa8:	58025408 	.word	0x58025408
 8001aac:	5802541c 	.word	0x5802541c
 8001ab0:	58025430 	.word	0x58025430
 8001ab4:	58025444 	.word	0x58025444
 8001ab8:	58025458 	.word	0x58025458
 8001abc:	5802546c 	.word	0x5802546c
 8001ac0:	58025480 	.word	0x58025480
 8001ac4:	58025494 	.word	0x58025494
 8001ac8:	fffe000f 	.word	0xfffe000f
 8001acc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001ace:	687a      	ldr	r2, [r7, #4]
 8001ad0:	68d2      	ldr	r2, [r2, #12]
 8001ad2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001ad4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	691b      	ldr	r3, [r3, #16]
 8001ada:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001adc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	695b      	ldr	r3, [r3, #20]
 8001ae2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001ae4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	699b      	ldr	r3, [r3, #24]
 8001aea:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001aec:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001af4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
 8001afa:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001afc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	461a      	mov	r2, r3
 8001b12:	4b6e      	ldr	r3, [pc, #440]	@ (8001ccc <HAL_DMA_Init+0x648>)
 8001b14:	4413      	add	r3, r2
 8001b16:	4a6e      	ldr	r2, [pc, #440]	@ (8001cd0 <HAL_DMA_Init+0x64c>)
 8001b18:	fba2 2303 	umull	r2, r3, r2, r3
 8001b1c:	091b      	lsrs	r3, r3, #4
 8001b1e:	009a      	lsls	r2, r3, #2
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b24:	6878      	ldr	r0, [r7, #4]
 8001b26:	f002 f9b5 	bl	8003e94 <DMA_CalcBaseAndBitshift>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b32:	f003 031f 	and.w	r3, r3, #31
 8001b36:	2201      	movs	r2, #1
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	605a      	str	r2, [r3, #4]
 8001b3e:	e008      	b.n	8001b52 <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2240      	movs	r2, #64	@ 0x40
 8001b44:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2203      	movs	r2, #3
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0b7      	b.n	8001cc2 <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4a5f      	ldr	r2, [pc, #380]	@ (8001cd4 <HAL_DMA_Init+0x650>)
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d072      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a5d      	ldr	r2, [pc, #372]	@ (8001cd8 <HAL_DMA_Init+0x654>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d06d      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a5c      	ldr	r2, [pc, #368]	@ (8001cdc <HAL_DMA_Init+0x658>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d068      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a5a      	ldr	r2, [pc, #360]	@ (8001ce0 <HAL_DMA_Init+0x65c>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d063      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a59      	ldr	r2, [pc, #356]	@ (8001ce4 <HAL_DMA_Init+0x660>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d05e      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	4a57      	ldr	r2, [pc, #348]	@ (8001ce8 <HAL_DMA_Init+0x664>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d059      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a56      	ldr	r2, [pc, #344]	@ (8001cec <HAL_DMA_Init+0x668>)
 8001b94:	4293      	cmp	r3, r2
 8001b96:	d054      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a54      	ldr	r2, [pc, #336]	@ (8001cf0 <HAL_DMA_Init+0x66c>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d04f      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4a53      	ldr	r2, [pc, #332]	@ (8001cf4 <HAL_DMA_Init+0x670>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d04a      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a51      	ldr	r2, [pc, #324]	@ (8001cf8 <HAL_DMA_Init+0x674>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d045      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a50      	ldr	r2, [pc, #320]	@ (8001cfc <HAL_DMA_Init+0x678>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d040      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a4e      	ldr	r2, [pc, #312]	@ (8001d00 <HAL_DMA_Init+0x67c>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d03b      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a4d      	ldr	r2, [pc, #308]	@ (8001d04 <HAL_DMA_Init+0x680>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d036      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d08 <HAL_DMA_Init+0x684>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d031      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a4a      	ldr	r2, [pc, #296]	@ (8001d0c <HAL_DMA_Init+0x688>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d02c      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a48      	ldr	r2, [pc, #288]	@ (8001d10 <HAL_DMA_Init+0x68c>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d027      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a47      	ldr	r2, [pc, #284]	@ (8001d14 <HAL_DMA_Init+0x690>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d022      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a45      	ldr	r2, [pc, #276]	@ (8001d18 <HAL_DMA_Init+0x694>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d01d      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a44      	ldr	r2, [pc, #272]	@ (8001d1c <HAL_DMA_Init+0x698>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d018      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a42      	ldr	r2, [pc, #264]	@ (8001d20 <HAL_DMA_Init+0x69c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a41      	ldr	r2, [pc, #260]	@ (8001d24 <HAL_DMA_Init+0x6a0>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00e      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a3f      	ldr	r2, [pc, #252]	@ (8001d28 <HAL_DMA_Init+0x6a4>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d009      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a3e      	ldr	r2, [pc, #248]	@ (8001d2c <HAL_DMA_Init+0x6a8>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d004      	beq.n	8001c42 <HAL_DMA_Init+0x5be>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a3c      	ldr	r2, [pc, #240]	@ (8001d30 <HAL_DMA_Init+0x6ac>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d101      	bne.n	8001c46 <HAL_DMA_Init+0x5c2>
 8001c42:	2301      	movs	r3, #1
 8001c44:	e000      	b.n	8001c48 <HAL_DMA_Init+0x5c4>
 8001c46:	2300      	movs	r3, #0
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d032      	beq.n	8001cb2 <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f002 fa4f 	bl	80040f0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b80      	cmp	r3, #128	@ 0x80
 8001c58:	d102      	bne.n	8001c60 <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685a      	ldr	r2, [r3, #4]
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001c74:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d010      	beq.n	8001ca0 <HAL_DMA_Init+0x61c>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d80c      	bhi.n	8001ca0 <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f002 facc 	bl	8004224 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001c90:	2200      	movs	r2, #0
 8001c92:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001c9c:	605a      	str	r2, [r3, #4]
 8001c9e:	e008      	b.n	8001cb2 <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	a7fdabf8 	.word	0xa7fdabf8
 8001cd0:	cccccccd 	.word	0xcccccccd
 8001cd4:	40020010 	.word	0x40020010
 8001cd8:	40020028 	.word	0x40020028
 8001cdc:	40020040 	.word	0x40020040
 8001ce0:	40020058 	.word	0x40020058
 8001ce4:	40020070 	.word	0x40020070
 8001ce8:	40020088 	.word	0x40020088
 8001cec:	400200a0 	.word	0x400200a0
 8001cf0:	400200b8 	.word	0x400200b8
 8001cf4:	40020410 	.word	0x40020410
 8001cf8:	40020428 	.word	0x40020428
 8001cfc:	40020440 	.word	0x40020440
 8001d00:	40020458 	.word	0x40020458
 8001d04:	40020470 	.word	0x40020470
 8001d08:	40020488 	.word	0x40020488
 8001d0c:	400204a0 	.word	0x400204a0
 8001d10:	400204b8 	.word	0x400204b8
 8001d14:	58025408 	.word	0x58025408
 8001d18:	5802541c 	.word	0x5802541c
 8001d1c:	58025430 	.word	0x58025430
 8001d20:	58025444 	.word	0x58025444
 8001d24:	58025458 	.word	0x58025458
 8001d28:	5802546c 	.word	0x5802546c
 8001d2c:	58025480 	.word	0x58025480
 8001d30:	58025494 	.word	0x58025494

08001d34 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	60f8      	str	r0, [r7, #12]
 8001d3c:	60b9      	str	r1, [r7, #8]
 8001d3e:	607a      	str	r2, [r7, #4]
 8001d40:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e226      	b.n	800219e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d101      	bne.n	8001d5e <HAL_DMA_Start_IT+0x2a>
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	e21f      	b.n	800219e <HAL_DMA_Start_IT+0x46a>
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2201      	movs	r2, #1
 8001d62:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b01      	cmp	r3, #1
 8001d70:	f040 820a 	bne.w	8002188 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2202      	movs	r2, #2
 8001d78:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a68      	ldr	r2, [pc, #416]	@ (8001f28 <HAL_DMA_Start_IT+0x1f4>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d04a      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a66      	ldr	r2, [pc, #408]	@ (8001f2c <HAL_DMA_Start_IT+0x1f8>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d045      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a65      	ldr	r2, [pc, #404]	@ (8001f30 <HAL_DMA_Start_IT+0x1fc>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d040      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a63      	ldr	r2, [pc, #396]	@ (8001f34 <HAL_DMA_Start_IT+0x200>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d03b      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a62      	ldr	r2, [pc, #392]	@ (8001f38 <HAL_DMA_Start_IT+0x204>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d036      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a60      	ldr	r2, [pc, #384]	@ (8001f3c <HAL_DMA_Start_IT+0x208>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d031      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a5f      	ldr	r2, [pc, #380]	@ (8001f40 <HAL_DMA_Start_IT+0x20c>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d02c      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a5d      	ldr	r2, [pc, #372]	@ (8001f44 <HAL_DMA_Start_IT+0x210>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d027      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001f48 <HAL_DMA_Start_IT+0x214>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d022      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f4c <HAL_DMA_Start_IT+0x218>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d01d      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a59      	ldr	r2, [pc, #356]	@ (8001f50 <HAL_DMA_Start_IT+0x21c>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d018      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <HAL_DMA_Start_IT+0x220>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d013      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a56      	ldr	r2, [pc, #344]	@ (8001f58 <HAL_DMA_Start_IT+0x224>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d00e      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a54      	ldr	r2, [pc, #336]	@ (8001f5c <HAL_DMA_Start_IT+0x228>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d009      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a53      	ldr	r2, [pc, #332]	@ (8001f60 <HAL_DMA_Start_IT+0x22c>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d004      	beq.n	8001e22 <HAL_DMA_Start_IT+0xee>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a51      	ldr	r2, [pc, #324]	@ (8001f64 <HAL_DMA_Start_IT+0x230>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d108      	bne.n	8001e34 <HAL_DMA_Start_IT+0x100>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f022 0201 	bic.w	r2, r2, #1
 8001e30:	601a      	str	r2, [r3, #0]
 8001e32:	e007      	b.n	8001e44 <HAL_DMA_Start_IT+0x110>
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0201 	bic.w	r2, r2, #1
 8001e42:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	68f8      	ldr	r0, [r7, #12]
 8001e4c:	f001 fe76 	bl	8003b3c <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a34      	ldr	r2, [pc, #208]	@ (8001f28 <HAL_DMA_Start_IT+0x1f4>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d04a      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a33      	ldr	r2, [pc, #204]	@ (8001f2c <HAL_DMA_Start_IT+0x1f8>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d045      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a31      	ldr	r2, [pc, #196]	@ (8001f30 <HAL_DMA_Start_IT+0x1fc>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d040      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a30      	ldr	r2, [pc, #192]	@ (8001f34 <HAL_DMA_Start_IT+0x200>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d03b      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2e      	ldr	r2, [pc, #184]	@ (8001f38 <HAL_DMA_Start_IT+0x204>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d036      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a2d      	ldr	r2, [pc, #180]	@ (8001f3c <HAL_DMA_Start_IT+0x208>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d031      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a2b      	ldr	r2, [pc, #172]	@ (8001f40 <HAL_DMA_Start_IT+0x20c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d02c      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001f44 <HAL_DMA_Start_IT+0x210>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d027      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a28      	ldr	r2, [pc, #160]	@ (8001f48 <HAL_DMA_Start_IT+0x214>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d022      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a27      	ldr	r2, [pc, #156]	@ (8001f4c <HAL_DMA_Start_IT+0x218>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d01d      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a25      	ldr	r2, [pc, #148]	@ (8001f50 <HAL_DMA_Start_IT+0x21c>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d018      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a24      	ldr	r2, [pc, #144]	@ (8001f54 <HAL_DMA_Start_IT+0x220>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a22      	ldr	r2, [pc, #136]	@ (8001f58 <HAL_DMA_Start_IT+0x224>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d00e      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a21      	ldr	r2, [pc, #132]	@ (8001f5c <HAL_DMA_Start_IT+0x228>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d009      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_DMA_Start_IT+0x22c>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d004      	beq.n	8001ef0 <HAL_DMA_Start_IT+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a1e      	ldr	r2, [pc, #120]	@ (8001f64 <HAL_DMA_Start_IT+0x230>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d101      	bne.n	8001ef4 <HAL_DMA_Start_IT+0x1c0>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_DMA_Start_IT+0x1c2>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d036      	beq.n	8001f68 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 021e 	bic.w	r2, r3, #30
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0216 	orr.w	r2, r2, #22
 8001f0c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d03e      	beq.n	8001f94 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f042 0208 	orr.w	r2, r2, #8
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	e035      	b.n	8001f94 <HAL_DMA_Start_IT+0x260>
 8001f28:	40020010 	.word	0x40020010
 8001f2c:	40020028 	.word	0x40020028
 8001f30:	40020040 	.word	0x40020040
 8001f34:	40020058 	.word	0x40020058
 8001f38:	40020070 	.word	0x40020070
 8001f3c:	40020088 	.word	0x40020088
 8001f40:	400200a0 	.word	0x400200a0
 8001f44:	400200b8 	.word	0x400200b8
 8001f48:	40020410 	.word	0x40020410
 8001f4c:	40020428 	.word	0x40020428
 8001f50:	40020440 	.word	0x40020440
 8001f54:	40020458 	.word	0x40020458
 8001f58:	40020470 	.word	0x40020470
 8001f5c:	40020488 	.word	0x40020488
 8001f60:	400204a0 	.word	0x400204a0
 8001f64:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f023 020e 	bic.w	r2, r3, #14
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f042 020a 	orr.w	r2, r2, #10
 8001f7a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d007      	beq.n	8001f94 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f042 0204 	orr.w	r2, r2, #4
 8001f92:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a83      	ldr	r2, [pc, #524]	@ (80021a8 <HAL_DMA_Start_IT+0x474>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d072      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a82      	ldr	r2, [pc, #520]	@ (80021ac <HAL_DMA_Start_IT+0x478>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d06d      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a80      	ldr	r2, [pc, #512]	@ (80021b0 <HAL_DMA_Start_IT+0x47c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d068      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a7f      	ldr	r2, [pc, #508]	@ (80021b4 <HAL_DMA_Start_IT+0x480>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d063      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a7d      	ldr	r2, [pc, #500]	@ (80021b8 <HAL_DMA_Start_IT+0x484>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d05e      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a7c      	ldr	r2, [pc, #496]	@ (80021bc <HAL_DMA_Start_IT+0x488>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d059      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a7a      	ldr	r2, [pc, #488]	@ (80021c0 <HAL_DMA_Start_IT+0x48c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d054      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a79      	ldr	r2, [pc, #484]	@ (80021c4 <HAL_DMA_Start_IT+0x490>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d04f      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a77      	ldr	r2, [pc, #476]	@ (80021c8 <HAL_DMA_Start_IT+0x494>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d04a      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a76      	ldr	r2, [pc, #472]	@ (80021cc <HAL_DMA_Start_IT+0x498>)
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d045      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a74      	ldr	r2, [pc, #464]	@ (80021d0 <HAL_DMA_Start_IT+0x49c>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d040      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	4a73      	ldr	r2, [pc, #460]	@ (80021d4 <HAL_DMA_Start_IT+0x4a0>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d03b      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a71      	ldr	r2, [pc, #452]	@ (80021d8 <HAL_DMA_Start_IT+0x4a4>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d036      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a70      	ldr	r2, [pc, #448]	@ (80021dc <HAL_DMA_Start_IT+0x4a8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d031      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a6e      	ldr	r2, [pc, #440]	@ (80021e0 <HAL_DMA_Start_IT+0x4ac>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d02c      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a6d      	ldr	r2, [pc, #436]	@ (80021e4 <HAL_DMA_Start_IT+0x4b0>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d027      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a6b      	ldr	r2, [pc, #428]	@ (80021e8 <HAL_DMA_Start_IT+0x4b4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d022      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a6a      	ldr	r2, [pc, #424]	@ (80021ec <HAL_DMA_Start_IT+0x4b8>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d01d      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a68      	ldr	r2, [pc, #416]	@ (80021f0 <HAL_DMA_Start_IT+0x4bc>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d018      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a67      	ldr	r2, [pc, #412]	@ (80021f4 <HAL_DMA_Start_IT+0x4c0>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d013      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a65      	ldr	r2, [pc, #404]	@ (80021f8 <HAL_DMA_Start_IT+0x4c4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00e      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a64      	ldr	r2, [pc, #400]	@ (80021fc <HAL_DMA_Start_IT+0x4c8>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d009      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a62      	ldr	r2, [pc, #392]	@ (8002200 <HAL_DMA_Start_IT+0x4cc>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Start_IT+0x350>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a61      	ldr	r2, [pc, #388]	@ (8002204 <HAL_DMA_Start_IT+0x4d0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d101      	bne.n	8002088 <HAL_DMA_Start_IT+0x354>
 8002084:	2301      	movs	r3, #1
 8002086:	e000      	b.n	800208a <HAL_DMA_Start_IT+0x356>
 8002088:	2300      	movs	r3, #0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d01a      	beq.n	80020c4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d007      	beq.n	80020ac <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a0:	681a      	ldr	r2, [r3, #0]
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020aa:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d007      	beq.n	80020c4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b8:	681a      	ldr	r2, [r3, #0]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80020c2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a37      	ldr	r2, [pc, #220]	@ (80021a8 <HAL_DMA_Start_IT+0x474>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d04a      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a36      	ldr	r2, [pc, #216]	@ (80021ac <HAL_DMA_Start_IT+0x478>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d045      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a34      	ldr	r2, [pc, #208]	@ (80021b0 <HAL_DMA_Start_IT+0x47c>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d040      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a33      	ldr	r2, [pc, #204]	@ (80021b4 <HAL_DMA_Start_IT+0x480>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d03b      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a31      	ldr	r2, [pc, #196]	@ (80021b8 <HAL_DMA_Start_IT+0x484>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d036      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a30      	ldr	r2, [pc, #192]	@ (80021bc <HAL_DMA_Start_IT+0x488>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d031      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2e      	ldr	r2, [pc, #184]	@ (80021c0 <HAL_DMA_Start_IT+0x48c>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d02c      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2d      	ldr	r2, [pc, #180]	@ (80021c4 <HAL_DMA_Start_IT+0x490>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d027      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	4a2b      	ldr	r2, [pc, #172]	@ (80021c8 <HAL_DMA_Start_IT+0x494>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d022      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2a      	ldr	r2, [pc, #168]	@ (80021cc <HAL_DMA_Start_IT+0x498>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d01d      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a28      	ldr	r2, [pc, #160]	@ (80021d0 <HAL_DMA_Start_IT+0x49c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d018      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a27      	ldr	r2, [pc, #156]	@ (80021d4 <HAL_DMA_Start_IT+0x4a0>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d013      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a25      	ldr	r2, [pc, #148]	@ (80021d8 <HAL_DMA_Start_IT+0x4a4>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d00e      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a24      	ldr	r2, [pc, #144]	@ (80021dc <HAL_DMA_Start_IT+0x4a8>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d009      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a22      	ldr	r2, [pc, #136]	@ (80021e0 <HAL_DMA_Start_IT+0x4ac>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d004      	beq.n	8002164 <HAL_DMA_Start_IT+0x430>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a21      	ldr	r2, [pc, #132]	@ (80021e4 <HAL_DMA_Start_IT+0x4b0>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d108      	bne.n	8002176 <HAL_DMA_Start_IT+0x442>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f042 0201 	orr.w	r2, r2, #1
 8002172:	601a      	str	r2, [r3, #0]
 8002174:	e012      	b.n	800219c <HAL_DMA_Start_IT+0x468>
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f042 0201 	orr.w	r2, r2, #1
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	e009      	b.n	800219c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800218e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800219c:	7dfb      	ldrb	r3, [r7, #23]
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3718      	adds	r7, #24
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40020010 	.word	0x40020010
 80021ac:	40020028 	.word	0x40020028
 80021b0:	40020040 	.word	0x40020040
 80021b4:	40020058 	.word	0x40020058
 80021b8:	40020070 	.word	0x40020070
 80021bc:	40020088 	.word	0x40020088
 80021c0:	400200a0 	.word	0x400200a0
 80021c4:	400200b8 	.word	0x400200b8
 80021c8:	40020410 	.word	0x40020410
 80021cc:	40020428 	.word	0x40020428
 80021d0:	40020440 	.word	0x40020440
 80021d4:	40020458 	.word	0x40020458
 80021d8:	40020470 	.word	0x40020470
 80021dc:	40020488 	.word	0x40020488
 80021e0:	400204a0 	.word	0x400204a0
 80021e4:	400204b8 	.word	0x400204b8
 80021e8:	58025408 	.word	0x58025408
 80021ec:	5802541c 	.word	0x5802541c
 80021f0:	58025430 	.word	0x58025430
 80021f4:	58025444 	.word	0x58025444
 80021f8:	58025458 	.word	0x58025458
 80021fc:	5802546c 	.word	0x5802546c
 8002200:	58025480 	.word	0x58025480
 8002204:	58025494 	.word	0x58025494

08002208 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8002210:	f7ff f8a4 	bl	800135c <HAL_GetTick>
 8002214:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800221c:	2301      	movs	r3, #1
 800221e:	e2dc      	b.n	80027da <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002226:	b2db      	uxtb	r3, r3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d008      	beq.n	800223e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2280      	movs	r2, #128	@ 0x80
 8002230:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e2cd      	b.n	80027da <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a76      	ldr	r2, [pc, #472]	@ (800241c <HAL_DMA_Abort+0x214>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d04a      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a74      	ldr	r2, [pc, #464]	@ (8002420 <HAL_DMA_Abort+0x218>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d045      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a73      	ldr	r2, [pc, #460]	@ (8002424 <HAL_DMA_Abort+0x21c>)
 8002258:	4293      	cmp	r3, r2
 800225a:	d040      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a71      	ldr	r2, [pc, #452]	@ (8002428 <HAL_DMA_Abort+0x220>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d03b      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a70      	ldr	r2, [pc, #448]	@ (800242c <HAL_DMA_Abort+0x224>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d036      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6e      	ldr	r2, [pc, #440]	@ (8002430 <HAL_DMA_Abort+0x228>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d031      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6d      	ldr	r2, [pc, #436]	@ (8002434 <HAL_DMA_Abort+0x22c>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d02c      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a6b      	ldr	r2, [pc, #428]	@ (8002438 <HAL_DMA_Abort+0x230>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d027      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a6a      	ldr	r2, [pc, #424]	@ (800243c <HAL_DMA_Abort+0x234>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d022      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a68      	ldr	r2, [pc, #416]	@ (8002440 <HAL_DMA_Abort+0x238>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d01d      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a67      	ldr	r2, [pc, #412]	@ (8002444 <HAL_DMA_Abort+0x23c>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d018      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a65      	ldr	r2, [pc, #404]	@ (8002448 <HAL_DMA_Abort+0x240>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d013      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a64      	ldr	r2, [pc, #400]	@ (800244c <HAL_DMA_Abort+0x244>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d00e      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a62      	ldr	r2, [pc, #392]	@ (8002450 <HAL_DMA_Abort+0x248>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d009      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a61      	ldr	r2, [pc, #388]	@ (8002454 <HAL_DMA_Abort+0x24c>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d004      	beq.n	80022de <HAL_DMA_Abort+0xd6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a5f      	ldr	r2, [pc, #380]	@ (8002458 <HAL_DMA_Abort+0x250>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_DMA_Abort+0xda>
 80022de:	2301      	movs	r3, #1
 80022e0:	e000      	b.n	80022e4 <HAL_DMA_Abort+0xdc>
 80022e2:	2300      	movs	r3, #0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d013      	beq.n	8002310 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f022 021e 	bic.w	r2, r2, #30
 80022f6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	695a      	ldr	r2, [r3, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002306:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	e00a      	b.n	8002326 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 020e 	bic.w	r2, r2, #14
 800231e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a3c      	ldr	r2, [pc, #240]	@ (800241c <HAL_DMA_Abort+0x214>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d072      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a3a      	ldr	r2, [pc, #232]	@ (8002420 <HAL_DMA_Abort+0x218>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d06d      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a39      	ldr	r2, [pc, #228]	@ (8002424 <HAL_DMA_Abort+0x21c>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d068      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a37      	ldr	r2, [pc, #220]	@ (8002428 <HAL_DMA_Abort+0x220>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d063      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a36      	ldr	r2, [pc, #216]	@ (800242c <HAL_DMA_Abort+0x224>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d05e      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a34      	ldr	r2, [pc, #208]	@ (8002430 <HAL_DMA_Abort+0x228>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d059      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a33      	ldr	r2, [pc, #204]	@ (8002434 <HAL_DMA_Abort+0x22c>)
 8002368:	4293      	cmp	r3, r2
 800236a:	d054      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a31      	ldr	r2, [pc, #196]	@ (8002438 <HAL_DMA_Abort+0x230>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d04f      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a30      	ldr	r2, [pc, #192]	@ (800243c <HAL_DMA_Abort+0x234>)
 800237c:	4293      	cmp	r3, r2
 800237e:	d04a      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a2e      	ldr	r2, [pc, #184]	@ (8002440 <HAL_DMA_Abort+0x238>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d045      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a2d      	ldr	r2, [pc, #180]	@ (8002444 <HAL_DMA_Abort+0x23c>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d040      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a2b      	ldr	r2, [pc, #172]	@ (8002448 <HAL_DMA_Abort+0x240>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d03b      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a2a      	ldr	r2, [pc, #168]	@ (800244c <HAL_DMA_Abort+0x244>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d036      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a28      	ldr	r2, [pc, #160]	@ (8002450 <HAL_DMA_Abort+0x248>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d031      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a27      	ldr	r2, [pc, #156]	@ (8002454 <HAL_DMA_Abort+0x24c>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d02c      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a25      	ldr	r2, [pc, #148]	@ (8002458 <HAL_DMA_Abort+0x250>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d027      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a24      	ldr	r2, [pc, #144]	@ (800245c <HAL_DMA_Abort+0x254>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d022      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a22      	ldr	r2, [pc, #136]	@ (8002460 <HAL_DMA_Abort+0x258>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d01d      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a21      	ldr	r2, [pc, #132]	@ (8002464 <HAL_DMA_Abort+0x25c>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d018      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1f      	ldr	r2, [pc, #124]	@ (8002468 <HAL_DMA_Abort+0x260>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d013      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1e      	ldr	r2, [pc, #120]	@ (800246c <HAL_DMA_Abort+0x264>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d00e      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1c      	ldr	r2, [pc, #112]	@ (8002470 <HAL_DMA_Abort+0x268>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1b      	ldr	r2, [pc, #108]	@ (8002474 <HAL_DMA_Abort+0x26c>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d004      	beq.n	8002416 <HAL_DMA_Abort+0x20e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a19      	ldr	r2, [pc, #100]	@ (8002478 <HAL_DMA_Abort+0x270>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d132      	bne.n	800247c <HAL_DMA_Abort+0x274>
 8002416:	2301      	movs	r3, #1
 8002418:	e031      	b.n	800247e <HAL_DMA_Abort+0x276>
 800241a:	bf00      	nop
 800241c:	40020010 	.word	0x40020010
 8002420:	40020028 	.word	0x40020028
 8002424:	40020040 	.word	0x40020040
 8002428:	40020058 	.word	0x40020058
 800242c:	40020070 	.word	0x40020070
 8002430:	40020088 	.word	0x40020088
 8002434:	400200a0 	.word	0x400200a0
 8002438:	400200b8 	.word	0x400200b8
 800243c:	40020410 	.word	0x40020410
 8002440:	40020428 	.word	0x40020428
 8002444:	40020440 	.word	0x40020440
 8002448:	40020458 	.word	0x40020458
 800244c:	40020470 	.word	0x40020470
 8002450:	40020488 	.word	0x40020488
 8002454:	400204a0 	.word	0x400204a0
 8002458:	400204b8 	.word	0x400204b8
 800245c:	58025408 	.word	0x58025408
 8002460:	5802541c 	.word	0x5802541c
 8002464:	58025430 	.word	0x58025430
 8002468:	58025444 	.word	0x58025444
 800246c:	58025458 	.word	0x58025458
 8002470:	5802546c 	.word	0x5802546c
 8002474:	58025480 	.word	0x58025480
 8002478:	58025494 	.word	0x58025494
 800247c:	2300      	movs	r3, #0
 800247e:	2b00      	cmp	r3, #0
 8002480:	d007      	beq.n	8002492 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800248c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002490:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a6d      	ldr	r2, [pc, #436]	@ (800264c <HAL_DMA_Abort+0x444>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d04a      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a6b      	ldr	r2, [pc, #428]	@ (8002650 <HAL_DMA_Abort+0x448>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d045      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a6a      	ldr	r2, [pc, #424]	@ (8002654 <HAL_DMA_Abort+0x44c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d040      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a68      	ldr	r2, [pc, #416]	@ (8002658 <HAL_DMA_Abort+0x450>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d03b      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a67      	ldr	r2, [pc, #412]	@ (800265c <HAL_DMA_Abort+0x454>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d036      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a65      	ldr	r2, [pc, #404]	@ (8002660 <HAL_DMA_Abort+0x458>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d031      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a64      	ldr	r2, [pc, #400]	@ (8002664 <HAL_DMA_Abort+0x45c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d02c      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a62      	ldr	r2, [pc, #392]	@ (8002668 <HAL_DMA_Abort+0x460>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d027      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a61      	ldr	r2, [pc, #388]	@ (800266c <HAL_DMA_Abort+0x464>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d022      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a5f      	ldr	r2, [pc, #380]	@ (8002670 <HAL_DMA_Abort+0x468>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d01d      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a5e      	ldr	r2, [pc, #376]	@ (8002674 <HAL_DMA_Abort+0x46c>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d018      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a5c      	ldr	r2, [pc, #368]	@ (8002678 <HAL_DMA_Abort+0x470>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d013      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a5b      	ldr	r2, [pc, #364]	@ (800267c <HAL_DMA_Abort+0x474>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d00e      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a59      	ldr	r2, [pc, #356]	@ (8002680 <HAL_DMA_Abort+0x478>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d009      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a58      	ldr	r2, [pc, #352]	@ (8002684 <HAL_DMA_Abort+0x47c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d004      	beq.n	8002532 <HAL_DMA_Abort+0x32a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a56      	ldr	r2, [pc, #344]	@ (8002688 <HAL_DMA_Abort+0x480>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d108      	bne.n	8002544 <HAL_DMA_Abort+0x33c>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f022 0201 	bic.w	r2, r2, #1
 8002540:	601a      	str	r2, [r3, #0]
 8002542:	e007      	b.n	8002554 <HAL_DMA_Abort+0x34c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	681a      	ldr	r2, [r3, #0]
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 0201 	bic.w	r2, r2, #1
 8002552:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002554:	e013      	b.n	800257e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002556:	f7fe ff01 	bl	800135c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	693b      	ldr	r3, [r7, #16]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d90c      	bls.n	800257e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2220      	movs	r2, #32
 8002568:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	2203      	movs	r2, #3
 800256e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2200      	movs	r2, #0
 8002576:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e12d      	b.n	80027da <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800257e:	697b      	ldr	r3, [r7, #20]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0301 	and.w	r3, r3, #1
 8002586:	2b00      	cmp	r3, #0
 8002588:	d1e5      	bne.n	8002556 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a2f      	ldr	r2, [pc, #188]	@ (800264c <HAL_DMA_Abort+0x444>)
 8002590:	4293      	cmp	r3, r2
 8002592:	d04a      	beq.n	800262a <HAL_DMA_Abort+0x422>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a2d      	ldr	r2, [pc, #180]	@ (8002650 <HAL_DMA_Abort+0x448>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d045      	beq.n	800262a <HAL_DMA_Abort+0x422>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a2c      	ldr	r2, [pc, #176]	@ (8002654 <HAL_DMA_Abort+0x44c>)
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d040      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a2a      	ldr	r2, [pc, #168]	@ (8002658 <HAL_DMA_Abort+0x450>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d03b      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	4a29      	ldr	r2, [pc, #164]	@ (800265c <HAL_DMA_Abort+0x454>)
 80025b8:	4293      	cmp	r3, r2
 80025ba:	d036      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4a27      	ldr	r2, [pc, #156]	@ (8002660 <HAL_DMA_Abort+0x458>)
 80025c2:	4293      	cmp	r3, r2
 80025c4:	d031      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a26      	ldr	r2, [pc, #152]	@ (8002664 <HAL_DMA_Abort+0x45c>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d02c      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a24      	ldr	r2, [pc, #144]	@ (8002668 <HAL_DMA_Abort+0x460>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d027      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a23      	ldr	r2, [pc, #140]	@ (800266c <HAL_DMA_Abort+0x464>)
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d022      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a21      	ldr	r2, [pc, #132]	@ (8002670 <HAL_DMA_Abort+0x468>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d01d      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a20      	ldr	r2, [pc, #128]	@ (8002674 <HAL_DMA_Abort+0x46c>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d018      	beq.n	800262a <HAL_DMA_Abort+0x422>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a1e      	ldr	r2, [pc, #120]	@ (8002678 <HAL_DMA_Abort+0x470>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d013      	beq.n	800262a <HAL_DMA_Abort+0x422>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4a1d      	ldr	r2, [pc, #116]	@ (800267c <HAL_DMA_Abort+0x474>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d00e      	beq.n	800262a <HAL_DMA_Abort+0x422>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a1b      	ldr	r2, [pc, #108]	@ (8002680 <HAL_DMA_Abort+0x478>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d009      	beq.n	800262a <HAL_DMA_Abort+0x422>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a1a      	ldr	r2, [pc, #104]	@ (8002684 <HAL_DMA_Abort+0x47c>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d004      	beq.n	800262a <HAL_DMA_Abort+0x422>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a18      	ldr	r2, [pc, #96]	@ (8002688 <HAL_DMA_Abort+0x480>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d101      	bne.n	800262e <HAL_DMA_Abort+0x426>
 800262a:	2301      	movs	r3, #1
 800262c:	e000      	b.n	8002630 <HAL_DMA_Abort+0x428>
 800262e:	2300      	movs	r3, #0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d02b      	beq.n	800268c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002638:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263e:	f003 031f 	and.w	r3, r3, #31
 8002642:	223f      	movs	r2, #63	@ 0x3f
 8002644:	409a      	lsls	r2, r3
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	609a      	str	r2, [r3, #8]
 800264a:	e02a      	b.n	80026a2 <HAL_DMA_Abort+0x49a>
 800264c:	40020010 	.word	0x40020010
 8002650:	40020028 	.word	0x40020028
 8002654:	40020040 	.word	0x40020040
 8002658:	40020058 	.word	0x40020058
 800265c:	40020070 	.word	0x40020070
 8002660:	40020088 	.word	0x40020088
 8002664:	400200a0 	.word	0x400200a0
 8002668:	400200b8 	.word	0x400200b8
 800266c:	40020410 	.word	0x40020410
 8002670:	40020428 	.word	0x40020428
 8002674:	40020440 	.word	0x40020440
 8002678:	40020458 	.word	0x40020458
 800267c:	40020470 	.word	0x40020470
 8002680:	40020488 	.word	0x40020488
 8002684:	400204a0 	.word	0x400204a0
 8002688:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002690:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002696:	f003 031f 	and.w	r3, r3, #31
 800269a:	2201      	movs	r2, #1
 800269c:	409a      	lsls	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a4f      	ldr	r2, [pc, #316]	@ (80027e4 <HAL_DMA_Abort+0x5dc>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d072      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a4d      	ldr	r2, [pc, #308]	@ (80027e8 <HAL_DMA_Abort+0x5e0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d06d      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a4c      	ldr	r2, [pc, #304]	@ (80027ec <HAL_DMA_Abort+0x5e4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d068      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a4a      	ldr	r2, [pc, #296]	@ (80027f0 <HAL_DMA_Abort+0x5e8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d063      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a49      	ldr	r2, [pc, #292]	@ (80027f4 <HAL_DMA_Abort+0x5ec>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d05e      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a47      	ldr	r2, [pc, #284]	@ (80027f8 <HAL_DMA_Abort+0x5f0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d059      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a46      	ldr	r2, [pc, #280]	@ (80027fc <HAL_DMA_Abort+0x5f4>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d054      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a44      	ldr	r2, [pc, #272]	@ (8002800 <HAL_DMA_Abort+0x5f8>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d04f      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a43      	ldr	r2, [pc, #268]	@ (8002804 <HAL_DMA_Abort+0x5fc>)
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d04a      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a41      	ldr	r2, [pc, #260]	@ (8002808 <HAL_DMA_Abort+0x600>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d045      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4a40      	ldr	r2, [pc, #256]	@ (800280c <HAL_DMA_Abort+0x604>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d040      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a3e      	ldr	r2, [pc, #248]	@ (8002810 <HAL_DMA_Abort+0x608>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d03b      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	4a3d      	ldr	r2, [pc, #244]	@ (8002814 <HAL_DMA_Abort+0x60c>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d036      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a3b      	ldr	r2, [pc, #236]	@ (8002818 <HAL_DMA_Abort+0x610>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d031      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a3a      	ldr	r2, [pc, #232]	@ (800281c <HAL_DMA_Abort+0x614>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d02c      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a38      	ldr	r2, [pc, #224]	@ (8002820 <HAL_DMA_Abort+0x618>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d027      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a37      	ldr	r2, [pc, #220]	@ (8002824 <HAL_DMA_Abort+0x61c>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d022      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a35      	ldr	r2, [pc, #212]	@ (8002828 <HAL_DMA_Abort+0x620>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d01d      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a34      	ldr	r2, [pc, #208]	@ (800282c <HAL_DMA_Abort+0x624>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d018      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a32      	ldr	r2, [pc, #200]	@ (8002830 <HAL_DMA_Abort+0x628>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d013      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a31      	ldr	r2, [pc, #196]	@ (8002834 <HAL_DMA_Abort+0x62c>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d00e      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a2f      	ldr	r2, [pc, #188]	@ (8002838 <HAL_DMA_Abort+0x630>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d009      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a2e      	ldr	r2, [pc, #184]	@ (800283c <HAL_DMA_Abort+0x634>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d004      	beq.n	8002792 <HAL_DMA_Abort+0x58a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a2c      	ldr	r2, [pc, #176]	@ (8002840 <HAL_DMA_Abort+0x638>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d101      	bne.n	8002796 <HAL_DMA_Abort+0x58e>
 8002792:	2301      	movs	r3, #1
 8002794:	e000      	b.n	8002798 <HAL_DMA_Abort+0x590>
 8002796:	2300      	movs	r3, #0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d015      	beq.n	80027c8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80027a4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00c      	beq.n	80027c8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80027b8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027bc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80027c6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 80027d8:	2300      	movs	r3, #0
}
 80027da:	4618      	mov	r0, r3
 80027dc:	3718      	adds	r7, #24
 80027de:	46bd      	mov	sp, r7
 80027e0:	bd80      	pop	{r7, pc}
 80027e2:	bf00      	nop
 80027e4:	40020010 	.word	0x40020010
 80027e8:	40020028 	.word	0x40020028
 80027ec:	40020040 	.word	0x40020040
 80027f0:	40020058 	.word	0x40020058
 80027f4:	40020070 	.word	0x40020070
 80027f8:	40020088 	.word	0x40020088
 80027fc:	400200a0 	.word	0x400200a0
 8002800:	400200b8 	.word	0x400200b8
 8002804:	40020410 	.word	0x40020410
 8002808:	40020428 	.word	0x40020428
 800280c:	40020440 	.word	0x40020440
 8002810:	40020458 	.word	0x40020458
 8002814:	40020470 	.word	0x40020470
 8002818:	40020488 	.word	0x40020488
 800281c:	400204a0 	.word	0x400204a0
 8002820:	400204b8 	.word	0x400204b8
 8002824:	58025408 	.word	0x58025408
 8002828:	5802541c 	.word	0x5802541c
 800282c:	58025430 	.word	0x58025430
 8002830:	58025444 	.word	0x58025444
 8002834:	58025458 	.word	0x58025458
 8002838:	5802546c 	.word	0x5802546c
 800283c:	58025480 	.word	0x58025480
 8002840:	58025494 	.word	0x58025494

08002844 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e237      	b.n	8002cc6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800285c:	b2db      	uxtb	r3, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d004      	beq.n	800286c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2280      	movs	r2, #128	@ 0x80
 8002866:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e22c      	b.n	8002cc6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a5c      	ldr	r2, [pc, #368]	@ (80029e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d04a      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a5b      	ldr	r2, [pc, #364]	@ (80029e8 <HAL_DMA_Abort_IT+0x1a4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d045      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a59      	ldr	r2, [pc, #356]	@ (80029ec <HAL_DMA_Abort_IT+0x1a8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d040      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a58      	ldr	r2, [pc, #352]	@ (80029f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d03b      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a56      	ldr	r2, [pc, #344]	@ (80029f4 <HAL_DMA_Abort_IT+0x1b0>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d036      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a55      	ldr	r2, [pc, #340]	@ (80029f8 <HAL_DMA_Abort_IT+0x1b4>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d031      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a53      	ldr	r2, [pc, #332]	@ (80029fc <HAL_DMA_Abort_IT+0x1b8>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d02c      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4a52      	ldr	r2, [pc, #328]	@ (8002a00 <HAL_DMA_Abort_IT+0x1bc>)
 80028b8:	4293      	cmp	r3, r2
 80028ba:	d027      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a50      	ldr	r2, [pc, #320]	@ (8002a04 <HAL_DMA_Abort_IT+0x1c0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d022      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4a4f      	ldr	r2, [pc, #316]	@ (8002a08 <HAL_DMA_Abort_IT+0x1c4>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d01d      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a4d      	ldr	r2, [pc, #308]	@ (8002a0c <HAL_DMA_Abort_IT+0x1c8>)
 80028d6:	4293      	cmp	r3, r2
 80028d8:	d018      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a4c      	ldr	r2, [pc, #304]	@ (8002a10 <HAL_DMA_Abort_IT+0x1cc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d013      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a4a      	ldr	r2, [pc, #296]	@ (8002a14 <HAL_DMA_Abort_IT+0x1d0>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d00e      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a49      	ldr	r2, [pc, #292]	@ (8002a18 <HAL_DMA_Abort_IT+0x1d4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d009      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a47      	ldr	r2, [pc, #284]	@ (8002a1c <HAL_DMA_Abort_IT+0x1d8>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d004      	beq.n	800290c <HAL_DMA_Abort_IT+0xc8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a46      	ldr	r2, [pc, #280]	@ (8002a20 <HAL_DMA_Abort_IT+0x1dc>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d101      	bne.n	8002910 <HAL_DMA_Abort_IT+0xcc>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <HAL_DMA_Abort_IT+0xce>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 8086 	beq.w	8002a24 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2204      	movs	r2, #4
 800291c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2f      	ldr	r2, [pc, #188]	@ (80029e4 <HAL_DMA_Abort_IT+0x1a0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d04a      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a2e      	ldr	r2, [pc, #184]	@ (80029e8 <HAL_DMA_Abort_IT+0x1a4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d045      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a2c      	ldr	r2, [pc, #176]	@ (80029ec <HAL_DMA_Abort_IT+0x1a8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d040      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2b      	ldr	r2, [pc, #172]	@ (80029f0 <HAL_DMA_Abort_IT+0x1ac>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d03b      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a29      	ldr	r2, [pc, #164]	@ (80029f4 <HAL_DMA_Abort_IT+0x1b0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d036      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a28      	ldr	r2, [pc, #160]	@ (80029f8 <HAL_DMA_Abort_IT+0x1b4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d031      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a26      	ldr	r2, [pc, #152]	@ (80029fc <HAL_DMA_Abort_IT+0x1b8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d02c      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a25      	ldr	r2, [pc, #148]	@ (8002a00 <HAL_DMA_Abort_IT+0x1bc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d027      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a23      	ldr	r2, [pc, #140]	@ (8002a04 <HAL_DMA_Abort_IT+0x1c0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d022      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a22      	ldr	r2, [pc, #136]	@ (8002a08 <HAL_DMA_Abort_IT+0x1c4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d01d      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a20      	ldr	r2, [pc, #128]	@ (8002a0c <HAL_DMA_Abort_IT+0x1c8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d018      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a1f      	ldr	r2, [pc, #124]	@ (8002a10 <HAL_DMA_Abort_IT+0x1cc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d013      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a1d      	ldr	r2, [pc, #116]	@ (8002a14 <HAL_DMA_Abort_IT+0x1d0>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d00e      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a1c      	ldr	r2, [pc, #112]	@ (8002a18 <HAL_DMA_Abort_IT+0x1d4>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d009      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a1a      	ldr	r2, [pc, #104]	@ (8002a1c <HAL_DMA_Abort_IT+0x1d8>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d004      	beq.n	80029c0 <HAL_DMA_Abort_IT+0x17c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a19      	ldr	r2, [pc, #100]	@ (8002a20 <HAL_DMA_Abort_IT+0x1dc>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d108      	bne.n	80029d2 <HAL_DMA_Abort_IT+0x18e>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f022 0201 	bic.w	r2, r2, #1
 80029ce:	601a      	str	r2, [r3, #0]
 80029d0:	e178      	b.n	8002cc4 <HAL_DMA_Abort_IT+0x480>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f022 0201 	bic.w	r2, r2, #1
 80029e0:	601a      	str	r2, [r3, #0]
 80029e2:	e16f      	b.n	8002cc4 <HAL_DMA_Abort_IT+0x480>
 80029e4:	40020010 	.word	0x40020010
 80029e8:	40020028 	.word	0x40020028
 80029ec:	40020040 	.word	0x40020040
 80029f0:	40020058 	.word	0x40020058
 80029f4:	40020070 	.word	0x40020070
 80029f8:	40020088 	.word	0x40020088
 80029fc:	400200a0 	.word	0x400200a0
 8002a00:	400200b8 	.word	0x400200b8
 8002a04:	40020410 	.word	0x40020410
 8002a08:	40020428 	.word	0x40020428
 8002a0c:	40020440 	.word	0x40020440
 8002a10:	40020458 	.word	0x40020458
 8002a14:	40020470 	.word	0x40020470
 8002a18:	40020488 	.word	0x40020488
 8002a1c:	400204a0 	.word	0x400204a0
 8002a20:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 020e 	bic.w	r2, r2, #14
 8002a32:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a6c      	ldr	r2, [pc, #432]	@ (8002bec <HAL_DMA_Abort_IT+0x3a8>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d04a      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a6b      	ldr	r2, [pc, #428]	@ (8002bf0 <HAL_DMA_Abort_IT+0x3ac>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d045      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a69      	ldr	r2, [pc, #420]	@ (8002bf4 <HAL_DMA_Abort_IT+0x3b0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d040      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a68      	ldr	r2, [pc, #416]	@ (8002bf8 <HAL_DMA_Abort_IT+0x3b4>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d03b      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a66      	ldr	r2, [pc, #408]	@ (8002bfc <HAL_DMA_Abort_IT+0x3b8>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d036      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a65      	ldr	r2, [pc, #404]	@ (8002c00 <HAL_DMA_Abort_IT+0x3bc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d031      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a63      	ldr	r2, [pc, #396]	@ (8002c04 <HAL_DMA_Abort_IT+0x3c0>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d02c      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a62      	ldr	r2, [pc, #392]	@ (8002c08 <HAL_DMA_Abort_IT+0x3c4>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d027      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a60      	ldr	r2, [pc, #384]	@ (8002c0c <HAL_DMA_Abort_IT+0x3c8>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d022      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a5f      	ldr	r2, [pc, #380]	@ (8002c10 <HAL_DMA_Abort_IT+0x3cc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01d      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002c14 <HAL_DMA_Abort_IT+0x3d0>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d018      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a5c      	ldr	r2, [pc, #368]	@ (8002c18 <HAL_DMA_Abort_IT+0x3d4>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c1c <HAL_DMA_Abort_IT+0x3d8>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a59      	ldr	r2, [pc, #356]	@ (8002c20 <HAL_DMA_Abort_IT+0x3dc>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a57      	ldr	r2, [pc, #348]	@ (8002c24 <HAL_DMA_Abort_IT+0x3e0>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_DMA_Abort_IT+0x290>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a56      	ldr	r2, [pc, #344]	@ (8002c28 <HAL_DMA_Abort_IT+0x3e4>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d108      	bne.n	8002ae6 <HAL_DMA_Abort_IT+0x2a2>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f022 0201 	bic.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]
 8002ae4:	e007      	b.n	8002af6 <HAL_DMA_Abort_IT+0x2b2>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 0201 	bic.w	r2, r2, #1
 8002af4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a3c      	ldr	r2, [pc, #240]	@ (8002bec <HAL_DMA_Abort_IT+0x3a8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d072      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a3a      	ldr	r2, [pc, #232]	@ (8002bf0 <HAL_DMA_Abort_IT+0x3ac>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d06d      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a39      	ldr	r2, [pc, #228]	@ (8002bf4 <HAL_DMA_Abort_IT+0x3b0>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d068      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a37      	ldr	r2, [pc, #220]	@ (8002bf8 <HAL_DMA_Abort_IT+0x3b4>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d063      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a36      	ldr	r2, [pc, #216]	@ (8002bfc <HAL_DMA_Abort_IT+0x3b8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d05e      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a34      	ldr	r2, [pc, #208]	@ (8002c00 <HAL_DMA_Abort_IT+0x3bc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d059      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a33      	ldr	r2, [pc, #204]	@ (8002c04 <HAL_DMA_Abort_IT+0x3c0>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d054      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a31      	ldr	r2, [pc, #196]	@ (8002c08 <HAL_DMA_Abort_IT+0x3c4>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d04f      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a30      	ldr	r2, [pc, #192]	@ (8002c0c <HAL_DMA_Abort_IT+0x3c8>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d04a      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a2e      	ldr	r2, [pc, #184]	@ (8002c10 <HAL_DMA_Abort_IT+0x3cc>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d045      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002c14 <HAL_DMA_Abort_IT+0x3d0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d040      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a2b      	ldr	r2, [pc, #172]	@ (8002c18 <HAL_DMA_Abort_IT+0x3d4>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d03b      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a2a      	ldr	r2, [pc, #168]	@ (8002c1c <HAL_DMA_Abort_IT+0x3d8>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d036      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a28      	ldr	r2, [pc, #160]	@ (8002c20 <HAL_DMA_Abort_IT+0x3dc>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d031      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a27      	ldr	r2, [pc, #156]	@ (8002c24 <HAL_DMA_Abort_IT+0x3e0>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d02c      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a25      	ldr	r2, [pc, #148]	@ (8002c28 <HAL_DMA_Abort_IT+0x3e4>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d027      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a24      	ldr	r2, [pc, #144]	@ (8002c2c <HAL_DMA_Abort_IT+0x3e8>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d022      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a22      	ldr	r2, [pc, #136]	@ (8002c30 <HAL_DMA_Abort_IT+0x3ec>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01d      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a21      	ldr	r2, [pc, #132]	@ (8002c34 <HAL_DMA_Abort_IT+0x3f0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d018      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_DMA_Abort_IT+0x3f4>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d013      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a1e      	ldr	r2, [pc, #120]	@ (8002c3c <HAL_DMA_Abort_IT+0x3f8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00e      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a1c      	ldr	r2, [pc, #112]	@ (8002c40 <HAL_DMA_Abort_IT+0x3fc>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d009      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a1b      	ldr	r2, [pc, #108]	@ (8002c44 <HAL_DMA_Abort_IT+0x400>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d004      	beq.n	8002be6 <HAL_DMA_Abort_IT+0x3a2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a19      	ldr	r2, [pc, #100]	@ (8002c48 <HAL_DMA_Abort_IT+0x404>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d132      	bne.n	8002c4c <HAL_DMA_Abort_IT+0x408>
 8002be6:	2301      	movs	r3, #1
 8002be8:	e031      	b.n	8002c4e <HAL_DMA_Abort_IT+0x40a>
 8002bea:	bf00      	nop
 8002bec:	40020010 	.word	0x40020010
 8002bf0:	40020028 	.word	0x40020028
 8002bf4:	40020040 	.word	0x40020040
 8002bf8:	40020058 	.word	0x40020058
 8002bfc:	40020070 	.word	0x40020070
 8002c00:	40020088 	.word	0x40020088
 8002c04:	400200a0 	.word	0x400200a0
 8002c08:	400200b8 	.word	0x400200b8
 8002c0c:	40020410 	.word	0x40020410
 8002c10:	40020428 	.word	0x40020428
 8002c14:	40020440 	.word	0x40020440
 8002c18:	40020458 	.word	0x40020458
 8002c1c:	40020470 	.word	0x40020470
 8002c20:	40020488 	.word	0x40020488
 8002c24:	400204a0 	.word	0x400204a0
 8002c28:	400204b8 	.word	0x400204b8
 8002c2c:	58025408 	.word	0x58025408
 8002c30:	5802541c 	.word	0x5802541c
 8002c34:	58025430 	.word	0x58025430
 8002c38:	58025444 	.word	0x58025444
 8002c3c:	58025458 	.word	0x58025458
 8002c40:	5802546c 	.word	0x5802546c
 8002c44:	58025480 	.word	0x58025480
 8002c48:	58025494 	.word	0x58025494
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d028      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c60:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c66:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	2201      	movs	r2, #1
 8002c72:	409a      	lsls	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002c80:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00c      	beq.n	8002ca4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002c98:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002ca2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3710      	adds	r7, #16
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop

08002cd0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	@ 0x28
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002cd8:	2300      	movs	r3, #0
 8002cda:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002cdc:	4b67      	ldr	r3, [pc, #412]	@ (8002e7c <HAL_DMA_IRQHandler+0x1ac>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a67      	ldr	r2, [pc, #412]	@ (8002e80 <HAL_DMA_IRQHandler+0x1b0>)
 8002ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce6:	0a9b      	lsrs	r3, r3, #10
 8002ce8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cee:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a5f      	ldr	r2, [pc, #380]	@ (8002e84 <HAL_DMA_IRQHandler+0x1b4>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d04a      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a5d      	ldr	r2, [pc, #372]	@ (8002e88 <HAL_DMA_IRQHandler+0x1b8>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d045      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8002e8c <HAL_DMA_IRQHandler+0x1bc>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d040      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a5a      	ldr	r2, [pc, #360]	@ (8002e90 <HAL_DMA_IRQHandler+0x1c0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d03b      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a59      	ldr	r2, [pc, #356]	@ (8002e94 <HAL_DMA_IRQHandler+0x1c4>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d036      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a57      	ldr	r2, [pc, #348]	@ (8002e98 <HAL_DMA_IRQHandler+0x1c8>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d031      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a56      	ldr	r2, [pc, #344]	@ (8002e9c <HAL_DMA_IRQHandler+0x1cc>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d02c      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a54      	ldr	r2, [pc, #336]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1d0>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d027      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a53      	ldr	r2, [pc, #332]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1d4>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d022      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a51      	ldr	r2, [pc, #324]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1d8>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d01d      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a50      	ldr	r2, [pc, #320]	@ (8002eac <HAL_DMA_IRQHandler+0x1dc>)
 8002d6c:	4293      	cmp	r3, r2
 8002d6e:	d018      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4a4e      	ldr	r2, [pc, #312]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1e0>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1e4>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d00e      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a4b      	ldr	r2, [pc, #300]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1e8>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d009      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a4a      	ldr	r2, [pc, #296]	@ (8002ebc <HAL_DMA_IRQHandler+0x1ec>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d004      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xd2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a48      	ldr	r2, [pc, #288]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d101      	bne.n	8002da6 <HAL_DMA_IRQHandler+0xd6>
 8002da2:	2301      	movs	r3, #1
 8002da4:	e000      	b.n	8002da8 <HAL_DMA_IRQHandler+0xd8>
 8002da6:	2300      	movs	r3, #0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	f000 842b 	beq.w	8003604 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002db2:	f003 031f 	and.w	r3, r3, #31
 8002db6:	2208      	movs	r2, #8
 8002db8:	409a      	lsls	r2, r3
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	f000 80a2 	beq.w	8002f08 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a2e      	ldr	r2, [pc, #184]	@ (8002e84 <HAL_DMA_IRQHandler+0x1b4>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d04a      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a2d      	ldr	r2, [pc, #180]	@ (8002e88 <HAL_DMA_IRQHandler+0x1b8>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d045      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a2b      	ldr	r2, [pc, #172]	@ (8002e8c <HAL_DMA_IRQHandler+0x1bc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d040      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a2a      	ldr	r2, [pc, #168]	@ (8002e90 <HAL_DMA_IRQHandler+0x1c0>)
 8002de8:	4293      	cmp	r3, r2
 8002dea:	d03b      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	4a28      	ldr	r2, [pc, #160]	@ (8002e94 <HAL_DMA_IRQHandler+0x1c4>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d036      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a27      	ldr	r2, [pc, #156]	@ (8002e98 <HAL_DMA_IRQHandler+0x1c8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d031      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a25      	ldr	r2, [pc, #148]	@ (8002e9c <HAL_DMA_IRQHandler+0x1cc>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02c      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a24      	ldr	r2, [pc, #144]	@ (8002ea0 <HAL_DMA_IRQHandler+0x1d0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d027      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a22      	ldr	r2, [pc, #136]	@ (8002ea4 <HAL_DMA_IRQHandler+0x1d4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d022      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a21      	ldr	r2, [pc, #132]	@ (8002ea8 <HAL_DMA_IRQHandler+0x1d8>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d01d      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002eac <HAL_DMA_IRQHandler+0x1dc>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d018      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a1e      	ldr	r2, [pc, #120]	@ (8002eb0 <HAL_DMA_IRQHandler+0x1e0>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d013      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a1c      	ldr	r2, [pc, #112]	@ (8002eb4 <HAL_DMA_IRQHandler+0x1e4>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d00e      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002eb8 <HAL_DMA_IRQHandler+0x1e8>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d009      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a19      	ldr	r2, [pc, #100]	@ (8002ebc <HAL_DMA_IRQHandler+0x1ec>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d004      	beq.n	8002e64 <HAL_DMA_IRQHandler+0x194>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a18      	ldr	r2, [pc, #96]	@ (8002ec0 <HAL_DMA_IRQHandler+0x1f0>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d12f      	bne.n	8002ec4 <HAL_DMA_IRQHandler+0x1f4>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0304 	and.w	r3, r3, #4
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	bf14      	ite	ne
 8002e72:	2301      	movne	r3, #1
 8002e74:	2300      	moveq	r3, #0
 8002e76:	b2db      	uxtb	r3, r3
 8002e78:	e02e      	b.n	8002ed8 <HAL_DMA_IRQHandler+0x208>
 8002e7a:	bf00      	nop
 8002e7c:	24000000 	.word	0x24000000
 8002e80:	1b4e81b5 	.word	0x1b4e81b5
 8002e84:	40020010 	.word	0x40020010
 8002e88:	40020028 	.word	0x40020028
 8002e8c:	40020040 	.word	0x40020040
 8002e90:	40020058 	.word	0x40020058
 8002e94:	40020070 	.word	0x40020070
 8002e98:	40020088 	.word	0x40020088
 8002e9c:	400200a0 	.word	0x400200a0
 8002ea0:	400200b8 	.word	0x400200b8
 8002ea4:	40020410 	.word	0x40020410
 8002ea8:	40020428 	.word	0x40020428
 8002eac:	40020440 	.word	0x40020440
 8002eb0:	40020458 	.word	0x40020458
 8002eb4:	40020470 	.word	0x40020470
 8002eb8:	40020488 	.word	0x40020488
 8002ebc:	400204a0 	.word	0x400204a0
 8002ec0:	400204b8 	.word	0x400204b8
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	bf14      	ite	ne
 8002ed2:	2301      	movne	r3, #1
 8002ed4:	2300      	moveq	r3, #0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d015      	beq.n	8002f08 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681a      	ldr	r2, [r3, #0]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0204 	bic.w	r2, r2, #4
 8002eea:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef0:	f003 031f 	and.w	r3, r3, #31
 8002ef4:	2208      	movs	r2, #8
 8002ef6:	409a      	lsls	r2, r3
 8002ef8:	6a3b      	ldr	r3, [r7, #32]
 8002efa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f00:	f043 0201 	orr.w	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f0c:	f003 031f 	and.w	r3, r3, #31
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	fa22 f303 	lsr.w	r3, r2, r3
 8002f16:	f003 0301 	and.w	r3, r3, #1
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d06e      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a69      	ldr	r2, [pc, #420]	@ (80030c8 <HAL_DMA_IRQHandler+0x3f8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d04a      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a67      	ldr	r2, [pc, #412]	@ (80030cc <HAL_DMA_IRQHandler+0x3fc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d045      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a66      	ldr	r2, [pc, #408]	@ (80030d0 <HAL_DMA_IRQHandler+0x400>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d040      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a64      	ldr	r2, [pc, #400]	@ (80030d4 <HAL_DMA_IRQHandler+0x404>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d03b      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a63      	ldr	r2, [pc, #396]	@ (80030d8 <HAL_DMA_IRQHandler+0x408>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d036      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a61      	ldr	r2, [pc, #388]	@ (80030dc <HAL_DMA_IRQHandler+0x40c>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d031      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a60      	ldr	r2, [pc, #384]	@ (80030e0 <HAL_DMA_IRQHandler+0x410>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d02c      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a5e      	ldr	r2, [pc, #376]	@ (80030e4 <HAL_DMA_IRQHandler+0x414>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d027      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a5d      	ldr	r2, [pc, #372]	@ (80030e8 <HAL_DMA_IRQHandler+0x418>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d022      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a5b      	ldr	r2, [pc, #364]	@ (80030ec <HAL_DMA_IRQHandler+0x41c>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d01d      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a5a      	ldr	r2, [pc, #360]	@ (80030f0 <HAL_DMA_IRQHandler+0x420>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d018      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a58      	ldr	r2, [pc, #352]	@ (80030f4 <HAL_DMA_IRQHandler+0x424>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d013      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a57      	ldr	r2, [pc, #348]	@ (80030f8 <HAL_DMA_IRQHandler+0x428>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a55      	ldr	r2, [pc, #340]	@ (80030fc <HAL_DMA_IRQHandler+0x42c>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a54      	ldr	r2, [pc, #336]	@ (8003100 <HAL_DMA_IRQHandler+0x430>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_DMA_IRQHandler+0x2ee>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a52      	ldr	r2, [pc, #328]	@ (8003104 <HAL_DMA_IRQHandler+0x434>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d10a      	bne.n	8002fd4 <HAL_DMA_IRQHandler+0x304>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	695b      	ldr	r3, [r3, #20]
 8002fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	bf14      	ite	ne
 8002fcc:	2301      	movne	r3, #1
 8002fce:	2300      	moveq	r3, #0
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	e003      	b.n	8002fdc <HAL_DMA_IRQHandler+0x30c>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2300      	movs	r3, #0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fe4:	f003 031f 	and.w	r3, r3, #31
 8002fe8:	2201      	movs	r2, #1
 8002fea:	409a      	lsls	r2, r3
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ff4:	f043 0202 	orr.w	r2, r3, #2
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003000:	f003 031f 	and.w	r3, r3, #31
 8003004:	2204      	movs	r2, #4
 8003006:	409a      	lsls	r2, r3
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	4013      	ands	r3, r2
 800300c:	2b00      	cmp	r3, #0
 800300e:	f000 808f 	beq.w	8003130 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a2c      	ldr	r2, [pc, #176]	@ (80030c8 <HAL_DMA_IRQHandler+0x3f8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d04a      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a2a      	ldr	r2, [pc, #168]	@ (80030cc <HAL_DMA_IRQHandler+0x3fc>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d045      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a29      	ldr	r2, [pc, #164]	@ (80030d0 <HAL_DMA_IRQHandler+0x400>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d040      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a27      	ldr	r2, [pc, #156]	@ (80030d4 <HAL_DMA_IRQHandler+0x404>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d03b      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a26      	ldr	r2, [pc, #152]	@ (80030d8 <HAL_DMA_IRQHandler+0x408>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d036      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a24      	ldr	r2, [pc, #144]	@ (80030dc <HAL_DMA_IRQHandler+0x40c>)
 800304a:	4293      	cmp	r3, r2
 800304c:	d031      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4a23      	ldr	r2, [pc, #140]	@ (80030e0 <HAL_DMA_IRQHandler+0x410>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d02c      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a21      	ldr	r2, [pc, #132]	@ (80030e4 <HAL_DMA_IRQHandler+0x414>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d027      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a20      	ldr	r2, [pc, #128]	@ (80030e8 <HAL_DMA_IRQHandler+0x418>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d022      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a1e      	ldr	r2, [pc, #120]	@ (80030ec <HAL_DMA_IRQHandler+0x41c>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01d      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <HAL_DMA_IRQHandler+0x420>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d018      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a1b      	ldr	r2, [pc, #108]	@ (80030f4 <HAL_DMA_IRQHandler+0x424>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d013      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a1a      	ldr	r2, [pc, #104]	@ (80030f8 <HAL_DMA_IRQHandler+0x428>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d00e      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a18      	ldr	r2, [pc, #96]	@ (80030fc <HAL_DMA_IRQHandler+0x42c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d009      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a17      	ldr	r2, [pc, #92]	@ (8003100 <HAL_DMA_IRQHandler+0x430>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d004      	beq.n	80030b2 <HAL_DMA_IRQHandler+0x3e2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a15      	ldr	r2, [pc, #84]	@ (8003104 <HAL_DMA_IRQHandler+0x434>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d12a      	bne.n	8003108 <HAL_DMA_IRQHandler+0x438>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 0302 	and.w	r3, r3, #2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	bf14      	ite	ne
 80030c0:	2301      	movne	r3, #1
 80030c2:	2300      	moveq	r3, #0
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	e023      	b.n	8003110 <HAL_DMA_IRQHandler+0x440>
 80030c8:	40020010 	.word	0x40020010
 80030cc:	40020028 	.word	0x40020028
 80030d0:	40020040 	.word	0x40020040
 80030d4:	40020058 	.word	0x40020058
 80030d8:	40020070 	.word	0x40020070
 80030dc:	40020088 	.word	0x40020088
 80030e0:	400200a0 	.word	0x400200a0
 80030e4:	400200b8 	.word	0x400200b8
 80030e8:	40020410 	.word	0x40020410
 80030ec:	40020428 	.word	0x40020428
 80030f0:	40020440 	.word	0x40020440
 80030f4:	40020458 	.word	0x40020458
 80030f8:	40020470 	.word	0x40020470
 80030fc:	40020488 	.word	0x40020488
 8003100:	400204a0 	.word	0x400204a0
 8003104:	400204b8 	.word	0x400204b8
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2300      	movs	r3, #0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d00d      	beq.n	8003130 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003118:	f003 031f 	and.w	r3, r3, #31
 800311c:	2204      	movs	r2, #4
 800311e:	409a      	lsls	r2, r3
 8003120:	6a3b      	ldr	r3, [r7, #32]
 8003122:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003128:	f043 0204 	orr.w	r2, r3, #4
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003134:	f003 031f 	and.w	r3, r3, #31
 8003138:	2210      	movs	r2, #16
 800313a:	409a      	lsls	r2, r3
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	4013      	ands	r3, r2
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 80a6 	beq.w	8003292 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a85      	ldr	r2, [pc, #532]	@ (8003360 <HAL_DMA_IRQHandler+0x690>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d04a      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a83      	ldr	r2, [pc, #524]	@ (8003364 <HAL_DMA_IRQHandler+0x694>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d045      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a82      	ldr	r2, [pc, #520]	@ (8003368 <HAL_DMA_IRQHandler+0x698>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d040      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a80      	ldr	r2, [pc, #512]	@ (800336c <HAL_DMA_IRQHandler+0x69c>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d03b      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7f      	ldr	r2, [pc, #508]	@ (8003370 <HAL_DMA_IRQHandler+0x6a0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d036      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a7d      	ldr	r2, [pc, #500]	@ (8003374 <HAL_DMA_IRQHandler+0x6a4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d031      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a7c      	ldr	r2, [pc, #496]	@ (8003378 <HAL_DMA_IRQHandler+0x6a8>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d02c      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a7a      	ldr	r2, [pc, #488]	@ (800337c <HAL_DMA_IRQHandler+0x6ac>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d027      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a79      	ldr	r2, [pc, #484]	@ (8003380 <HAL_DMA_IRQHandler+0x6b0>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d022      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	4a77      	ldr	r2, [pc, #476]	@ (8003384 <HAL_DMA_IRQHandler+0x6b4>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d01d      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a76      	ldr	r2, [pc, #472]	@ (8003388 <HAL_DMA_IRQHandler+0x6b8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d018      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a74      	ldr	r2, [pc, #464]	@ (800338c <HAL_DMA_IRQHandler+0x6bc>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d013      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a73      	ldr	r2, [pc, #460]	@ (8003390 <HAL_DMA_IRQHandler+0x6c0>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d00e      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a71      	ldr	r2, [pc, #452]	@ (8003394 <HAL_DMA_IRQHandler+0x6c4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d009      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a70      	ldr	r2, [pc, #448]	@ (8003398 <HAL_DMA_IRQHandler+0x6c8>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d004      	beq.n	80031e6 <HAL_DMA_IRQHandler+0x516>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a6e      	ldr	r2, [pc, #440]	@ (800339c <HAL_DMA_IRQHandler+0x6cc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d10a      	bne.n	80031fc <HAL_DMA_IRQHandler+0x52c>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0308 	and.w	r3, r3, #8
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	e009      	b.n	8003210 <HAL_DMA_IRQHandler+0x540>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f003 0304 	and.w	r3, r3, #4
 8003206:	2b00      	cmp	r3, #0
 8003208:	bf14      	ite	ne
 800320a:	2301      	movne	r3, #1
 800320c:	2300      	moveq	r3, #0
 800320e:	b2db      	uxtb	r3, r3
 8003210:	2b00      	cmp	r3, #0
 8003212:	d03e      	beq.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003218:	f003 031f 	and.w	r3, r3, #31
 800321c:	2210      	movs	r2, #16
 800321e:	409a      	lsls	r2, r3
 8003220:	6a3b      	ldr	r3, [r7, #32]
 8003222:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d018      	beq.n	8003264 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d108      	bne.n	8003252 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003244:	2b00      	cmp	r3, #0
 8003246:	d024      	beq.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	4798      	blx	r3
 8003250:	e01f      	b.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003256:	2b00      	cmp	r3, #0
 8003258:	d01b      	beq.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	4798      	blx	r3
 8003262:	e016      	b.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800326e:	2b00      	cmp	r3, #0
 8003270:	d107      	bne.n	8003282 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681a      	ldr	r2, [r3, #0]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f022 0208 	bic.w	r2, r2, #8
 8003280:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003286:	2b00      	cmp	r3, #0
 8003288:	d003      	beq.n	8003292 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003296:	f003 031f 	and.w	r3, r3, #31
 800329a:	2220      	movs	r2, #32
 800329c:	409a      	lsls	r2, r3
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4013      	ands	r3, r2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f000 8110 	beq.w	80034c8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a2c      	ldr	r2, [pc, #176]	@ (8003360 <HAL_DMA_IRQHandler+0x690>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d04a      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a2b      	ldr	r2, [pc, #172]	@ (8003364 <HAL_DMA_IRQHandler+0x694>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d045      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a29      	ldr	r2, [pc, #164]	@ (8003368 <HAL_DMA_IRQHandler+0x698>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d040      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4a28      	ldr	r2, [pc, #160]	@ (800336c <HAL_DMA_IRQHandler+0x69c>)
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d03b      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a26      	ldr	r2, [pc, #152]	@ (8003370 <HAL_DMA_IRQHandler+0x6a0>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d036      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4a25      	ldr	r2, [pc, #148]	@ (8003374 <HAL_DMA_IRQHandler+0x6a4>)
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d031      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a23      	ldr	r2, [pc, #140]	@ (8003378 <HAL_DMA_IRQHandler+0x6a8>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d02c      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a22      	ldr	r2, [pc, #136]	@ (800337c <HAL_DMA_IRQHandler+0x6ac>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d027      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a20      	ldr	r2, [pc, #128]	@ (8003380 <HAL_DMA_IRQHandler+0x6b0>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d022      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1f      	ldr	r2, [pc, #124]	@ (8003384 <HAL_DMA_IRQHandler+0x6b4>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d01d      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4a1d      	ldr	r2, [pc, #116]	@ (8003388 <HAL_DMA_IRQHandler+0x6b8>)
 8003312:	4293      	cmp	r3, r2
 8003314:	d018      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a1c      	ldr	r2, [pc, #112]	@ (800338c <HAL_DMA_IRQHandler+0x6bc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d013      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1a      	ldr	r2, [pc, #104]	@ (8003390 <HAL_DMA_IRQHandler+0x6c0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d00e      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a19      	ldr	r2, [pc, #100]	@ (8003394 <HAL_DMA_IRQHandler+0x6c4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d009      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a17      	ldr	r2, [pc, #92]	@ (8003398 <HAL_DMA_IRQHandler+0x6c8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d004      	beq.n	8003348 <HAL_DMA_IRQHandler+0x678>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a16      	ldr	r2, [pc, #88]	@ (800339c <HAL_DMA_IRQHandler+0x6cc>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d12b      	bne.n	80033a0 <HAL_DMA_IRQHandler+0x6d0>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf14      	ite	ne
 8003356:	2301      	movne	r3, #1
 8003358:	2300      	moveq	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	e02a      	b.n	80033b4 <HAL_DMA_IRQHandler+0x6e4>
 800335e:	bf00      	nop
 8003360:	40020010 	.word	0x40020010
 8003364:	40020028 	.word	0x40020028
 8003368:	40020040 	.word	0x40020040
 800336c:	40020058 	.word	0x40020058
 8003370:	40020070 	.word	0x40020070
 8003374:	40020088 	.word	0x40020088
 8003378:	400200a0 	.word	0x400200a0
 800337c:	400200b8 	.word	0x400200b8
 8003380:	40020410 	.word	0x40020410
 8003384:	40020428 	.word	0x40020428
 8003388:	40020440 	.word	0x40020440
 800338c:	40020458 	.word	0x40020458
 8003390:	40020470 	.word	0x40020470
 8003394:	40020488 	.word	0x40020488
 8003398:	400204a0 	.word	0x400204a0
 800339c:	400204b8 	.word	0x400204b8
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	bf14      	ite	ne
 80033ae:	2301      	movne	r3, #1
 80033b0:	2300      	moveq	r3, #0
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	f000 8087 	beq.w	80034c8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033be:	f003 031f 	and.w	r3, r3, #31
 80033c2:	2220      	movs	r2, #32
 80033c4:	409a      	lsls	r2, r3
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d139      	bne.n	800344a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0216 	bic.w	r2, r2, #22
 80033e4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033f4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d103      	bne.n	8003406 <HAL_DMA_IRQHandler+0x736>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003402:	2b00      	cmp	r3, #0
 8003404:	d007      	beq.n	8003416 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0208 	bic.w	r2, r2, #8
 8003414:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800341a:	f003 031f 	and.w	r3, r3, #31
 800341e:	223f      	movs	r2, #63	@ 0x3f
 8003420:	409a      	lsls	r2, r3
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800343a:	2b00      	cmp	r3, #0
 800343c:	f000 834a 	beq.w	8003ad4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	4798      	blx	r3
          }
          return;
 8003448:	e344      	b.n	8003ad4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d018      	beq.n	800348a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d108      	bne.n	8003478 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	2b00      	cmp	r3, #0
 800346c:	d02c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	4798      	blx	r3
 8003476:	e027      	b.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800347c:	2b00      	cmp	r3, #0
 800347e:	d023      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	4798      	blx	r3
 8003488:	e01e      	b.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003494:	2b00      	cmp	r3, #0
 8003496:	d10f      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0210 	bic.w	r2, r2, #16
 80034a6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	f000 8306 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	f000 8088 	beq.w	80035f0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2204      	movs	r2, #4
 80034e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a7a      	ldr	r2, [pc, #488]	@ (80036d8 <HAL_DMA_IRQHandler+0xa08>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d04a      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a79      	ldr	r2, [pc, #484]	@ (80036dc <HAL_DMA_IRQHandler+0xa0c>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d045      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a77      	ldr	r2, [pc, #476]	@ (80036e0 <HAL_DMA_IRQHandler+0xa10>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d040      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a76      	ldr	r2, [pc, #472]	@ (80036e4 <HAL_DMA_IRQHandler+0xa14>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d03b      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a74      	ldr	r2, [pc, #464]	@ (80036e8 <HAL_DMA_IRQHandler+0xa18>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d036      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a73      	ldr	r2, [pc, #460]	@ (80036ec <HAL_DMA_IRQHandler+0xa1c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d031      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a71      	ldr	r2, [pc, #452]	@ (80036f0 <HAL_DMA_IRQHandler+0xa20>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d02c      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a70      	ldr	r2, [pc, #448]	@ (80036f4 <HAL_DMA_IRQHandler+0xa24>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d027      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a6e      	ldr	r2, [pc, #440]	@ (80036f8 <HAL_DMA_IRQHandler+0xa28>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d022      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6d      	ldr	r2, [pc, #436]	@ (80036fc <HAL_DMA_IRQHandler+0xa2c>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d01d      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a6b      	ldr	r2, [pc, #428]	@ (8003700 <HAL_DMA_IRQHandler+0xa30>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d018      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a6a      	ldr	r2, [pc, #424]	@ (8003704 <HAL_DMA_IRQHandler+0xa34>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d013      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a68      	ldr	r2, [pc, #416]	@ (8003708 <HAL_DMA_IRQHandler+0xa38>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00e      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a67      	ldr	r2, [pc, #412]	@ (800370c <HAL_DMA_IRQHandler+0xa3c>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d009      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a65      	ldr	r2, [pc, #404]	@ (8003710 <HAL_DMA_IRQHandler+0xa40>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d004      	beq.n	8003588 <HAL_DMA_IRQHandler+0x8b8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a64      	ldr	r2, [pc, #400]	@ (8003714 <HAL_DMA_IRQHandler+0xa44>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d108      	bne.n	800359a <HAL_DMA_IRQHandler+0x8ca>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f022 0201 	bic.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
 8003598:	e007      	b.n	80035aa <HAL_DMA_IRQHandler+0x8da>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0201 	bic.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	3301      	adds	r3, #1
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d307      	bcc.n	80035c6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1f2      	bne.n	80035aa <HAL_DMA_IRQHandler+0x8da>
 80035c4:	e000      	b.n	80035c8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80035c6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d004      	beq.n	80035e0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2203      	movs	r2, #3
 80035da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 80035de:	e003      	b.n	80035e8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f000 8272 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	4798      	blx	r3
 8003602:	e26c      	b.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a43      	ldr	r2, [pc, #268]	@ (8003718 <HAL_DMA_IRQHandler+0xa48>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d022      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a42      	ldr	r2, [pc, #264]	@ (800371c <HAL_DMA_IRQHandler+0xa4c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d01d      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a40      	ldr	r2, [pc, #256]	@ (8003720 <HAL_DMA_IRQHandler+0xa50>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d018      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a3f      	ldr	r2, [pc, #252]	@ (8003724 <HAL_DMA_IRQHandler+0xa54>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d013      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a3d      	ldr	r2, [pc, #244]	@ (8003728 <HAL_DMA_IRQHandler+0xa58>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00e      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a3c      	ldr	r2, [pc, #240]	@ (800372c <HAL_DMA_IRQHandler+0xa5c>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a3a      	ldr	r2, [pc, #232]	@ (8003730 <HAL_DMA_IRQHandler+0xa60>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d004      	beq.n	8003654 <HAL_DMA_IRQHandler+0x984>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a39      	ldr	r2, [pc, #228]	@ (8003734 <HAL_DMA_IRQHandler+0xa64>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d101      	bne.n	8003658 <HAL_DMA_IRQHandler+0x988>
 8003654:	2301      	movs	r3, #1
 8003656:	e000      	b.n	800365a <HAL_DMA_IRQHandler+0x98a>
 8003658:	2300      	movs	r3, #0
 800365a:	2b00      	cmp	r3, #0
 800365c:	f000 823f 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800366c:	f003 031f 	and.w	r3, r3, #31
 8003670:	2204      	movs	r2, #4
 8003672:	409a      	lsls	r2, r3
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	4013      	ands	r3, r2
 8003678:	2b00      	cmp	r3, #0
 800367a:	f000 80cd 	beq.w	8003818 <HAL_DMA_IRQHandler+0xb48>
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	f003 0304 	and.w	r3, r3, #4
 8003684:	2b00      	cmp	r3, #0
 8003686:	f000 80c7 	beq.w	8003818 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2204      	movs	r2, #4
 8003694:	409a      	lsls	r2, r3
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d049      	beq.n	8003738 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d109      	bne.n	80036c2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8210 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036c0:	e20a      	b.n	8003ad8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	f000 8206 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036d4:	e200      	b.n	8003ad8 <HAL_DMA_IRQHandler+0xe08>
 80036d6:	bf00      	nop
 80036d8:	40020010 	.word	0x40020010
 80036dc:	40020028 	.word	0x40020028
 80036e0:	40020040 	.word	0x40020040
 80036e4:	40020058 	.word	0x40020058
 80036e8:	40020070 	.word	0x40020070
 80036ec:	40020088 	.word	0x40020088
 80036f0:	400200a0 	.word	0x400200a0
 80036f4:	400200b8 	.word	0x400200b8
 80036f8:	40020410 	.word	0x40020410
 80036fc:	40020428 	.word	0x40020428
 8003700:	40020440 	.word	0x40020440
 8003704:	40020458 	.word	0x40020458
 8003708:	40020470 	.word	0x40020470
 800370c:	40020488 	.word	0x40020488
 8003710:	400204a0 	.word	0x400204a0
 8003714:	400204b8 	.word	0x400204b8
 8003718:	58025408 	.word	0x58025408
 800371c:	5802541c 	.word	0x5802541c
 8003720:	58025430 	.word	0x58025430
 8003724:	58025444 	.word	0x58025444
 8003728:	58025458 	.word	0x58025458
 800372c:	5802546c 	.word	0x5802546c
 8003730:	58025480 	.word	0x58025480
 8003734:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	f003 0320 	and.w	r3, r3, #32
 800373e:	2b00      	cmp	r3, #0
 8003740:	d160      	bne.n	8003804 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a7f      	ldr	r2, [pc, #508]	@ (8003944 <HAL_DMA_IRQHandler+0xc74>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d04a      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a7d      	ldr	r2, [pc, #500]	@ (8003948 <HAL_DMA_IRQHandler+0xc78>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d045      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a7c      	ldr	r2, [pc, #496]	@ (800394c <HAL_DMA_IRQHandler+0xc7c>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d040      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a7a      	ldr	r2, [pc, #488]	@ (8003950 <HAL_DMA_IRQHandler+0xc80>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d03b      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a79      	ldr	r2, [pc, #484]	@ (8003954 <HAL_DMA_IRQHandler+0xc84>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d036      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a77      	ldr	r2, [pc, #476]	@ (8003958 <HAL_DMA_IRQHandler+0xc88>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d031      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a76      	ldr	r2, [pc, #472]	@ (800395c <HAL_DMA_IRQHandler+0xc8c>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d02c      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a74      	ldr	r2, [pc, #464]	@ (8003960 <HAL_DMA_IRQHandler+0xc90>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d027      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a73      	ldr	r2, [pc, #460]	@ (8003964 <HAL_DMA_IRQHandler+0xc94>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d022      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a71      	ldr	r2, [pc, #452]	@ (8003968 <HAL_DMA_IRQHandler+0xc98>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d01d      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a70      	ldr	r2, [pc, #448]	@ (800396c <HAL_DMA_IRQHandler+0xc9c>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d018      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a6e      	ldr	r2, [pc, #440]	@ (8003970 <HAL_DMA_IRQHandler+0xca0>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d013      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a6d      	ldr	r2, [pc, #436]	@ (8003974 <HAL_DMA_IRQHandler+0xca4>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d00e      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a6b      	ldr	r2, [pc, #428]	@ (8003978 <HAL_DMA_IRQHandler+0xca8>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d009      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a6a      	ldr	r2, [pc, #424]	@ (800397c <HAL_DMA_IRQHandler+0xcac>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d004      	beq.n	80037e2 <HAL_DMA_IRQHandler+0xb12>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a68      	ldr	r2, [pc, #416]	@ (8003980 <HAL_DMA_IRQHandler+0xcb0>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d108      	bne.n	80037f4 <HAL_DMA_IRQHandler+0xb24>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f022 0208 	bic.w	r2, r2, #8
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	e007      	b.n	8003804 <HAL_DMA_IRQHandler+0xb34>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f022 0204 	bic.w	r2, r2, #4
 8003802:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 8165 	beq.w	8003ad8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003812:	6878      	ldr	r0, [r7, #4]
 8003814:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003816:	e15f      	b.n	8003ad8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800381c:	f003 031f 	and.w	r3, r3, #31
 8003820:	2202      	movs	r2, #2
 8003822:	409a      	lsls	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	f000 80c5 	beq.w	80039b8 <HAL_DMA_IRQHandler+0xce8>
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 80bf 	beq.w	80039b8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2202      	movs	r2, #2
 8003844:	409a      	lsls	r2, r3
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003850:	2b00      	cmp	r3, #0
 8003852:	d018      	beq.n	8003886 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800385a:	2b00      	cmp	r3, #0
 800385c:	d109      	bne.n	8003872 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 813a 	beq.w	8003adc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003870:	e134      	b.n	8003adc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003876:	2b00      	cmp	r3, #0
 8003878:	f000 8130 	beq.w	8003adc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003884:	e12a      	b.n	8003adc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0320 	and.w	r3, r3, #32
 800388c:	2b00      	cmp	r3, #0
 800388e:	f040 8089 	bne.w	80039a4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a2b      	ldr	r2, [pc, #172]	@ (8003944 <HAL_DMA_IRQHandler+0xc74>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d04a      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a29      	ldr	r2, [pc, #164]	@ (8003948 <HAL_DMA_IRQHandler+0xc78>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d045      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a28      	ldr	r2, [pc, #160]	@ (800394c <HAL_DMA_IRQHandler+0xc7c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d040      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a26      	ldr	r2, [pc, #152]	@ (8003950 <HAL_DMA_IRQHandler+0xc80>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d03b      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	4a25      	ldr	r2, [pc, #148]	@ (8003954 <HAL_DMA_IRQHandler+0xc84>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d036      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a23      	ldr	r2, [pc, #140]	@ (8003958 <HAL_DMA_IRQHandler+0xc88>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d031      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a22      	ldr	r2, [pc, #136]	@ (800395c <HAL_DMA_IRQHandler+0xc8c>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d02c      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a20      	ldr	r2, [pc, #128]	@ (8003960 <HAL_DMA_IRQHandler+0xc90>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d027      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a1f      	ldr	r2, [pc, #124]	@ (8003964 <HAL_DMA_IRQHandler+0xc94>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d022      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a1d      	ldr	r2, [pc, #116]	@ (8003968 <HAL_DMA_IRQHandler+0xc98>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d01d      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a1c      	ldr	r2, [pc, #112]	@ (800396c <HAL_DMA_IRQHandler+0xc9c>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d018      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a1a      	ldr	r2, [pc, #104]	@ (8003970 <HAL_DMA_IRQHandler+0xca0>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d013      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a19      	ldr	r2, [pc, #100]	@ (8003974 <HAL_DMA_IRQHandler+0xca4>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d00e      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a17      	ldr	r2, [pc, #92]	@ (8003978 <HAL_DMA_IRQHandler+0xca8>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d009      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a16      	ldr	r2, [pc, #88]	@ (800397c <HAL_DMA_IRQHandler+0xcac>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d004      	beq.n	8003932 <HAL_DMA_IRQHandler+0xc62>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a14      	ldr	r2, [pc, #80]	@ (8003980 <HAL_DMA_IRQHandler+0xcb0>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d128      	bne.n	8003984 <HAL_DMA_IRQHandler+0xcb4>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0214 	bic.w	r2, r2, #20
 8003940:	601a      	str	r2, [r3, #0]
 8003942:	e027      	b.n	8003994 <HAL_DMA_IRQHandler+0xcc4>
 8003944:	40020010 	.word	0x40020010
 8003948:	40020028 	.word	0x40020028
 800394c:	40020040 	.word	0x40020040
 8003950:	40020058 	.word	0x40020058
 8003954:	40020070 	.word	0x40020070
 8003958:	40020088 	.word	0x40020088
 800395c:	400200a0 	.word	0x400200a0
 8003960:	400200b8 	.word	0x400200b8
 8003964:	40020410 	.word	0x40020410
 8003968:	40020428 	.word	0x40020428
 800396c:	40020440 	.word	0x40020440
 8003970:	40020458 	.word	0x40020458
 8003974:	40020470 	.word	0x40020470
 8003978:	40020488 	.word	0x40020488
 800397c:	400204a0 	.word	0x400204a0
 8003980:	400204b8 	.word	0x400204b8
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 020a 	bic.w	r2, r2, #10
 8003992:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	f000 8097 	beq.w	8003adc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80039b2:	6878      	ldr	r0, [r7, #4]
 80039b4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80039b6:	e091      	b.n	8003adc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039bc:	f003 031f 	and.w	r3, r3, #31
 80039c0:	2208      	movs	r2, #8
 80039c2:	409a      	lsls	r2, r3
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	4013      	ands	r3, r2
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	f000 8088 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f000 8082 	beq.w	8003ade <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a41      	ldr	r2, [pc, #260]	@ (8003ae4 <HAL_DMA_IRQHandler+0xe14>)
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d04a      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a3f      	ldr	r2, [pc, #252]	@ (8003ae8 <HAL_DMA_IRQHandler+0xe18>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d045      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a3e      	ldr	r2, [pc, #248]	@ (8003aec <HAL_DMA_IRQHandler+0xe1c>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d040      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a3c      	ldr	r2, [pc, #240]	@ (8003af0 <HAL_DMA_IRQHandler+0xe20>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d03b      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a3b      	ldr	r2, [pc, #236]	@ (8003af4 <HAL_DMA_IRQHandler+0xe24>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d036      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a39      	ldr	r2, [pc, #228]	@ (8003af8 <HAL_DMA_IRQHandler+0xe28>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a38      	ldr	r2, [pc, #224]	@ (8003afc <HAL_DMA_IRQHandler+0xe2c>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d02c      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a36      	ldr	r2, [pc, #216]	@ (8003b00 <HAL_DMA_IRQHandler+0xe30>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d027      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a35      	ldr	r2, [pc, #212]	@ (8003b04 <HAL_DMA_IRQHandler+0xe34>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d022      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a33      	ldr	r2, [pc, #204]	@ (8003b08 <HAL_DMA_IRQHandler+0xe38>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d01d      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a32      	ldr	r2, [pc, #200]	@ (8003b0c <HAL_DMA_IRQHandler+0xe3c>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d018      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a30      	ldr	r2, [pc, #192]	@ (8003b10 <HAL_DMA_IRQHandler+0xe40>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d013      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a2f      	ldr	r2, [pc, #188]	@ (8003b14 <HAL_DMA_IRQHandler+0xe44>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d00e      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a2d      	ldr	r2, [pc, #180]	@ (8003b18 <HAL_DMA_IRQHandler+0xe48>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d009      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a2c      	ldr	r2, [pc, #176]	@ (8003b1c <HAL_DMA_IRQHandler+0xe4c>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d004      	beq.n	8003a7a <HAL_DMA_IRQHandler+0xdaa>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a2a      	ldr	r2, [pc, #168]	@ (8003b20 <HAL_DMA_IRQHandler+0xe50>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d108      	bne.n	8003a8c <HAL_DMA_IRQHandler+0xdbc>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f022 021c 	bic.w	r2, r2, #28
 8003a88:	601a      	str	r2, [r3, #0]
 8003a8a:	e007      	b.n	8003a9c <HAL_DMA_IRQHandler+0xdcc>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 020e 	bic.w	r2, r2, #14
 8003a9a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aa0:	f003 031f 	and.w	r3, r3, #31
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	409a      	lsls	r2, r3
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d009      	beq.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
 8003ad2:	e004      	b.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003ad4:	bf00      	nop
 8003ad6:	e002      	b.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ad8:	bf00      	nop
 8003ada:	e000      	b.n	8003ade <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003adc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003ade:	3728      	adds	r7, #40	@ 0x28
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	40020010 	.word	0x40020010
 8003ae8:	40020028 	.word	0x40020028
 8003aec:	40020040 	.word	0x40020040
 8003af0:	40020058 	.word	0x40020058
 8003af4:	40020070 	.word	0x40020070
 8003af8:	40020088 	.word	0x40020088
 8003afc:	400200a0 	.word	0x400200a0
 8003b00:	400200b8 	.word	0x400200b8
 8003b04:	40020410 	.word	0x40020410
 8003b08:	40020428 	.word	0x40020428
 8003b0c:	40020440 	.word	0x40020440
 8003b10:	40020458 	.word	0x40020458
 8003b14:	40020470 	.word	0x40020470
 8003b18:	40020488 	.word	0x40020488
 8003b1c:	400204a0 	.word	0x400204a0
 8003b20:	400204b8 	.word	0x400204b8

08003b24 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b083      	sub	sp, #12
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	370c      	adds	r7, #12
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr

08003b3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
 8003b48:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b4e:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b54:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7f      	ldr	r2, [pc, #508]	@ (8003d58 <DMA_SetConfig+0x21c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d072      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a7d      	ldr	r2, [pc, #500]	@ (8003d5c <DMA_SetConfig+0x220>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d06d      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7c      	ldr	r2, [pc, #496]	@ (8003d60 <DMA_SetConfig+0x224>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d068      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a7a      	ldr	r2, [pc, #488]	@ (8003d64 <DMA_SetConfig+0x228>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d063      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a79      	ldr	r2, [pc, #484]	@ (8003d68 <DMA_SetConfig+0x22c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d05e      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a77      	ldr	r2, [pc, #476]	@ (8003d6c <DMA_SetConfig+0x230>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d059      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a76      	ldr	r2, [pc, #472]	@ (8003d70 <DMA_SetConfig+0x234>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d054      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a74      	ldr	r2, [pc, #464]	@ (8003d74 <DMA_SetConfig+0x238>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d04f      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a73      	ldr	r2, [pc, #460]	@ (8003d78 <DMA_SetConfig+0x23c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d04a      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a71      	ldr	r2, [pc, #452]	@ (8003d7c <DMA_SetConfig+0x240>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d045      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a70      	ldr	r2, [pc, #448]	@ (8003d80 <DMA_SetConfig+0x244>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d040      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a6e      	ldr	r2, [pc, #440]	@ (8003d84 <DMA_SetConfig+0x248>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d03b      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a6d      	ldr	r2, [pc, #436]	@ (8003d88 <DMA_SetConfig+0x24c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d036      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a6b      	ldr	r2, [pc, #428]	@ (8003d8c <DMA_SetConfig+0x250>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d031      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a6a      	ldr	r2, [pc, #424]	@ (8003d90 <DMA_SetConfig+0x254>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d02c      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a68      	ldr	r2, [pc, #416]	@ (8003d94 <DMA_SetConfig+0x258>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d027      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a67      	ldr	r2, [pc, #412]	@ (8003d98 <DMA_SetConfig+0x25c>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d022      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a65      	ldr	r2, [pc, #404]	@ (8003d9c <DMA_SetConfig+0x260>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d01d      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a64      	ldr	r2, [pc, #400]	@ (8003da0 <DMA_SetConfig+0x264>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d018      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a62      	ldr	r2, [pc, #392]	@ (8003da4 <DMA_SetConfig+0x268>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d013      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a61      	ldr	r2, [pc, #388]	@ (8003da8 <DMA_SetConfig+0x26c>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d00e      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a5f      	ldr	r2, [pc, #380]	@ (8003dac <DMA_SetConfig+0x270>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d009      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a5e      	ldr	r2, [pc, #376]	@ (8003db0 <DMA_SetConfig+0x274>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d004      	beq.n	8003c46 <DMA_SetConfig+0x10a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a5c      	ldr	r2, [pc, #368]	@ (8003db4 <DMA_SetConfig+0x278>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d101      	bne.n	8003c4a <DMA_SetConfig+0x10e>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <DMA_SetConfig+0x110>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d00d      	beq.n	8003c6c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003c58:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d004      	beq.n	8003c6c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003c6a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a39      	ldr	r2, [pc, #228]	@ (8003d58 <DMA_SetConfig+0x21c>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d04a      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a38      	ldr	r2, [pc, #224]	@ (8003d5c <DMA_SetConfig+0x220>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d045      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a36      	ldr	r2, [pc, #216]	@ (8003d60 <DMA_SetConfig+0x224>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d040      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a35      	ldr	r2, [pc, #212]	@ (8003d64 <DMA_SetConfig+0x228>)
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d03b      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a33      	ldr	r2, [pc, #204]	@ (8003d68 <DMA_SetConfig+0x22c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d036      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a32      	ldr	r2, [pc, #200]	@ (8003d6c <DMA_SetConfig+0x230>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d031      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a30      	ldr	r2, [pc, #192]	@ (8003d70 <DMA_SetConfig+0x234>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d02c      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2f      	ldr	r2, [pc, #188]	@ (8003d74 <DMA_SetConfig+0x238>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d027      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a2d      	ldr	r2, [pc, #180]	@ (8003d78 <DMA_SetConfig+0x23c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d022      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a2c      	ldr	r2, [pc, #176]	@ (8003d7c <DMA_SetConfig+0x240>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d01d      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a2a      	ldr	r2, [pc, #168]	@ (8003d80 <DMA_SetConfig+0x244>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d018      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a29      	ldr	r2, [pc, #164]	@ (8003d84 <DMA_SetConfig+0x248>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d013      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a27      	ldr	r2, [pc, #156]	@ (8003d88 <DMA_SetConfig+0x24c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00e      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a26      	ldr	r2, [pc, #152]	@ (8003d8c <DMA_SetConfig+0x250>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d009      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a24      	ldr	r2, [pc, #144]	@ (8003d90 <DMA_SetConfig+0x254>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d004      	beq.n	8003d0c <DMA_SetConfig+0x1d0>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a23      	ldr	r2, [pc, #140]	@ (8003d94 <DMA_SetConfig+0x258>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d101      	bne.n	8003d10 <DMA_SetConfig+0x1d4>
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <DMA_SetConfig+0x1d6>
 8003d10:	2300      	movs	r3, #0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d059      	beq.n	8003dca <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d1a:	f003 031f 	and.w	r3, r3, #31
 8003d1e:	223f      	movs	r2, #63	@ 0x3f
 8003d20:	409a      	lsls	r2, r3
 8003d22:	697b      	ldr	r3, [r7, #20]
 8003d24:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d34:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	683a      	ldr	r2, [r7, #0]
 8003d3c:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	689b      	ldr	r3, [r3, #8]
 8003d42:	2b40      	cmp	r3, #64	@ 0x40
 8003d44:	d138      	bne.n	8003db8 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	68ba      	ldr	r2, [r7, #8]
 8003d54:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003d56:	e086      	b.n	8003e66 <DMA_SetConfig+0x32a>
 8003d58:	40020010 	.word	0x40020010
 8003d5c:	40020028 	.word	0x40020028
 8003d60:	40020040 	.word	0x40020040
 8003d64:	40020058 	.word	0x40020058
 8003d68:	40020070 	.word	0x40020070
 8003d6c:	40020088 	.word	0x40020088
 8003d70:	400200a0 	.word	0x400200a0
 8003d74:	400200b8 	.word	0x400200b8
 8003d78:	40020410 	.word	0x40020410
 8003d7c:	40020428 	.word	0x40020428
 8003d80:	40020440 	.word	0x40020440
 8003d84:	40020458 	.word	0x40020458
 8003d88:	40020470 	.word	0x40020470
 8003d8c:	40020488 	.word	0x40020488
 8003d90:	400204a0 	.word	0x400204a0
 8003d94:	400204b8 	.word	0x400204b8
 8003d98:	58025408 	.word	0x58025408
 8003d9c:	5802541c 	.word	0x5802541c
 8003da0:	58025430 	.word	0x58025430
 8003da4:	58025444 	.word	0x58025444
 8003da8:	58025458 	.word	0x58025458
 8003dac:	5802546c 	.word	0x5802546c
 8003db0:	58025480 	.word	0x58025480
 8003db4:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	60da      	str	r2, [r3, #12]
}
 8003dc8:	e04d      	b.n	8003e66 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a29      	ldr	r2, [pc, #164]	@ (8003e74 <DMA_SetConfig+0x338>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d022      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	4a27      	ldr	r2, [pc, #156]	@ (8003e78 <DMA_SetConfig+0x33c>)
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d01d      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	4a26      	ldr	r2, [pc, #152]	@ (8003e7c <DMA_SetConfig+0x340>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d018      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a24      	ldr	r2, [pc, #144]	@ (8003e80 <DMA_SetConfig+0x344>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d013      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	4a23      	ldr	r2, [pc, #140]	@ (8003e84 <DMA_SetConfig+0x348>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d00e      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a21      	ldr	r2, [pc, #132]	@ (8003e88 <DMA_SetConfig+0x34c>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d009      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	4a20      	ldr	r2, [pc, #128]	@ (8003e8c <DMA_SetConfig+0x350>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d004      	beq.n	8003e1a <DMA_SetConfig+0x2de>
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a1e      	ldr	r2, [pc, #120]	@ (8003e90 <DMA_SetConfig+0x354>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d101      	bne.n	8003e1e <DMA_SetConfig+0x2e2>
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <DMA_SetConfig+0x2e4>
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d020      	beq.n	8003e66 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e28:	f003 031f 	and.w	r3, r3, #31
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	409a      	lsls	r2, r3
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	683a      	ldr	r2, [r7, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	2b40      	cmp	r3, #64	@ 0x40
 8003e42:	d108      	bne.n	8003e56 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68ba      	ldr	r2, [r7, #8]
 8003e52:	60da      	str	r2, [r3, #12]
}
 8003e54:	e007      	b.n	8003e66 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	60da      	str	r2, [r3, #12]
}
 8003e66:	bf00      	nop
 8003e68:	371c      	adds	r7, #28
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	58025408 	.word	0x58025408
 8003e78:	5802541c 	.word	0x5802541c
 8003e7c:	58025430 	.word	0x58025430
 8003e80:	58025444 	.word	0x58025444
 8003e84:	58025458 	.word	0x58025458
 8003e88:	5802546c 	.word	0x5802546c
 8003e8c:	58025480 	.word	0x58025480
 8003e90:	58025494 	.word	0x58025494

08003e94 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b085      	sub	sp, #20
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a42      	ldr	r2, [pc, #264]	@ (8003fac <DMA_CalcBaseAndBitshift+0x118>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d04a      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a41      	ldr	r2, [pc, #260]	@ (8003fb0 <DMA_CalcBaseAndBitshift+0x11c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d045      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a3f      	ldr	r2, [pc, #252]	@ (8003fb4 <DMA_CalcBaseAndBitshift+0x120>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d040      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a3e      	ldr	r2, [pc, #248]	@ (8003fb8 <DMA_CalcBaseAndBitshift+0x124>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d03b      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a3c      	ldr	r2, [pc, #240]	@ (8003fbc <DMA_CalcBaseAndBitshift+0x128>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d036      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a3b      	ldr	r2, [pc, #236]	@ (8003fc0 <DMA_CalcBaseAndBitshift+0x12c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d031      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a39      	ldr	r2, [pc, #228]	@ (8003fc4 <DMA_CalcBaseAndBitshift+0x130>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d02c      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a38      	ldr	r2, [pc, #224]	@ (8003fc8 <DMA_CalcBaseAndBitshift+0x134>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d027      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a36      	ldr	r2, [pc, #216]	@ (8003fcc <DMA_CalcBaseAndBitshift+0x138>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d022      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a35      	ldr	r2, [pc, #212]	@ (8003fd0 <DMA_CalcBaseAndBitshift+0x13c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d01d      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a33      	ldr	r2, [pc, #204]	@ (8003fd4 <DMA_CalcBaseAndBitshift+0x140>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d018      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a32      	ldr	r2, [pc, #200]	@ (8003fd8 <DMA_CalcBaseAndBitshift+0x144>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d013      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a30      	ldr	r2, [pc, #192]	@ (8003fdc <DMA_CalcBaseAndBitshift+0x148>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d00e      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a2f      	ldr	r2, [pc, #188]	@ (8003fe0 <DMA_CalcBaseAndBitshift+0x14c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d009      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a2d      	ldr	r2, [pc, #180]	@ (8003fe4 <DMA_CalcBaseAndBitshift+0x150>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d004      	beq.n	8003f3c <DMA_CalcBaseAndBitshift+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a2c      	ldr	r2, [pc, #176]	@ (8003fe8 <DMA_CalcBaseAndBitshift+0x154>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d101      	bne.n	8003f40 <DMA_CalcBaseAndBitshift+0xac>
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e000      	b.n	8003f42 <DMA_CalcBaseAndBitshift+0xae>
 8003f40:	2300      	movs	r3, #0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d024      	beq.n	8003f90 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	3b10      	subs	r3, #16
 8003f4e:	4a27      	ldr	r2, [pc, #156]	@ (8003fec <DMA_CalcBaseAndBitshift+0x158>)
 8003f50:	fba2 2303 	umull	r2, r3, r2, r3
 8003f54:	091b      	lsrs	r3, r3, #4
 8003f56:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 0307 	and.w	r3, r3, #7
 8003f5e:	4a24      	ldr	r2, [pc, #144]	@ (8003ff0 <DMA_CalcBaseAndBitshift+0x15c>)
 8003f60:	5cd3      	ldrb	r3, [r2, r3]
 8003f62:	461a      	mov	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2b03      	cmp	r3, #3
 8003f6c:	d908      	bls.n	8003f80 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	461a      	mov	r2, r3
 8003f74:	4b1f      	ldr	r3, [pc, #124]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f76:	4013      	ands	r3, r2
 8003f78:	1d1a      	adds	r2, r3, #4
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	659a      	str	r2, [r3, #88]	@ 0x58
 8003f7e:	e00d      	b.n	8003f9c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	461a      	mov	r2, r3
 8003f86:	4b1b      	ldr	r3, [pc, #108]	@ (8003ff4 <DMA_CalcBaseAndBitshift+0x160>)
 8003f88:	4013      	ands	r3, r2
 8003f8a:	687a      	ldr	r2, [r7, #4]
 8003f8c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f8e:	e005      	b.n	8003f9c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3714      	adds	r7, #20
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	40020010 	.word	0x40020010
 8003fb0:	40020028 	.word	0x40020028
 8003fb4:	40020040 	.word	0x40020040
 8003fb8:	40020058 	.word	0x40020058
 8003fbc:	40020070 	.word	0x40020070
 8003fc0:	40020088 	.word	0x40020088
 8003fc4:	400200a0 	.word	0x400200a0
 8003fc8:	400200b8 	.word	0x400200b8
 8003fcc:	40020410 	.word	0x40020410
 8003fd0:	40020428 	.word	0x40020428
 8003fd4:	40020440 	.word	0x40020440
 8003fd8:	40020458 	.word	0x40020458
 8003fdc:	40020470 	.word	0x40020470
 8003fe0:	40020488 	.word	0x40020488
 8003fe4:	400204a0 	.word	0x400204a0
 8003fe8:	400204b8 	.word	0x400204b8
 8003fec:	aaaaaaab 	.word	0xaaaaaaab
 8003ff0:	080094b8 	.word	0x080094b8
 8003ff4:	fffffc00 	.word	0xfffffc00

08003ff8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b085      	sub	sp, #20
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004000:	2300      	movs	r3, #0
 8004002:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d120      	bne.n	800404e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004010:	2b03      	cmp	r3, #3
 8004012:	d858      	bhi.n	80040c6 <DMA_CheckFifoParam+0xce>
 8004014:	a201      	add	r2, pc, #4	@ (adr r2, 800401c <DMA_CheckFifoParam+0x24>)
 8004016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401a:	bf00      	nop
 800401c:	0800402d 	.word	0x0800402d
 8004020:	0800403f 	.word	0x0800403f
 8004024:	0800402d 	.word	0x0800402d
 8004028:	080040c7 	.word	0x080040c7
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004030:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d048      	beq.n	80040ca <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800403c:	e045      	b.n	80040ca <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004042:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004046:	d142      	bne.n	80040ce <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800404c:	e03f      	b.n	80040ce <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	699b      	ldr	r3, [r3, #24]
 8004052:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004056:	d123      	bne.n	80040a0 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800405c:	2b03      	cmp	r3, #3
 800405e:	d838      	bhi.n	80040d2 <DMA_CheckFifoParam+0xda>
 8004060:	a201      	add	r2, pc, #4	@ (adr r2, 8004068 <DMA_CheckFifoParam+0x70>)
 8004062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004066:	bf00      	nop
 8004068:	08004079 	.word	0x08004079
 800406c:	0800407f 	.word	0x0800407f
 8004070:	08004079 	.word	0x08004079
 8004074:	08004091 	.word	0x08004091
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	73fb      	strb	r3, [r7, #15]
        break;
 800407c:	e030      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004082:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d025      	beq.n	80040d6 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800408e:	e022      	b.n	80040d6 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004094:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004098:	d11f      	bne.n	80040da <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800409e:	e01c      	b.n	80040da <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d902      	bls.n	80040ae <DMA_CheckFifoParam+0xb6>
 80040a8:	2b03      	cmp	r3, #3
 80040aa:	d003      	beq.n	80040b4 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80040ac:	e018      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	73fb      	strb	r3, [r7, #15]
        break;
 80040b2:	e015      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d00e      	beq.n	80040de <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	73fb      	strb	r3, [r7, #15]
    break;
 80040c4:	e00b      	b.n	80040de <DMA_CheckFifoParam+0xe6>
        break;
 80040c6:	bf00      	nop
 80040c8:	e00a      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040ca:	bf00      	nop
 80040cc:	e008      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040ce:	bf00      	nop
 80040d0:	e006      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040d2:	bf00      	nop
 80040d4:	e004      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040d6:	bf00      	nop
 80040d8:	e002      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
        break;
 80040da:	bf00      	nop
 80040dc:	e000      	b.n	80040e0 <DMA_CheckFifoParam+0xe8>
    break;
 80040de:	bf00      	nop
    }
  }

  return status;
 80040e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3714      	adds	r7, #20
 80040e6:	46bd      	mov	sp, r7
 80040e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ec:	4770      	bx	lr
 80040ee:	bf00      	nop

080040f0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	4a38      	ldr	r2, [pc, #224]	@ (80041e4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d022      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a36      	ldr	r2, [pc, #216]	@ (80041e8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d01d      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4a35      	ldr	r2, [pc, #212]	@ (80041ec <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004118:	4293      	cmp	r3, r2
 800411a:	d018      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4a33      	ldr	r2, [pc, #204]	@ (80041f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d013      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a32      	ldr	r2, [pc, #200]	@ (80041f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d00e      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a30      	ldr	r2, [pc, #192]	@ (80041f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d009      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a2f      	ldr	r2, [pc, #188]	@ (80041fc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d004      	beq.n	800414e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a2d      	ldr	r2, [pc, #180]	@ (8004200 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d101      	bne.n	8004152 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800414e:	2301      	movs	r3, #1
 8004150:	e000      	b.n	8004154 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004152:	2300      	movs	r3, #0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d01a      	beq.n	800418e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	b2db      	uxtb	r3, r3
 800415e:	3b08      	subs	r3, #8
 8004160:	4a28      	ldr	r2, [pc, #160]	@ (8004204 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004162:	fba2 2303 	umull	r2, r3, r2, r3
 8004166:	091b      	lsrs	r3, r3, #4
 8004168:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	4b26      	ldr	r3, [pc, #152]	@ (8004208 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	461a      	mov	r2, r3
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	4a24      	ldr	r2, [pc, #144]	@ (800420c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800417c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f003 031f 	and.w	r3, r3, #31
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800418c:	e024      	b.n	80041d8 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	b2db      	uxtb	r3, r3
 8004194:	3b10      	subs	r3, #16
 8004196:	4a1e      	ldr	r2, [pc, #120]	@ (8004210 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004198:	fba2 2303 	umull	r2, r3, r2, r3
 800419c:	091b      	lsrs	r3, r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	4a1c      	ldr	r2, [pc, #112]	@ (8004214 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d806      	bhi.n	80041b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	4a1b      	ldr	r2, [pc, #108]	@ (8004218 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d902      	bls.n	80041b6 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	3308      	adds	r3, #8
 80041b4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80041b6:	68fa      	ldr	r2, [r7, #12]
 80041b8:	4b18      	ldr	r3, [pc, #96]	@ (800421c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80041ba:	4413      	add	r3, r2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	461a      	mov	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a16      	ldr	r2, [pc, #88]	@ (8004220 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80041c8:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	2201      	movs	r2, #1
 80041d2:	409a      	lsls	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80041d8:	bf00      	nop
 80041da:	3714      	adds	r7, #20
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr
 80041e4:	58025408 	.word	0x58025408
 80041e8:	5802541c 	.word	0x5802541c
 80041ec:	58025430 	.word	0x58025430
 80041f0:	58025444 	.word	0x58025444
 80041f4:	58025458 	.word	0x58025458
 80041f8:	5802546c 	.word	0x5802546c
 80041fc:	58025480 	.word	0x58025480
 8004200:	58025494 	.word	0x58025494
 8004204:	cccccccd 	.word	0xcccccccd
 8004208:	16009600 	.word	0x16009600
 800420c:	58025880 	.word	0x58025880
 8004210:	aaaaaaab 	.word	0xaaaaaaab
 8004214:	400204b8 	.word	0x400204b8
 8004218:	4002040f 	.word	0x4002040f
 800421c:	10008200 	.word	0x10008200
 8004220:	40020880 	.word	0x40020880

08004224 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	b2db      	uxtb	r3, r3
 8004232:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d04a      	beq.n	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2b08      	cmp	r3, #8
 800423e:	d847      	bhi.n	80042d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a25      	ldr	r2, [pc, #148]	@ (80042dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d022      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a24      	ldr	r2, [pc, #144]	@ (80042e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d01d      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a22      	ldr	r2, [pc, #136]	@ (80042e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d018      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a21      	ldr	r2, [pc, #132]	@ (80042e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d013      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4a1f      	ldr	r2, [pc, #124]	@ (80042ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d00e      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a1e      	ldr	r2, [pc, #120]	@ (80042f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d009      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a1c      	ldr	r2, [pc, #112]	@ (80042f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1b      	ldr	r2, [pc, #108]	@ (80042f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d00a      	beq.n	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	4b17      	ldr	r3, [pc, #92]	@ (80042fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800429e:	4413      	add	r3, r2
 80042a0:	009b      	lsls	r3, r3, #2
 80042a2:	461a      	mov	r2, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	4a15      	ldr	r2, [pc, #84]	@ (8004300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80042ac:	671a      	str	r2, [r3, #112]	@ 0x70
 80042ae:	e009      	b.n	80042c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4b14      	ldr	r3, [pc, #80]	@ (8004304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80042b4:	4413      	add	r3, r2
 80042b6:	009b      	lsls	r3, r3, #2
 80042b8:	461a      	mov	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a11      	ldr	r2, [pc, #68]	@ (8004308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80042c2:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	2201      	movs	r2, #1
 80042ca:	409a      	lsls	r2, r3
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	58025408 	.word	0x58025408
 80042e0:	5802541c 	.word	0x5802541c
 80042e4:	58025430 	.word	0x58025430
 80042e8:	58025444 	.word	0x58025444
 80042ec:	58025458 	.word	0x58025458
 80042f0:	5802546c 	.word	0x5802546c
 80042f4:	58025480 	.word	0x58025480
 80042f8:	58025494 	.word	0x58025494
 80042fc:	1600963f 	.word	0x1600963f
 8004300:	58025940 	.word	0x58025940
 8004304:	1000823f 	.word	0x1000823f
 8004308:	40020940 	.word	0x40020940

0800430c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800430c:	b480      	push	{r7}
 800430e:	b089      	sub	sp, #36	@ 0x24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004316:	2300      	movs	r3, #0
 8004318:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800431a:	4b86      	ldr	r3, [pc, #536]	@ (8004534 <HAL_GPIO_Init+0x228>)
 800431c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800431e:	e18c      	b.n	800463a <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	2101      	movs	r1, #1
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	fa01 f303 	lsl.w	r3, r1, r3
 800432c:	4013      	ands	r3, r2
 800432e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	2b00      	cmp	r3, #0
 8004334:	f000 817e 	beq.w	8004634 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f003 0303 	and.w	r3, r3, #3
 8004340:	2b01      	cmp	r3, #1
 8004342:	d005      	beq.n	8004350 <HAL_GPIO_Init+0x44>
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f003 0303 	and.w	r3, r3, #3
 800434c:	2b02      	cmp	r3, #2
 800434e:	d130      	bne.n	80043b2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	005b      	lsls	r3, r3, #1
 800435a:	2203      	movs	r2, #3
 800435c:	fa02 f303 	lsl.w	r3, r2, r3
 8004360:	43db      	mvns	r3, r3
 8004362:	69ba      	ldr	r2, [r7, #24]
 8004364:	4013      	ands	r3, r2
 8004366:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	68da      	ldr	r2, [r3, #12]
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	005b      	lsls	r3, r3, #1
 8004370:	fa02 f303 	lsl.w	r3, r2, r3
 8004374:	69ba      	ldr	r2, [r7, #24]
 8004376:	4313      	orrs	r3, r2
 8004378:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	69ba      	ldr	r2, [r7, #24]
 800437e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004386:	2201      	movs	r2, #1
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	fa02 f303 	lsl.w	r3, r2, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	4013      	ands	r3, r2
 8004394:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	091b      	lsrs	r3, r3, #4
 800439c:	f003 0201 	and.w	r2, r3, #1
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	fa02 f303 	lsl.w	r3, r2, r3
 80043a6:	69ba      	ldr	r2, [r7, #24]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	69ba      	ldr	r2, [r7, #24]
 80043b0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b03      	cmp	r3, #3
 80043bc:	d017      	beq.n	80043ee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68db      	ldr	r3, [r3, #12]
 80043c2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80043c4:	69fb      	ldr	r3, [r7, #28]
 80043c6:	005b      	lsls	r3, r3, #1
 80043c8:	2203      	movs	r2, #3
 80043ca:	fa02 f303 	lsl.w	r3, r2, r3
 80043ce:	43db      	mvns	r3, r3
 80043d0:	69ba      	ldr	r2, [r7, #24]
 80043d2:	4013      	ands	r3, r2
 80043d4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689a      	ldr	r2, [r3, #8]
 80043da:	69fb      	ldr	r3, [r7, #28]
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	fa02 f303 	lsl.w	r3, r2, r3
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	69ba      	ldr	r2, [r7, #24]
 80043ec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0303 	and.w	r3, r3, #3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d123      	bne.n	8004442 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043fa:	69fb      	ldr	r3, [r7, #28]
 80043fc:	08da      	lsrs	r2, r3, #3
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	3208      	adds	r2, #8
 8004402:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004406:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004408:	69fb      	ldr	r3, [r7, #28]
 800440a:	f003 0307 	and.w	r3, r3, #7
 800440e:	009b      	lsls	r3, r3, #2
 8004410:	220f      	movs	r2, #15
 8004412:	fa02 f303 	lsl.w	r3, r2, r3
 8004416:	43db      	mvns	r3, r3
 8004418:	69ba      	ldr	r2, [r7, #24]
 800441a:	4013      	ands	r3, r2
 800441c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	691a      	ldr	r2, [r3, #16]
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	f003 0307 	and.w	r3, r3, #7
 8004428:	009b      	lsls	r3, r3, #2
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	08da      	lsrs	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	3208      	adds	r2, #8
 800443c:	69b9      	ldr	r1, [r7, #24]
 800443e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	2203      	movs	r2, #3
 800444e:	fa02 f303 	lsl.w	r3, r2, r3
 8004452:	43db      	mvns	r3, r3
 8004454:	69ba      	ldr	r2, [r7, #24]
 8004456:	4013      	ands	r3, r2
 8004458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 0203 	and.w	r2, r3, #3
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800447e:	2b00      	cmp	r3, #0
 8004480:	f000 80d8 	beq.w	8004634 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004484:	4b2c      	ldr	r3, [pc, #176]	@ (8004538 <HAL_GPIO_Init+0x22c>)
 8004486:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800448a:	4a2b      	ldr	r2, [pc, #172]	@ (8004538 <HAL_GPIO_Init+0x22c>)
 800448c:	f043 0302 	orr.w	r3, r3, #2
 8004490:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004494:	4b28      	ldr	r3, [pc, #160]	@ (8004538 <HAL_GPIO_Init+0x22c>)
 8004496:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800449a:	f003 0302 	and.w	r3, r3, #2
 800449e:	60fb      	str	r3, [r7, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80044a2:	4a26      	ldr	r2, [pc, #152]	@ (800453c <HAL_GPIO_Init+0x230>)
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	089b      	lsrs	r3, r3, #2
 80044a8:	3302      	adds	r3, #2
 80044aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	f003 0303 	and.w	r3, r3, #3
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	220f      	movs	r2, #15
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43db      	mvns	r3, r3
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	4013      	ands	r3, r2
 80044c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004540 <HAL_GPIO_Init+0x234>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d04a      	beq.n	8004564 <HAL_GPIO_Init+0x258>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a1c      	ldr	r2, [pc, #112]	@ (8004544 <HAL_GPIO_Init+0x238>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d02b      	beq.n	800452e <HAL_GPIO_Init+0x222>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a1b      	ldr	r2, [pc, #108]	@ (8004548 <HAL_GPIO_Init+0x23c>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d025      	beq.n	800452a <HAL_GPIO_Init+0x21e>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	4a1a      	ldr	r2, [pc, #104]	@ (800454c <HAL_GPIO_Init+0x240>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01f      	beq.n	8004526 <HAL_GPIO_Init+0x21a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a19      	ldr	r2, [pc, #100]	@ (8004550 <HAL_GPIO_Init+0x244>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d019      	beq.n	8004522 <HAL_GPIO_Init+0x216>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a18      	ldr	r2, [pc, #96]	@ (8004554 <HAL_GPIO_Init+0x248>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <HAL_GPIO_Init+0x212>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a17      	ldr	r2, [pc, #92]	@ (8004558 <HAL_GPIO_Init+0x24c>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00d      	beq.n	800451a <HAL_GPIO_Init+0x20e>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a16      	ldr	r2, [pc, #88]	@ (800455c <HAL_GPIO_Init+0x250>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <HAL_GPIO_Init+0x20a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a15      	ldr	r2, [pc, #84]	@ (8004560 <HAL_GPIO_Init+0x254>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d101      	bne.n	8004512 <HAL_GPIO_Init+0x206>
 800450e:	2309      	movs	r3, #9
 8004510:	e029      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 8004512:	230a      	movs	r3, #10
 8004514:	e027      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 8004516:	2307      	movs	r3, #7
 8004518:	e025      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 800451a:	2306      	movs	r3, #6
 800451c:	e023      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 800451e:	2305      	movs	r3, #5
 8004520:	e021      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 8004522:	2304      	movs	r3, #4
 8004524:	e01f      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 8004526:	2303      	movs	r3, #3
 8004528:	e01d      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 800452a:	2302      	movs	r3, #2
 800452c:	e01b      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 800452e:	2301      	movs	r3, #1
 8004530:	e019      	b.n	8004566 <HAL_GPIO_Init+0x25a>
 8004532:	bf00      	nop
 8004534:	58000080 	.word	0x58000080
 8004538:	58024400 	.word	0x58024400
 800453c:	58000400 	.word	0x58000400
 8004540:	58020000 	.word	0x58020000
 8004544:	58020400 	.word	0x58020400
 8004548:	58020800 	.word	0x58020800
 800454c:	58020c00 	.word	0x58020c00
 8004550:	58021000 	.word	0x58021000
 8004554:	58021400 	.word	0x58021400
 8004558:	58021800 	.word	0x58021800
 800455c:	58021c00 	.word	0x58021c00
 8004560:	58022400 	.word	0x58022400
 8004564:	2300      	movs	r3, #0
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	f002 0203 	and.w	r2, r2, #3
 800456c:	0092      	lsls	r2, r2, #2
 800456e:	4093      	lsls	r3, r2
 8004570:	69ba      	ldr	r2, [r7, #24]
 8004572:	4313      	orrs	r3, r2
 8004574:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004576:	4938      	ldr	r1, [pc, #224]	@ (8004658 <HAL_GPIO_Init+0x34c>)
 8004578:	69fb      	ldr	r3, [r7, #28]
 800457a:	089b      	lsrs	r3, r3, #2
 800457c:	3302      	adds	r3, #2
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004584:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	43db      	mvns	r3, r3
 8004590:	69ba      	ldr	r2, [r7, #24]
 8004592:	4013      	ands	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80045a2:	69ba      	ldr	r2, [r7, #24]
 80045a4:	693b      	ldr	r3, [r7, #16]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80045aa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80045b2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80045b6:	685b      	ldr	r3, [r3, #4]
 80045b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	43db      	mvns	r3, r3
 80045be:	69ba      	ldr	r2, [r7, #24]
 80045c0:	4013      	ands	r3, r2
 80045c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80045d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80045dc:	69bb      	ldr	r3, [r7, #24]
 80045de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	43db      	mvns	r3, r3
 80045ea:	69ba      	ldr	r2, [r7, #24]
 80045ec:	4013      	ands	r3, r2
 80045ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	685b      	ldr	r3, [r3, #4]
 80045f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d003      	beq.n	8004604 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	69ba      	ldr	r2, [r7, #24]
 8004608:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	43db      	mvns	r3, r3
 8004614:	69ba      	ldr	r2, [r7, #24]
 8004616:	4013      	ands	r3, r2
 8004618:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	69ba      	ldr	r2, [r7, #24]
 8004632:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	3301      	adds	r3, #1
 8004638:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	f47f ae6b 	bne.w	8004320 <HAL_GPIO_Init+0x14>
  }
}
 800464a:	bf00      	nop
 800464c:	bf00      	nop
 800464e:	3724      	adds	r7, #36	@ 0x24
 8004650:	46bd      	mov	sp, r7
 8004652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004656:	4770      	bx	lr
 8004658:	58000400 	.word	0x58000400

0800465c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	460b      	mov	r3, r1
 8004666:	807b      	strh	r3, [r7, #2]
 8004668:	4613      	mov	r3, r2
 800466a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800466c:	787b      	ldrb	r3, [r7, #1]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004672:	887a      	ldrh	r2, [r7, #2]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004678:	e003      	b.n	8004682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800467a:	887b      	ldrh	r3, [r7, #2]
 800467c:	041a      	lsls	r2, r3, #16
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	619a      	str	r2, [r3, #24]
}
 8004682:	bf00      	nop
 8004684:	370c      	adds	r7, #12
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
	...

08004690 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004698:	4b19      	ldr	r3, [pc, #100]	@ (8004700 <HAL_PWREx_ConfigSupply+0x70>)
 800469a:	68db      	ldr	r3, [r3, #12]
 800469c:	f003 0304 	and.w	r3, r3, #4
 80046a0:	2b04      	cmp	r3, #4
 80046a2:	d00a      	beq.n	80046ba <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80046a4:	4b16      	ldr	r3, [pc, #88]	@ (8004700 <HAL_PWREx_ConfigSupply+0x70>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0307 	and.w	r3, r3, #7
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d001      	beq.n	80046b6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e01f      	b.n	80046f6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80046b6:	2300      	movs	r3, #0
 80046b8:	e01d      	b.n	80046f6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80046ba:	4b11      	ldr	r3, [pc, #68]	@ (8004700 <HAL_PWREx_ConfigSupply+0x70>)
 80046bc:	68db      	ldr	r3, [r3, #12]
 80046be:	f023 0207 	bic.w	r2, r3, #7
 80046c2:	490f      	ldr	r1, [pc, #60]	@ (8004700 <HAL_PWREx_ConfigSupply+0x70>)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80046ca:	f7fc fe47 	bl	800135c <HAL_GetTick>
 80046ce:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046d0:	e009      	b.n	80046e6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80046d2:	f7fc fe43 	bl	800135c <HAL_GetTick>
 80046d6:	4602      	mov	r2, r0
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1ad3      	subs	r3, r2, r3
 80046dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80046e0:	d901      	bls.n	80046e6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80046e2:	2301      	movs	r3, #1
 80046e4:	e007      	b.n	80046f6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80046e6:	4b06      	ldr	r3, [pc, #24]	@ (8004700 <HAL_PWREx_ConfigSupply+0x70>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80046ee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80046f2:	d1ee      	bne.n	80046d2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80046f4:	2300      	movs	r3, #0
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3710      	adds	r7, #16
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	58024800 	.word	0x58024800

08004704 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08c      	sub	sp, #48	@ 0x30
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d101      	bne.n	8004716 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004712:	2301      	movs	r3, #1
 8004714:	e3c8      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f003 0301 	and.w	r3, r3, #1
 800471e:	2b00      	cmp	r3, #0
 8004720:	f000 8087 	beq.w	8004832 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004724:	4b88      	ldr	r3, [pc, #544]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004726:	691b      	ldr	r3, [r3, #16]
 8004728:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800472c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800472e:	4b86      	ldr	r3, [pc, #536]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004732:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004734:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004736:	2b10      	cmp	r3, #16
 8004738:	d007      	beq.n	800474a <HAL_RCC_OscConfig+0x46>
 800473a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800473c:	2b18      	cmp	r3, #24
 800473e:	d110      	bne.n	8004762 <HAL_RCC_OscConfig+0x5e>
 8004740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004742:	f003 0303 	and.w	r3, r3, #3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d10b      	bne.n	8004762 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474a:	4b7f      	ldr	r3, [pc, #508]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d06c      	beq.n	8004830 <HAL_RCC_OscConfig+0x12c>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d168      	bne.n	8004830 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e3a2      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	685b      	ldr	r3, [r3, #4]
 8004766:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476a:	d106      	bne.n	800477a <HAL_RCC_OscConfig+0x76>
 800476c:	4b76      	ldr	r3, [pc, #472]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a75      	ldr	r2, [pc, #468]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004772:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004776:	6013      	str	r3, [r2, #0]
 8004778:	e02e      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d10c      	bne.n	800479c <HAL_RCC_OscConfig+0x98>
 8004782:	4b71      	ldr	r3, [pc, #452]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4a70      	ldr	r2, [pc, #448]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004788:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800478c:	6013      	str	r3, [r2, #0]
 800478e:	4b6e      	ldr	r3, [pc, #440]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4a6d      	ldr	r2, [pc, #436]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004794:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004798:	6013      	str	r3, [r2, #0]
 800479a:	e01d      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0xbc>
 80047a6:	4b68      	ldr	r3, [pc, #416]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a67      	ldr	r2, [pc, #412]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80047b0:	6013      	str	r3, [r2, #0]
 80047b2:	4b65      	ldr	r3, [pc, #404]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a64      	ldr	r2, [pc, #400]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047bc:	6013      	str	r3, [r2, #0]
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0xd4>
 80047c0:	4b61      	ldr	r3, [pc, #388]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	4a60      	ldr	r2, [pc, #384]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047ca:	6013      	str	r3, [r2, #0]
 80047cc:	4b5e      	ldr	r3, [pc, #376]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a5d      	ldr	r2, [pc, #372]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d013      	beq.n	8004808 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e0:	f7fc fdbc 	bl	800135c <HAL_GetTick>
 80047e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047e6:	e008      	b.n	80047fa <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047e8:	f7fc fdb8 	bl	800135c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	2b64      	cmp	r3, #100	@ 0x64
 80047f4:	d901      	bls.n	80047fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80047f6:	2303      	movs	r3, #3
 80047f8:	e356      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80047fa:	4b53      	ldr	r3, [pc, #332]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004802:	2b00      	cmp	r3, #0
 8004804:	d0f0      	beq.n	80047e8 <HAL_RCC_OscConfig+0xe4>
 8004806:	e014      	b.n	8004832 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004808:	f7fc fda8 	bl	800135c <HAL_GetTick>
 800480c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004810:	f7fc fda4 	bl	800135c <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	@ 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e342      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004822:	4b49      	ldr	r3, [pc, #292]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1f0      	bne.n	8004810 <HAL_RCC_OscConfig+0x10c>
 800482e:	e000      	b.n	8004832 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f003 0302 	and.w	r3, r3, #2
 800483a:	2b00      	cmp	r3, #0
 800483c:	f000 808c 	beq.w	8004958 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004840:	4b41      	ldr	r3, [pc, #260]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004842:	691b      	ldr	r3, [r3, #16]
 8004844:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004848:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800484a:	4b3f      	ldr	r3, [pc, #252]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 800484c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004850:	6a3b      	ldr	r3, [r7, #32]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d007      	beq.n	8004866 <HAL_RCC_OscConfig+0x162>
 8004856:	6a3b      	ldr	r3, [r7, #32]
 8004858:	2b18      	cmp	r3, #24
 800485a:	d137      	bne.n	80048cc <HAL_RCC_OscConfig+0x1c8>
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	f003 0303 	and.w	r3, r3, #3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d132      	bne.n	80048cc <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004866:	4b38      	ldr	r3, [pc, #224]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d005      	beq.n	800487e <HAL_RCC_OscConfig+0x17a>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e314      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800487e:	4b32      	ldr	r3, [pc, #200]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f023 0219 	bic.w	r2, r3, #25
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68db      	ldr	r3, [r3, #12]
 800488a:	492f      	ldr	r1, [pc, #188]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 800488c:	4313      	orrs	r3, r2
 800488e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004890:	f7fc fd64 	bl	800135c <HAL_GetTick>
 8004894:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004896:	e008      	b.n	80048aa <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004898:	f7fc fd60 	bl	800135c <HAL_GetTick>
 800489c:	4602      	mov	r2, r0
 800489e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a0:	1ad3      	subs	r3, r2, r3
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d901      	bls.n	80048aa <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80048a6:	2303      	movs	r3, #3
 80048a8:	e2fe      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048aa:	4b27      	ldr	r3, [pc, #156]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d0f0      	beq.n	8004898 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048b6:	4b24      	ldr	r3, [pc, #144]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	691b      	ldr	r3, [r3, #16]
 80048c2:	061b      	lsls	r3, r3, #24
 80048c4:	4920      	ldr	r1, [pc, #128]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048ca:	e045      	b.n	8004958 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d026      	beq.n	8004922 <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80048d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f023 0219 	bic.w	r2, r3, #25
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	4919      	ldr	r1, [pc, #100]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048e6:	f7fc fd39 	bl	800135c <HAL_GetTick>
 80048ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80048ec:	e008      	b.n	8004900 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048ee:	f7fc fd35 	bl	800135c <HAL_GetTick>
 80048f2:	4602      	mov	r2, r0
 80048f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048f6:	1ad3      	subs	r3, r2, r3
 80048f8:	2b02      	cmp	r3, #2
 80048fa:	d901      	bls.n	8004900 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80048fc:	2303      	movs	r3, #3
 80048fe:	e2d3      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004900:	4b11      	ldr	r3, [pc, #68]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0304 	and.w	r3, r3, #4
 8004908:	2b00      	cmp	r3, #0
 800490a:	d0f0      	beq.n	80048ee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800490c:	4b0e      	ldr	r3, [pc, #56]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	061b      	lsls	r3, r3, #24
 800491a:	490b      	ldr	r1, [pc, #44]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
 8004920:	e01a      	b.n	8004958 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a08      	ldr	r2, [pc, #32]	@ (8004948 <HAL_RCC_OscConfig+0x244>)
 8004928:	f023 0301 	bic.w	r3, r3, #1
 800492c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800492e:	f7fc fd15 	bl	800135c <HAL_GetTick>
 8004932:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004934:	e00a      	b.n	800494c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004936:	f7fc fd11 	bl	800135c <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d903      	bls.n	800494c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e2af      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
 8004948:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800494c:	4b96      	ldr	r3, [pc, #600]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0304 	and.w	r3, r3, #4
 8004954:	2b00      	cmp	r3, #0
 8004956:	d1ee      	bne.n	8004936 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b00      	cmp	r3, #0
 8004962:	d06a      	beq.n	8004a3a <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004964:	4b90      	ldr	r3, [pc, #576]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800496c:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800496e:	4b8e      	ldr	r3, [pc, #568]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004972:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	2b08      	cmp	r3, #8
 8004978:	d007      	beq.n	800498a <HAL_RCC_OscConfig+0x286>
 800497a:	69bb      	ldr	r3, [r7, #24]
 800497c:	2b18      	cmp	r3, #24
 800497e:	d11b      	bne.n	80049b8 <HAL_RCC_OscConfig+0x2b4>
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	f003 0303 	and.w	r3, r3, #3
 8004986:	2b01      	cmp	r3, #1
 8004988:	d116      	bne.n	80049b8 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800498a:	4b87      	ldr	r3, [pc, #540]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <HAL_RCC_OscConfig+0x29e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	2b80      	cmp	r3, #128	@ 0x80
 800499c:	d001      	beq.n	80049a2 <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e282      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049a2:	4b81      	ldr	r3, [pc, #516]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6a1b      	ldr	r3, [r3, #32]
 80049ae:	061b      	lsls	r3, r3, #24
 80049b0:	497d      	ldr	r1, [pc, #500]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80049b6:	e040      	b.n	8004a3a <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d023      	beq.n	8004a08 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80049c0:	4b79      	ldr	r3, [pc, #484]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a78      	ldr	r2, [pc, #480]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 80049c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80049ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049cc:	f7fc fcc6 	bl	800135c <HAL_GetTick>
 80049d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049d2:	e008      	b.n	80049e6 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80049d4:	f7fc fcc2 	bl	800135c <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049dc:	1ad3      	subs	r3, r2, r3
 80049de:	2b02      	cmp	r3, #2
 80049e0:	d901      	bls.n	80049e6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80049e2:	2303      	movs	r3, #3
 80049e4:	e260      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80049e6:	4b70      	ldr	r3, [pc, #448]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d0f0      	beq.n	80049d4 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80049f2:	4b6d      	ldr	r3, [pc, #436]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 80049f4:	68db      	ldr	r3, [r3, #12]
 80049f6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a1b      	ldr	r3, [r3, #32]
 80049fe:	061b      	lsls	r3, r3, #24
 8004a00:	4969      	ldr	r1, [pc, #420]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	60cb      	str	r3, [r1, #12]
 8004a06:	e018      	b.n	8004a3a <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a08:	4b67      	ldr	r3, [pc, #412]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a66      	ldr	r2, [pc, #408]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fc fca2 	bl	800135c <HAL_GetTick>
 8004a18:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a1c:	f7fc fc9e 	bl	800135c <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e23c      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004a2e:	4b5e      	ldr	r3, [pc, #376]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f003 0308 	and.w	r3, r3, #8
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d036      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	695b      	ldr	r3, [r3, #20]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d019      	beq.n	8004a82 <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a4e:	4b56      	ldr	r3, [pc, #344]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a52:	4a55      	ldr	r2, [pc, #340]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a5a:	f7fc fc7f 	bl	800135c <HAL_GetTick>
 8004a5e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a60:	e008      	b.n	8004a74 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a62:	f7fc fc7b 	bl	800135c <HAL_GetTick>
 8004a66:	4602      	mov	r2, r0
 8004a68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	2b02      	cmp	r3, #2
 8004a6e:	d901      	bls.n	8004a74 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004a70:	2303      	movs	r3, #3
 8004a72:	e219      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004a74:	4b4c      	ldr	r3, [pc, #304]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a78:	f003 0302 	and.w	r3, r3, #2
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d0f0      	beq.n	8004a62 <HAL_RCC_OscConfig+0x35e>
 8004a80:	e018      	b.n	8004ab4 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a82:	4b49      	ldr	r3, [pc, #292]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a84:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004a86:	4a48      	ldr	r2, [pc, #288]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004a88:	f023 0301 	bic.w	r3, r3, #1
 8004a8c:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a8e:	f7fc fc65 	bl	800135c <HAL_GetTick>
 8004a92:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004a94:	e008      	b.n	8004aa8 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a96:	f7fc fc61 	bl	800135c <HAL_GetTick>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9e:	1ad3      	subs	r3, r2, r3
 8004aa0:	2b02      	cmp	r3, #2
 8004aa2:	d901      	bls.n	8004aa8 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004aa4:	2303      	movs	r3, #3
 8004aa6:	e1ff      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004aa8:	4b3f      	ldr	r3, [pc, #252]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004aaa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004aac:	f003 0302 	and.w	r3, r3, #2
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1f0      	bne.n	8004a96 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 0320 	and.w	r3, r3, #32
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d036      	beq.n	8004b2e <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d019      	beq.n	8004afc <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004ac8:	4b37      	ldr	r3, [pc, #220]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a36      	ldr	r2, [pc, #216]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004ace:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004ad2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004ad4:	f7fc fc42 	bl	800135c <HAL_GetTick>
 8004ad8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004ada:	e008      	b.n	8004aee <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004adc:	f7fc fc3e 	bl	800135c <HAL_GetTick>
 8004ae0:	4602      	mov	r2, r0
 8004ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ae4:	1ad3      	subs	r3, r2, r3
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e1dc      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004aee:	4b2e      	ldr	r3, [pc, #184]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d0f0      	beq.n	8004adc <HAL_RCC_OscConfig+0x3d8>
 8004afa:	e018      	b.n	8004b2e <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004afc:	4b2a      	ldr	r3, [pc, #168]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	4a29      	ldr	r2, [pc, #164]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004b02:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b08:	f7fc fc28 	bl	800135c <HAL_GetTick>
 8004b0c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b10:	f7fc fc24 	bl	800135c <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e1c2      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b22:	4b21      	ldr	r3, [pc, #132]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8086 	beq.w	8004c48 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004b3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004bac <HAL_RCC_OscConfig+0x4a8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a1a      	ldr	r2, [pc, #104]	@ (8004bac <HAL_RCC_OscConfig+0x4a8>)
 8004b42:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004b48:	f7fc fc08 	bl	800135c <HAL_GetTick>
 8004b4c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b50:	f7fc fc04 	bl	800135c <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b64      	cmp	r3, #100	@ 0x64
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e1a2      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004b62:	4b12      	ldr	r3, [pc, #72]	@ (8004bac <HAL_RCC_OscConfig+0x4a8>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d0f0      	beq.n	8004b50 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d106      	bne.n	8004b84 <HAL_RCC_OscConfig+0x480>
 8004b76:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004b78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b7a:	4a0b      	ldr	r2, [pc, #44]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004b7c:	f043 0301 	orr.w	r3, r3, #1
 8004b80:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b82:	e032      	b.n	8004bea <HAL_RCC_OscConfig+0x4e6>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d111      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x4ac>
 8004b8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b90:	4a05      	ldr	r2, [pc, #20]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004b92:	f023 0301 	bic.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8004b98:	4b03      	ldr	r3, [pc, #12]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004b9c:	4a02      	ldr	r2, [pc, #8]	@ (8004ba8 <HAL_RCC_OscConfig+0x4a4>)
 8004b9e:	f023 0304 	bic.w	r3, r3, #4
 8004ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba4:	e021      	b.n	8004bea <HAL_RCC_OscConfig+0x4e6>
 8004ba6:	bf00      	nop
 8004ba8:	58024400 	.word	0x58024400
 8004bac:	58024800 	.word	0x58024800
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	2b05      	cmp	r3, #5
 8004bb6:	d10c      	bne.n	8004bd2 <HAL_RCC_OscConfig+0x4ce>
 8004bb8:	4b83      	ldr	r3, [pc, #524]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbc:	4a82      	ldr	r2, [pc, #520]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004bbe:	f043 0304 	orr.w	r3, r3, #4
 8004bc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc4:	4b80      	ldr	r3, [pc, #512]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004bc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc8:	4a7f      	ldr	r2, [pc, #508]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004bca:	f043 0301 	orr.w	r3, r3, #1
 8004bce:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd0:	e00b      	b.n	8004bea <HAL_RCC_OscConfig+0x4e6>
 8004bd2:	4b7d      	ldr	r3, [pc, #500]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd6:	4a7c      	ldr	r2, [pc, #496]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004bd8:	f023 0301 	bic.w	r3, r3, #1
 8004bdc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bde:	4b7a      	ldr	r3, [pc, #488]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004be0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be2:	4a79      	ldr	r2, [pc, #484]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004be4:	f023 0304 	bic.w	r3, r3, #4
 8004be8:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d015      	beq.n	8004c1e <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf2:	f7fc fbb3 	bl	800135c <HAL_GetTick>
 8004bf6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004bf8:	e00a      	b.n	8004c10 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfa:	f7fc fbaf 	bl	800135c <HAL_GetTick>
 8004bfe:	4602      	mov	r2, r0
 8004c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d901      	bls.n	8004c10 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004c0c:	2303      	movs	r3, #3
 8004c0e:	e14b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c10:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c14:	f003 0302 	and.w	r3, r3, #2
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d0ee      	beq.n	8004bfa <HAL_RCC_OscConfig+0x4f6>
 8004c1c:	e014      	b.n	8004c48 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1e:	f7fc fb9d 	bl	800135c <HAL_GetTick>
 8004c22:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c26:	f7fc fb99 	bl	800135c <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d901      	bls.n	8004c3c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e135      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004c3c:	4b62      	ldr	r3, [pc, #392]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c40:	f003 0302 	and.w	r3, r3, #2
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1ee      	bne.n	8004c26 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 812a 	beq.w	8004ea6 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004c52:	4b5d      	ldr	r3, [pc, #372]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c5a:	2b18      	cmp	r3, #24
 8004c5c:	f000 80ba 	beq.w	8004dd4 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c64:	2b02      	cmp	r3, #2
 8004c66:	f040 8095 	bne.w	8004d94 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6a:	4b57      	ldr	r3, [pc, #348]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a56      	ldr	r2, [pc, #344]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004c70:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004c74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c76:	f7fc fb71 	bl	800135c <HAL_GetTick>
 8004c7a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c7c:	e008      	b.n	8004c90 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c7e:	f7fc fb6d 	bl	800135c <HAL_GetTick>
 8004c82:	4602      	mov	r2, r0
 8004c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c86:	1ad3      	subs	r3, r2, r3
 8004c88:	2b02      	cmp	r3, #2
 8004c8a:	d901      	bls.n	8004c90 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004c8c:	2303      	movs	r3, #3
 8004c8e:	e10b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004c90:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d1f0      	bne.n	8004c7e <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9c:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004c9e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004ca0:	4b4a      	ldr	r3, [pc, #296]	@ (8004dcc <HAL_RCC_OscConfig+0x6c8>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004cac:	0112      	lsls	r2, r2, #4
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	4945      	ldr	r1, [pc, #276]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cba:	3b01      	subs	r3, #1
 8004cbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004cc4:	3b01      	subs	r3, #1
 8004cc6:	025b      	lsls	r3, r3, #9
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	431a      	orrs	r2, r3
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cd8:	431a      	orrs	r2, r3
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	061b      	lsls	r3, r3, #24
 8004ce2:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004ce6:	4938      	ldr	r1, [pc, #224]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004ce8:	4313      	orrs	r3, r2
 8004cea:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004cec:	4b36      	ldr	r3, [pc, #216]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004cee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf0:	4a35      	ldr	r2, [pc, #212]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004cf2:	f023 0301 	bic.w	r3, r3, #1
 8004cf6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004cf8:	4b33      	ldr	r3, [pc, #204]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004cfc:	4b34      	ldr	r3, [pc, #208]	@ (8004dd0 <HAL_RCC_OscConfig+0x6cc>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d04:	00d2      	lsls	r2, r2, #3
 8004d06:	4930      	ldr	r1, [pc, #192]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d0c:	4b2e      	ldr	r3, [pc, #184]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d10:	f023 020c 	bic.w	r2, r3, #12
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d18:	492b      	ldr	r1, [pc, #172]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d22:	f023 0202 	bic.w	r2, r3, #2
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d2a:	4927      	ldr	r1, [pc, #156]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004d30:	4b25      	ldr	r3, [pc, #148]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d34:	4a24      	ldr	r2, [pc, #144]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d36:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d3c:	4b22      	ldr	r3, [pc, #136]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d40:	4a21      	ldr	r2, [pc, #132]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d42:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d46:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004d48:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d4c:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d4e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004d54:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	4a1b      	ldr	r2, [pc, #108]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d5a:	f043 0301 	orr.w	r3, r3, #1
 8004d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d60:	4b19      	ldr	r3, [pc, #100]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a18      	ldr	r2, [pc, #96]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004d6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d6c:	f7fc faf6 	bl	800135c <HAL_GetTick>
 8004d70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d72:	e008      	b.n	8004d86 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d74:	f7fc faf2 	bl	800135c <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d901      	bls.n	8004d86 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004d82:	2303      	movs	r3, #3
 8004d84:	e090      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004d86:	4b10      	ldr	r3, [pc, #64]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d0f0      	beq.n	8004d74 <HAL_RCC_OscConfig+0x670>
 8004d92:	e088      	b.n	8004ea6 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d94:	4b0c      	ldr	r3, [pc, #48]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a0b      	ldr	r2, [pc, #44]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004d9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da0:	f7fc fadc 	bl	800135c <HAL_GetTick>
 8004da4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004da6:	e008      	b.n	8004dba <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004da8:	f7fc fad8 	bl	800135c <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b02      	cmp	r3, #2
 8004db4:	d901      	bls.n	8004dba <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e076      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004dba:	4b03      	ldr	r3, [pc, #12]	@ (8004dc8 <HAL_RCC_OscConfig+0x6c4>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d1f0      	bne.n	8004da8 <HAL_RCC_OscConfig+0x6a4>
 8004dc6:	e06e      	b.n	8004ea6 <HAL_RCC_OscConfig+0x7a2>
 8004dc8:	58024400 	.word	0x58024400
 8004dcc:	fffffc0c 	.word	0xfffffc0c
 8004dd0:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004dd4:	4b36      	ldr	r3, [pc, #216]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004dda:	4b35      	ldr	r3, [pc, #212]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004ddc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dde:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004de4:	2b01      	cmp	r3, #1
 8004de6:	d031      	beq.n	8004e4c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	f003 0203 	and.w	r2, r3, #3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df2:	429a      	cmp	r2, r3
 8004df4:	d12a      	bne.n	8004e4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	091b      	lsrs	r3, r3, #4
 8004dfa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d122      	bne.n	8004e4c <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e10:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d11a      	bne.n	8004e4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	0a5b      	lsrs	r3, r3, #9
 8004e1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e22:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d111      	bne.n	8004e4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	0c1b      	lsrs	r3, r3, #16
 8004e2c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e34:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d108      	bne.n	8004e4c <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	0e1b      	lsrs	r3, r3, #24
 8004e3e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e46:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d001      	beq.n	8004e50 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e02b      	b.n	8004ea8 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004e50:	4b17      	ldr	r3, [pc, #92]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004e52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004e54:	08db      	lsrs	r3, r3, #3
 8004e56:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004e5a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	429a      	cmp	r2, r3
 8004e64:	d01f      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004e66:	4b12      	ldr	r3, [pc, #72]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004e68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6a:	4a11      	ldr	r2, [pc, #68]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004e6c:	f023 0301 	bic.w	r3, r3, #1
 8004e70:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004e72:	f7fc fa73 	bl	800135c <HAL_GetTick>
 8004e76:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004e78:	bf00      	nop
 8004e7a:	f7fc fa6f 	bl	800135c <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d0f9      	beq.n	8004e7a <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004e86:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004e88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb4 <HAL_RCC_OscConfig+0x7b0>)
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004e92:	00d2      	lsls	r2, r2, #3
 8004e94:	4906      	ldr	r1, [pc, #24]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004e96:	4313      	orrs	r3, r2
 8004e98:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004e9a:	4b05      	ldr	r3, [pc, #20]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e9e:	4a04      	ldr	r2, [pc, #16]	@ (8004eb0 <HAL_RCC_OscConfig+0x7ac>)
 8004ea0:	f043 0301 	orr.w	r3, r3, #1
 8004ea4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004ea6:	2300      	movs	r3, #0
}
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	3730      	adds	r7, #48	@ 0x30
 8004eac:	46bd      	mov	sp, r7
 8004eae:	bd80      	pop	{r7, pc}
 8004eb0:	58024400 	.word	0x58024400
 8004eb4:	ffff0007 	.word	0xffff0007

08004eb8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b086      	sub	sp, #24
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e19c      	b.n	8005206 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ecc:	4b8a      	ldr	r3, [pc, #552]	@ (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f003 030f 	and.w	r3, r3, #15
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	429a      	cmp	r2, r3
 8004ed8:	d910      	bls.n	8004efc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eda:	4b87      	ldr	r3, [pc, #540]	@ (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f023 020f 	bic.w	r2, r3, #15
 8004ee2:	4985      	ldr	r1, [pc, #532]	@ (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	4313      	orrs	r3, r2
 8004ee8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eea:	4b83      	ldr	r3, [pc, #524]	@ (80050f8 <HAL_RCC_ClockConfig+0x240>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f003 030f 	and.w	r3, r3, #15
 8004ef2:	683a      	ldr	r2, [r7, #0]
 8004ef4:	429a      	cmp	r2, r3
 8004ef6:	d001      	beq.n	8004efc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e184      	b.n	8005206 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0304 	and.w	r3, r3, #4
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d010      	beq.n	8004f2a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	691a      	ldr	r2, [r3, #16]
 8004f0c:	4b7b      	ldr	r3, [pc, #492]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f0e:	699b      	ldr	r3, [r3, #24]
 8004f10:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d908      	bls.n	8004f2a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004f18:	4b78      	ldr	r3, [pc, #480]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f1a:	699b      	ldr	r3, [r3, #24]
 8004f1c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	691b      	ldr	r3, [r3, #16]
 8004f24:	4975      	ldr	r1, [pc, #468]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f26:	4313      	orrs	r3, r2
 8004f28:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 0308 	and.w	r3, r3, #8
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d010      	beq.n	8004f58 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	695a      	ldr	r2, [r3, #20]
 8004f3a:	4b70      	ldr	r3, [pc, #448]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f3c:	69db      	ldr	r3, [r3, #28]
 8004f3e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f42:	429a      	cmp	r2, r3
 8004f44:	d908      	bls.n	8004f58 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004f46:	4b6d      	ldr	r3, [pc, #436]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	695b      	ldr	r3, [r3, #20]
 8004f52:	496a      	ldr	r1, [pc, #424]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0310 	and.w	r3, r3, #16
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d010      	beq.n	8004f86 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	699a      	ldr	r2, [r3, #24]
 8004f68:	4b64      	ldr	r3, [pc, #400]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f6a:	69db      	ldr	r3, [r3, #28]
 8004f6c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d908      	bls.n	8004f86 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8004f74:	4b61      	ldr	r3, [pc, #388]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f76:	69db      	ldr	r3, [r3, #28]
 8004f78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	495e      	ldr	r1, [pc, #376]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f003 0320 	and.w	r3, r3, #32
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d010      	beq.n	8004fb4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	69da      	ldr	r2, [r3, #28]
 8004f96:	4b59      	ldr	r3, [pc, #356]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004f98:	6a1b      	ldr	r3, [r3, #32]
 8004f9a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d908      	bls.n	8004fb4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8004fa2:	4b56      	ldr	r3, [pc, #344]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69db      	ldr	r3, [r3, #28]
 8004fae:	4953      	ldr	r1, [pc, #332]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0302 	and.w	r3, r3, #2
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d010      	beq.n	8004fe2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	68da      	ldr	r2, [r3, #12]
 8004fc4:	4b4d      	ldr	r3, [pc, #308]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	f003 030f 	and.w	r3, r3, #15
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d908      	bls.n	8004fe2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fd0:	4b4a      	ldr	r3, [pc, #296]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	f023 020f 	bic.w	r2, r3, #15
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	68db      	ldr	r3, [r3, #12]
 8004fdc:	4947      	ldr	r1, [pc, #284]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d055      	beq.n	800509a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8004fee:	4b43      	ldr	r3, [pc, #268]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004ff0:	699b      	ldr	r3, [r3, #24]
 8004ff2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	4940      	ldr	r1, [pc, #256]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	2b02      	cmp	r3, #2
 8005006:	d107      	bne.n	8005018 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005008:	4b3c      	ldr	r3, [pc, #240]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005010:	2b00      	cmp	r3, #0
 8005012:	d121      	bne.n	8005058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0f6      	b.n	8005206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	2b03      	cmp	r3, #3
 800501e:	d107      	bne.n	8005030 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005020:	4b36      	ldr	r3, [pc, #216]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005028:	2b00      	cmp	r3, #0
 800502a:	d115      	bne.n	8005058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0ea      	b.n	8005206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	2b01      	cmp	r3, #1
 8005036:	d107      	bne.n	8005048 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005038:	4b30      	ldr	r3, [pc, #192]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005040:	2b00      	cmp	r3, #0
 8005042:	d109      	bne.n	8005058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005044:	2301      	movs	r3, #1
 8005046:	e0de      	b.n	8005206 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005048:	4b2c      	ldr	r3, [pc, #176]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d101      	bne.n	8005058 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8005054:	2301      	movs	r3, #1
 8005056:	e0d6      	b.n	8005206 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005058:	4b28      	ldr	r3, [pc, #160]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 800505a:	691b      	ldr	r3, [r3, #16]
 800505c:	f023 0207 	bic.w	r2, r3, #7
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	4925      	ldr	r1, [pc, #148]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 8005066:	4313      	orrs	r3, r2
 8005068:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800506a:	f7fc f977 	bl	800135c <HAL_GetTick>
 800506e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005070:	e00a      	b.n	8005088 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005072:	f7fc f973 	bl	800135c <HAL_GetTick>
 8005076:	4602      	mov	r2, r0
 8005078:	697b      	ldr	r3, [r7, #20]
 800507a:	1ad3      	subs	r3, r2, r3
 800507c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005080:	4293      	cmp	r3, r2
 8005082:	d901      	bls.n	8005088 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e0be      	b.n	8005206 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005088:	4b1c      	ldr	r3, [pc, #112]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	00db      	lsls	r3, r3, #3
 8005096:	429a      	cmp	r2, r3
 8005098:	d1eb      	bne.n	8005072 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 0302 	and.w	r3, r3, #2
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d010      	beq.n	80050c8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	4b14      	ldr	r3, [pc, #80]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	f003 030f 	and.w	r3, r3, #15
 80050b2:	429a      	cmp	r2, r3
 80050b4:	d208      	bcs.n	80050c8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b6:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 80050b8:	699b      	ldr	r3, [r3, #24]
 80050ba:	f023 020f 	bic.w	r2, r3, #15
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	490e      	ldr	r1, [pc, #56]	@ (80050fc <HAL_RCC_ClockConfig+0x244>)
 80050c4:	4313      	orrs	r3, r2
 80050c6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80050c8:	4b0b      	ldr	r3, [pc, #44]	@ (80050f8 <HAL_RCC_ClockConfig+0x240>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f003 030f 	and.w	r3, r3, #15
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	d214      	bcs.n	8005100 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050d6:	4b08      	ldr	r3, [pc, #32]	@ (80050f8 <HAL_RCC_ClockConfig+0x240>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f023 020f 	bic.w	r2, r3, #15
 80050de:	4906      	ldr	r1, [pc, #24]	@ (80050f8 <HAL_RCC_ClockConfig+0x240>)
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050e6:	4b04      	ldr	r3, [pc, #16]	@ (80050f8 <HAL_RCC_ClockConfig+0x240>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 030f 	and.w	r3, r3, #15
 80050ee:	683a      	ldr	r2, [r7, #0]
 80050f0:	429a      	cmp	r2, r3
 80050f2:	d005      	beq.n	8005100 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80050f4:	2301      	movs	r3, #1
 80050f6:	e086      	b.n	8005206 <HAL_RCC_ClockConfig+0x34e>
 80050f8:	52002000 	.word	0x52002000
 80050fc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	d010      	beq.n	800512e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	691a      	ldr	r2, [r3, #16]
 8005110:	4b3f      	ldr	r3, [pc, #252]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 8005112:	699b      	ldr	r3, [r3, #24]
 8005114:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005118:	429a      	cmp	r2, r3
 800511a:	d208      	bcs.n	800512e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800511c:	4b3c      	ldr	r3, [pc, #240]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	4939      	ldr	r1, [pc, #228]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 800512a:	4313      	orrs	r3, r2
 800512c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d010      	beq.n	800515c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	695a      	ldr	r2, [r3, #20]
 800513e:	4b34      	ldr	r3, [pc, #208]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005146:	429a      	cmp	r2, r3
 8005148:	d208      	bcs.n	800515c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800514a:	4b31      	ldr	r3, [pc, #196]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 800514c:	69db      	ldr	r3, [r3, #28]
 800514e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	492e      	ldr	r1, [pc, #184]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 8005158:	4313      	orrs	r3, r2
 800515a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0310 	and.w	r3, r3, #16
 8005164:	2b00      	cmp	r3, #0
 8005166:	d010      	beq.n	800518a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	699a      	ldr	r2, [r3, #24]
 800516c:	4b28      	ldr	r3, [pc, #160]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 800516e:	69db      	ldr	r3, [r3, #28]
 8005170:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005174:	429a      	cmp	r2, r3
 8005176:	d208      	bcs.n	800518a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005178:	4b25      	ldr	r3, [pc, #148]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 800517a:	69db      	ldr	r3, [r3, #28]
 800517c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	4922      	ldr	r1, [pc, #136]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 8005186:	4313      	orrs	r3, r2
 8005188:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0320 	and.w	r3, r3, #32
 8005192:	2b00      	cmp	r3, #0
 8005194:	d010      	beq.n	80051b8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	69da      	ldr	r2, [r3, #28]
 800519a:	4b1d      	ldr	r3, [pc, #116]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d208      	bcs.n	80051b8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80051a6:	4b1a      	ldr	r3, [pc, #104]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	69db      	ldr	r3, [r3, #28]
 80051b2:	4917      	ldr	r1, [pc, #92]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 80051b4:	4313      	orrs	r3, r2
 80051b6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80051b8:	f000 f834 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 80051bc:	4602      	mov	r2, r0
 80051be:	4b14      	ldr	r3, [pc, #80]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 80051c0:	699b      	ldr	r3, [r3, #24]
 80051c2:	0a1b      	lsrs	r3, r3, #8
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	4912      	ldr	r1, [pc, #72]	@ (8005214 <HAL_RCC_ClockConfig+0x35c>)
 80051ca:	5ccb      	ldrb	r3, [r1, r3]
 80051cc:	f003 031f 	and.w	r3, r3, #31
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
 80051d4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80051d6:	4b0e      	ldr	r3, [pc, #56]	@ (8005210 <HAL_RCC_ClockConfig+0x358>)
 80051d8:	699b      	ldr	r3, [r3, #24]
 80051da:	f003 030f 	and.w	r3, r3, #15
 80051de:	4a0d      	ldr	r2, [pc, #52]	@ (8005214 <HAL_RCC_ClockConfig+0x35c>)
 80051e0:	5cd3      	ldrb	r3, [r2, r3]
 80051e2:	f003 031f 	and.w	r3, r3, #31
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	fa22 f303 	lsr.w	r3, r2, r3
 80051ec:	4a0a      	ldr	r2, [pc, #40]	@ (8005218 <HAL_RCC_ClockConfig+0x360>)
 80051ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80051f0:	4a0a      	ldr	r2, [pc, #40]	@ (800521c <HAL_RCC_ClockConfig+0x364>)
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80051f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005220 <HAL_RCC_ClockConfig+0x368>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4618      	mov	r0, r3
 80051fc:	f7fc f878 	bl	80012f0 <HAL_InitTick>
 8005200:	4603      	mov	r3, r0
 8005202:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005204:	7bfb      	ldrb	r3, [r7, #15]
}
 8005206:	4618      	mov	r0, r3
 8005208:	3718      	adds	r7, #24
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	58024400 	.word	0x58024400
 8005214:	080094a8 	.word	0x080094a8
 8005218:	24000004 	.word	0x24000004
 800521c:	24000000 	.word	0x24000000
 8005220:	24000008 	.word	0x24000008

08005224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005224:	b480      	push	{r7}
 8005226:	b089      	sub	sp, #36	@ 0x24
 8005228:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800522a:	4bb3      	ldr	r3, [pc, #716]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800522c:	691b      	ldr	r3, [r3, #16]
 800522e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005232:	2b18      	cmp	r3, #24
 8005234:	f200 8155 	bhi.w	80054e2 <HAL_RCC_GetSysClockFreq+0x2be>
 8005238:	a201      	add	r2, pc, #4	@ (adr r2, 8005240 <HAL_RCC_GetSysClockFreq+0x1c>)
 800523a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800523e:	bf00      	nop
 8005240:	080052a5 	.word	0x080052a5
 8005244:	080054e3 	.word	0x080054e3
 8005248:	080054e3 	.word	0x080054e3
 800524c:	080054e3 	.word	0x080054e3
 8005250:	080054e3 	.word	0x080054e3
 8005254:	080054e3 	.word	0x080054e3
 8005258:	080054e3 	.word	0x080054e3
 800525c:	080054e3 	.word	0x080054e3
 8005260:	080052cb 	.word	0x080052cb
 8005264:	080054e3 	.word	0x080054e3
 8005268:	080054e3 	.word	0x080054e3
 800526c:	080054e3 	.word	0x080054e3
 8005270:	080054e3 	.word	0x080054e3
 8005274:	080054e3 	.word	0x080054e3
 8005278:	080054e3 	.word	0x080054e3
 800527c:	080054e3 	.word	0x080054e3
 8005280:	080052d1 	.word	0x080052d1
 8005284:	080054e3 	.word	0x080054e3
 8005288:	080054e3 	.word	0x080054e3
 800528c:	080054e3 	.word	0x080054e3
 8005290:	080054e3 	.word	0x080054e3
 8005294:	080054e3 	.word	0x080054e3
 8005298:	080054e3 	.word	0x080054e3
 800529c:	080054e3 	.word	0x080054e3
 80052a0:	080052d7 	.word	0x080052d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80052a4:	4b94      	ldr	r3, [pc, #592]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0320 	and.w	r3, r3, #32
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d009      	beq.n	80052c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b0:	4b91      	ldr	r3, [pc, #580]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	08db      	lsrs	r3, r3, #3
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	4a90      	ldr	r2, [pc, #576]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052bc:	fa22 f303 	lsr.w	r3, r2, r3
 80052c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80052c2:	e111      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80052c4:	4b8d      	ldr	r3, [pc, #564]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 80052c6:	61bb      	str	r3, [r7, #24]
      break;
 80052c8:	e10e      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80052ca:	4b8d      	ldr	r3, [pc, #564]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80052cc:	61bb      	str	r3, [r7, #24]
      break;
 80052ce:	e10b      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80052d0:	4b8c      	ldr	r3, [pc, #560]	@ (8005504 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80052d2:	61bb      	str	r3, [r7, #24]
      break;
 80052d4:	e108      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80052d6:	4b88      	ldr	r3, [pc, #544]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80052e0:	4b85      	ldr	r3, [pc, #532]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052e4:	091b      	lsrs	r3, r3, #4
 80052e6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80052ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80052ec:	4b82      	ldr	r3, [pc, #520]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052f0:	f003 0301 	and.w	r3, r3, #1
 80052f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80052f6:	4b80      	ldr	r3, [pc, #512]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052f8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052fa:	08db      	lsrs	r3, r3, #3
 80052fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	fb02 f303 	mul.w	r3, r2, r3
 8005306:	ee07 3a90 	vmov	s15, r3
 800530a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800530e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	2b00      	cmp	r3, #0
 8005316:	f000 80e1 	beq.w	80054dc <HAL_RCC_GetSysClockFreq+0x2b8>
 800531a:	697b      	ldr	r3, [r7, #20]
 800531c:	2b02      	cmp	r3, #2
 800531e:	f000 8083 	beq.w	8005428 <HAL_RCC_GetSysClockFreq+0x204>
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	2b02      	cmp	r3, #2
 8005326:	f200 80a1 	bhi.w	800546c <HAL_RCC_GetSysClockFreq+0x248>
 800532a:	697b      	ldr	r3, [r7, #20]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d003      	beq.n	8005338 <HAL_RCC_GetSysClockFreq+0x114>
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	2b01      	cmp	r3, #1
 8005334:	d056      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005336:	e099      	b.n	800546c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005338:	4b6f      	ldr	r3, [pc, #444]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 0320 	and.w	r3, r3, #32
 8005340:	2b00      	cmp	r3, #0
 8005342:	d02d      	beq.n	80053a0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005344:	4b6c      	ldr	r3, [pc, #432]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	08db      	lsrs	r3, r3, #3
 800534a:	f003 0303 	and.w	r3, r3, #3
 800534e:	4a6b      	ldr	r2, [pc, #428]	@ (80054fc <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005350:	fa22 f303 	lsr.w	r3, r2, r3
 8005354:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	ee07 3a90 	vmov	s15, r3
 800535c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	ee07 3a90 	vmov	s15, r3
 8005366:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800536a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800536e:	4b62      	ldr	r3, [pc, #392]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005376:	ee07 3a90 	vmov	s15, r3
 800537a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800537e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005382:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800538a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800538e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800539a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800539e:	e087      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053aa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800550c <HAL_RCC_GetSysClockFreq+0x2e8>
 80053ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053b2:	4b51      	ldr	r3, [pc, #324]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80053c6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005508 <HAL_RCC_GetSysClockFreq+0x2e4>
 80053ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80053ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80053d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80053d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80053da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80053e2:	e065      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	ee07 3a90 	vmov	s15, r3
 80053ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053ee:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8005510 <HAL_RCC_GetSysClockFreq+0x2ec>
 80053f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053f6:	4b40      	ldr	r3, [pc, #256]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053fe:	ee07 3a90 	vmov	s15, r3
 8005402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005406:	ed97 6a02 	vldr	s12, [r7, #8]
 800540a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005508 <HAL_RCC_GetSysClockFreq+0x2e4>
 800540e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800541e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8005426:	e043      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8005514 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005436:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543a:	4b2f      	ldr	r3, [pc, #188]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800543c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	ee07 3a90 	vmov	s15, r3
 8005446:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544a:	ed97 6a02 	vldr	s12, [r7, #8]
 800544e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005452:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005456:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800545e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005466:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800546a:	e021      	b.n	80054b0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800546c:	693b      	ldr	r3, [r7, #16]
 800546e:	ee07 3a90 	vmov	s15, r3
 8005472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005476:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8005510 <HAL_RCC_GetSysClockFreq+0x2ec>
 800547a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800547e:	4b1e      	ldr	r3, [pc, #120]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005480:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005486:	ee07 3a90 	vmov	s15, r3
 800548a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800548e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005492:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005508 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800549e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054ae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80054b0:	4b11      	ldr	r3, [pc, #68]	@ (80054f8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054b4:	0a5b      	lsrs	r3, r3, #9
 80054b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80054ba:	3301      	adds	r3, #1
 80054bc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	ee07 3a90 	vmov	s15, r3
 80054c4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80054c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80054cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80054d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80054d4:	ee17 3a90 	vmov	r3, s15
 80054d8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80054da:	e005      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80054dc:	2300      	movs	r3, #0
 80054de:	61bb      	str	r3, [r7, #24]
      break;
 80054e0:	e002      	b.n	80054e8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80054e2:	4b07      	ldr	r3, [pc, #28]	@ (8005500 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80054e4:	61bb      	str	r3, [r7, #24]
      break;
 80054e6:	bf00      	nop
  }

  return sysclockfreq;
 80054e8:	69bb      	ldr	r3, [r7, #24]
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3724      	adds	r7, #36	@ 0x24
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	58024400 	.word	0x58024400
 80054fc:	03d09000 	.word	0x03d09000
 8005500:	003d0900 	.word	0x003d0900
 8005504:	007a1200 	.word	0x007a1200
 8005508:	46000000 	.word	0x46000000
 800550c:	4c742400 	.word	0x4c742400
 8005510:	4a742400 	.word	0x4a742400
 8005514:	4af42400 	.word	0x4af42400

08005518 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800551e:	f7ff fe81 	bl	8005224 <HAL_RCC_GetSysClockFreq>
 8005522:	4602      	mov	r2, r0
 8005524:	4b10      	ldr	r3, [pc, #64]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x50>)
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	0a1b      	lsrs	r3, r3, #8
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	490f      	ldr	r1, [pc, #60]	@ (800556c <HAL_RCC_GetHCLKFreq+0x54>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	f003 031f 	and.w	r3, r3, #31
 8005536:	fa22 f303 	lsr.w	r3, r2, r3
 800553a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800553c:	4b0a      	ldr	r3, [pc, #40]	@ (8005568 <HAL_RCC_GetHCLKFreq+0x50>)
 800553e:	699b      	ldr	r3, [r3, #24]
 8005540:	f003 030f 	and.w	r3, r3, #15
 8005544:	4a09      	ldr	r2, [pc, #36]	@ (800556c <HAL_RCC_GetHCLKFreq+0x54>)
 8005546:	5cd3      	ldrb	r3, [r2, r3]
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	687a      	ldr	r2, [r7, #4]
 800554e:	fa22 f303 	lsr.w	r3, r2, r3
 8005552:	4a07      	ldr	r2, [pc, #28]	@ (8005570 <HAL_RCC_GetHCLKFreq+0x58>)
 8005554:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005556:	4a07      	ldr	r2, [pc, #28]	@ (8005574 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800555c:	4b04      	ldr	r3, [pc, #16]	@ (8005570 <HAL_RCC_GetHCLKFreq+0x58>)
 800555e:	681b      	ldr	r3, [r3, #0]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	58024400 	.word	0x58024400
 800556c:	080094a8 	.word	0x080094a8
 8005570:	24000004 	.word	0x24000004
 8005574:	24000000 	.word	0x24000000

08005578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800557c:	f7ff ffcc 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 8005580:	4602      	mov	r2, r0
 8005582:	4b06      	ldr	r3, [pc, #24]	@ (800559c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005584:	69db      	ldr	r3, [r3, #28]
 8005586:	091b      	lsrs	r3, r3, #4
 8005588:	f003 0307 	and.w	r3, r3, #7
 800558c:	4904      	ldr	r1, [pc, #16]	@ (80055a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800558e:	5ccb      	ldrb	r3, [r1, r3]
 8005590:	f003 031f 	and.w	r3, r3, #31
 8005594:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005598:	4618      	mov	r0, r3
 800559a:	bd80      	pop	{r7, pc}
 800559c:	58024400 	.word	0x58024400
 80055a0:	080094a8 	.word	0x080094a8

080055a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80055a8:	f7ff ffb6 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 80055ac:	4602      	mov	r2, r0
 80055ae:	4b06      	ldr	r3, [pc, #24]	@ (80055c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055b0:	69db      	ldr	r3, [r3, #28]
 80055b2:	0a1b      	lsrs	r3, r3, #8
 80055b4:	f003 0307 	and.w	r3, r3, #7
 80055b8:	4904      	ldr	r1, [pc, #16]	@ (80055cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80055ba:	5ccb      	ldrb	r3, [r1, r3]
 80055bc:	f003 031f 	and.w	r3, r3, #31
 80055c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	bd80      	pop	{r7, pc}
 80055c8:	58024400 	.word	0x58024400
 80055cc:	080094a8 	.word	0x080094a8

080055d0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055d4:	b0c6      	sub	sp, #280	@ 0x118
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055dc:	2300      	movs	r3, #0
 80055de:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055e2:	2300      	movs	r3, #0
 80055e4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80055e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80055ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f0:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80055f4:	2500      	movs	r5, #0
 80055f6:	ea54 0305 	orrs.w	r3, r4, r5
 80055fa:	d049      	beq.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80055fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005602:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005606:	d02f      	beq.n	8005668 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005608:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800560c:	d828      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800560e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005612:	d01a      	beq.n	800564a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005614:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005618:	d822      	bhi.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800561e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005622:	d007      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005624:	e01c      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005626:	4bab      	ldr	r3, [pc, #684]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	4aaa      	ldr	r2, [pc, #680]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800562c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005630:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005632:	e01a      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005634:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005638:	3308      	adds	r3, #8
 800563a:	2102      	movs	r1, #2
 800563c:	4618      	mov	r0, r3
 800563e:	f001 fc25 	bl	8006e8c <RCCEx_PLL2_Config>
 8005642:	4603      	mov	r3, r0
 8005644:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8005648:	e00f      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800564a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800564e:	3328      	adds	r3, #40	@ 0x28
 8005650:	2102      	movs	r1, #2
 8005652:	4618      	mov	r0, r3
 8005654:	f001 fccc 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005658:	4603      	mov	r3, r0
 800565a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800565e:	e004      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005660:	2301      	movs	r3, #1
 8005662:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005666:	e000      	b.n	800566a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8005668:	bf00      	nop
    }

    if (ret == HAL_OK)
 800566a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800566e:	2b00      	cmp	r3, #0
 8005670:	d10a      	bne.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005672:	4b98      	ldr	r3, [pc, #608]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005674:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005676:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800567a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800567e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005680:	4a94      	ldr	r2, [pc, #592]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005682:	430b      	orrs	r3, r1
 8005684:	6513      	str	r3, [r2, #80]	@ 0x50
 8005686:	e003      	b.n	8005690 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005688:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800568c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005690:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005694:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005698:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800569c:	f04f 0900 	mov.w	r9, #0
 80056a0:	ea58 0309 	orrs.w	r3, r8, r9
 80056a4:	d047      	beq.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80056a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056ac:	2b04      	cmp	r3, #4
 80056ae:	d82a      	bhi.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80056b0:	a201      	add	r2, pc, #4	@ (adr r2, 80056b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80056b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056b6:	bf00      	nop
 80056b8:	080056cd 	.word	0x080056cd
 80056bc:	080056db 	.word	0x080056db
 80056c0:	080056f1 	.word	0x080056f1
 80056c4:	0800570f 	.word	0x0800570f
 80056c8:	0800570f 	.word	0x0800570f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056cc:	4b81      	ldr	r3, [pc, #516]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d0:	4a80      	ldr	r2, [pc, #512]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056d8:	e01a      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80056da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056de:	3308      	adds	r3, #8
 80056e0:	2100      	movs	r1, #0
 80056e2:	4618      	mov	r0, r3
 80056e4:	f001 fbd2 	bl	8006e8c <RCCEx_PLL2_Config>
 80056e8:	4603      	mov	r3, r0
 80056ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80056ee:	e00f      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80056f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056f4:	3328      	adds	r3, #40	@ 0x28
 80056f6:	2100      	movs	r1, #0
 80056f8:	4618      	mov	r0, r3
 80056fa:	f001 fc79 	bl	8006ff0 <RCCEx_PLL3_Config>
 80056fe:	4603      	mov	r3, r0
 8005700:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005704:	e004      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800570c:	e000      	b.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800570e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005710:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005714:	2b00      	cmp	r3, #0
 8005716:	d10a      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005718:	4b6e      	ldr	r3, [pc, #440]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800571a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800571c:	f023 0107 	bic.w	r1, r3, #7
 8005720:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005724:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005726:	4a6b      	ldr	r2, [pc, #428]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005728:	430b      	orrs	r3, r1
 800572a:	6513      	str	r3, [r2, #80]	@ 0x50
 800572c:	e003      	b.n	8005736 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800572e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005732:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005736:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800573a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800573e:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 8005742:	f04f 0b00 	mov.w	fp, #0
 8005746:	ea5a 030b 	orrs.w	r3, sl, fp
 800574a:	d05b      	beq.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800574c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005750:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005754:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8005758:	d03b      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800575a:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 800575e:	d834      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005760:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005764:	d037      	beq.n	80057d6 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005766:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800576a:	d82e      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800576c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005770:	d033      	beq.n	80057da <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005772:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005776:	d828      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005778:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800577c:	d01a      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800577e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005782:	d822      	bhi.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005784:	2b00      	cmp	r3, #0
 8005786:	d003      	beq.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005788:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800578c:	d007      	beq.n	800579e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800578e:	e01c      	b.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005790:	4b50      	ldr	r3, [pc, #320]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005794:	4a4f      	ldr	r2, [pc, #316]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005796:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800579a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800579c:	e01e      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800579e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057a2:	3308      	adds	r3, #8
 80057a4:	2100      	movs	r1, #0
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 fb70 	bl	8006e8c <RCCEx_PLL2_Config>
 80057ac:	4603      	mov	r3, r0
 80057ae:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80057b2:	e013      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80057b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b8:	3328      	adds	r3, #40	@ 0x28
 80057ba:	2100      	movs	r1, #0
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 fc17 	bl	8006ff0 <RCCEx_PLL3_Config>
 80057c2:	4603      	mov	r3, r0
 80057c4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80057c8:	e008      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80057d0:	e004      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057d2:	bf00      	nop
 80057d4:	e002      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057d6:	bf00      	nop
 80057d8:	e000      	b.n	80057dc <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80057da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80057dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10b      	bne.n	80057fc <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80057e4:	4b3b      	ldr	r3, [pc, #236]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057e8:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80057ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057f4:	4a37      	ldr	r2, [pc, #220]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057f6:	430b      	orrs	r3, r1
 80057f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80057fa:	e003      	b.n	8005804 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005800:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005804:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800580c:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8005810:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8005814:	2300      	movs	r3, #0
 8005816:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800581a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800581e:	460b      	mov	r3, r1
 8005820:	4313      	orrs	r3, r2
 8005822:	d05d      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8005824:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005828:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800582c:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005830:	d03b      	beq.n	80058aa <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005832:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8005836:	d834      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005838:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800583c:	d037      	beq.n	80058ae <HAL_RCCEx_PeriphCLKConfig+0x2de>
 800583e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005842:	d82e      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005844:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005848:	d033      	beq.n	80058b2 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 800584a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800584e:	d828      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8005850:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005854:	d01a      	beq.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8005856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800585a:	d822      	bhi.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800585c:	2b00      	cmp	r3, #0
 800585e:	d003      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005860:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005864:	d007      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005866:	e01c      	b.n	80058a2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005868:	4b1a      	ldr	r3, [pc, #104]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800586a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800586c:	4a19      	ldr	r2, [pc, #100]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800586e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005872:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005874:	e01e      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005876:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587a:	3308      	adds	r3, #8
 800587c:	2100      	movs	r1, #0
 800587e:	4618      	mov	r0, r3
 8005880:	f001 fb04 	bl	8006e8c <RCCEx_PLL2_Config>
 8005884:	4603      	mov	r3, r0
 8005886:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800588a:	e013      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800588c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005890:	3328      	adds	r3, #40	@ 0x28
 8005892:	2100      	movs	r1, #0
 8005894:	4618      	mov	r0, r3
 8005896:	f001 fbab 	bl	8006ff0 <RCCEx_PLL3_Config>
 800589a:	4603      	mov	r3, r0
 800589c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80058a0:	e008      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80058a8:	e004      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 80058b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80058b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10d      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80058bc:	4b05      	ldr	r3, [pc, #20]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058c0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80058c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058c8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058cc:	4a01      	ldr	r2, [pc, #4]	@ (80058d4 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058ce:	430b      	orrs	r3, r1
 80058d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80058d2:	e005      	b.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80058d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058d8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80058dc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80058e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80058ec:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80058f0:	2300      	movs	r3, #0
 80058f2:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80058f6:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80058fa:	460b      	mov	r3, r1
 80058fc:	4313      	orrs	r3, r2
 80058fe:	d03a      	beq.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8005900:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005906:	2b30      	cmp	r3, #48	@ 0x30
 8005908:	d01f      	beq.n	800594a <HAL_RCCEx_PeriphCLKConfig+0x37a>
 800590a:	2b30      	cmp	r3, #48	@ 0x30
 800590c:	d819      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 800590e:	2b20      	cmp	r3, #32
 8005910:	d00c      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8005912:	2b20      	cmp	r3, #32
 8005914:	d815      	bhi.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x372>
 8005916:	2b00      	cmp	r3, #0
 8005918:	d019      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800591a:	2b10      	cmp	r3, #16
 800591c:	d111      	bne.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800591e:	4baa      	ldr	r3, [pc, #680]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005922:	4aa9      	ldr	r2, [pc, #676]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005928:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 800592a:	e011      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800592c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005930:	3308      	adds	r3, #8
 8005932:	2102      	movs	r1, #2
 8005934:	4618      	mov	r0, r3
 8005936:	f001 faa9 	bl	8006e8c <RCCEx_PLL2_Config>
 800593a:	4603      	mov	r3, r0
 800593c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8005940:	e006      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005942:	2301      	movs	r3, #1
 8005944:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005948:	e002      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800594a:	bf00      	nop
 800594c:	e000      	b.n	8005950 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 800594e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005950:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005954:	2b00      	cmp	r3, #0
 8005956:	d10a      	bne.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005958:	4b9b      	ldr	r3, [pc, #620]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 800595a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800595c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8005960:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005964:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005966:	4a98      	ldr	r2, [pc, #608]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005968:	430b      	orrs	r3, r1
 800596a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800596c:	e003      	b.n	8005976 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800596e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005972:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005976:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800597a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800597e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005982:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005986:	2300      	movs	r3, #0
 8005988:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800598c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005990:	460b      	mov	r3, r1
 8005992:	4313      	orrs	r3, r2
 8005994:	d051      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005996:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800599a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800599c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059a0:	d035      	beq.n	8005a0e <HAL_RCCEx_PeriphCLKConfig+0x43e>
 80059a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059a6:	d82e      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80059a8:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059ac:	d031      	beq.n	8005a12 <HAL_RCCEx_PeriphCLKConfig+0x442>
 80059ae:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80059b2:	d828      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80059b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059b8:	d01a      	beq.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x420>
 80059ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80059be:	d822      	bhi.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d003      	beq.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 80059c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80059c8:	d007      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80059ca:	e01c      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059cc:	4b7e      	ldr	r3, [pc, #504]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d0:	4a7d      	ldr	r2, [pc, #500]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059d8:	e01c      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80059da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059de:	3308      	adds	r3, #8
 80059e0:	2100      	movs	r1, #0
 80059e2:	4618      	mov	r0, r3
 80059e4:	f001 fa52 	bl	8006e8c <RCCEx_PLL2_Config>
 80059e8:	4603      	mov	r3, r0
 80059ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80059ee:	e011      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80059f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f4:	3328      	adds	r3, #40	@ 0x28
 80059f6:	2100      	movs	r1, #0
 80059f8:	4618      	mov	r0, r3
 80059fa:	f001 faf9 	bl	8006ff0 <RCCEx_PLL3_Config>
 80059fe:	4603      	mov	r3, r0
 8005a00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a04:	e006      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a0c:	e002      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005a0e:	bf00      	nop
 8005a10:	e000      	b.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005a14:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005a1c:	4b6a      	ldr	r3, [pc, #424]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a20:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005a24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a2a:	4a67      	ldr	r2, [pc, #412]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a2c:	430b      	orrs	r3, r1
 8005a2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8005a30:	e003      	b.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005a36:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005a3a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005a46:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005a50:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005a54:	460b      	mov	r3, r1
 8005a56:	4313      	orrs	r3, r2
 8005a58:	d053      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a64:	d033      	beq.n	8005ace <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005a66:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005a6a:	d82c      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a6c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a70:	d02f      	beq.n	8005ad2 <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005a72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a76:	d826      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a78:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a7c:	d02b      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005a7e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005a82:	d820      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a88:	d012      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005a8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005a8e:	d81a      	bhi.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d022      	beq.n	8005ada <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005a94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005a98:	d115      	bne.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005a9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a9e:	3308      	adds	r3, #8
 8005aa0:	2101      	movs	r1, #1
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	f001 f9f2 	bl	8006e8c <RCCEx_PLL2_Config>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005aae:	e015      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab4:	3328      	adds	r3, #40	@ 0x28
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 fa99 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005ac4:	e00a      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005acc:	e006      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ace:	bf00      	nop
 8005ad0:	e004      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ad2:	bf00      	nop
 8005ad4:	e002      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ad6:	bf00      	nop
 8005ad8:	e000      	b.n	8005adc <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005ada:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005adc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d10a      	bne.n	8005afa <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005ae4:	4b38      	ldr	r3, [pc, #224]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005aec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005af0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af2:	4a35      	ldr	r2, [pc, #212]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005af4:	430b      	orrs	r3, r1
 8005af6:	6513      	str	r3, [r2, #80]	@ 0x50
 8005af8:	e003      	b.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005afa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005afe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b0a:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005b0e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b12:	2300      	movs	r3, #0
 8005b14:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005b18:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005b1c:	460b      	mov	r3, r1
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	d058      	beq.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005b22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005b2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b2e:	d033      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005b30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005b34:	d82c      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b3a:	d02f      	beq.n	8005b9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b40:	d826      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b46:	d02b      	beq.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005b48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005b4c:	d820      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b52:	d012      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005b54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b58:	d81a      	bhi.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d022      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005b5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b62:	d115      	bne.n	8005b90 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b68:	3308      	adds	r3, #8
 8005b6a:	2101      	movs	r1, #1
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f001 f98d 	bl	8006e8c <RCCEx_PLL2_Config>
 8005b72:	4603      	mov	r3, r0
 8005b74:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b78:	e015      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b7a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7e:	3328      	adds	r3, #40	@ 0x28
 8005b80:	2101      	movs	r1, #1
 8005b82:	4618      	mov	r0, r3
 8005b84:	f001 fa34 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b96:	e006      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b98:	bf00      	nop
 8005b9a:	e004      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005b9c:	bf00      	nop
 8005b9e:	e002      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ba0:	bf00      	nop
 8005ba2:	e000      	b.n	8005ba6 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005ba4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ba6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d10e      	bne.n	8005bcc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005bae:	4b06      	ldr	r3, [pc, #24]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005bb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bba:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bbe:	4a02      	ldr	r2, [pc, #8]	@ (8005bc8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8005bc4:	e006      	b.n	8005bd4 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005bc6:	bf00      	nop
 8005bc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005bcc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005bd0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005bd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bdc:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005be0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005be4:	2300      	movs	r3, #0
 8005be6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005bea:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005bee:	460b      	mov	r3, r1
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	d037      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005bf4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005bfa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bfe:	d00e      	beq.n	8005c1e <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005c00:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c04:	d816      	bhi.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d018      	beq.n	8005c3c <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005c0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c0e:	d111      	bne.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c10:	4bc4      	ldr	r3, [pc, #784]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c14:	4ac3      	ldr	r2, [pc, #780]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c16:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005c1a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c1c:	e00f      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005c1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c22:	3308      	adds	r3, #8
 8005c24:	2101      	movs	r1, #1
 8005c26:	4618      	mov	r0, r3
 8005c28:	f001 f930 	bl	8006e8c <RCCEx_PLL2_Config>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005c32:	e004      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c3a:	e000      	b.n	8005c3e <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005c3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10a      	bne.n	8005c5c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005c46:	4bb7      	ldr	r3, [pc, #732]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c48:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005c4a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005c4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c52:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c54:	4ab3      	ldr	r2, [pc, #716]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c56:	430b      	orrs	r3, r1
 8005c58:	6513      	str	r3, [r2, #80]	@ 0x50
 8005c5a:	e003      	b.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005c64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c6c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005c70:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c74:	2300      	movs	r3, #0
 8005c76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005c7a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005c7e:	460b      	mov	r3, r1
 8005c80:	4313      	orrs	r3, r2
 8005c82:	d039      	beq.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005c84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005c8a:	2b03      	cmp	r3, #3
 8005c8c:	d81c      	bhi.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005c8e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c94 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c94:	08005cd1 	.word	0x08005cd1
 8005c98:	08005ca5 	.word	0x08005ca5
 8005c9c:	08005cb3 	.word	0x08005cb3
 8005ca0:	08005cd1 	.word	0x08005cd1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ca4:	4b9f      	ldr	r3, [pc, #636]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca8:	4a9e      	ldr	r2, [pc, #632]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005caa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005cae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cb0:	e00f      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cb6:	3308      	adds	r3, #8
 8005cb8:	2102      	movs	r1, #2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 f8e6 	bl	8006e8c <RCCEx_PLL2_Config>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005cc6:	e004      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cce:	e000      	b.n	8005cd2 <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cd2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d10a      	bne.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005cda:	4b92      	ldr	r3, [pc, #584]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005cde:	f023 0103 	bic.w	r1, r3, #3
 8005ce2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ce6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ce8:	4a8e      	ldr	r2, [pc, #568]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cea:	430b      	orrs	r3, r1
 8005cec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005cee:	e003      	b.n	8005cf8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cf0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cf4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005cf8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d00:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d0e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d12:	460b      	mov	r3, r1
 8005d14:	4313      	orrs	r3, r2
 8005d16:	f000 8099 	beq.w	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d1a:	4b83      	ldr	r3, [pc, #524]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a82      	ldr	r2, [pc, #520]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d20:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d24:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d26:	f7fb fb19 	bl	800135c <HAL_GetTick>
 8005d2a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d2e:	e00b      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d30:	f7fb fb14 	bl	800135c <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005d3a:	1ad3      	subs	r3, r2, r3
 8005d3c:	2b64      	cmp	r3, #100	@ 0x64
 8005d3e:	d903      	bls.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d46:	e005      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d48:	4b77      	ldr	r3, [pc, #476]	@ (8005f28 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d0ed      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005d54:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d173      	bne.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005d5c:	4b71      	ldr	r3, [pc, #452]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d5e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005d60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005d68:	4053      	eors	r3, r2
 8005d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d015      	beq.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005d72:	4b6c      	ldr	r3, [pc, #432]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005d7a:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005d7e:	4b69      	ldr	r3, [pc, #420]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d82:	4a68      	ldr	r2, [pc, #416]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d88:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005d8a:	4b66      	ldr	r3, [pc, #408]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005d8e:	4a65      	ldr	r2, [pc, #404]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d94:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005d96:	4a63      	ldr	r2, [pc, #396]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d98:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005d9c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005d9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005da2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005da6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005daa:	d118      	bne.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dac:	f7fb fad6 	bl	800135c <HAL_GetTick>
 8005db0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005db4:	e00d      	b.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005db6:	f7fb fad1 	bl	800135c <HAL_GetTick>
 8005dba:	4602      	mov	r2, r0
 8005dbc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005dc0:	1ad2      	subs	r2, r2, r3
 8005dc2:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d903      	bls.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005dd0:	e005      	b.n	8005dde <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005dd2:	4b54      	ldr	r3, [pc, #336]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d0eb      	beq.n	8005db6 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005dde:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d129      	bne.n	8005e3a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005de6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005dee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005df2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005df6:	d10e      	bne.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005df8:	4b4a      	ldr	r3, [pc, #296]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e00:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e08:	091a      	lsrs	r2, r3, #4
 8005e0a:	4b48      	ldr	r3, [pc, #288]	@ (8005f2c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e0c:	4013      	ands	r3, r2
 8005e0e:	4a45      	ldr	r2, [pc, #276]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e10:	430b      	orrs	r3, r1
 8005e12:	6113      	str	r3, [r2, #16]
 8005e14:	e005      	b.n	8005e22 <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005e16:	4b43      	ldr	r3, [pc, #268]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	4a42      	ldr	r2, [pc, #264]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e1c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005e20:	6113      	str	r3, [r2, #16]
 8005e22:	4b40      	ldr	r3, [pc, #256]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e24:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005e26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e2e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e32:	4a3c      	ldr	r2, [pc, #240]	@ (8005f24 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e34:	430b      	orrs	r3, r1
 8005e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8005e38:	e008      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e3a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e3e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005e42:	e003      	b.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e44:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e48:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005e4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e54:	f002 0301 	and.w	r3, r2, #1
 8005e58:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005e62:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005e66:	460b      	mov	r3, r1
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	f000 808f 	beq.w	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005e6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e72:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e74:	2b28      	cmp	r3, #40	@ 0x28
 8005e76:	d871      	bhi.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005e78:	a201      	add	r2, pc, #4	@ (adr r2, 8005e80 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e7e:	bf00      	nop
 8005e80:	08005f65 	.word	0x08005f65
 8005e84:	08005f5d 	.word	0x08005f5d
 8005e88:	08005f5d 	.word	0x08005f5d
 8005e8c:	08005f5d 	.word	0x08005f5d
 8005e90:	08005f5d 	.word	0x08005f5d
 8005e94:	08005f5d 	.word	0x08005f5d
 8005e98:	08005f5d 	.word	0x08005f5d
 8005e9c:	08005f5d 	.word	0x08005f5d
 8005ea0:	08005f31 	.word	0x08005f31
 8005ea4:	08005f5d 	.word	0x08005f5d
 8005ea8:	08005f5d 	.word	0x08005f5d
 8005eac:	08005f5d 	.word	0x08005f5d
 8005eb0:	08005f5d 	.word	0x08005f5d
 8005eb4:	08005f5d 	.word	0x08005f5d
 8005eb8:	08005f5d 	.word	0x08005f5d
 8005ebc:	08005f5d 	.word	0x08005f5d
 8005ec0:	08005f47 	.word	0x08005f47
 8005ec4:	08005f5d 	.word	0x08005f5d
 8005ec8:	08005f5d 	.word	0x08005f5d
 8005ecc:	08005f5d 	.word	0x08005f5d
 8005ed0:	08005f5d 	.word	0x08005f5d
 8005ed4:	08005f5d 	.word	0x08005f5d
 8005ed8:	08005f5d 	.word	0x08005f5d
 8005edc:	08005f5d 	.word	0x08005f5d
 8005ee0:	08005f65 	.word	0x08005f65
 8005ee4:	08005f5d 	.word	0x08005f5d
 8005ee8:	08005f5d 	.word	0x08005f5d
 8005eec:	08005f5d 	.word	0x08005f5d
 8005ef0:	08005f5d 	.word	0x08005f5d
 8005ef4:	08005f5d 	.word	0x08005f5d
 8005ef8:	08005f5d 	.word	0x08005f5d
 8005efc:	08005f5d 	.word	0x08005f5d
 8005f00:	08005f65 	.word	0x08005f65
 8005f04:	08005f5d 	.word	0x08005f5d
 8005f08:	08005f5d 	.word	0x08005f5d
 8005f0c:	08005f5d 	.word	0x08005f5d
 8005f10:	08005f5d 	.word	0x08005f5d
 8005f14:	08005f5d 	.word	0x08005f5d
 8005f18:	08005f5d 	.word	0x08005f5d
 8005f1c:	08005f5d 	.word	0x08005f5d
 8005f20:	08005f65 	.word	0x08005f65
 8005f24:	58024400 	.word	0x58024400
 8005f28:	58024800 	.word	0x58024800
 8005f2c:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005f30:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f34:	3308      	adds	r3, #8
 8005f36:	2101      	movs	r1, #1
 8005f38:	4618      	mov	r0, r3
 8005f3a:	f000 ffa7 	bl	8006e8c <RCCEx_PLL2_Config>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f44:	e00f      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005f46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f4a:	3328      	adds	r3, #40	@ 0x28
 8005f4c:	2101      	movs	r1, #1
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f001 f84e 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005f54:	4603      	mov	r3, r0
 8005f56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005f5a:	e004      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005f62:	e000      	b.n	8005f66 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005f66:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d10a      	bne.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005f6e:	4bbf      	ldr	r3, [pc, #764]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f72:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8005f76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f7c:	4abb      	ldr	r2, [pc, #748]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005f7e:	430b      	orrs	r3, r1
 8005f80:	6553      	str	r3, [r2, #84]	@ 0x54
 8005f82:	e003      	b.n	8005f8c <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f84:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005f88:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8005f8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f94:	f002 0302 	and.w	r3, r2, #2
 8005f98:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fa2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8005fa6:	460b      	mov	r3, r1
 8005fa8:	4313      	orrs	r3, r2
 8005faa:	d041      	beq.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8005fac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fb2:	2b05      	cmp	r3, #5
 8005fb4:	d824      	bhi.n	8006000 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8005fb6:	a201      	add	r2, pc, #4	@ (adr r2, 8005fbc <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8005fb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbc:	08006009 	.word	0x08006009
 8005fc0:	08005fd5 	.word	0x08005fd5
 8005fc4:	08005feb 	.word	0x08005feb
 8005fc8:	08006009 	.word	0x08006009
 8005fcc:	08006009 	.word	0x08006009
 8005fd0:	08006009 	.word	0x08006009
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd8:	3308      	adds	r3, #8
 8005fda:	2101      	movs	r1, #1
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f000 ff55 	bl	8006e8c <RCCEx_PLL2_Config>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005fe8:	e00f      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fee:	3328      	adds	r3, #40	@ 0x28
 8005ff0:	2101      	movs	r1, #1
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 fffc 	bl	8006ff0 <RCCEx_PLL3_Config>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8005ffe:	e004      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006000:	2301      	movs	r3, #1
 8006002:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006006:	e000      	b.n	800600a <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800600a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800600e:	2b00      	cmp	r3, #0
 8006010:	d10a      	bne.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006012:	4b96      	ldr	r3, [pc, #600]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006016:	f023 0107 	bic.w	r1, r3, #7
 800601a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006020:	4a92      	ldr	r2, [pc, #584]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006022:	430b      	orrs	r3, r1
 8006024:	6553      	str	r3, [r2, #84]	@ 0x54
 8006026:	e003      	b.n	8006030 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006028:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800602c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006030:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006034:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006038:	f002 0304 	and.w	r3, r2, #4
 800603c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006040:	2300      	movs	r3, #0
 8006042:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006046:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800604a:	460b      	mov	r3, r1
 800604c:	4313      	orrs	r3, r2
 800604e:	d044      	beq.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8006050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006054:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006058:	2b05      	cmp	r3, #5
 800605a:	d825      	bhi.n	80060a8 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 800605c:	a201      	add	r2, pc, #4	@ (adr r2, 8006064 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 800605e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006062:	bf00      	nop
 8006064:	080060b1 	.word	0x080060b1
 8006068:	0800607d 	.word	0x0800607d
 800606c:	08006093 	.word	0x08006093
 8006070:	080060b1 	.word	0x080060b1
 8006074:	080060b1 	.word	0x080060b1
 8006078:	080060b1 	.word	0x080060b1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800607c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006080:	3308      	adds	r3, #8
 8006082:	2101      	movs	r1, #1
 8006084:	4618      	mov	r0, r3
 8006086:	f000 ff01 	bl	8006e8c <RCCEx_PLL2_Config>
 800608a:	4603      	mov	r3, r0
 800608c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006090:	e00f      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006092:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006096:	3328      	adds	r3, #40	@ 0x28
 8006098:	2101      	movs	r1, #1
 800609a:	4618      	mov	r0, r3
 800609c:	f000 ffa8 	bl	8006ff0 <RCCEx_PLL3_Config>
 80060a0:	4603      	mov	r3, r0
 80060a2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80060a6:	e004      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80060a8:	2301      	movs	r3, #1
 80060aa:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80060ae:	e000      	b.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 80060b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80060b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d10b      	bne.n	80060d2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060ba:	4b6c      	ldr	r3, [pc, #432]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80060be:	f023 0107 	bic.w	r1, r3, #7
 80060c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060ca:	4a68      	ldr	r2, [pc, #416]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060cc:	430b      	orrs	r3, r1
 80060ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80060d0:	e003      	b.n	80060da <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80060da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060e2:	f002 0320 	and.w	r3, r2, #32
 80060e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80060ea:	2300      	movs	r3, #0
 80060ec:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80060f0:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80060f4:	460b      	mov	r3, r1
 80060f6:	4313      	orrs	r3, r2
 80060f8:	d055      	beq.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80060fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006102:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006106:	d033      	beq.n	8006170 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006108:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800610c:	d82c      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800610e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006112:	d02f      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8006114:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006118:	d826      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800611a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800611e:	d02b      	beq.n	8006178 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8006120:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8006124:	d820      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006126:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800612a:	d012      	beq.n	8006152 <HAL_RCCEx_PeriphCLKConfig+0xb82>
 800612c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006130:	d81a      	bhi.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8006132:	2b00      	cmp	r3, #0
 8006134:	d022      	beq.n	800617c <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8006136:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800613a:	d115      	bne.n	8006168 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800613c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006140:	3308      	adds	r3, #8
 8006142:	2100      	movs	r1, #0
 8006144:	4618      	mov	r0, r3
 8006146:	f000 fea1 	bl	8006e8c <RCCEx_PLL2_Config>
 800614a:	4603      	mov	r3, r0
 800614c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006150:	e015      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006152:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006156:	3328      	adds	r3, #40	@ 0x28
 8006158:	2102      	movs	r1, #2
 800615a:	4618      	mov	r0, r3
 800615c:	f000 ff48 	bl	8006ff0 <RCCEx_PLL3_Config>
 8006160:	4603      	mov	r3, r0
 8006162:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8006166:	e00a      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006168:	2301      	movs	r3, #1
 800616a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800616e:	e006      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006170:	bf00      	nop
 8006172:	e004      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006174:	bf00      	nop
 8006176:	e002      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006178:	bf00      	nop
 800617a:	e000      	b.n	800617e <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 800617c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800617e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006182:	2b00      	cmp	r3, #0
 8006184:	d10b      	bne.n	800619e <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006186:	4b39      	ldr	r3, [pc, #228]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800618a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800618e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006192:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006196:	4a35      	ldr	r2, [pc, #212]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006198:	430b      	orrs	r3, r1
 800619a:	6553      	str	r3, [r2, #84]	@ 0x54
 800619c:	e003      	b.n	80061a6 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800619e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80061a2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80061a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ae:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80061b2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061b6:	2300      	movs	r3, #0
 80061b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061bc:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80061c0:	460b      	mov	r3, r1
 80061c2:	4313      	orrs	r3, r2
 80061c4:	d058      	beq.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80061c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80061ce:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061d2:	d033      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 80061d4:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80061d8:	d82c      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061de:	d02f      	beq.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 80061e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061e4:	d826      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061ea:	d02b      	beq.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 80061ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80061f0:	d820      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061f2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061f6:	d012      	beq.n	800621e <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 80061f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80061fc:	d81a      	bhi.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d022      	beq.n	8006248 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8006202:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006206:	d115      	bne.n	8006234 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006208:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800620c:	3308      	adds	r3, #8
 800620e:	2100      	movs	r1, #0
 8006210:	4618      	mov	r0, r3
 8006212:	f000 fe3b 	bl	8006e8c <RCCEx_PLL2_Config>
 8006216:	4603      	mov	r3, r0
 8006218:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800621c:	e015      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800621e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006222:	3328      	adds	r3, #40	@ 0x28
 8006224:	2102      	movs	r1, #2
 8006226:	4618      	mov	r0, r3
 8006228:	f000 fee2 	bl	8006ff0 <RCCEx_PLL3_Config>
 800622c:	4603      	mov	r3, r0
 800622e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8006232:	e00a      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006234:	2301      	movs	r3, #1
 8006236:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800623a:	e006      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800623c:	bf00      	nop
 800623e:	e004      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006240:	bf00      	nop
 8006242:	e002      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006244:	bf00      	nop
 8006246:	e000      	b.n	800624a <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8006248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800624a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10e      	bne.n	8006270 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006252:	4b06      	ldr	r3, [pc, #24]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006256:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800625a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800625e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8006262:	4a02      	ldr	r2, [pc, #8]	@ (800626c <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006264:	430b      	orrs	r3, r1
 8006266:	6593      	str	r3, [r2, #88]	@ 0x58
 8006268:	e006      	b.n	8006278 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 800626a:	bf00      	nop
 800626c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006270:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006274:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006278:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800627c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006280:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006284:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006288:	2300      	movs	r3, #0
 800628a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800628e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006292:	460b      	mov	r3, r1
 8006294:	4313      	orrs	r3, r2
 8006296:	d055      	beq.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006298:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800629c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80062a0:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80062a4:	d033      	beq.n	800630e <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 80062a6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80062aa:	d82c      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80062ac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062b0:	d02f      	beq.n	8006312 <HAL_RCCEx_PeriphCLKConfig+0xd42>
 80062b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062b6:	d826      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80062b8:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062bc:	d02b      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 80062be:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80062c2:	d820      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80062c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062c8:	d012      	beq.n	80062f0 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80062ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80062ce:	d81a      	bhi.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d022      	beq.n	800631a <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80062d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80062d8:	d115      	bne.n	8006306 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80062da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062de:	3308      	adds	r3, #8
 80062e0:	2100      	movs	r1, #0
 80062e2:	4618      	mov	r0, r3
 80062e4:	f000 fdd2 	bl	8006e8c <RCCEx_PLL2_Config>
 80062e8:	4603      	mov	r3, r0
 80062ea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80062ee:	e015      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062f4:	3328      	adds	r3, #40	@ 0x28
 80062f6:	2102      	movs	r1, #2
 80062f8:	4618      	mov	r0, r3
 80062fa:	f000 fe79 	bl	8006ff0 <RCCEx_PLL3_Config>
 80062fe:	4603      	mov	r3, r0
 8006300:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006304:	e00a      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800630c:	e006      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800630e:	bf00      	nop
 8006310:	e004      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006312:	bf00      	nop
 8006314:	e002      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8006316:	bf00      	nop
 8006318:	e000      	b.n	800631c <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800631a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800631c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10b      	bne.n	800633c <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006324:	4ba0      	ldr	r3, [pc, #640]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006326:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006328:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800632c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006330:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006334:	4a9c      	ldr	r2, [pc, #624]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006336:	430b      	orrs	r3, r1
 8006338:	6593      	str	r3, [r2, #88]	@ 0x58
 800633a:	e003      	b.n	8006344 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800633c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006340:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 8006344:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800634c:	f002 0308 	and.w	r3, r2, #8
 8006350:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006354:	2300      	movs	r3, #0
 8006356:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800635a:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800635e:	460b      	mov	r3, r1
 8006360:	4313      	orrs	r3, r2
 8006362:	d01e      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 8006364:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006368:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800636c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006370:	d10c      	bne.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8006372:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006376:	3328      	adds	r3, #40	@ 0x28
 8006378:	2102      	movs	r1, #2
 800637a:	4618      	mov	r0, r3
 800637c:	f000 fe38 	bl	8006ff0 <RCCEx_PLL3_Config>
 8006380:	4603      	mov	r3, r0
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006386:	2301      	movs	r3, #1
 8006388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 800638c:	4b86      	ldr	r3, [pc, #536]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800638e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006390:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006394:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006398:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800639c:	4a82      	ldr	r2, [pc, #520]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800639e:	430b      	orrs	r3, r1
 80063a0:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80063a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063aa:	f002 0310 	and.w	r3, r2, #16
 80063ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063b2:	2300      	movs	r3, #0
 80063b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063b8:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80063bc:	460b      	mov	r3, r1
 80063be:	4313      	orrs	r3, r2
 80063c0:	d01e      	beq.n	8006400 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80063c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ce:	d10c      	bne.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d4:	3328      	adds	r3, #40	@ 0x28
 80063d6:	2102      	movs	r1, #2
 80063d8:	4618      	mov	r0, r3
 80063da:	f000 fe09 	bl	8006ff0 <RCCEx_PLL3_Config>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d002      	beq.n	80063ea <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80063ea:	4b6f      	ldr	r3, [pc, #444]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063ee:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80063f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80063fa:	4a6b      	ldr	r2, [pc, #428]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063fc:	430b      	orrs	r3, r1
 80063fe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006400:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006408:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800640c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800640e:	2300      	movs	r3, #0
 8006410:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006412:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006416:	460b      	mov	r3, r1
 8006418:	4313      	orrs	r3, r2
 800641a:	d03e      	beq.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800641c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006420:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006424:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006428:	d022      	beq.n	8006470 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 800642a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800642e:	d81b      	bhi.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8006430:	2b00      	cmp	r3, #0
 8006432:	d003      	beq.n	800643c <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 8006434:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006438:	d00b      	beq.n	8006452 <HAL_RCCEx_PeriphCLKConfig+0xe82>
 800643a:	e015      	b.n	8006468 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800643c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006440:	3308      	adds	r3, #8
 8006442:	2100      	movs	r1, #0
 8006444:	4618      	mov	r0, r3
 8006446:	f000 fd21 	bl	8006e8c <RCCEx_PLL2_Config>
 800644a:	4603      	mov	r3, r0
 800644c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006450:	e00f      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006456:	3328      	adds	r3, #40	@ 0x28
 8006458:	2102      	movs	r1, #2
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fdc8 	bl	8006ff0 <RCCEx_PLL3_Config>
 8006460:	4603      	mov	r3, r0
 8006462:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8006466:	e004      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800646e:	e000      	b.n	8006472 <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8006470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006472:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006476:	2b00      	cmp	r3, #0
 8006478:	d10b      	bne.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800647a:	4b4b      	ldr	r3, [pc, #300]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800647c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8006482:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006486:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800648a:	4a47      	ldr	r2, [pc, #284]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800648c:	430b      	orrs	r3, r1
 800648e:	6593      	str	r3, [r2, #88]	@ 0x58
 8006490:	e003      	b.n	800649a <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006492:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006496:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800649a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800649e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a2:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80064a6:	673b      	str	r3, [r7, #112]	@ 0x70
 80064a8:	2300      	movs	r3, #0
 80064aa:	677b      	str	r3, [r7, #116]	@ 0x74
 80064ac:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80064b0:	460b      	mov	r3, r1
 80064b2:	4313      	orrs	r3, r2
 80064b4:	d03b      	beq.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80064b6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064be:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064c2:	d01f      	beq.n	8006504 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80064c4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80064c8:	d818      	bhi.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80064ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80064ce:	d003      	beq.n	80064d8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80064d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80064d4:	d007      	beq.n	80064e6 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80064d6:	e011      	b.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80064d8:	4b33      	ldr	r3, [pc, #204]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	4a32      	ldr	r2, [pc, #200]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80064de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80064e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80064e4:	e00f      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80064e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ea:	3328      	adds	r3, #40	@ 0x28
 80064ec:	2101      	movs	r1, #1
 80064ee:	4618      	mov	r0, r3
 80064f0:	f000 fd7e 	bl	8006ff0 <RCCEx_PLL3_Config>
 80064f4:	4603      	mov	r3, r0
 80064f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80064fa:	e004      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006502:	e000      	b.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006504:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800650a:	2b00      	cmp	r3, #0
 800650c:	d10b      	bne.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800650e:	4b26      	ldr	r3, [pc, #152]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006512:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8006516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800651a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800651e:	4a22      	ldr	r2, [pc, #136]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006520:	430b      	orrs	r3, r1
 8006522:	6553      	str	r3, [r2, #84]	@ 0x54
 8006524:	e003      	b.n	800652e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006526:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800652a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800652e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006536:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800653a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800653c:	2300      	movs	r3, #0
 800653e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006540:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8006544:	460b      	mov	r3, r1
 8006546:	4313      	orrs	r3, r2
 8006548:	d034      	beq.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800654a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800654e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8006554:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006558:	d007      	beq.n	800656a <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 800655a:	e011      	b.n	8006580 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800655c:	4b12      	ldr	r3, [pc, #72]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800655e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006560:	4a11      	ldr	r2, [pc, #68]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006562:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006566:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8006568:	e00e      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800656a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800656e:	3308      	adds	r3, #8
 8006570:	2102      	movs	r1, #2
 8006572:	4618      	mov	r0, r3
 8006574:	f000 fc8a 	bl	8006e8c <RCCEx_PLL2_Config>
 8006578:	4603      	mov	r3, r0
 800657a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800657e:	e003      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8006580:	2301      	movs	r3, #1
 8006582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006586:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006588:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006590:	4b05      	ldr	r3, [pc, #20]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006592:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006594:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800659c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800659e:	4a02      	ldr	r2, [pc, #8]	@ (80065a8 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065a0:	430b      	orrs	r3, r1
 80065a2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80065a4:	e006      	b.n	80065b4 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 80065a6:	bf00      	nop
 80065a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b0:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80065b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065bc:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80065c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80065c2:	2300      	movs	r3, #0
 80065c4:	667b      	str	r3, [r7, #100]	@ 0x64
 80065c6:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80065ca:	460b      	mov	r3, r1
 80065cc:	4313      	orrs	r3, r2
 80065ce:	d00c      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065d4:	3328      	adds	r3, #40	@ 0x28
 80065d6:	2102      	movs	r1, #2
 80065d8:	4618      	mov	r0, r3
 80065da:	f000 fd09 	bl	8006ff0 <RCCEx_PLL3_Config>
 80065de:	4603      	mov	r3, r0
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d002      	beq.n	80065ea <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80065ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80065f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80065f8:	2300      	movs	r3, #0
 80065fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065fc:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8006600:	460b      	mov	r3, r1
 8006602:	4313      	orrs	r3, r2
 8006604:	d036      	beq.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006606:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800660a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800660c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006610:	d018      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8006612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006616:	d811      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800661c:	d014      	beq.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 800661e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006622:	d80b      	bhi.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8006624:	2b00      	cmp	r3, #0
 8006626:	d011      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8006628:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800662c:	d106      	bne.n	800663c <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800662e:	4bb7      	ldr	r3, [pc, #732]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006632:	4ab6      	ldr	r2, [pc, #728]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8006638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800663a:	e008      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006642:	e004      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006644:	bf00      	nop
 8006646:	e002      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8006648:	bf00      	nop
 800664a:	e000      	b.n	800664e <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800664c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800664e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006652:	2b00      	cmp	r3, #0
 8006654:	d10a      	bne.n	800666c <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006656:	4bad      	ldr	r3, [pc, #692]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800665a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800665e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006662:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006664:	4aa9      	ldr	r2, [pc, #676]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006666:	430b      	orrs	r3, r1
 8006668:	6553      	str	r3, [r2, #84]	@ 0x54
 800666a:	e003      	b.n	8006674 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800666c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006670:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8006680:	653b      	str	r3, [r7, #80]	@ 0x50
 8006682:	2300      	movs	r3, #0
 8006684:	657b      	str	r3, [r7, #84]	@ 0x54
 8006686:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800668a:	460b      	mov	r3, r1
 800668c:	4313      	orrs	r3, r2
 800668e:	d009      	beq.n	80066a4 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006690:	4b9e      	ldr	r3, [pc, #632]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006692:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006694:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006698:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800669c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800669e:	4a9b      	ldr	r2, [pc, #620]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066a0:	430b      	orrs	r3, r1
 80066a2:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80066a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ac:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80066b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066b2:	2300      	movs	r3, #0
 80066b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066b6:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80066ba:	460b      	mov	r3, r1
 80066bc:	4313      	orrs	r3, r2
 80066be:	d009      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80066c0:	4b92      	ldr	r3, [pc, #584]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066c4:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80066c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80066ce:	4a8f      	ldr	r2, [pc, #572]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80066d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066dc:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80066e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80066e2:	2300      	movs	r3, #0
 80066e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80066e6:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80066ea:	460b      	mov	r3, r1
 80066ec:	4313      	orrs	r3, r2
 80066ee:	d00e      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80066f0:	4b86      	ldr	r3, [pc, #536]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066f2:	691b      	ldr	r3, [r3, #16]
 80066f4:	4a85      	ldr	r2, [pc, #532]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066f6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80066fa:	6113      	str	r3, [r2, #16]
 80066fc:	4b83      	ldr	r3, [pc, #524]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066fe:	6919      	ldr	r1, [r3, #16]
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006704:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006708:	4a80      	ldr	r2, [pc, #512]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800670a:	430b      	orrs	r3, r1
 800670c:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800670e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006716:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800671a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800671c:	2300      	movs	r3, #0
 800671e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006720:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8006724:	460b      	mov	r3, r1
 8006726:	4313      	orrs	r3, r2
 8006728:	d009      	beq.n	800673e <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800672a:	4b78      	ldr	r3, [pc, #480]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800672c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800672e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8006732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006736:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006738:	4a74      	ldr	r2, [pc, #464]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800673a:	430b      	orrs	r3, r1
 800673c:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800673e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006746:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800674a:	633b      	str	r3, [r7, #48]	@ 0x30
 800674c:	2300      	movs	r3, #0
 800674e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006750:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8006754:	460b      	mov	r3, r1
 8006756:	4313      	orrs	r3, r2
 8006758:	d00a      	beq.n	8006770 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800675a:	4b6c      	ldr	r3, [pc, #432]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800675c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800675e:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8006762:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800676a:	4a68      	ldr	r2, [pc, #416]	@ (800690c <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800676c:	430b      	orrs	r3, r1
 800676e:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8006770:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006778:	2100      	movs	r1, #0
 800677a:	62b9      	str	r1, [r7, #40]	@ 0x28
 800677c:	f003 0301 	and.w	r3, r3, #1
 8006780:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006782:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006786:	460b      	mov	r3, r1
 8006788:	4313      	orrs	r3, r2
 800678a:	d011      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006790:	3308      	adds	r3, #8
 8006792:	2100      	movs	r1, #0
 8006794:	4618      	mov	r0, r3
 8006796:	f000 fb79 	bl	8006e8c <RCCEx_PLL2_Config>
 800679a:	4603      	mov	r3, r0
 800679c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80067a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d003      	beq.n	80067b0 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80067b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b8:	2100      	movs	r1, #0
 80067ba:	6239      	str	r1, [r7, #32]
 80067bc:	f003 0302 	and.w	r3, r3, #2
 80067c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80067c2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80067c6:	460b      	mov	r3, r1
 80067c8:	4313      	orrs	r3, r2
 80067ca:	d011      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80067cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067d0:	3308      	adds	r3, #8
 80067d2:	2101      	movs	r1, #1
 80067d4:	4618      	mov	r0, r3
 80067d6:	f000 fb59 	bl	8006e8c <RCCEx_PLL2_Config>
 80067da:	4603      	mov	r3, r0
 80067dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80067e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d003      	beq.n	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80067ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80067f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067f8:	2100      	movs	r1, #0
 80067fa:	61b9      	str	r1, [r7, #24]
 80067fc:	f003 0304 	and.w	r3, r3, #4
 8006800:	61fb      	str	r3, [r7, #28]
 8006802:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006806:	460b      	mov	r3, r1
 8006808:	4313      	orrs	r3, r2
 800680a:	d011      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800680c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006810:	3308      	adds	r3, #8
 8006812:	2102      	movs	r1, #2
 8006814:	4618      	mov	r0, r3
 8006816:	f000 fb39 	bl	8006e8c <RCCEx_PLL2_Config>
 800681a:	4603      	mov	r3, r0
 800681c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8006820:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006828:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800682c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8006830:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006838:	2100      	movs	r1, #0
 800683a:	6139      	str	r1, [r7, #16]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8006846:	460b      	mov	r3, r1
 8006848:	4313      	orrs	r3, r2
 800684a:	d011      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800684c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006850:	3328      	adds	r3, #40	@ 0x28
 8006852:	2100      	movs	r1, #0
 8006854:	4618      	mov	r0, r3
 8006856:	f000 fbcb 	bl	8006ff0 <RCCEx_PLL3_Config>
 800685a:	4603      	mov	r3, r0
 800685c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8006860:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006864:	2b00      	cmp	r3, #0
 8006866:	d003      	beq.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800686c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8006870:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006878:	2100      	movs	r1, #0
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	f003 0310 	and.w	r3, r3, #16
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006886:	460b      	mov	r3, r1
 8006888:	4313      	orrs	r3, r2
 800688a:	d011      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800688c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006890:	3328      	adds	r3, #40	@ 0x28
 8006892:	2101      	movs	r1, #1
 8006894:	4618      	mov	r0, r3
 8006896:	f000 fbab 	bl	8006ff0 <RCCEx_PLL3_Config>
 800689a:	4603      	mov	r3, r0
 800689c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80068a0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d003      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ac:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80068b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068b8:	2100      	movs	r1, #0
 80068ba:	6039      	str	r1, [r7, #0]
 80068bc:	f003 0320 	and.w	r3, r3, #32
 80068c0:	607b      	str	r3, [r7, #4]
 80068c2:	e9d7 1200 	ldrd	r1, r2, [r7]
 80068c6:	460b      	mov	r3, r1
 80068c8:	4313      	orrs	r3, r2
 80068ca:	d011      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80068cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068d0:	3328      	adds	r3, #40	@ 0x28
 80068d2:	2102      	movs	r1, #2
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 fb8b 	bl	8006ff0 <RCCEx_PLL3_Config>
 80068da:	4603      	mov	r3, r0
 80068dc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80068e0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d003      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068ec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80068f0:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80068f8:	2300      	movs	r3, #0
 80068fa:	e000      	b.n	80068fe <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80068fc:	2301      	movs	r3, #1
}
 80068fe:	4618      	mov	r0, r3
 8006900:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006904:	46bd      	mov	sp, r7
 8006906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800690a:	bf00      	nop
 800690c:	58024400 	.word	0x58024400

08006910 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8006914:	f7fe fe00 	bl	8005518 <HAL_RCC_GetHCLKFreq>
 8006918:	4602      	mov	r2, r0
 800691a:	4b06      	ldr	r3, [pc, #24]	@ (8006934 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800691c:	6a1b      	ldr	r3, [r3, #32]
 800691e:	091b      	lsrs	r3, r3, #4
 8006920:	f003 0307 	and.w	r3, r3, #7
 8006924:	4904      	ldr	r1, [pc, #16]	@ (8006938 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8006926:	5ccb      	ldrb	r3, [r1, r3]
 8006928:	f003 031f 	and.w	r3, r3, #31
 800692c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	58024400 	.word	0x58024400
 8006938:	080094a8 	.word	0x080094a8

0800693c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800693c:	b480      	push	{r7}
 800693e:	b089      	sub	sp, #36	@ 0x24
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006944:	4ba1      	ldr	r3, [pc, #644]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006948:	f003 0303 	and.w	r3, r3, #3
 800694c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800694e:	4b9f      	ldr	r3, [pc, #636]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006950:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006952:	0b1b      	lsrs	r3, r3, #12
 8006954:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006958:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800695a:	4b9c      	ldr	r3, [pc, #624]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	091b      	lsrs	r3, r3, #4
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8006966:	4b99      	ldr	r3, [pc, #612]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006968:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800696a:	08db      	lsrs	r3, r3, #3
 800696c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006970:	693a      	ldr	r2, [r7, #16]
 8006972:	fb02 f303 	mul.w	r3, r2, r3
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800697e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2b00      	cmp	r3, #0
 8006986:	f000 8111 	beq.w	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800698a:	69bb      	ldr	r3, [r7, #24]
 800698c:	2b02      	cmp	r3, #2
 800698e:	f000 8083 	beq.w	8006a98 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	2b02      	cmp	r3, #2
 8006996:	f200 80a1 	bhi.w	8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	2b01      	cmp	r3, #1
 80069a4:	d056      	beq.n	8006a54 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80069a6:	e099      	b.n	8006adc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80069a8:	4b88      	ldr	r3, [pc, #544]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 0320 	and.w	r3, r3, #32
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d02d      	beq.n	8006a10 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80069b4:	4b85      	ldr	r3, [pc, #532]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	08db      	lsrs	r3, r3, #3
 80069ba:	f003 0303 	and.w	r3, r3, #3
 80069be:	4a84      	ldr	r2, [pc, #528]	@ (8006bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80069c0:	fa22 f303 	lsr.w	r3, r2, r3
 80069c4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	ee07 3a90 	vmov	s15, r3
 80069cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	ee07 3a90 	vmov	s15, r3
 80069d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80069de:	4b7b      	ldr	r3, [pc, #492]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e6:	ee07 3a90 	vmov	s15, r3
 80069ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80069ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80069f2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80069f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80069fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80069fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a0a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a0e:	e087      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a10:	697b      	ldr	r3, [r7, #20]
 8006a12:	ee07 3a90 	vmov	s15, r3
 8006a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a1a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006bd8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a22:	4b6a      	ldr	r3, [pc, #424]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a2a:	ee07 3a90 	vmov	s15, r3
 8006a2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a36:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a52:	e065      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	ee07 3a90 	vmov	s15, r3
 8006a5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a5e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006a62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a66:	4b59      	ldr	r3, [pc, #356]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a6e:	ee07 3a90 	vmov	s15, r3
 8006a72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a92:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006a96:	e043      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	ee07 3a90 	vmov	s15, r3
 8006a9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006be0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006aa6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aaa:	4b48      	ldr	r3, [pc, #288]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006aac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab2:	ee07 3a90 	vmov	s15, r3
 8006ab6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aba:	ed97 6a03 	vldr	s12, [r7, #12]
 8006abe:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ac2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ac6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ace:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ad6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ada:	e021      	b.n	8006b20 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	ee07 3a90 	vmov	s15, r3
 8006ae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ae6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006bdc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006aea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aee:	4b37      	ldr	r3, [pc, #220]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006af6:	ee07 3a90 	vmov	s15, r3
 8006afa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006afe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b02:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006bd4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b1e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006b20:	4b2a      	ldr	r3, [pc, #168]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b24:	0a5b      	lsrs	r3, r3, #9
 8006b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b46:	ee17 2a90 	vmov	r2, s15
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006b4e:	4b1f      	ldr	r3, [pc, #124]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b52:	0c1b      	lsrs	r3, r3, #16
 8006b54:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b58:	ee07 3a90 	vmov	s15, r3
 8006b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b68:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006b74:	ee17 2a90 	vmov	r2, s15
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006b7c:	4b13      	ldr	r3, [pc, #76]	@ (8006bcc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b80:	0e1b      	lsrs	r3, r3, #24
 8006b82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b86:	ee07 3a90 	vmov	s15, r3
 8006b8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006b92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006b96:	edd7 6a07 	vldr	s13, [r7, #28]
 8006b9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006b9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ba2:	ee17 2a90 	vmov	r2, s15
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006baa:	e008      	b.n	8006bbe <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2200      	movs	r2, #0
 8006bb0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	2200      	movs	r2, #0
 8006bb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	609a      	str	r2, [r3, #8]
}
 8006bbe:	bf00      	nop
 8006bc0:	3724      	adds	r7, #36	@ 0x24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	58024400 	.word	0x58024400
 8006bd0:	03d09000 	.word	0x03d09000
 8006bd4:	46000000 	.word	0x46000000
 8006bd8:	4c742400 	.word	0x4c742400
 8006bdc:	4a742400 	.word	0x4a742400
 8006be0:	4af42400 	.word	0x4af42400

08006be4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b089      	sub	sp, #36	@ 0x24
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006bec:	4ba1      	ldr	r3, [pc, #644]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bf0:	f003 0303 	and.w	r3, r3, #3
 8006bf4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006bf6:	4b9f      	ldr	r3, [pc, #636]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bfa:	0d1b      	lsrs	r3, r3, #20
 8006bfc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c00:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c02:	4b9c      	ldr	r3, [pc, #624]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c06:	0a1b      	lsrs	r3, r3, #8
 8006c08:	f003 0301 	and.w	r3, r3, #1
 8006c0c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c0e:	4b99      	ldr	r3, [pc, #612]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c12:	08db      	lsrs	r3, r3, #3
 8006c14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c18:	693a      	ldr	r2, [r7, #16]
 8006c1a:	fb02 f303 	mul.w	r3, r2, r3
 8006c1e:	ee07 3a90 	vmov	s15, r3
 8006c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c26:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f000 8111 	beq.w	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	2b02      	cmp	r3, #2
 8006c36:	f000 8083 	beq.w	8006d40 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	2b02      	cmp	r3, #2
 8006c3e:	f200 80a1 	bhi.w	8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006c42:	69bb      	ldr	r3, [r7, #24]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d003      	beq.n	8006c50 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d056      	beq.n	8006cfc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006c4e:	e099      	b.n	8006d84 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006c50:	4b88      	ldr	r3, [pc, #544]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f003 0320 	and.w	r3, r3, #32
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d02d      	beq.n	8006cb8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006c5c:	4b85      	ldr	r3, [pc, #532]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	08db      	lsrs	r3, r3, #3
 8006c62:	f003 0303 	and.w	r3, r3, #3
 8006c66:	4a84      	ldr	r2, [pc, #528]	@ (8006e78 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006c68:	fa22 f303 	lsr.w	r3, r2, r3
 8006c6c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	ee07 3a90 	vmov	s15, r3
 8006c74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	ee07 3a90 	vmov	s15, r3
 8006c7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006c86:	4b7b      	ldr	r3, [pc, #492]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c8e:	ee07 3a90 	vmov	s15, r3
 8006c92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006c96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006c9a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006c9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ca2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ca6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006caa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cb2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006cb6:	e087      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	ee07 3a90 	vmov	s15, r3
 8006cbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cc2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006e80 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006cc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cca:	4b6a      	ldr	r3, [pc, #424]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006cd2:	ee07 3a90 	vmov	s15, r3
 8006cd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006cde:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006ce2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ce6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006cea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006cee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006cf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cf6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006cfa:	e065      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	ee07 3a90 	vmov	s15, r3
 8006d02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d06:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d0e:	4b59      	ldr	r3, [pc, #356]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d16:	ee07 3a90 	vmov	s15, r3
 8006d1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d22:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d3e:	e043      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	ee07 3a90 	vmov	s15, r3
 8006d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006e88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006d4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d52:	4b48      	ldr	r3, [pc, #288]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5a:	ee07 3a90 	vmov	s15, r3
 8006d5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d62:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d66:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d7e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d82:	e021      	b.n	8006dc8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	ee07 3a90 	vmov	s15, r3
 8006d8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d8e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006e84 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d96:	4b37      	ldr	r3, [pc, #220]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d9e:	ee07 3a90 	vmov	s15, r3
 8006da2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006da6:	ed97 6a03 	vldr	s12, [r7, #12]
 8006daa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006e7c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006dae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006db6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dbe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dc6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006dc8:	4b2a      	ldr	r3, [pc, #168]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dcc:	0a5b      	lsrs	r3, r3, #9
 8006dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006dee:	ee17 2a90 	vmov	r2, s15
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006df6:	4b1f      	ldr	r3, [pc, #124]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dfa:	0c1b      	lsrs	r3, r3, #16
 8006dfc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e00:	ee07 3a90 	vmov	s15, r3
 8006e04:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e08:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e0c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e10:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e1c:	ee17 2a90 	vmov	r2, s15
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006e24:	4b13      	ldr	r3, [pc, #76]	@ (8006e74 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e28:	0e1b      	lsrs	r3, r3, #24
 8006e2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e2e:	ee07 3a90 	vmov	s15, r3
 8006e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e4a:	ee17 2a90 	vmov	r2, s15
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006e52:	e008      	b.n	8006e66 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	2200      	movs	r2, #0
 8006e64:	609a      	str	r2, [r3, #8]
}
 8006e66:	bf00      	nop
 8006e68:	3724      	adds	r7, #36	@ 0x24
 8006e6a:	46bd      	mov	sp, r7
 8006e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e70:	4770      	bx	lr
 8006e72:	bf00      	nop
 8006e74:	58024400 	.word	0x58024400
 8006e78:	03d09000 	.word	0x03d09000
 8006e7c:	46000000 	.word	0x46000000
 8006e80:	4c742400 	.word	0x4c742400
 8006e84:	4a742400 	.word	0x4a742400
 8006e88:	4af42400 	.word	0x4af42400

08006e8c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
 8006e94:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006e96:	2300      	movs	r3, #0
 8006e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006e9a:	4b53      	ldr	r3, [pc, #332]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9e:	f003 0303 	and.w	r3, r3, #3
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d101      	bne.n	8006eaa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	e099      	b.n	8006fde <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006eaa:	4b4f      	ldr	r3, [pc, #316]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	4a4e      	ldr	r2, [pc, #312]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006eb0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006eb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006eb6:	f7fa fa51 	bl	800135c <HAL_GetTick>
 8006eba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ebc:	e008      	b.n	8006ed0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006ebe:	f7fa fa4d 	bl	800135c <HAL_GetTick>
 8006ec2:	4602      	mov	r2, r0
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	1ad3      	subs	r3, r2, r3
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d901      	bls.n	8006ed0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e086      	b.n	8006fde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006ed0:	4b45      	ldr	r3, [pc, #276]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d1f0      	bne.n	8006ebe <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006edc:	4b42      	ldr	r3, [pc, #264]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006ede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ee0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	031b      	lsls	r3, r3, #12
 8006eea:	493f      	ldr	r1, [pc, #252]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006eec:	4313      	orrs	r3, r2
 8006eee:	628b      	str	r3, [r1, #40]	@ 0x28
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	3b01      	subs	r3, #1
 8006f00:	025b      	lsls	r3, r3, #9
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	431a      	orrs	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	68db      	ldr	r3, [r3, #12]
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	041b      	lsls	r3, r3, #16
 8006f0e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f12:	431a      	orrs	r2, r3
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	061b      	lsls	r3, r3, #24
 8006f1c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006f20:	4931      	ldr	r1, [pc, #196]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f22:	4313      	orrs	r3, r2
 8006f24:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f26:	4b30      	ldr	r3, [pc, #192]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f2a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	695b      	ldr	r3, [r3, #20]
 8006f32:	492d      	ldr	r1, [pc, #180]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006f38:	4b2b      	ldr	r3, [pc, #172]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f3c:	f023 0220 	bic.w	r2, r3, #32
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	4928      	ldr	r1, [pc, #160]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f46:	4313      	orrs	r3, r2
 8006f48:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006f4a:	4b27      	ldr	r3, [pc, #156]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4e:	4a26      	ldr	r2, [pc, #152]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f50:	f023 0310 	bic.w	r3, r3, #16
 8006f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006f56:	4b24      	ldr	r3, [pc, #144]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f58:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006f5a:	4b24      	ldr	r3, [pc, #144]	@ (8006fec <RCCEx_PLL2_Config+0x160>)
 8006f5c:	4013      	ands	r3, r2
 8006f5e:	687a      	ldr	r2, [r7, #4]
 8006f60:	69d2      	ldr	r2, [r2, #28]
 8006f62:	00d2      	lsls	r2, r2, #3
 8006f64:	4920      	ldr	r1, [pc, #128]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f66:	4313      	orrs	r3, r2
 8006f68:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006f6a:	4b1f      	ldr	r3, [pc, #124]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f70:	f043 0310 	orr.w	r3, r3, #16
 8006f74:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d106      	bne.n	8006f8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006f7c:	4b1a      	ldr	r3, [pc, #104]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f80:	4a19      	ldr	r2, [pc, #100]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f82:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006f86:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f88:	e00f      	b.n	8006faa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d106      	bne.n	8006f9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006f90:	4b15      	ldr	r3, [pc, #84]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f94:	4a14      	ldr	r2, [pc, #80]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006f96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f9a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8006f9c:	e005      	b.n	8006faa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006f9e:	4b12      	ldr	r3, [pc, #72]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa2:	4a11      	ldr	r2, [pc, #68]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fa4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006fa8:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006faa:	4b0f      	ldr	r3, [pc, #60]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	4a0e      	ldr	r2, [pc, #56]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fb0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006fb4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fb6:	f7fa f9d1 	bl	800135c <HAL_GetTick>
 8006fba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fbc:	e008      	b.n	8006fd0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006fbe:	f7fa f9cd 	bl	800135c <HAL_GetTick>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	2b02      	cmp	r3, #2
 8006fca:	d901      	bls.n	8006fd0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006fcc:	2303      	movs	r3, #3
 8006fce:	e006      	b.n	8006fde <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006fd0:	4b05      	ldr	r3, [pc, #20]	@ (8006fe8 <RCCEx_PLL2_Config+0x15c>)
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d0f0      	beq.n	8006fbe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	58024400 	.word	0x58024400
 8006fec:	ffff0007 	.word	0xffff0007

08006ff0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b084      	sub	sp, #16
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006ffe:	4b53      	ldr	r3, [pc, #332]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007002:	f003 0303 	and.w	r3, r3, #3
 8007006:	2b03      	cmp	r3, #3
 8007008:	d101      	bne.n	800700e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800700a:	2301      	movs	r3, #1
 800700c:	e099      	b.n	8007142 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800700e:	4b4f      	ldr	r3, [pc, #316]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a4e      	ldr	r2, [pc, #312]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007014:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007018:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800701a:	f7fa f99f 	bl	800135c <HAL_GetTick>
 800701e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007020:	e008      	b.n	8007034 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007022:	f7fa f99b 	bl	800135c <HAL_GetTick>
 8007026:	4602      	mov	r2, r0
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	1ad3      	subs	r3, r2, r3
 800702c:	2b02      	cmp	r3, #2
 800702e:	d901      	bls.n	8007034 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007030:	2303      	movs	r3, #3
 8007032:	e086      	b.n	8007142 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007034:	4b45      	ldr	r3, [pc, #276]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1f0      	bne.n	8007022 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007040:	4b42      	ldr	r3, [pc, #264]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007042:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007044:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	051b      	lsls	r3, r3, #20
 800704e:	493f      	ldr	r1, [pc, #252]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007050:	4313      	orrs	r3, r2
 8007052:	628b      	str	r3, [r1, #40]	@ 0x28
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	685b      	ldr	r3, [r3, #4]
 8007058:	3b01      	subs	r3, #1
 800705a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	3b01      	subs	r3, #1
 8007064:	025b      	lsls	r3, r3, #9
 8007066:	b29b      	uxth	r3, r3
 8007068:	431a      	orrs	r2, r3
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	68db      	ldr	r3, [r3, #12]
 800706e:	3b01      	subs	r3, #1
 8007070:	041b      	lsls	r3, r3, #16
 8007072:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007076:	431a      	orrs	r2, r3
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	691b      	ldr	r3, [r3, #16]
 800707c:	3b01      	subs	r3, #1
 800707e:	061b      	lsls	r3, r3, #24
 8007080:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007084:	4931      	ldr	r1, [pc, #196]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007086:	4313      	orrs	r3, r2
 8007088:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800708a:	4b30      	ldr	r3, [pc, #192]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 800708c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800708e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	695b      	ldr	r3, [r3, #20]
 8007096:	492d      	ldr	r1, [pc, #180]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007098:	4313      	orrs	r3, r2
 800709a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800709c:	4b2b      	ldr	r3, [pc, #172]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 800709e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	699b      	ldr	r3, [r3, #24]
 80070a8:	4928      	ldr	r1, [pc, #160]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070aa:	4313      	orrs	r3, r2
 80070ac:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80070ae:	4b27      	ldr	r3, [pc, #156]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b2:	4a26      	ldr	r2, [pc, #152]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80070b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80070ba:	4b24      	ldr	r3, [pc, #144]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80070be:	4b24      	ldr	r3, [pc, #144]	@ (8007150 <RCCEx_PLL3_Config+0x160>)
 80070c0:	4013      	ands	r3, r2
 80070c2:	687a      	ldr	r2, [r7, #4]
 80070c4:	69d2      	ldr	r2, [r2, #28]
 80070c6:	00d2      	lsls	r2, r2, #3
 80070c8:	4920      	ldr	r1, [pc, #128]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070ca:	4313      	orrs	r3, r2
 80070cc:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80070ce:	4b1f      	ldr	r3, [pc, #124]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070d2:	4a1e      	ldr	r2, [pc, #120]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80070d8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80070da:	683b      	ldr	r3, [r7, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d106      	bne.n	80070ee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80070e0:	4b1a      	ldr	r3, [pc, #104]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e4:	4a19      	ldr	r2, [pc, #100]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070e6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80070ea:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80070ec:	e00f      	b.n	800710e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80070ee:	683b      	ldr	r3, [r7, #0]
 80070f0:	2b01      	cmp	r3, #1
 80070f2:	d106      	bne.n	8007102 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80070f4:	4b15      	ldr	r3, [pc, #84]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070f8:	4a14      	ldr	r2, [pc, #80]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 80070fa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80070fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007100:	e005      	b.n	800710e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007102:	4b12      	ldr	r3, [pc, #72]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007106:	4a11      	ldr	r2, [pc, #68]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007108:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800710c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800710e:	4b0f      	ldr	r3, [pc, #60]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a0e      	ldr	r2, [pc, #56]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007114:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007118:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800711a:	f7fa f91f 	bl	800135c <HAL_GetTick>
 800711e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007120:	e008      	b.n	8007134 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8007122:	f7fa f91b 	bl	800135c <HAL_GetTick>
 8007126:	4602      	mov	r2, r0
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	1ad3      	subs	r3, r2, r3
 800712c:	2b02      	cmp	r3, #2
 800712e:	d901      	bls.n	8007134 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007130:	2303      	movs	r3, #3
 8007132:	e006      	b.n	8007142 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007134:	4b05      	ldr	r3, [pc, #20]	@ (800714c <RCCEx_PLL3_Config+0x15c>)
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800713c:	2b00      	cmp	r3, #0
 800713e:	d0f0      	beq.n	8007122 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007140:	7bfb      	ldrb	r3, [r7, #15]
}
 8007142:	4618      	mov	r0, r3
 8007144:	3710      	adds	r7, #16
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	58024400 	.word	0x58024400
 8007150:	ffff0007 	.word	0xffff0007

08007154 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e042      	b.n	80071ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800716c:	2b00      	cmp	r3, #0
 800716e:	d106      	bne.n	800717e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f7f9 febd 	bl	8000ef8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2224      	movs	r2, #36	@ 0x24
 8007182:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	681a      	ldr	r2, [r3, #0]
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f022 0201 	bic.w	r2, r2, #1
 8007194:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800719a:	2b00      	cmp	r3, #0
 800719c:	d002      	beq.n	80071a4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f001 fbde 	bl	8008960 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fd6f 	bl	8007c88 <UART_SetConfig>
 80071aa:	4603      	mov	r3, r0
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d101      	bne.n	80071b4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e01b      	b.n	80071ec <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	685a      	ldr	r2, [r3, #4]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80071c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689a      	ldr	r2, [r3, #8]
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80071d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f042 0201 	orr.w	r2, r2, #1
 80071e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 fc5d 	bl	8008aa4 <UART_CheckIdleState>
 80071ea:	4603      	mov	r3, r0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08a      	sub	sp, #40	@ 0x28
 80071f8:	af02      	add	r7, sp, #8
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	603b      	str	r3, [r7, #0]
 8007200:	4613      	mov	r3, r2
 8007202:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800720a:	2b20      	cmp	r3, #32
 800720c:	d17b      	bne.n	8007306 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800720e:	68bb      	ldr	r3, [r7, #8]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d002      	beq.n	800721a <HAL_UART_Transmit+0x26>
 8007214:	88fb      	ldrh	r3, [r7, #6]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d101      	bne.n	800721e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800721a:	2301      	movs	r3, #1
 800721c:	e074      	b.n	8007308 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2221      	movs	r2, #33	@ 0x21
 800722a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800722e:	f7fa f895 	bl	800135c <HAL_GetTick>
 8007232:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	88fa      	ldrh	r2, [r7, #6]
 8007238:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	88fa      	ldrh	r2, [r7, #6]
 8007240:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800724c:	d108      	bne.n	8007260 <HAL_UART_Transmit+0x6c>
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	691b      	ldr	r3, [r3, #16]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d104      	bne.n	8007260 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007256:	2300      	movs	r3, #0
 8007258:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800725a:	68bb      	ldr	r3, [r7, #8]
 800725c:	61bb      	str	r3, [r7, #24]
 800725e:	e003      	b.n	8007268 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007264:	2300      	movs	r3, #0
 8007266:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007268:	e030      	b.n	80072cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800726a:	683b      	ldr	r3, [r7, #0]
 800726c:	9300      	str	r3, [sp, #0]
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	2200      	movs	r2, #0
 8007272:	2180      	movs	r1, #128	@ 0x80
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f001 fcbf 	bl	8008bf8 <UART_WaitOnFlagUntilTimeout>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	2220      	movs	r2, #32
 8007284:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007288:	2303      	movs	r3, #3
 800728a:	e03d      	b.n	8007308 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10b      	bne.n	80072aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007292:	69bb      	ldr	r3, [r7, #24]
 8007294:	881b      	ldrh	r3, [r3, #0]
 8007296:	461a      	mov	r2, r3
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a0:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	3302      	adds	r3, #2
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	e007      	b.n	80072ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072aa:	69fb      	ldr	r3, [r7, #28]
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	3301      	adds	r3, #1
 80072b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072c0:	b29b      	uxth	r3, r3
 80072c2:	3b01      	subs	r3, #1
 80072c4:	b29a      	uxth	r2, r3
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1c8      	bne.n	800726a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072d8:	683b      	ldr	r3, [r7, #0]
 80072da:	9300      	str	r3, [sp, #0]
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	2200      	movs	r2, #0
 80072e0:	2140      	movs	r1, #64	@ 0x40
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f001 fc88 	bl	8008bf8 <UART_WaitOnFlagUntilTimeout>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d005      	beq.n	80072fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	2220      	movs	r2, #32
 80072f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e006      	b.n	8007308 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007302:	2300      	movs	r3, #0
 8007304:	e000      	b.n	8007308 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007306:	2302      	movs	r3, #2
  }
}
 8007308:	4618      	mov	r0, r3
 800730a:	3720      	adds	r7, #32
 800730c:	46bd      	mov	sp, r7
 800730e:	bd80      	pop	{r7, pc}

08007310 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08a      	sub	sp, #40	@ 0x28
 8007314:	af00      	add	r7, sp, #0
 8007316:	60f8      	str	r0, [r7, #12]
 8007318:	60b9      	str	r1, [r7, #8]
 800731a:	4613      	mov	r3, r2
 800731c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007324:	2b20      	cmp	r3, #32
 8007326:	d137      	bne.n	8007398 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d002      	beq.n	8007334 <HAL_UART_Receive_DMA+0x24>
 800732e:	88fb      	ldrh	r3, [r7, #6]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d101      	bne.n	8007338 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e030      	b.n	800739a <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a18      	ldr	r2, [pc, #96]	@ (80073a4 <HAL_UART_Receive_DMA+0x94>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d01f      	beq.n	8007388 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007352:	2b00      	cmp	r3, #0
 8007354:	d018      	beq.n	8007388 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	613b      	str	r3, [r7, #16]
   return(result);
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800736a:	627b      	str	r3, [r7, #36]	@ 0x24
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	461a      	mov	r2, r3
 8007372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007374:	623b      	str	r3, [r7, #32]
 8007376:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007378:	69f9      	ldr	r1, [r7, #28]
 800737a:	6a3a      	ldr	r2, [r7, #32]
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	61bb      	str	r3, [r7, #24]
   return(result);
 8007382:	69bb      	ldr	r3, [r7, #24]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e6      	bne.n	8007356 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007388:	88fb      	ldrh	r3, [r7, #6]
 800738a:	461a      	mov	r2, r3
 800738c:	68b9      	ldr	r1, [r7, #8]
 800738e:	68f8      	ldr	r0, [r7, #12]
 8007390:	f001 fca0 	bl	8008cd4 <UART_Start_Receive_DMA>
 8007394:	4603      	mov	r3, r0
 8007396:	e000      	b.n	800739a <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007398:	2302      	movs	r3, #2
  }
}
 800739a:	4618      	mov	r0, r3
 800739c:	3728      	adds	r7, #40	@ 0x28
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}
 80073a2:	bf00      	nop
 80073a4:	58000c00 	.word	0x58000c00

080073a8 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b090      	sub	sp, #64	@ 0x40
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ca:	2b80      	cmp	r3, #128	@ 0x80
 80073cc:	d139      	bne.n	8007442 <HAL_UART_DMAStop+0x9a>
 80073ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073d0:	2b21      	cmp	r3, #33	@ 0x21
 80073d2:	d136      	bne.n	8007442 <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	3308      	adds	r3, #8
 80073da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	e853 3f00 	ldrex	r3, [r3]
 80073e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80073e4:	69fb      	ldr	r3, [r7, #28]
 80073e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073ea:	637b      	str	r3, [r7, #52]	@ 0x34
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	3308      	adds	r3, #8
 80073f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80073f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073fc:	e841 2300 	strex	r3, r2, [r1]
 8007400:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007404:	2b00      	cmp	r3, #0
 8007406:	d1e5      	bne.n	80073d4 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800740c:	2b00      	cmp	r3, #0
 800740e:	d015      	beq.n	800743c <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007414:	4618      	mov	r0, r3
 8007416:	f7fa fef7 	bl	8002208 <HAL_DMA_Abort>
 800741a:	4603      	mov	r3, r0
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00d      	beq.n	800743c <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007424:	4618      	mov	r0, r3
 8007426:	f7fc fb7d 	bl	8003b24 <HAL_DMA_GetError>
 800742a:	4603      	mov	r3, r0
 800742c:	2b20      	cmp	r3, #32
 800742e:	d105      	bne.n	800743c <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2210      	movs	r2, #16
 8007434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e047      	b.n	80074cc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f001 fcef 	bl	8008e20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689b      	ldr	r3, [r3, #8]
 8007448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800744c:	2b40      	cmp	r3, #64	@ 0x40
 800744e:	d13c      	bne.n	80074ca <HAL_UART_DMAStop+0x122>
 8007450:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007452:	2b22      	cmp	r3, #34	@ 0x22
 8007454:	d139      	bne.n	80074ca <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	3308      	adds	r3, #8
 800745c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	e853 3f00 	ldrex	r3, [r3]
 8007464:	60bb      	str	r3, [r7, #8]
   return(result);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800746c:	633b      	str	r3, [r7, #48]	@ 0x30
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	3308      	adds	r3, #8
 8007474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007476:	61ba      	str	r2, [r7, #24]
 8007478:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800747a:	6979      	ldr	r1, [r7, #20]
 800747c:	69ba      	ldr	r2, [r7, #24]
 800747e:	e841 2300 	strex	r3, r2, [r1]
 8007482:	613b      	str	r3, [r7, #16]
   return(result);
 8007484:	693b      	ldr	r3, [r7, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d1e5      	bne.n	8007456 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007490:	2b00      	cmp	r3, #0
 8007492:	d017      	beq.n	80074c4 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800749a:	4618      	mov	r0, r3
 800749c:	f7fa feb4 	bl	8002208 <HAL_DMA_Abort>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00e      	beq.n	80074c4 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fc fb39 	bl	8003b24 <HAL_DMA_GetError>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b20      	cmp	r3, #32
 80074b6:	d105      	bne.n	80074c4 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2210      	movs	r2, #16
 80074bc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80074c0:	2303      	movs	r3, #3
 80074c2:	e003      	b.n	80074cc <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80074c4:	6878      	ldr	r0, [r7, #4]
 80074c6:	f001 fced 	bl	8008ea4 <UART_EndRxTransfer>
  }

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3740      	adds	r7, #64	@ 0x40
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b0ba      	sub	sp, #232	@ 0xe8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	69db      	ldr	r3, [r3, #28]
 80074e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074fa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80074fe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8007502:	4013      	ands	r3, r2
 8007504:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007508:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800750c:	2b00      	cmp	r3, #0
 800750e:	d11b      	bne.n	8007548 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b00      	cmp	r3, #0
 800751a:	d015      	beq.n	8007548 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800751c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d105      	bne.n	8007534 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007528:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800752c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007530:	2b00      	cmp	r3, #0
 8007532:	d009      	beq.n	8007548 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007538:	2b00      	cmp	r3, #0
 800753a:	f000 8377 	beq.w	8007c2c <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	4798      	blx	r3
      }
      return;
 8007546:	e371      	b.n	8007c2c <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007548:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800754c:	2b00      	cmp	r3, #0
 800754e:	f000 8123 	beq.w	8007798 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007552:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007556:	4b8d      	ldr	r3, [pc, #564]	@ (800778c <HAL_UART_IRQHandler+0x2b8>)
 8007558:	4013      	ands	r3, r2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d106      	bne.n	800756c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800755e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8007562:	4b8b      	ldr	r3, [pc, #556]	@ (8007790 <HAL_UART_IRQHandler+0x2bc>)
 8007564:	4013      	ands	r3, r2
 8007566:	2b00      	cmp	r3, #0
 8007568:	f000 8116 	beq.w	8007798 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800756c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007570:	f003 0301 	and.w	r3, r3, #1
 8007574:	2b00      	cmp	r3, #0
 8007576:	d011      	beq.n	800759c <HAL_UART_IRQHandler+0xc8>
 8007578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800757c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007580:	2b00      	cmp	r3, #0
 8007582:	d00b      	beq.n	800759c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	2201      	movs	r2, #1
 800758a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007592:	f043 0201 	orr.w	r2, r3, #1
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800759c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075a0:	f003 0302 	and.w	r3, r3, #2
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d011      	beq.n	80075cc <HAL_UART_IRQHandler+0xf8>
 80075a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075ac:	f003 0301 	and.w	r3, r3, #1
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d00b      	beq.n	80075cc <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	2202      	movs	r2, #2
 80075ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075c2:	f043 0204 	orr.w	r2, r3, #4
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80075d0:	f003 0304 	and.w	r3, r3, #4
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d011      	beq.n	80075fc <HAL_UART_IRQHandler+0x128>
 80075d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2204      	movs	r2, #4
 80075ea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80075f2:	f043 0202 	orr.w	r2, r3, #2
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007600:	f003 0308 	and.w	r3, r3, #8
 8007604:	2b00      	cmp	r3, #0
 8007606:	d017      	beq.n	8007638 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007608:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800760c:	f003 0320 	and.w	r3, r3, #32
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007614:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007618:	4b5c      	ldr	r3, [pc, #368]	@ (800778c <HAL_UART_IRQHandler+0x2b8>)
 800761a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800761c:	2b00      	cmp	r3, #0
 800761e:	d00b      	beq.n	8007638 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	2208      	movs	r2, #8
 8007626:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800762e:	f043 0208 	orr.w	r2, r3, #8
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007638:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800763c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007640:	2b00      	cmp	r3, #0
 8007642:	d012      	beq.n	800766a <HAL_UART_IRQHandler+0x196>
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007648:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00c      	beq.n	800766a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007658:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007660:	f043 0220 	orr.w	r2, r3, #32
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007670:	2b00      	cmp	r3, #0
 8007672:	f000 82dd 	beq.w	8007c30 <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800767a:	f003 0320 	and.w	r3, r3, #32
 800767e:	2b00      	cmp	r3, #0
 8007680:	d013      	beq.n	80076aa <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007682:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007686:	f003 0320 	and.w	r3, r3, #32
 800768a:	2b00      	cmp	r3, #0
 800768c:	d105      	bne.n	800769a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800768e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d007      	beq.n	80076aa <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d003      	beq.n	80076aa <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076be:	2b40      	cmp	r3, #64	@ 0x40
 80076c0:	d005      	beq.n	80076ce <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80076c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80076c6:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d054      	beq.n	8007778 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f001 fbe8 	bl	8008ea4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076de:	2b40      	cmp	r3, #64	@ 0x40
 80076e0:	d146      	bne.n	8007770 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	3308      	adds	r3, #8
 80076e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80076f0:	e853 3f00 	ldrex	r3, [r3]
 80076f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80076f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80076fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007700:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	3308      	adds	r3, #8
 800770a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800770e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007712:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007716:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800771a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800771e:	e841 2300 	strex	r3, r2, [r1]
 8007722:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007726:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800772a:	2b00      	cmp	r3, #0
 800772c:	d1d9      	bne.n	80076e2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007734:	2b00      	cmp	r3, #0
 8007736:	d017      	beq.n	8007768 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800773e:	4a15      	ldr	r2, [pc, #84]	@ (8007794 <HAL_UART_IRQHandler+0x2c0>)
 8007740:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007748:	4618      	mov	r0, r3
 800774a:	f7fb f87b 	bl	8002844 <HAL_DMA_Abort_IT>
 800774e:	4603      	mov	r3, r0
 8007750:	2b00      	cmp	r3, #0
 8007752:	d019      	beq.n	8007788 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800775a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800775c:	687a      	ldr	r2, [r7, #4]
 800775e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8007762:	4610      	mov	r0, r2
 8007764:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007766:	e00f      	b.n	8007788 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f000 fa77 	bl	8007c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800776e:	e00b      	b.n	8007788 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fa73 	bl	8007c5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007776:	e007      	b.n	8007788 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f000 fa6f 	bl	8007c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007786:	e253      	b.n	8007c30 <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007788:	bf00      	nop
    return;
 800778a:	e251      	b.n	8007c30 <HAL_UART_IRQHandler+0x75c>
 800778c:	10000001 	.word	0x10000001
 8007790:	04000120 	.word	0x04000120
 8007794:	08009157 	.word	0x08009157

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800779c:	2b01      	cmp	r3, #1
 800779e:	f040 81e7 	bne.w	8007b70 <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80077a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a6:	f003 0310 	and.w	r3, r3, #16
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 81e0 	beq.w	8007b70 <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80077b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077b4:	f003 0310 	and.w	r3, r3, #16
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	f000 81d9 	beq.w	8007b70 <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	2210      	movs	r2, #16
 80077c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077d0:	2b40      	cmp	r3, #64	@ 0x40
 80077d2:	f040 8151 	bne.w	8007a78 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4a96      	ldr	r2, [pc, #600]	@ (8007a38 <HAL_UART_IRQHandler+0x564>)
 80077e0:	4293      	cmp	r3, r2
 80077e2:	d068      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a93      	ldr	r2, [pc, #588]	@ (8007a3c <HAL_UART_IRQHandler+0x568>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d061      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4a91      	ldr	r2, [pc, #580]	@ (8007a40 <HAL_UART_IRQHandler+0x56c>)
 80077fc:	4293      	cmp	r3, r2
 80077fe:	d05a      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a8e      	ldr	r2, [pc, #568]	@ (8007a44 <HAL_UART_IRQHandler+0x570>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d053      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a8c      	ldr	r2, [pc, #560]	@ (8007a48 <HAL_UART_IRQHandler+0x574>)
 8007818:	4293      	cmp	r3, r2
 800781a:	d04c      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a89      	ldr	r2, [pc, #548]	@ (8007a4c <HAL_UART_IRQHandler+0x578>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d045      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	4a87      	ldr	r2, [pc, #540]	@ (8007a50 <HAL_UART_IRQHandler+0x57c>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d03e      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a84      	ldr	r2, [pc, #528]	@ (8007a54 <HAL_UART_IRQHandler+0x580>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d037      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	4a82      	ldr	r2, [pc, #520]	@ (8007a58 <HAL_UART_IRQHandler+0x584>)
 8007850:	4293      	cmp	r3, r2
 8007852:	d030      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a7f      	ldr	r2, [pc, #508]	@ (8007a5c <HAL_UART_IRQHandler+0x588>)
 800785e:	4293      	cmp	r3, r2
 8007860:	d029      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a7d      	ldr	r2, [pc, #500]	@ (8007a60 <HAL_UART_IRQHandler+0x58c>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d022      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a7a      	ldr	r2, [pc, #488]	@ (8007a64 <HAL_UART_IRQHandler+0x590>)
 800787a:	4293      	cmp	r3, r2
 800787c:	d01b      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a78      	ldr	r2, [pc, #480]	@ (8007a68 <HAL_UART_IRQHandler+0x594>)
 8007888:	4293      	cmp	r3, r2
 800788a:	d014      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a75      	ldr	r2, [pc, #468]	@ (8007a6c <HAL_UART_IRQHandler+0x598>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d00d      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	4a73      	ldr	r2, [pc, #460]	@ (8007a70 <HAL_UART_IRQHandler+0x59c>)
 80078a4:	4293      	cmp	r3, r2
 80078a6:	d006      	beq.n	80078b6 <HAL_UART_IRQHandler+0x3e2>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a70      	ldr	r2, [pc, #448]	@ (8007a74 <HAL_UART_IRQHandler+0x5a0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d106      	bne.n	80078c4 <HAL_UART_IRQHandler+0x3f0>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	685b      	ldr	r3, [r3, #4]
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	e005      	b.n	80078d0 <HAL_UART_IRQHandler+0x3fc>
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80078d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80078d8:	2b00      	cmp	r3, #0
 80078da:	f000 81ab 	beq.w	8007c34 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80078e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078e8:	429a      	cmp	r2, r3
 80078ea:	f080 81a3 	bcs.w	8007c34 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80078f4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078fe:	69db      	ldr	r3, [r3, #28]
 8007900:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007904:	f000 8087 	beq.w	8007a16 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007910:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007914:	e853 3f00 	ldrex	r3, [r3]
 8007918:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800791c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007920:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007924:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	461a      	mov	r2, r3
 800792e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007932:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007936:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800793a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800793e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007942:	e841 2300 	strex	r3, r2, [r1]
 8007946:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800794a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800794e:	2b00      	cmp	r3, #0
 8007950:	d1da      	bne.n	8007908 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	3308      	adds	r3, #8
 8007958:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800795a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800795c:	e853 3f00 	ldrex	r3, [r3]
 8007960:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007962:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007964:	f023 0301 	bic.w	r3, r3, #1
 8007968:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	3308      	adds	r3, #8
 8007972:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007976:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800797a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800797e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007988:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e1      	bne.n	8007952 <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800799e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80079a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80079a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	3308      	adds	r3, #8
 80079ae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80079b2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80079b4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80079b8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80079ba:	e841 2300 	strex	r3, r2, [r1]
 80079be:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80079c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d1e3      	bne.n	800798e <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2220      	movs	r2, #32
 80079ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079dc:	e853 3f00 	ldrex	r3, [r3]
 80079e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079e4:	f023 0310 	bic.w	r3, r3, #16
 80079e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	461a      	mov	r2, r3
 80079f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80079f6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80079f8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80079fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a04:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e4      	bne.n	80079d4 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fa fbf9 	bl	8002208 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	2202      	movs	r2, #2
 8007a1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a28:	b29b      	uxth	r3, r3
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	4619      	mov	r1, r3
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 f91d 	bl	8007c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007a36:	e0fd      	b.n	8007c34 <HAL_UART_IRQHandler+0x760>
 8007a38:	40020010 	.word	0x40020010
 8007a3c:	40020028 	.word	0x40020028
 8007a40:	40020040 	.word	0x40020040
 8007a44:	40020058 	.word	0x40020058
 8007a48:	40020070 	.word	0x40020070
 8007a4c:	40020088 	.word	0x40020088
 8007a50:	400200a0 	.word	0x400200a0
 8007a54:	400200b8 	.word	0x400200b8
 8007a58:	40020410 	.word	0x40020410
 8007a5c:	40020428 	.word	0x40020428
 8007a60:	40020440 	.word	0x40020440
 8007a64:	40020458 	.word	0x40020458
 8007a68:	40020470 	.word	0x40020470
 8007a6c:	40020488 	.word	0x40020488
 8007a70:	400204a0 	.word	0x400204a0
 8007a74:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a84:	b29b      	uxth	r3, r3
 8007a86:	1ad3      	subs	r3, r2, r3
 8007a88:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80cf 	beq.w	8007c38 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007a9a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 80ca 	beq.w	8007c38 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aac:	e853 3f00 	ldrex	r3, [r3]
 8007ab0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ab2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ab4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ab8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	461a      	mov	r2, r3
 8007ac2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007ac6:	647b      	str	r3, [r7, #68]	@ 0x44
 8007ac8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007acc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e4      	bne.n	8007aa4 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	623b      	str	r3, [r7, #32]
   return(result);
 8007aea:	6a3a      	ldr	r2, [r7, #32]
 8007aec:	4b55      	ldr	r3, [pc, #340]	@ (8007c44 <HAL_UART_IRQHandler+0x770>)
 8007aee:	4013      	ands	r3, r2
 8007af0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	3308      	adds	r3, #8
 8007afa:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007afe:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b02:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b06:	e841 2300 	strex	r3, r2, [r1]
 8007b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d1e3      	bne.n	8007ada <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2220      	movs	r2, #32
 8007b16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	e853 3f00 	ldrex	r3, [r3]
 8007b32:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f023 0310 	bic.w	r3, r3, #16
 8007b3a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b48:	61fb      	str	r3, [r7, #28]
 8007b4a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b4c:	69b9      	ldr	r1, [r7, #24]
 8007b4e:	69fa      	ldr	r2, [r7, #28]
 8007b50:	e841 2300 	strex	r3, r2, [r1]
 8007b54:	617b      	str	r3, [r7, #20]
   return(result);
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d1e4      	bne.n	8007b26 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2202      	movs	r2, #2
 8007b60:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007b66:	4619      	mov	r1, r3
 8007b68:	6878      	ldr	r0, [r7, #4]
 8007b6a:	f000 f881 	bl	8007c70 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b6e:	e063      	b.n	8007c38 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b74:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d00e      	beq.n	8007b9a <HAL_UART_IRQHandler+0x6c6>
 8007b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007b80:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d008      	beq.n	8007b9a <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007b90:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b92:	6878      	ldr	r0, [r7, #4]
 8007b94:	f001 fb20 	bl	80091d8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b98:	e051      	b.n	8007c3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007b9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d014      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007ba6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007baa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d105      	bne.n	8007bbe <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bb6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d008      	beq.n	8007bd0 <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d03a      	beq.n	8007c3c <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	4798      	blx	r3
    }
    return;
 8007bce:	e035      	b.n	8007c3c <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bd4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d009      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x71c>
 8007bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007be0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d003      	beq.n	8007bf0 <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f001 faca 	bl	8009182 <UART_EndTransmit_IT>
    return;
 8007bee:	e026      	b.n	8007c3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007bf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bf4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d009      	beq.n	8007c10 <HAL_UART_IRQHandler+0x73c>
 8007bfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c00:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d003      	beq.n	8007c10 <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c08:	6878      	ldr	r0, [r7, #4]
 8007c0a:	f001 faf9 	bl	8009200 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c0e:	e016      	b.n	8007c3e <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c14:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d010      	beq.n	8007c3e <HAL_UART_IRQHandler+0x76a>
 8007c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	da0c      	bge.n	8007c3e <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f001 fae1 	bl	80091ec <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c2a:	e008      	b.n	8007c3e <HAL_UART_IRQHandler+0x76a>
      return;
 8007c2c:	bf00      	nop
 8007c2e:	e006      	b.n	8007c3e <HAL_UART_IRQHandler+0x76a>
    return;
 8007c30:	bf00      	nop
 8007c32:	e004      	b.n	8007c3e <HAL_UART_IRQHandler+0x76a>
      return;
 8007c34:	bf00      	nop
 8007c36:	e002      	b.n	8007c3e <HAL_UART_IRQHandler+0x76a>
      return;
 8007c38:	bf00      	nop
 8007c3a:	e000      	b.n	8007c3e <HAL_UART_IRQHandler+0x76a>
    return;
 8007c3c:	bf00      	nop
  }
}
 8007c3e:	37e8      	adds	r7, #232	@ 0xe8
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}
 8007c44:	effffffe 	.word	0xeffffffe

08007c48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b083      	sub	sp, #12
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c50:	bf00      	nop
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c64:	bf00      	nop
 8007c66:	370c      	adds	r7, #12
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6e:	4770      	bx	lr

08007c70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c70:	b480      	push	{r7}
 8007c72:	b083      	sub	sp, #12
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c7c:	bf00      	nop
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr

08007c88 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c8c:	b092      	sub	sp, #72	@ 0x48
 8007c8e:	af00      	add	r7, sp, #0
 8007c90:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c92:	2300      	movs	r3, #0
 8007c94:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	689a      	ldr	r2, [r3, #8]
 8007c9c:	697b      	ldr	r3, [r7, #20]
 8007c9e:	691b      	ldr	r3, [r3, #16]
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	695b      	ldr	r3, [r3, #20]
 8007ca6:	431a      	orrs	r2, r3
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	69db      	ldr	r3, [r3, #28]
 8007cac:	4313      	orrs	r3, r2
 8007cae:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007cb0:	697b      	ldr	r3, [r7, #20]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4bbe      	ldr	r3, [pc, #760]	@ (8007fb0 <UART_SetConfig+0x328>)
 8007cb8:	4013      	ands	r3, r2
 8007cba:	697a      	ldr	r2, [r7, #20]
 8007cbc:	6812      	ldr	r2, [r2, #0]
 8007cbe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007cc0:	430b      	orrs	r3, r1
 8007cc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007cc4:	697b      	ldr	r3, [r7, #20]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	697b      	ldr	r3, [r7, #20]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	699b      	ldr	r3, [r3, #24]
 8007cde:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ce0:	697b      	ldr	r3, [r7, #20]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	4ab3      	ldr	r2, [pc, #716]	@ (8007fb4 <UART_SetConfig+0x32c>)
 8007ce6:	4293      	cmp	r3, r2
 8007ce8:	d004      	beq.n	8007cf4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007cea:	697b      	ldr	r3, [r7, #20]
 8007cec:	6a1b      	ldr	r3, [r3, #32]
 8007cee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cf0:	4313      	orrs	r3, r2
 8007cf2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	689a      	ldr	r2, [r3, #8]
 8007cfa:	4baf      	ldr	r3, [pc, #700]	@ (8007fb8 <UART_SetConfig+0x330>)
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	697a      	ldr	r2, [r7, #20]
 8007d00:	6812      	ldr	r2, [r2, #0]
 8007d02:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007d04:	430b      	orrs	r3, r1
 8007d06:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007d08:	697b      	ldr	r3, [r7, #20]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d0e:	f023 010f 	bic.w	r1, r3, #15
 8007d12:	697b      	ldr	r3, [r7, #20]
 8007d14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	430a      	orrs	r2, r1
 8007d1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007d1e:	697b      	ldr	r3, [r7, #20]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4aa6      	ldr	r2, [pc, #664]	@ (8007fbc <UART_SetConfig+0x334>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d177      	bne.n	8007e18 <UART_SetConfig+0x190>
 8007d28:	4ba5      	ldr	r3, [pc, #660]	@ (8007fc0 <UART_SetConfig+0x338>)
 8007d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007d30:	2b28      	cmp	r3, #40	@ 0x28
 8007d32:	d86d      	bhi.n	8007e10 <UART_SetConfig+0x188>
 8007d34:	a201      	add	r2, pc, #4	@ (adr r2, 8007d3c <UART_SetConfig+0xb4>)
 8007d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d3a:	bf00      	nop
 8007d3c:	08007de1 	.word	0x08007de1
 8007d40:	08007e11 	.word	0x08007e11
 8007d44:	08007e11 	.word	0x08007e11
 8007d48:	08007e11 	.word	0x08007e11
 8007d4c:	08007e11 	.word	0x08007e11
 8007d50:	08007e11 	.word	0x08007e11
 8007d54:	08007e11 	.word	0x08007e11
 8007d58:	08007e11 	.word	0x08007e11
 8007d5c:	08007de9 	.word	0x08007de9
 8007d60:	08007e11 	.word	0x08007e11
 8007d64:	08007e11 	.word	0x08007e11
 8007d68:	08007e11 	.word	0x08007e11
 8007d6c:	08007e11 	.word	0x08007e11
 8007d70:	08007e11 	.word	0x08007e11
 8007d74:	08007e11 	.word	0x08007e11
 8007d78:	08007e11 	.word	0x08007e11
 8007d7c:	08007df1 	.word	0x08007df1
 8007d80:	08007e11 	.word	0x08007e11
 8007d84:	08007e11 	.word	0x08007e11
 8007d88:	08007e11 	.word	0x08007e11
 8007d8c:	08007e11 	.word	0x08007e11
 8007d90:	08007e11 	.word	0x08007e11
 8007d94:	08007e11 	.word	0x08007e11
 8007d98:	08007e11 	.word	0x08007e11
 8007d9c:	08007df9 	.word	0x08007df9
 8007da0:	08007e11 	.word	0x08007e11
 8007da4:	08007e11 	.word	0x08007e11
 8007da8:	08007e11 	.word	0x08007e11
 8007dac:	08007e11 	.word	0x08007e11
 8007db0:	08007e11 	.word	0x08007e11
 8007db4:	08007e11 	.word	0x08007e11
 8007db8:	08007e11 	.word	0x08007e11
 8007dbc:	08007e01 	.word	0x08007e01
 8007dc0:	08007e11 	.word	0x08007e11
 8007dc4:	08007e11 	.word	0x08007e11
 8007dc8:	08007e11 	.word	0x08007e11
 8007dcc:	08007e11 	.word	0x08007e11
 8007dd0:	08007e11 	.word	0x08007e11
 8007dd4:	08007e11 	.word	0x08007e11
 8007dd8:	08007e11 	.word	0x08007e11
 8007ddc:	08007e09 	.word	0x08007e09
 8007de0:	2301      	movs	r3, #1
 8007de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007de6:	e326      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007de8:	2304      	movs	r3, #4
 8007dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dee:	e322      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007df0:	2308      	movs	r3, #8
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007df6:	e31e      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007df8:	2310      	movs	r3, #16
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007dfe:	e31a      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e00:	2320      	movs	r3, #32
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e06:	e316      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e08:	2340      	movs	r3, #64	@ 0x40
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e0e:	e312      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e10:	2380      	movs	r3, #128	@ 0x80
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e16:	e30e      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a69      	ldr	r2, [pc, #420]	@ (8007fc4 <UART_SetConfig+0x33c>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d130      	bne.n	8007e84 <UART_SetConfig+0x1fc>
 8007e22:	4b67      	ldr	r3, [pc, #412]	@ (8007fc0 <UART_SetConfig+0x338>)
 8007e24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e26:	f003 0307 	and.w	r3, r3, #7
 8007e2a:	2b05      	cmp	r3, #5
 8007e2c:	d826      	bhi.n	8007e7c <UART_SetConfig+0x1f4>
 8007e2e:	a201      	add	r2, pc, #4	@ (adr r2, 8007e34 <UART_SetConfig+0x1ac>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007e4d 	.word	0x08007e4d
 8007e38:	08007e55 	.word	0x08007e55
 8007e3c:	08007e5d 	.word	0x08007e5d
 8007e40:	08007e65 	.word	0x08007e65
 8007e44:	08007e6d 	.word	0x08007e6d
 8007e48:	08007e75 	.word	0x08007e75
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e52:	e2f0      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e54:	2304      	movs	r3, #4
 8007e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e5a:	e2ec      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e5c:	2308      	movs	r3, #8
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e62:	e2e8      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e64:	2310      	movs	r3, #16
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e6a:	e2e4      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e6c:	2320      	movs	r3, #32
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e72:	e2e0      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e74:	2340      	movs	r3, #64	@ 0x40
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e7a:	e2dc      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e7c:	2380      	movs	r3, #128	@ 0x80
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007e82:	e2d8      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007e84:	697b      	ldr	r3, [r7, #20]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	4a4f      	ldr	r2, [pc, #316]	@ (8007fc8 <UART_SetConfig+0x340>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d130      	bne.n	8007ef0 <UART_SetConfig+0x268>
 8007e8e:	4b4c      	ldr	r3, [pc, #304]	@ (8007fc0 <UART_SetConfig+0x338>)
 8007e90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e92:	f003 0307 	and.w	r3, r3, #7
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	d826      	bhi.n	8007ee8 <UART_SetConfig+0x260>
 8007e9a:	a201      	add	r2, pc, #4	@ (adr r2, 8007ea0 <UART_SetConfig+0x218>)
 8007e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ea0:	08007eb9 	.word	0x08007eb9
 8007ea4:	08007ec1 	.word	0x08007ec1
 8007ea8:	08007ec9 	.word	0x08007ec9
 8007eac:	08007ed1 	.word	0x08007ed1
 8007eb0:	08007ed9 	.word	0x08007ed9
 8007eb4:	08007ee1 	.word	0x08007ee1
 8007eb8:	2300      	movs	r3, #0
 8007eba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ebe:	e2ba      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007ec0:	2304      	movs	r3, #4
 8007ec2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ec6:	e2b6      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007ec8:	2308      	movs	r3, #8
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ece:	e2b2      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007ed0:	2310      	movs	r3, #16
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ed6:	e2ae      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007ed8:	2320      	movs	r3, #32
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ede:	e2aa      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007ee0:	2340      	movs	r3, #64	@ 0x40
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ee6:	e2a6      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007ee8:	2380      	movs	r3, #128	@ 0x80
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007eee:	e2a2      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007ef0:	697b      	ldr	r3, [r7, #20]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	4a35      	ldr	r2, [pc, #212]	@ (8007fcc <UART_SetConfig+0x344>)
 8007ef6:	4293      	cmp	r3, r2
 8007ef8:	d130      	bne.n	8007f5c <UART_SetConfig+0x2d4>
 8007efa:	4b31      	ldr	r3, [pc, #196]	@ (8007fc0 <UART_SetConfig+0x338>)
 8007efc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007efe:	f003 0307 	and.w	r3, r3, #7
 8007f02:	2b05      	cmp	r3, #5
 8007f04:	d826      	bhi.n	8007f54 <UART_SetConfig+0x2cc>
 8007f06:	a201      	add	r2, pc, #4	@ (adr r2, 8007f0c <UART_SetConfig+0x284>)
 8007f08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f0c:	08007f25 	.word	0x08007f25
 8007f10:	08007f2d 	.word	0x08007f2d
 8007f14:	08007f35 	.word	0x08007f35
 8007f18:	08007f3d 	.word	0x08007f3d
 8007f1c:	08007f45 	.word	0x08007f45
 8007f20:	08007f4d 	.word	0x08007f4d
 8007f24:	2300      	movs	r3, #0
 8007f26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f2a:	e284      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007f2c:	2304      	movs	r3, #4
 8007f2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f32:	e280      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007f34:	2308      	movs	r3, #8
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f3a:	e27c      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007f3c:	2310      	movs	r3, #16
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f42:	e278      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007f44:	2320      	movs	r3, #32
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f4a:	e274      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007f4c:	2340      	movs	r3, #64	@ 0x40
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f52:	e270      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007f54:	2380      	movs	r3, #128	@ 0x80
 8007f56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f5a:	e26c      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007f5c:	697b      	ldr	r3, [r7, #20]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a1b      	ldr	r2, [pc, #108]	@ (8007fd0 <UART_SetConfig+0x348>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d142      	bne.n	8007fec <UART_SetConfig+0x364>
 8007f66:	4b16      	ldr	r3, [pc, #88]	@ (8007fc0 <UART_SetConfig+0x338>)
 8007f68:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f6a:	f003 0307 	and.w	r3, r3, #7
 8007f6e:	2b05      	cmp	r3, #5
 8007f70:	d838      	bhi.n	8007fe4 <UART_SetConfig+0x35c>
 8007f72:	a201      	add	r2, pc, #4	@ (adr r2, 8007f78 <UART_SetConfig+0x2f0>)
 8007f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f78:	08007f91 	.word	0x08007f91
 8007f7c:	08007f99 	.word	0x08007f99
 8007f80:	08007fa1 	.word	0x08007fa1
 8007f84:	08007fa9 	.word	0x08007fa9
 8007f88:	08007fd5 	.word	0x08007fd5
 8007f8c:	08007fdd 	.word	0x08007fdd
 8007f90:	2300      	movs	r3, #0
 8007f92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f96:	e24e      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007f98:	2304      	movs	r3, #4
 8007f9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9e:	e24a      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007fa0:	2308      	movs	r3, #8
 8007fa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa6:	e246      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007fa8:	2310      	movs	r3, #16
 8007faa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fae:	e242      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007fb0:	cfff69f3 	.word	0xcfff69f3
 8007fb4:	58000c00 	.word	0x58000c00
 8007fb8:	11fff4ff 	.word	0x11fff4ff
 8007fbc:	40011000 	.word	0x40011000
 8007fc0:	58024400 	.word	0x58024400
 8007fc4:	40004400 	.word	0x40004400
 8007fc8:	40004800 	.word	0x40004800
 8007fcc:	40004c00 	.word	0x40004c00
 8007fd0:	40005000 	.word	0x40005000
 8007fd4:	2320      	movs	r3, #32
 8007fd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fda:	e22c      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007fdc:	2340      	movs	r3, #64	@ 0x40
 8007fde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe2:	e228      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007fe4:	2380      	movs	r3, #128	@ 0x80
 8007fe6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fea:	e224      	b.n	8008436 <UART_SetConfig+0x7ae>
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	4ab1      	ldr	r2, [pc, #708]	@ (80082b8 <UART_SetConfig+0x630>)
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	d176      	bne.n	80080e4 <UART_SetConfig+0x45c>
 8007ff6:	4bb1      	ldr	r3, [pc, #708]	@ (80082bc <UART_SetConfig+0x634>)
 8007ff8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ffa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ffe:	2b28      	cmp	r3, #40	@ 0x28
 8008000:	d86c      	bhi.n	80080dc <UART_SetConfig+0x454>
 8008002:	a201      	add	r2, pc, #4	@ (adr r2, 8008008 <UART_SetConfig+0x380>)
 8008004:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008008:	080080ad 	.word	0x080080ad
 800800c:	080080dd 	.word	0x080080dd
 8008010:	080080dd 	.word	0x080080dd
 8008014:	080080dd 	.word	0x080080dd
 8008018:	080080dd 	.word	0x080080dd
 800801c:	080080dd 	.word	0x080080dd
 8008020:	080080dd 	.word	0x080080dd
 8008024:	080080dd 	.word	0x080080dd
 8008028:	080080b5 	.word	0x080080b5
 800802c:	080080dd 	.word	0x080080dd
 8008030:	080080dd 	.word	0x080080dd
 8008034:	080080dd 	.word	0x080080dd
 8008038:	080080dd 	.word	0x080080dd
 800803c:	080080dd 	.word	0x080080dd
 8008040:	080080dd 	.word	0x080080dd
 8008044:	080080dd 	.word	0x080080dd
 8008048:	080080bd 	.word	0x080080bd
 800804c:	080080dd 	.word	0x080080dd
 8008050:	080080dd 	.word	0x080080dd
 8008054:	080080dd 	.word	0x080080dd
 8008058:	080080dd 	.word	0x080080dd
 800805c:	080080dd 	.word	0x080080dd
 8008060:	080080dd 	.word	0x080080dd
 8008064:	080080dd 	.word	0x080080dd
 8008068:	080080c5 	.word	0x080080c5
 800806c:	080080dd 	.word	0x080080dd
 8008070:	080080dd 	.word	0x080080dd
 8008074:	080080dd 	.word	0x080080dd
 8008078:	080080dd 	.word	0x080080dd
 800807c:	080080dd 	.word	0x080080dd
 8008080:	080080dd 	.word	0x080080dd
 8008084:	080080dd 	.word	0x080080dd
 8008088:	080080cd 	.word	0x080080cd
 800808c:	080080dd 	.word	0x080080dd
 8008090:	080080dd 	.word	0x080080dd
 8008094:	080080dd 	.word	0x080080dd
 8008098:	080080dd 	.word	0x080080dd
 800809c:	080080dd 	.word	0x080080dd
 80080a0:	080080dd 	.word	0x080080dd
 80080a4:	080080dd 	.word	0x080080dd
 80080a8:	080080d5 	.word	0x080080d5
 80080ac:	2301      	movs	r3, #1
 80080ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b2:	e1c0      	b.n	8008436 <UART_SetConfig+0x7ae>
 80080b4:	2304      	movs	r3, #4
 80080b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ba:	e1bc      	b.n	8008436 <UART_SetConfig+0x7ae>
 80080bc:	2308      	movs	r3, #8
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c2:	e1b8      	b.n	8008436 <UART_SetConfig+0x7ae>
 80080c4:	2310      	movs	r3, #16
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ca:	e1b4      	b.n	8008436 <UART_SetConfig+0x7ae>
 80080cc:	2320      	movs	r3, #32
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d2:	e1b0      	b.n	8008436 <UART_SetConfig+0x7ae>
 80080d4:	2340      	movs	r3, #64	@ 0x40
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080da:	e1ac      	b.n	8008436 <UART_SetConfig+0x7ae>
 80080dc:	2380      	movs	r3, #128	@ 0x80
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e2:	e1a8      	b.n	8008436 <UART_SetConfig+0x7ae>
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a75      	ldr	r2, [pc, #468]	@ (80082c0 <UART_SetConfig+0x638>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d130      	bne.n	8008150 <UART_SetConfig+0x4c8>
 80080ee:	4b73      	ldr	r3, [pc, #460]	@ (80082bc <UART_SetConfig+0x634>)
 80080f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	2b05      	cmp	r3, #5
 80080f8:	d826      	bhi.n	8008148 <UART_SetConfig+0x4c0>
 80080fa:	a201      	add	r2, pc, #4	@ (adr r2, 8008100 <UART_SetConfig+0x478>)
 80080fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008100:	08008119 	.word	0x08008119
 8008104:	08008121 	.word	0x08008121
 8008108:	08008129 	.word	0x08008129
 800810c:	08008131 	.word	0x08008131
 8008110:	08008139 	.word	0x08008139
 8008114:	08008141 	.word	0x08008141
 8008118:	2300      	movs	r3, #0
 800811a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800811e:	e18a      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008120:	2304      	movs	r3, #4
 8008122:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008126:	e186      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008128:	2308      	movs	r3, #8
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812e:	e182      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008130:	2310      	movs	r3, #16
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008136:	e17e      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008138:	2320      	movs	r3, #32
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800813e:	e17a      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008140:	2340      	movs	r3, #64	@ 0x40
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008146:	e176      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008148:	2380      	movs	r3, #128	@ 0x80
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800814e:	e172      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008150:	697b      	ldr	r3, [r7, #20]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a5b      	ldr	r2, [pc, #364]	@ (80082c4 <UART_SetConfig+0x63c>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d130      	bne.n	80081bc <UART_SetConfig+0x534>
 800815a:	4b58      	ldr	r3, [pc, #352]	@ (80082bc <UART_SetConfig+0x634>)
 800815c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800815e:	f003 0307 	and.w	r3, r3, #7
 8008162:	2b05      	cmp	r3, #5
 8008164:	d826      	bhi.n	80081b4 <UART_SetConfig+0x52c>
 8008166:	a201      	add	r2, pc, #4	@ (adr r2, 800816c <UART_SetConfig+0x4e4>)
 8008168:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800816c:	08008185 	.word	0x08008185
 8008170:	0800818d 	.word	0x0800818d
 8008174:	08008195 	.word	0x08008195
 8008178:	0800819d 	.word	0x0800819d
 800817c:	080081a5 	.word	0x080081a5
 8008180:	080081ad 	.word	0x080081ad
 8008184:	2300      	movs	r3, #0
 8008186:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800818a:	e154      	b.n	8008436 <UART_SetConfig+0x7ae>
 800818c:	2304      	movs	r3, #4
 800818e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008192:	e150      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008194:	2308      	movs	r3, #8
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800819a:	e14c      	b.n	8008436 <UART_SetConfig+0x7ae>
 800819c:	2310      	movs	r3, #16
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081a2:	e148      	b.n	8008436 <UART_SetConfig+0x7ae>
 80081a4:	2320      	movs	r3, #32
 80081a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081aa:	e144      	b.n	8008436 <UART_SetConfig+0x7ae>
 80081ac:	2340      	movs	r3, #64	@ 0x40
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081b2:	e140      	b.n	8008436 <UART_SetConfig+0x7ae>
 80081b4:	2380      	movs	r3, #128	@ 0x80
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80081ba:	e13c      	b.n	8008436 <UART_SetConfig+0x7ae>
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a41      	ldr	r2, [pc, #260]	@ (80082c8 <UART_SetConfig+0x640>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	f040 8082 	bne.w	80082cc <UART_SetConfig+0x644>
 80081c8:	4b3c      	ldr	r3, [pc, #240]	@ (80082bc <UART_SetConfig+0x634>)
 80081ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081cc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80081d0:	2b28      	cmp	r3, #40	@ 0x28
 80081d2:	d86d      	bhi.n	80082b0 <UART_SetConfig+0x628>
 80081d4:	a201      	add	r2, pc, #4	@ (adr r2, 80081dc <UART_SetConfig+0x554>)
 80081d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081da:	bf00      	nop
 80081dc:	08008281 	.word	0x08008281
 80081e0:	080082b1 	.word	0x080082b1
 80081e4:	080082b1 	.word	0x080082b1
 80081e8:	080082b1 	.word	0x080082b1
 80081ec:	080082b1 	.word	0x080082b1
 80081f0:	080082b1 	.word	0x080082b1
 80081f4:	080082b1 	.word	0x080082b1
 80081f8:	080082b1 	.word	0x080082b1
 80081fc:	08008289 	.word	0x08008289
 8008200:	080082b1 	.word	0x080082b1
 8008204:	080082b1 	.word	0x080082b1
 8008208:	080082b1 	.word	0x080082b1
 800820c:	080082b1 	.word	0x080082b1
 8008210:	080082b1 	.word	0x080082b1
 8008214:	080082b1 	.word	0x080082b1
 8008218:	080082b1 	.word	0x080082b1
 800821c:	08008291 	.word	0x08008291
 8008220:	080082b1 	.word	0x080082b1
 8008224:	080082b1 	.word	0x080082b1
 8008228:	080082b1 	.word	0x080082b1
 800822c:	080082b1 	.word	0x080082b1
 8008230:	080082b1 	.word	0x080082b1
 8008234:	080082b1 	.word	0x080082b1
 8008238:	080082b1 	.word	0x080082b1
 800823c:	08008299 	.word	0x08008299
 8008240:	080082b1 	.word	0x080082b1
 8008244:	080082b1 	.word	0x080082b1
 8008248:	080082b1 	.word	0x080082b1
 800824c:	080082b1 	.word	0x080082b1
 8008250:	080082b1 	.word	0x080082b1
 8008254:	080082b1 	.word	0x080082b1
 8008258:	080082b1 	.word	0x080082b1
 800825c:	080082a1 	.word	0x080082a1
 8008260:	080082b1 	.word	0x080082b1
 8008264:	080082b1 	.word	0x080082b1
 8008268:	080082b1 	.word	0x080082b1
 800826c:	080082b1 	.word	0x080082b1
 8008270:	080082b1 	.word	0x080082b1
 8008274:	080082b1 	.word	0x080082b1
 8008278:	080082b1 	.word	0x080082b1
 800827c:	080082a9 	.word	0x080082a9
 8008280:	2301      	movs	r3, #1
 8008282:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008286:	e0d6      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008288:	2304      	movs	r3, #4
 800828a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800828e:	e0d2      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008290:	2308      	movs	r3, #8
 8008292:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008296:	e0ce      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008298:	2310      	movs	r3, #16
 800829a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800829e:	e0ca      	b.n	8008436 <UART_SetConfig+0x7ae>
 80082a0:	2320      	movs	r3, #32
 80082a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082a6:	e0c6      	b.n	8008436 <UART_SetConfig+0x7ae>
 80082a8:	2340      	movs	r3, #64	@ 0x40
 80082aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ae:	e0c2      	b.n	8008436 <UART_SetConfig+0x7ae>
 80082b0:	2380      	movs	r3, #128	@ 0x80
 80082b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b6:	e0be      	b.n	8008436 <UART_SetConfig+0x7ae>
 80082b8:	40011400 	.word	0x40011400
 80082bc:	58024400 	.word	0x58024400
 80082c0:	40007800 	.word	0x40007800
 80082c4:	40007c00 	.word	0x40007c00
 80082c8:	40011800 	.word	0x40011800
 80082cc:	697b      	ldr	r3, [r7, #20]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	4aad      	ldr	r2, [pc, #692]	@ (8008588 <UART_SetConfig+0x900>)
 80082d2:	4293      	cmp	r3, r2
 80082d4:	d176      	bne.n	80083c4 <UART_SetConfig+0x73c>
 80082d6:	4bad      	ldr	r3, [pc, #692]	@ (800858c <UART_SetConfig+0x904>)
 80082d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082da:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80082de:	2b28      	cmp	r3, #40	@ 0x28
 80082e0:	d86c      	bhi.n	80083bc <UART_SetConfig+0x734>
 80082e2:	a201      	add	r2, pc, #4	@ (adr r2, 80082e8 <UART_SetConfig+0x660>)
 80082e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082e8:	0800838d 	.word	0x0800838d
 80082ec:	080083bd 	.word	0x080083bd
 80082f0:	080083bd 	.word	0x080083bd
 80082f4:	080083bd 	.word	0x080083bd
 80082f8:	080083bd 	.word	0x080083bd
 80082fc:	080083bd 	.word	0x080083bd
 8008300:	080083bd 	.word	0x080083bd
 8008304:	080083bd 	.word	0x080083bd
 8008308:	08008395 	.word	0x08008395
 800830c:	080083bd 	.word	0x080083bd
 8008310:	080083bd 	.word	0x080083bd
 8008314:	080083bd 	.word	0x080083bd
 8008318:	080083bd 	.word	0x080083bd
 800831c:	080083bd 	.word	0x080083bd
 8008320:	080083bd 	.word	0x080083bd
 8008324:	080083bd 	.word	0x080083bd
 8008328:	0800839d 	.word	0x0800839d
 800832c:	080083bd 	.word	0x080083bd
 8008330:	080083bd 	.word	0x080083bd
 8008334:	080083bd 	.word	0x080083bd
 8008338:	080083bd 	.word	0x080083bd
 800833c:	080083bd 	.word	0x080083bd
 8008340:	080083bd 	.word	0x080083bd
 8008344:	080083bd 	.word	0x080083bd
 8008348:	080083a5 	.word	0x080083a5
 800834c:	080083bd 	.word	0x080083bd
 8008350:	080083bd 	.word	0x080083bd
 8008354:	080083bd 	.word	0x080083bd
 8008358:	080083bd 	.word	0x080083bd
 800835c:	080083bd 	.word	0x080083bd
 8008360:	080083bd 	.word	0x080083bd
 8008364:	080083bd 	.word	0x080083bd
 8008368:	080083ad 	.word	0x080083ad
 800836c:	080083bd 	.word	0x080083bd
 8008370:	080083bd 	.word	0x080083bd
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083bd 	.word	0x080083bd
 800837c:	080083bd 	.word	0x080083bd
 8008380:	080083bd 	.word	0x080083bd
 8008384:	080083bd 	.word	0x080083bd
 8008388:	080083b5 	.word	0x080083b5
 800838c:	2301      	movs	r3, #1
 800838e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008392:	e050      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008394:	2304      	movs	r3, #4
 8008396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800839a:	e04c      	b.n	8008436 <UART_SetConfig+0x7ae>
 800839c:	2308      	movs	r3, #8
 800839e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083a2:	e048      	b.n	8008436 <UART_SetConfig+0x7ae>
 80083a4:	2310      	movs	r3, #16
 80083a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083aa:	e044      	b.n	8008436 <UART_SetConfig+0x7ae>
 80083ac:	2320      	movs	r3, #32
 80083ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083b2:	e040      	b.n	8008436 <UART_SetConfig+0x7ae>
 80083b4:	2340      	movs	r3, #64	@ 0x40
 80083b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083ba:	e03c      	b.n	8008436 <UART_SetConfig+0x7ae>
 80083bc:	2380      	movs	r3, #128	@ 0x80
 80083be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083c2:	e038      	b.n	8008436 <UART_SetConfig+0x7ae>
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4a71      	ldr	r2, [pc, #452]	@ (8008590 <UART_SetConfig+0x908>)
 80083ca:	4293      	cmp	r3, r2
 80083cc:	d130      	bne.n	8008430 <UART_SetConfig+0x7a8>
 80083ce:	4b6f      	ldr	r3, [pc, #444]	@ (800858c <UART_SetConfig+0x904>)
 80083d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80083d2:	f003 0307 	and.w	r3, r3, #7
 80083d6:	2b05      	cmp	r3, #5
 80083d8:	d826      	bhi.n	8008428 <UART_SetConfig+0x7a0>
 80083da:	a201      	add	r2, pc, #4	@ (adr r2, 80083e0 <UART_SetConfig+0x758>)
 80083dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083e0:	080083f9 	.word	0x080083f9
 80083e4:	08008401 	.word	0x08008401
 80083e8:	08008409 	.word	0x08008409
 80083ec:	08008411 	.word	0x08008411
 80083f0:	08008419 	.word	0x08008419
 80083f4:	08008421 	.word	0x08008421
 80083f8:	2302      	movs	r3, #2
 80083fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80083fe:	e01a      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008400:	2304      	movs	r3, #4
 8008402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008406:	e016      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008408:	2308      	movs	r3, #8
 800840a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800840e:	e012      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008410:	2310      	movs	r3, #16
 8008412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008416:	e00e      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008418:	2320      	movs	r3, #32
 800841a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841e:	e00a      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008420:	2340      	movs	r3, #64	@ 0x40
 8008422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008426:	e006      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008428:	2380      	movs	r3, #128	@ 0x80
 800842a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842e:	e002      	b.n	8008436 <UART_SetConfig+0x7ae>
 8008430:	2380      	movs	r3, #128	@ 0x80
 8008432:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	4a55      	ldr	r2, [pc, #340]	@ (8008590 <UART_SetConfig+0x908>)
 800843c:	4293      	cmp	r3, r2
 800843e:	f040 80f8 	bne.w	8008632 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008442:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008446:	2b20      	cmp	r3, #32
 8008448:	dc46      	bgt.n	80084d8 <UART_SetConfig+0x850>
 800844a:	2b02      	cmp	r3, #2
 800844c:	db75      	blt.n	800853a <UART_SetConfig+0x8b2>
 800844e:	3b02      	subs	r3, #2
 8008450:	2b1e      	cmp	r3, #30
 8008452:	d872      	bhi.n	800853a <UART_SetConfig+0x8b2>
 8008454:	a201      	add	r2, pc, #4	@ (adr r2, 800845c <UART_SetConfig+0x7d4>)
 8008456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800845a:	bf00      	nop
 800845c:	080084df 	.word	0x080084df
 8008460:	0800853b 	.word	0x0800853b
 8008464:	080084e7 	.word	0x080084e7
 8008468:	0800853b 	.word	0x0800853b
 800846c:	0800853b 	.word	0x0800853b
 8008470:	0800853b 	.word	0x0800853b
 8008474:	080084f7 	.word	0x080084f7
 8008478:	0800853b 	.word	0x0800853b
 800847c:	0800853b 	.word	0x0800853b
 8008480:	0800853b 	.word	0x0800853b
 8008484:	0800853b 	.word	0x0800853b
 8008488:	0800853b 	.word	0x0800853b
 800848c:	0800853b 	.word	0x0800853b
 8008490:	0800853b 	.word	0x0800853b
 8008494:	08008507 	.word	0x08008507
 8008498:	0800853b 	.word	0x0800853b
 800849c:	0800853b 	.word	0x0800853b
 80084a0:	0800853b 	.word	0x0800853b
 80084a4:	0800853b 	.word	0x0800853b
 80084a8:	0800853b 	.word	0x0800853b
 80084ac:	0800853b 	.word	0x0800853b
 80084b0:	0800853b 	.word	0x0800853b
 80084b4:	0800853b 	.word	0x0800853b
 80084b8:	0800853b 	.word	0x0800853b
 80084bc:	0800853b 	.word	0x0800853b
 80084c0:	0800853b 	.word	0x0800853b
 80084c4:	0800853b 	.word	0x0800853b
 80084c8:	0800853b 	.word	0x0800853b
 80084cc:	0800853b 	.word	0x0800853b
 80084d0:	0800853b 	.word	0x0800853b
 80084d4:	0800852d 	.word	0x0800852d
 80084d8:	2b40      	cmp	r3, #64	@ 0x40
 80084da:	d02a      	beq.n	8008532 <UART_SetConfig+0x8aa>
 80084dc:	e02d      	b.n	800853a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80084de:	f7fe fa17 	bl	8006910 <HAL_RCCEx_GetD3PCLK1Freq>
 80084e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80084e4:	e02f      	b.n	8008546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80084e6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80084ea:	4618      	mov	r0, r3
 80084ec:	f7fe fa26 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80084f4:	e027      	b.n	8008546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80084f6:	f107 0318 	add.w	r3, r7, #24
 80084fa:	4618      	mov	r0, r3
 80084fc:	f7fe fb72 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008500:	69fb      	ldr	r3, [r7, #28]
 8008502:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008504:	e01f      	b.n	8008546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008506:	4b21      	ldr	r3, [pc, #132]	@ (800858c <UART_SetConfig+0x904>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f003 0320 	and.w	r3, r3, #32
 800850e:	2b00      	cmp	r3, #0
 8008510:	d009      	beq.n	8008526 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008512:	4b1e      	ldr	r3, [pc, #120]	@ (800858c <UART_SetConfig+0x904>)
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	08db      	lsrs	r3, r3, #3
 8008518:	f003 0303 	and.w	r3, r3, #3
 800851c:	4a1d      	ldr	r2, [pc, #116]	@ (8008594 <UART_SetConfig+0x90c>)
 800851e:	fa22 f303 	lsr.w	r3, r2, r3
 8008522:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008524:	e00f      	b.n	8008546 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8008526:	4b1b      	ldr	r3, [pc, #108]	@ (8008594 <UART_SetConfig+0x90c>)
 8008528:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800852a:	e00c      	b.n	8008546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800852c:	4b1a      	ldr	r3, [pc, #104]	@ (8008598 <UART_SetConfig+0x910>)
 800852e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008530:	e009      	b.n	8008546 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008532:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008538:	e005      	b.n	8008546 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800853a:	2300      	movs	r3, #0
 800853c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800853e:	2301      	movs	r3, #1
 8008540:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008544:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008546:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008548:	2b00      	cmp	r3, #0
 800854a:	f000 81ee 	beq.w	800892a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008552:	4a12      	ldr	r2, [pc, #72]	@ (800859c <UART_SetConfig+0x914>)
 8008554:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008558:	461a      	mov	r2, r3
 800855a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800855c:	fbb3 f3f2 	udiv	r3, r3, r2
 8008560:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	685a      	ldr	r2, [r3, #4]
 8008566:	4613      	mov	r3, r2
 8008568:	005b      	lsls	r3, r3, #1
 800856a:	4413      	add	r3, r2
 800856c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800856e:	429a      	cmp	r2, r3
 8008570:	d305      	bcc.n	800857e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	685b      	ldr	r3, [r3, #4]
 8008576:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008578:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800857a:	429a      	cmp	r2, r3
 800857c:	d910      	bls.n	80085a0 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800857e:	2301      	movs	r3, #1
 8008580:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008584:	e1d1      	b.n	800892a <UART_SetConfig+0xca2>
 8008586:	bf00      	nop
 8008588:	40011c00 	.word	0x40011c00
 800858c:	58024400 	.word	0x58024400
 8008590:	58000c00 	.word	0x58000c00
 8008594:	03d09000 	.word	0x03d09000
 8008598:	003d0900 	.word	0x003d0900
 800859c:	080094c0 	.word	0x080094c0
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80085a2:	2200      	movs	r2, #0
 80085a4:	60bb      	str	r3, [r7, #8]
 80085a6:	60fa      	str	r2, [r7, #12]
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085ac:	4ac0      	ldr	r2, [pc, #768]	@ (80088b0 <UART_SetConfig+0xc28>)
 80085ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b2:	b29b      	uxth	r3, r3
 80085b4:	2200      	movs	r2, #0
 80085b6:	603b      	str	r3, [r7, #0]
 80085b8:	607a      	str	r2, [r7, #4]
 80085ba:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80085c2:	f7f7 fea3 	bl	800030c <__aeabi_uldivmod>
 80085c6:	4602      	mov	r2, r0
 80085c8:	460b      	mov	r3, r1
 80085ca:	4610      	mov	r0, r2
 80085cc:	4619      	mov	r1, r3
 80085ce:	f04f 0200 	mov.w	r2, #0
 80085d2:	f04f 0300 	mov.w	r3, #0
 80085d6:	020b      	lsls	r3, r1, #8
 80085d8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80085dc:	0202      	lsls	r2, r0, #8
 80085de:	6979      	ldr	r1, [r7, #20]
 80085e0:	6849      	ldr	r1, [r1, #4]
 80085e2:	0849      	lsrs	r1, r1, #1
 80085e4:	2000      	movs	r0, #0
 80085e6:	460c      	mov	r4, r1
 80085e8:	4605      	mov	r5, r0
 80085ea:	eb12 0804 	adds.w	r8, r2, r4
 80085ee:	eb43 0905 	adc.w	r9, r3, r5
 80085f2:	697b      	ldr	r3, [r7, #20]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	2200      	movs	r2, #0
 80085f8:	469a      	mov	sl, r3
 80085fa:	4693      	mov	fp, r2
 80085fc:	4652      	mov	r2, sl
 80085fe:	465b      	mov	r3, fp
 8008600:	4640      	mov	r0, r8
 8008602:	4649      	mov	r1, r9
 8008604:	f7f7 fe82 	bl	800030c <__aeabi_uldivmod>
 8008608:	4602      	mov	r2, r0
 800860a:	460b      	mov	r3, r1
 800860c:	4613      	mov	r3, r2
 800860e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008610:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008612:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008616:	d308      	bcc.n	800862a <UART_SetConfig+0x9a2>
 8008618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800861a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800861e:	d204      	bcs.n	800862a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8008620:	697b      	ldr	r3, [r7, #20]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008626:	60da      	str	r2, [r3, #12]
 8008628:	e17f      	b.n	800892a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 800862a:	2301      	movs	r3, #1
 800862c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008630:	e17b      	b.n	800892a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800863a:	f040 80bd 	bne.w	80087b8 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 800863e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008642:	2b20      	cmp	r3, #32
 8008644:	dc48      	bgt.n	80086d8 <UART_SetConfig+0xa50>
 8008646:	2b00      	cmp	r3, #0
 8008648:	db7b      	blt.n	8008742 <UART_SetConfig+0xaba>
 800864a:	2b20      	cmp	r3, #32
 800864c:	d879      	bhi.n	8008742 <UART_SetConfig+0xaba>
 800864e:	a201      	add	r2, pc, #4	@ (adr r2, 8008654 <UART_SetConfig+0x9cc>)
 8008650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008654:	080086df 	.word	0x080086df
 8008658:	080086e7 	.word	0x080086e7
 800865c:	08008743 	.word	0x08008743
 8008660:	08008743 	.word	0x08008743
 8008664:	080086ef 	.word	0x080086ef
 8008668:	08008743 	.word	0x08008743
 800866c:	08008743 	.word	0x08008743
 8008670:	08008743 	.word	0x08008743
 8008674:	080086ff 	.word	0x080086ff
 8008678:	08008743 	.word	0x08008743
 800867c:	08008743 	.word	0x08008743
 8008680:	08008743 	.word	0x08008743
 8008684:	08008743 	.word	0x08008743
 8008688:	08008743 	.word	0x08008743
 800868c:	08008743 	.word	0x08008743
 8008690:	08008743 	.word	0x08008743
 8008694:	0800870f 	.word	0x0800870f
 8008698:	08008743 	.word	0x08008743
 800869c:	08008743 	.word	0x08008743
 80086a0:	08008743 	.word	0x08008743
 80086a4:	08008743 	.word	0x08008743
 80086a8:	08008743 	.word	0x08008743
 80086ac:	08008743 	.word	0x08008743
 80086b0:	08008743 	.word	0x08008743
 80086b4:	08008743 	.word	0x08008743
 80086b8:	08008743 	.word	0x08008743
 80086bc:	08008743 	.word	0x08008743
 80086c0:	08008743 	.word	0x08008743
 80086c4:	08008743 	.word	0x08008743
 80086c8:	08008743 	.word	0x08008743
 80086cc:	08008743 	.word	0x08008743
 80086d0:	08008743 	.word	0x08008743
 80086d4:	08008735 	.word	0x08008735
 80086d8:	2b40      	cmp	r3, #64	@ 0x40
 80086da:	d02e      	beq.n	800873a <UART_SetConfig+0xab2>
 80086dc:	e031      	b.n	8008742 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086de:	f7fc ff4b 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 80086e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086e4:	e033      	b.n	800874e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086e6:	f7fc ff5d 	bl	80055a4 <HAL_RCC_GetPCLK2Freq>
 80086ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80086ec:	e02f      	b.n	800874e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80086ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fe f922 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80086f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086fc:	e027      	b.n	800874e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80086fe:	f107 0318 	add.w	r3, r7, #24
 8008702:	4618      	mov	r0, r3
 8008704:	f7fe fa6e 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800870c:	e01f      	b.n	800874e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800870e:	4b69      	ldr	r3, [pc, #420]	@ (80088b4 <UART_SetConfig+0xc2c>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	f003 0320 	and.w	r3, r3, #32
 8008716:	2b00      	cmp	r3, #0
 8008718:	d009      	beq.n	800872e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800871a:	4b66      	ldr	r3, [pc, #408]	@ (80088b4 <UART_SetConfig+0xc2c>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	08db      	lsrs	r3, r3, #3
 8008720:	f003 0303 	and.w	r3, r3, #3
 8008724:	4a64      	ldr	r2, [pc, #400]	@ (80088b8 <UART_SetConfig+0xc30>)
 8008726:	fa22 f303 	lsr.w	r3, r2, r3
 800872a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800872c:	e00f      	b.n	800874e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 800872e:	4b62      	ldr	r3, [pc, #392]	@ (80088b8 <UART_SetConfig+0xc30>)
 8008730:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008732:	e00c      	b.n	800874e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008734:	4b61      	ldr	r3, [pc, #388]	@ (80088bc <UART_SetConfig+0xc34>)
 8008736:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008738:	e009      	b.n	800874e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800873a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800873e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008740:	e005      	b.n	800874e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008746:	2301      	movs	r3, #1
 8008748:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800874c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800874e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008750:	2b00      	cmp	r3, #0
 8008752:	f000 80ea 	beq.w	800892a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800875a:	4a55      	ldr	r2, [pc, #340]	@ (80088b0 <UART_SetConfig+0xc28>)
 800875c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008760:	461a      	mov	r2, r3
 8008762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008764:	fbb3 f3f2 	udiv	r3, r3, r2
 8008768:	005a      	lsls	r2, r3, #1
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	085b      	lsrs	r3, r3, #1
 8008770:	441a      	add	r2, r3
 8008772:	697b      	ldr	r3, [r7, #20]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	fbb2 f3f3 	udiv	r3, r2, r3
 800877a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800877c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800877e:	2b0f      	cmp	r3, #15
 8008780:	d916      	bls.n	80087b0 <UART_SetConfig+0xb28>
 8008782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008784:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008788:	d212      	bcs.n	80087b0 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800878a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800878c:	b29b      	uxth	r3, r3
 800878e:	f023 030f 	bic.w	r3, r3, #15
 8008792:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008796:	085b      	lsrs	r3, r3, #1
 8008798:	b29b      	uxth	r3, r3
 800879a:	f003 0307 	and.w	r3, r3, #7
 800879e:	b29a      	uxth	r2, r3
 80087a0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80087a2:	4313      	orrs	r3, r2
 80087a4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80087ac:	60da      	str	r2, [r3, #12]
 80087ae:	e0bc      	b.n	800892a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80087b0:	2301      	movs	r3, #1
 80087b2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087b6:	e0b8      	b.n	800892a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 80087b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087bc:	2b20      	cmp	r3, #32
 80087be:	dc4b      	bgt.n	8008858 <UART_SetConfig+0xbd0>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f2c0 8087 	blt.w	80088d4 <UART_SetConfig+0xc4c>
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	f200 8084 	bhi.w	80088d4 <UART_SetConfig+0xc4c>
 80087cc:	a201      	add	r2, pc, #4	@ (adr r2, 80087d4 <UART_SetConfig+0xb4c>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	0800885f 	.word	0x0800885f
 80087d8:	08008867 	.word	0x08008867
 80087dc:	080088d5 	.word	0x080088d5
 80087e0:	080088d5 	.word	0x080088d5
 80087e4:	0800886f 	.word	0x0800886f
 80087e8:	080088d5 	.word	0x080088d5
 80087ec:	080088d5 	.word	0x080088d5
 80087f0:	080088d5 	.word	0x080088d5
 80087f4:	0800887f 	.word	0x0800887f
 80087f8:	080088d5 	.word	0x080088d5
 80087fc:	080088d5 	.word	0x080088d5
 8008800:	080088d5 	.word	0x080088d5
 8008804:	080088d5 	.word	0x080088d5
 8008808:	080088d5 	.word	0x080088d5
 800880c:	080088d5 	.word	0x080088d5
 8008810:	080088d5 	.word	0x080088d5
 8008814:	0800888f 	.word	0x0800888f
 8008818:	080088d5 	.word	0x080088d5
 800881c:	080088d5 	.word	0x080088d5
 8008820:	080088d5 	.word	0x080088d5
 8008824:	080088d5 	.word	0x080088d5
 8008828:	080088d5 	.word	0x080088d5
 800882c:	080088d5 	.word	0x080088d5
 8008830:	080088d5 	.word	0x080088d5
 8008834:	080088d5 	.word	0x080088d5
 8008838:	080088d5 	.word	0x080088d5
 800883c:	080088d5 	.word	0x080088d5
 8008840:	080088d5 	.word	0x080088d5
 8008844:	080088d5 	.word	0x080088d5
 8008848:	080088d5 	.word	0x080088d5
 800884c:	080088d5 	.word	0x080088d5
 8008850:	080088d5 	.word	0x080088d5
 8008854:	080088c7 	.word	0x080088c7
 8008858:	2b40      	cmp	r3, #64	@ 0x40
 800885a:	d037      	beq.n	80088cc <UART_SetConfig+0xc44>
 800885c:	e03a      	b.n	80088d4 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800885e:	f7fc fe8b 	bl	8005578 <HAL_RCC_GetPCLK1Freq>
 8008862:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008864:	e03c      	b.n	80088e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008866:	f7fc fe9d 	bl	80055a4 <HAL_RCC_GetPCLK2Freq>
 800886a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800886c:	e038      	b.n	80088e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800886e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008872:	4618      	mov	r0, r3
 8008874:	f7fe f862 	bl	800693c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008878:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800887a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800887c:	e030      	b.n	80088e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800887e:	f107 0318 	add.w	r3, r7, #24
 8008882:	4618      	mov	r0, r3
 8008884:	f7fe f9ae 	bl	8006be4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008888:	69fb      	ldr	r3, [r7, #28]
 800888a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800888c:	e028      	b.n	80088e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800888e:	4b09      	ldr	r3, [pc, #36]	@ (80088b4 <UART_SetConfig+0xc2c>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f003 0320 	and.w	r3, r3, #32
 8008896:	2b00      	cmp	r3, #0
 8008898:	d012      	beq.n	80088c0 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800889a:	4b06      	ldr	r3, [pc, #24]	@ (80088b4 <UART_SetConfig+0xc2c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	08db      	lsrs	r3, r3, #3
 80088a0:	f003 0303 	and.w	r3, r3, #3
 80088a4:	4a04      	ldr	r2, [pc, #16]	@ (80088b8 <UART_SetConfig+0xc30>)
 80088a6:	fa22 f303 	lsr.w	r3, r2, r3
 80088aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088ac:	e018      	b.n	80088e0 <UART_SetConfig+0xc58>
 80088ae:	bf00      	nop
 80088b0:	080094c0 	.word	0x080094c0
 80088b4:	58024400 	.word	0x58024400
 80088b8:	03d09000 	.word	0x03d09000
 80088bc:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 80088c0:	4b24      	ldr	r3, [pc, #144]	@ (8008954 <UART_SetConfig+0xccc>)
 80088c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c4:	e00c      	b.n	80088e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088c6:	4b24      	ldr	r3, [pc, #144]	@ (8008958 <UART_SetConfig+0xcd0>)
 80088c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088ca:	e009      	b.n	80088e0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088d2:	e005      	b.n	80088e0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 80088d4:	2300      	movs	r3, #0
 80088d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088d8:	2301      	movs	r3, #1
 80088da:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088de:	bf00      	nop
    }

    if (pclk != 0U)
 80088e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d021      	beq.n	800892a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088ea:	4a1c      	ldr	r2, [pc, #112]	@ (800895c <UART_SetConfig+0xcd4>)
 80088ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f0:	461a      	mov	r2, r3
 80088f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f4:	fbb3 f2f2 	udiv	r2, r3, r2
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	085b      	lsrs	r3, r3, #1
 80088fe:	441a      	add	r2, r3
 8008900:	697b      	ldr	r3, [r7, #20]
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	fbb2 f3f3 	udiv	r3, r2, r3
 8008908:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800890a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890c:	2b0f      	cmp	r3, #15
 800890e:	d909      	bls.n	8008924 <UART_SetConfig+0xc9c>
 8008910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008912:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008916:	d205      	bcs.n	8008924 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800891a:	b29a      	uxth	r2, r3
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	60da      	str	r2, [r3, #12]
 8008922:	e002      	b.n	800892a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	2201      	movs	r2, #1
 800892e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	2201      	movs	r2, #1
 8008936:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	2200      	movs	r2, #0
 800893e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008940:	697b      	ldr	r3, [r7, #20]
 8008942:	2200      	movs	r2, #0
 8008944:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008946:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800894a:	4618      	mov	r0, r3
 800894c:	3748      	adds	r7, #72	@ 0x48
 800894e:	46bd      	mov	sp, r7
 8008950:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008954:	03d09000 	.word	0x03d09000
 8008958:	003d0900 	.word	0x003d0900
 800895c:	080094c0 	.word	0x080094c0

08008960 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008960:	b480      	push	{r7}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800896c:	f003 0308 	and.w	r3, r3, #8
 8008970:	2b00      	cmp	r3, #0
 8008972:	d00a      	beq.n	800898a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	685b      	ldr	r3, [r3, #4]
 800897a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	430a      	orrs	r2, r1
 8008988:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800898e:	f003 0301 	and.w	r3, r3, #1
 8008992:	2b00      	cmp	r3, #0
 8008994:	d00a      	beq.n	80089ac <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	685b      	ldr	r3, [r3, #4]
 800899c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	430a      	orrs	r2, r1
 80089aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089b0:	f003 0302 	and.w	r3, r3, #2
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d00a      	beq.n	80089ce <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	430a      	orrs	r2, r1
 80089cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089d2:	f003 0304 	and.w	r3, r3, #4
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d00a      	beq.n	80089f0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	430a      	orrs	r2, r1
 80089ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f4:	f003 0310 	and.w	r3, r3, #16
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d00a      	beq.n	8008a12 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a16:	f003 0320 	and.w	r3, r3, #32
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d00a      	beq.n	8008a34 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	689b      	ldr	r3, [r3, #8]
 8008a24:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	430a      	orrs	r2, r1
 8008a32:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d01a      	beq.n	8008a76 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	685b      	ldr	r3, [r3, #4]
 8008a46:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	430a      	orrs	r2, r1
 8008a54:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a5a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008a5e:	d10a      	bne.n	8008a76 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	685b      	ldr	r3, [r3, #4]
 8008a66:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d00a      	beq.n	8008a98 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	430a      	orrs	r2, r1
 8008a96:	605a      	str	r2, [r3, #4]
  }
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b098      	sub	sp, #96	@ 0x60
 8008aa8:	af02      	add	r7, sp, #8
 8008aaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2200      	movs	r2, #0
 8008ab0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008ab4:	f7f8 fc52 	bl	800135c <HAL_GetTick>
 8008ab8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	f003 0308 	and.w	r3, r3, #8
 8008ac4:	2b08      	cmp	r3, #8
 8008ac6:	d12f      	bne.n	8008b28 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008ac8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008acc:	9300      	str	r3, [sp, #0]
 8008ace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f88e 	bl	8008bf8 <UART_WaitOnFlagUntilTimeout>
 8008adc:	4603      	mov	r3, r0
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d022      	beq.n	8008b28 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aea:	e853 3f00 	ldrex	r3, [r3]
 8008aee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008af0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008af6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	461a      	mov	r2, r3
 8008afe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008b00:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b02:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b04:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008b08:	e841 2300 	strex	r3, r2, [r1]
 8008b0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008b0e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d1e6      	bne.n	8008ae2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	2220      	movs	r2, #32
 8008b18:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e063      	b.n	8008bf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 0304 	and.w	r3, r3, #4
 8008b32:	2b04      	cmp	r3, #4
 8008b34:	d149      	bne.n	8008bca <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008b36:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008b3a:	9300      	str	r3, [sp, #0]
 8008b3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008b3e:	2200      	movs	r2, #0
 8008b40:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008b44:	6878      	ldr	r0, [r7, #4]
 8008b46:	f000 f857 	bl	8008bf8 <UART_WaitOnFlagUntilTimeout>
 8008b4a:	4603      	mov	r3, r0
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d03c      	beq.n	8008bca <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b58:	e853 3f00 	ldrex	r3, [r3]
 8008b5c:	623b      	str	r3, [r7, #32]
   return(result);
 8008b5e:	6a3b      	ldr	r3, [r7, #32]
 8008b60:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	461a      	mov	r2, r3
 8008b6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b6e:	633b      	str	r3, [r7, #48]	@ 0x30
 8008b70:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b72:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008b76:	e841 2300 	strex	r3, r2, [r1]
 8008b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d1e6      	bne.n	8008b50 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	3308      	adds	r3, #8
 8008b88:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b8a:	693b      	ldr	r3, [r7, #16]
 8008b8c:	e853 3f00 	ldrex	r3, [r3]
 8008b90:	60fb      	str	r3, [r7, #12]
   return(result);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	f023 0301 	bic.w	r3, r3, #1
 8008b98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ba2:	61fa      	str	r2, [r7, #28]
 8008ba4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	69b9      	ldr	r1, [r7, #24]
 8008ba8:	69fa      	ldr	r2, [r7, #28]
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	617b      	str	r3, [r7, #20]
   return(result);
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e5      	bne.n	8008b82 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	2220      	movs	r2, #32
 8008bba:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bc6:	2303      	movs	r3, #3
 8008bc8:	e012      	b.n	8008bf0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2220      	movs	r2, #32
 8008bd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2200      	movs	r2, #0
 8008be4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3758      	adds	r7, #88	@ 0x58
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b084      	sub	sp, #16
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	60f8      	str	r0, [r7, #12]
 8008c00:	60b9      	str	r1, [r7, #8]
 8008c02:	603b      	str	r3, [r7, #0]
 8008c04:	4613      	mov	r3, r2
 8008c06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c08:	e04f      	b.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c0a:	69bb      	ldr	r3, [r7, #24]
 8008c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c10:	d04b      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c12:	f7f8 fba3 	bl	800135c <HAL_GetTick>
 8008c16:	4602      	mov	r2, r0
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	1ad3      	subs	r3, r2, r3
 8008c1c:	69ba      	ldr	r2, [r7, #24]
 8008c1e:	429a      	cmp	r2, r3
 8008c20:	d302      	bcc.n	8008c28 <UART_WaitOnFlagUntilTimeout+0x30>
 8008c22:	69bb      	ldr	r3, [r7, #24]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d101      	bne.n	8008c2c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008c28:	2303      	movs	r3, #3
 8008c2a:	e04e      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f003 0304 	and.w	r3, r3, #4
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d037      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	2b80      	cmp	r3, #128	@ 0x80
 8008c3e:	d034      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	2b40      	cmp	r3, #64	@ 0x40
 8008c44:	d031      	beq.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f003 0308 	and.w	r3, r3, #8
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d110      	bne.n	8008c76 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2208      	movs	r2, #8
 8008c5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c5c:	68f8      	ldr	r0, [r7, #12]
 8008c5e:	f000 f921 	bl	8008ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2208      	movs	r2, #8
 8008c66:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008c72:	2301      	movs	r3, #1
 8008c74:	e029      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	69db      	ldr	r3, [r3, #28]
 8008c7c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008c80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008c84:	d111      	bne.n	8008caa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008c8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008c90:	68f8      	ldr	r0, [r7, #12]
 8008c92:	f000 f907 	bl	8008ea4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2220      	movs	r2, #32
 8008c9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e00f      	b.n	8008cca <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	69da      	ldr	r2, [r3, #28]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	68ba      	ldr	r2, [r7, #8]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	bf0c      	ite	eq
 8008cba:	2301      	moveq	r3, #1
 8008cbc:	2300      	movne	r3, #0
 8008cbe:	b2db      	uxtb	r3, r3
 8008cc0:	461a      	mov	r2, r3
 8008cc2:	79fb      	ldrb	r3, [r7, #7]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d0a0      	beq.n	8008c0a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
	...

08008cd4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008cd4:	b580      	push	{r7, lr}
 8008cd6:	b096      	sub	sp, #88	@ 0x58
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	60f8      	str	r0, [r7, #12]
 8008cdc:	60b9      	str	r1, [r7, #8]
 8008cde:	4613      	mov	r3, r2
 8008ce0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	68ba      	ldr	r2, [r7, #8]
 8008ce6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	88fa      	ldrh	r2, [r7, #6]
 8008cec:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	2222      	movs	r2, #34	@ 0x22
 8008cfc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d02d      	beq.n	8008d66 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d10:	4a40      	ldr	r2, [pc, #256]	@ (8008e14 <UART_Start_Receive_DMA+0x140>)
 8008d12:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d1a:	4a3f      	ldr	r2, [pc, #252]	@ (8008e18 <UART_Start_Receive_DMA+0x144>)
 8008d1c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d24:	4a3d      	ldr	r2, [pc, #244]	@ (8008e1c <UART_Start_Receive_DMA+0x148>)
 8008d26:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008d2e:	2200      	movs	r2, #0
 8008d30:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3324      	adds	r3, #36	@ 0x24
 8008d3e:	4619      	mov	r1, r3
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d44:	461a      	mov	r2, r3
 8008d46:	88fb      	ldrh	r3, [r7, #6]
 8008d48:	f7f8 fff4 	bl	8001d34 <HAL_DMA_Start_IT>
 8008d4c:	4603      	mov	r3, r0
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d009      	beq.n	8008d66 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	2210      	movs	r2, #16
 8008d56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008d62:	2301      	movs	r3, #1
 8008d64:	e051      	b.n	8008e0a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	691b      	ldr	r3, [r3, #16]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d018      	beq.n	8008da0 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d76:	e853 3f00 	ldrex	r3, [r3]
 8008d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008d7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008d82:	657b      	str	r3, [r7, #84]	@ 0x54
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	461a      	mov	r2, r3
 8008d8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008d8c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d8e:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d90:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008d92:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d94:	e841 2300 	strex	r3, r2, [r1]
 8008d98:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008d9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1e6      	bne.n	8008d6e <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	3308      	adds	r3, #8
 8008da6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008daa:	e853 3f00 	ldrex	r3, [r3]
 8008dae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008db2:	f043 0301 	orr.w	r3, r3, #1
 8008db6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	3308      	adds	r3, #8
 8008dbe:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008dc0:	637a      	str	r2, [r7, #52]	@ 0x34
 8008dc2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008dc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008dce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e5      	bne.n	8008da0 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	3308      	adds	r3, #8
 8008dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ddc:	697b      	ldr	r3, [r7, #20]
 8008dde:	e853 3f00 	ldrex	r3, [r3]
 8008de2:	613b      	str	r3, [r7, #16]
   return(result);
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3308      	adds	r3, #8
 8008df2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008df4:	623a      	str	r2, [r7, #32]
 8008df6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df8:	69f9      	ldr	r1, [r7, #28]
 8008dfa:	6a3a      	ldr	r2, [r7, #32]
 8008dfc:	e841 2300 	strex	r3, r2, [r1]
 8008e00:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d1e5      	bne.n	8008dd4 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008e08:	2300      	movs	r3, #0
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3758      	adds	r7, #88	@ 0x58
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	08008f71 	.word	0x08008f71
 8008e18:	08009099 	.word	0x08009099
 8008e1c:	080090d7 	.word	0x080090d7

08008e20 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008e20:	b480      	push	{r7}
 8008e22:	b08f      	sub	sp, #60	@ 0x3c
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2e:	6a3b      	ldr	r3, [r7, #32]
 8008e30:	e853 3f00 	ldrex	r3, [r3]
 8008e34:	61fb      	str	r3, [r7, #28]
   return(result);
 8008e36:	69fb      	ldr	r3, [r7, #28]
 8008e38:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	461a      	mov	r2, r3
 8008e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008e46:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008e48:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008e4c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008e4e:	e841 2300 	strex	r3, r2, [r1]
 8008e52:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d1e6      	bne.n	8008e28 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	3308      	adds	r3, #8
 8008e60:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	e853 3f00 	ldrex	r3, [r3]
 8008e68:	60bb      	str	r3, [r7, #8]
   return(result);
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008e70:	633b      	str	r3, [r7, #48]	@ 0x30
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	3308      	adds	r3, #8
 8008e78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e7a:	61ba      	str	r2, [r7, #24]
 8008e7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e7e:	6979      	ldr	r1, [r7, #20]
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	e841 2300 	strex	r3, r2, [r1]
 8008e86:	613b      	str	r3, [r7, #16]
   return(result);
 8008e88:	693b      	ldr	r3, [r7, #16]
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d1e5      	bne.n	8008e5a <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	2220      	movs	r2, #32
 8008e92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8008e96:	bf00      	nop
 8008e98:	373c      	adds	r7, #60	@ 0x3c
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea0:	4770      	bx	lr
	...

08008ea4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b095      	sub	sp, #84	@ 0x54
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008eb4:	e853 3f00 	ldrex	r3, [r3]
 8008eb8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ec0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	461a      	mov	r2, r3
 8008ec8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008eca:	643b      	str	r3, [r7, #64]	@ 0x40
 8008ecc:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ece:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008ed0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008ed2:	e841 2300 	strex	r3, r2, [r1]
 8008ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1e6      	bne.n	8008eac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	3308      	adds	r3, #8
 8008ee4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee6:	6a3b      	ldr	r3, [r7, #32]
 8008ee8:	e853 3f00 	ldrex	r3, [r3]
 8008eec:	61fb      	str	r3, [r7, #28]
   return(result);
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	4b1e      	ldr	r3, [pc, #120]	@ (8008f6c <UART_EndRxTransfer+0xc8>)
 8008ef2:	4013      	ands	r3, r2
 8008ef4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	3308      	adds	r3, #8
 8008efc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008efe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008f00:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f02:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f06:	e841 2300 	strex	r3, r2, [r1]
 8008f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d1e5      	bne.n	8008ede <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d118      	bne.n	8008f4c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	e853 3f00 	ldrex	r3, [r3]
 8008f26:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f28:	68bb      	ldr	r3, [r7, #8]
 8008f2a:	f023 0310 	bic.w	r3, r3, #16
 8008f2e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	461a      	mov	r2, r3
 8008f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008f38:	61bb      	str	r3, [r7, #24]
 8008f3a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f3c:	6979      	ldr	r1, [r7, #20]
 8008f3e:	69ba      	ldr	r2, [r7, #24]
 8008f40:	e841 2300 	strex	r3, r2, [r1]
 8008f44:	613b      	str	r3, [r7, #16]
   return(result);
 8008f46:	693b      	ldr	r3, [r7, #16]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d1e6      	bne.n	8008f1a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	2220      	movs	r2, #32
 8008f50:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008f60:	bf00      	nop
 8008f62:	3754      	adds	r7, #84	@ 0x54
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr
 8008f6c:	effffffe 	.word	0xeffffffe

08008f70 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008f70:	b580      	push	{r7, lr}
 8008f72:	b09c      	sub	sp, #112	@ 0x70
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f7c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	69db      	ldr	r3, [r3, #28]
 8008f82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f86:	d071      	beq.n	800906c <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8008f88:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f8a:	2200      	movs	r2, #0
 8008f8c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008f98:	e853 3f00 	ldrex	r3, [r3]
 8008f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008fa6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	461a      	mov	r2, r3
 8008fac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008fae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008fb0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fb2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008fb4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008fb6:	e841 2300 	strex	r3, r2, [r1]
 8008fba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008fbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1e6      	bne.n	8008f90 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008fd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd4:	f023 0301 	bic.w	r3, r3, #1
 8008fd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008fda:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	3308      	adds	r3, #8
 8008fe0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008fe2:	647a      	str	r2, [r7, #68]	@ 0x44
 8008fe4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fe6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008fe8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008fea:	e841 2300 	strex	r3, r2, [r1]
 8008fee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008ff0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d1e5      	bne.n	8008fc2 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ff6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	3308      	adds	r3, #8
 8008ffc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009000:	e853 3f00 	ldrex	r3, [r3]
 8009004:	623b      	str	r3, [r7, #32]
   return(result);
 8009006:	6a3b      	ldr	r3, [r7, #32]
 8009008:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800900c:	663b      	str	r3, [r7, #96]	@ 0x60
 800900e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3308      	adds	r3, #8
 8009014:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009016:	633a      	str	r2, [r7, #48]	@ 0x30
 8009018:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800901a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800901c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800901e:	e841 2300 	strex	r3, r2, [r1]
 8009022:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009024:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009026:	2b00      	cmp	r3, #0
 8009028:	d1e5      	bne.n	8008ff6 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800902a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800902c:	2220      	movs	r2, #32
 800902e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009032:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009036:	2b01      	cmp	r3, #1
 8009038:	d118      	bne.n	800906c <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800903a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009040:	693b      	ldr	r3, [r7, #16]
 8009042:	e853 3f00 	ldrex	r3, [r3]
 8009046:	60fb      	str	r3, [r7, #12]
   return(result);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	f023 0310 	bic.w	r3, r3, #16
 800904e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009050:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	461a      	mov	r2, r3
 8009056:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009058:	61fb      	str	r3, [r7, #28]
 800905a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	69b9      	ldr	r1, [r7, #24]
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	617b      	str	r3, [r7, #20]
   return(result);
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e6      	bne.n	800903a <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800906c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800906e:	2200      	movs	r2, #0
 8009070:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009072:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009074:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009076:	2b01      	cmp	r3, #1
 8009078:	d107      	bne.n	800908a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800907a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800907c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009080:	4619      	mov	r1, r3
 8009082:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009084:	f7fe fdf4 	bl	8007c70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009088:	e002      	b.n	8009090 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800908a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800908c:	f7f7 fd48 	bl	8000b20 <HAL_UART_RxCpltCallback>
}
 8009090:	bf00      	nop
 8009092:	3770      	adds	r7, #112	@ 0x70
 8009094:	46bd      	mov	sp, r7
 8009096:	bd80      	pop	{r7, pc}

08009098 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009098:	b580      	push	{r7, lr}
 800909a:	b084      	sub	sp, #16
 800909c:	af00      	add	r7, sp, #0
 800909e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090a4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2201      	movs	r2, #1
 80090aa:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090b0:	2b01      	cmp	r3, #1
 80090b2:	d109      	bne.n	80090c8 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80090ba:	085b      	lsrs	r3, r3, #1
 80090bc:	b29b      	uxth	r3, r3
 80090be:	4619      	mov	r1, r3
 80090c0:	68f8      	ldr	r0, [r7, #12]
 80090c2:	f7fe fdd5 	bl	8007c70 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80090c6:	e002      	b.n	80090ce <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80090c8:	68f8      	ldr	r0, [r7, #12]
 80090ca:	f7f7 fff7 	bl	80010bc <HAL_UART_RxHalfCpltCallback>
}
 80090ce:	bf00      	nop
 80090d0:	3710      	adds	r7, #16
 80090d2:	46bd      	mov	sp, r7
 80090d4:	bd80      	pop	{r7, pc}

080090d6 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80090d6:	b580      	push	{r7, lr}
 80090d8:	b086      	sub	sp, #24
 80090da:	af00      	add	r7, sp, #0
 80090dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090e2:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80090ea:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80090f2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80090f4:	697b      	ldr	r3, [r7, #20]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80090fe:	2b80      	cmp	r3, #128	@ 0x80
 8009100:	d109      	bne.n	8009116 <UART_DMAError+0x40>
 8009102:	693b      	ldr	r3, [r7, #16]
 8009104:	2b21      	cmp	r3, #33	@ 0x21
 8009106:	d106      	bne.n	8009116 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009108:	697b      	ldr	r3, [r7, #20]
 800910a:	2200      	movs	r2, #0
 800910c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8009110:	6978      	ldr	r0, [r7, #20]
 8009112:	f7ff fe85 	bl	8008e20 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009116:	697b      	ldr	r3, [r7, #20]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009120:	2b40      	cmp	r3, #64	@ 0x40
 8009122:	d109      	bne.n	8009138 <UART_DMAError+0x62>
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2b22      	cmp	r3, #34	@ 0x22
 8009128:	d106      	bne.n	8009138 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800912a:	697b      	ldr	r3, [r7, #20]
 800912c:	2200      	movs	r2, #0
 800912e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009132:	6978      	ldr	r0, [r7, #20]
 8009134:	f7ff feb6 	bl	8008ea4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009138:	697b      	ldr	r3, [r7, #20]
 800913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800913e:	f043 0210 	orr.w	r2, r3, #16
 8009142:	697b      	ldr	r3, [r7, #20]
 8009144:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009148:	6978      	ldr	r0, [r7, #20]
 800914a:	f7fe fd87 	bl	8007c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800914e:	bf00      	nop
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}

08009156 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009156:	b580      	push	{r7, lr}
 8009158:	b084      	sub	sp, #16
 800915a:	af00      	add	r7, sp, #0
 800915c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009162:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2200      	movs	r2, #0
 8009170:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f7fe fd71 	bl	8007c5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800917a:	bf00      	nop
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b088      	sub	sp, #32
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	e853 3f00 	ldrex	r3, [r3]
 8009196:	60bb      	str	r3, [r7, #8]
   return(result);
 8009198:	68bb      	ldr	r3, [r7, #8]
 800919a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800919e:	61fb      	str	r3, [r7, #28]
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	461a      	mov	r2, r3
 80091a6:	69fb      	ldr	r3, [r7, #28]
 80091a8:	61bb      	str	r3, [r7, #24]
 80091aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ac:	6979      	ldr	r1, [r7, #20]
 80091ae:	69ba      	ldr	r2, [r7, #24]
 80091b0:	e841 2300 	strex	r3, r2, [r1]
 80091b4:	613b      	str	r3, [r7, #16]
   return(result);
 80091b6:	693b      	ldr	r3, [r7, #16]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d1e6      	bne.n	800918a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2220      	movs	r2, #32
 80091c0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2200      	movs	r2, #0
 80091c8:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f7fe fd3c 	bl	8007c48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091d0:	bf00      	nop
 80091d2:	3720      	adds	r7, #32
 80091d4:	46bd      	mov	sp, r7
 80091d6:	bd80      	pop	{r7, pc}

080091d8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80091d8:	b480      	push	{r7}
 80091da:	b083      	sub	sp, #12
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80091f4:	bf00      	nop
 80091f6:	370c      	adds	r7, #12
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009200:	b480      	push	{r7}
 8009202:	b083      	sub	sp, #12
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009214:	b480      	push	{r7}
 8009216:	b085      	sub	sp, #20
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009222:	2b01      	cmp	r3, #1
 8009224:	d101      	bne.n	800922a <HAL_UARTEx_DisableFifoMode+0x16>
 8009226:	2302      	movs	r3, #2
 8009228:	e027      	b.n	800927a <HAL_UARTEx_DisableFifoMode+0x66>
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2201      	movs	r2, #1
 800922e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2224      	movs	r2, #36	@ 0x24
 8009236:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	681a      	ldr	r2, [r3, #0]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0201 	bic.w	r2, r2, #1
 8009250:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009258:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2200      	movs	r2, #0
 800925e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68fa      	ldr	r2, [r7, #12]
 8009266:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009278:	2300      	movs	r3, #0
}
 800927a:	4618      	mov	r0, r3
 800927c:	3714      	adds	r7, #20
 800927e:	46bd      	mov	sp, r7
 8009280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009284:	4770      	bx	lr

08009286 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009286:	b580      	push	{r7, lr}
 8009288:	b084      	sub	sp, #16
 800928a:	af00      	add	r7, sp, #0
 800928c:	6078      	str	r0, [r7, #4]
 800928e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009296:	2b01      	cmp	r3, #1
 8009298:	d101      	bne.n	800929e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800929a:	2302      	movs	r3, #2
 800929c:	e02d      	b.n	80092fa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	2201      	movs	r2, #1
 80092a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2224      	movs	r2, #36	@ 0x24
 80092aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	681a      	ldr	r2, [r3, #0]
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	681b      	ldr	r3, [r3, #0]
 80092c0:	f022 0201 	bic.w	r2, r2, #1
 80092c4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	689b      	ldr	r3, [r3, #8]
 80092cc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	683a      	ldr	r2, [r7, #0]
 80092d6:	430a      	orrs	r2, r1
 80092d8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80092da:	6878      	ldr	r0, [r7, #4]
 80092dc:	f000 f850 	bl	8009380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	68fa      	ldr	r2, [r7, #12]
 80092e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2220      	movs	r2, #32
 80092ec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80092f8:	2300      	movs	r3, #0
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3710      	adds	r7, #16
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}

08009302 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009302:	b580      	push	{r7, lr}
 8009304:	b084      	sub	sp, #16
 8009306:	af00      	add	r7, sp, #0
 8009308:	6078      	str	r0, [r7, #4]
 800930a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009312:	2b01      	cmp	r3, #1
 8009314:	d101      	bne.n	800931a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009316:	2302      	movs	r3, #2
 8009318:	e02d      	b.n	8009376 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	2201      	movs	r2, #1
 800931e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2224      	movs	r2, #36	@ 0x24
 8009326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	f022 0201 	bic.w	r2, r2, #1
 8009340:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	689b      	ldr	r3, [r3, #8]
 8009348:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	683a      	ldr	r2, [r7, #0]
 8009352:	430a      	orrs	r2, r1
 8009354:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f812 	bl	8009380 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	68fa      	ldr	r2, [r7, #12]
 8009362:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2220      	movs	r2, #32
 8009368:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3710      	adds	r7, #16
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
	...

08009380 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009380:	b480      	push	{r7}
 8009382:	b085      	sub	sp, #20
 8009384:	af00      	add	r7, sp, #0
 8009386:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800938c:	2b00      	cmp	r3, #0
 800938e:	d108      	bne.n	80093a2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80093a0:	e031      	b.n	8009406 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80093a2:	2310      	movs	r3, #16
 80093a4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80093a6:	2310      	movs	r3, #16
 80093a8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	689b      	ldr	r3, [r3, #8]
 80093b0:	0e5b      	lsrs	r3, r3, #25
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	f003 0307 	and.w	r3, r3, #7
 80093b8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	689b      	ldr	r3, [r3, #8]
 80093c0:	0f5b      	lsrs	r3, r3, #29
 80093c2:	b2db      	uxtb	r3, r3
 80093c4:	f003 0307 	and.w	r3, r3, #7
 80093c8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093ca:	7bbb      	ldrb	r3, [r7, #14]
 80093cc:	7b3a      	ldrb	r2, [r7, #12]
 80093ce:	4911      	ldr	r1, [pc, #68]	@ (8009414 <UARTEx_SetNbDataToProcess+0x94>)
 80093d0:	5c8a      	ldrb	r2, [r1, r2]
 80093d2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80093d6:	7b3a      	ldrb	r2, [r7, #12]
 80093d8:	490f      	ldr	r1, [pc, #60]	@ (8009418 <UARTEx_SetNbDataToProcess+0x98>)
 80093da:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80093dc:	fb93 f3f2 	sdiv	r3, r3, r2
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093e8:	7bfb      	ldrb	r3, [r7, #15]
 80093ea:	7b7a      	ldrb	r2, [r7, #13]
 80093ec:	4909      	ldr	r1, [pc, #36]	@ (8009414 <UARTEx_SetNbDataToProcess+0x94>)
 80093ee:	5c8a      	ldrb	r2, [r1, r2]
 80093f0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80093f4:	7b7a      	ldrb	r2, [r7, #13]
 80093f6:	4908      	ldr	r1, [pc, #32]	@ (8009418 <UARTEx_SetNbDataToProcess+0x98>)
 80093f8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80093fa:	fb93 f3f2 	sdiv	r3, r3, r2
 80093fe:	b29a      	uxth	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009406:	bf00      	nop
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	080094d8 	.word	0x080094d8
 8009418:	080094e0 	.word	0x080094e0

0800941c <memset>:
 800941c:	4402      	add	r2, r0
 800941e:	4603      	mov	r3, r0
 8009420:	4293      	cmp	r3, r2
 8009422:	d100      	bne.n	8009426 <memset+0xa>
 8009424:	4770      	bx	lr
 8009426:	f803 1b01 	strb.w	r1, [r3], #1
 800942a:	e7f9      	b.n	8009420 <memset+0x4>

0800942c <__libc_init_array>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	4d0d      	ldr	r5, [pc, #52]	@ (8009464 <__libc_init_array+0x38>)
 8009430:	4c0d      	ldr	r4, [pc, #52]	@ (8009468 <__libc_init_array+0x3c>)
 8009432:	1b64      	subs	r4, r4, r5
 8009434:	10a4      	asrs	r4, r4, #2
 8009436:	2600      	movs	r6, #0
 8009438:	42a6      	cmp	r6, r4
 800943a:	d109      	bne.n	8009450 <__libc_init_array+0x24>
 800943c:	4d0b      	ldr	r5, [pc, #44]	@ (800946c <__libc_init_array+0x40>)
 800943e:	4c0c      	ldr	r4, [pc, #48]	@ (8009470 <__libc_init_array+0x44>)
 8009440:	f000 f826 	bl	8009490 <_init>
 8009444:	1b64      	subs	r4, r4, r5
 8009446:	10a4      	asrs	r4, r4, #2
 8009448:	2600      	movs	r6, #0
 800944a:	42a6      	cmp	r6, r4
 800944c:	d105      	bne.n	800945a <__libc_init_array+0x2e>
 800944e:	bd70      	pop	{r4, r5, r6, pc}
 8009450:	f855 3b04 	ldr.w	r3, [r5], #4
 8009454:	4798      	blx	r3
 8009456:	3601      	adds	r6, #1
 8009458:	e7ee      	b.n	8009438 <__libc_init_array+0xc>
 800945a:	f855 3b04 	ldr.w	r3, [r5], #4
 800945e:	4798      	blx	r3
 8009460:	3601      	adds	r6, #1
 8009462:	e7f2      	b.n	800944a <__libc_init_array+0x1e>
 8009464:	080094f0 	.word	0x080094f0
 8009468:	080094f0 	.word	0x080094f0
 800946c:	080094f0 	.word	0x080094f0
 8009470:	080094f4 	.word	0x080094f4

08009474 <memcpy>:
 8009474:	440a      	add	r2, r1
 8009476:	4291      	cmp	r1, r2
 8009478:	f100 33ff 	add.w	r3, r0, #4294967295
 800947c:	d100      	bne.n	8009480 <memcpy+0xc>
 800947e:	4770      	bx	lr
 8009480:	b510      	push	{r4, lr}
 8009482:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009486:	f803 4f01 	strb.w	r4, [r3, #1]!
 800948a:	4291      	cmp	r1, r2
 800948c:	d1f9      	bne.n	8009482 <memcpy+0xe>
 800948e:	bd10      	pop	{r4, pc}

08009490 <_init>:
 8009490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009492:	bf00      	nop
 8009494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009496:	bc08      	pop	{r3}
 8009498:	469e      	mov	lr, r3
 800949a:	4770      	bx	lr

0800949c <_fini>:
 800949c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800949e:	bf00      	nop
 80094a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80094a2:	bc08      	pop	{r3}
 80094a4:	469e      	mov	lr, r3
 80094a6:	4770      	bx	lr
