
GNSS_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009418  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080096e4  080096e4  0000a6e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08009724  08009724  0000a724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800972c  0800972c  0000a72c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08009730  08009730  0000a730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08009734  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000b34  24000010  08009744  0000b010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  24000b44  08009744  0000bb44  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0000b010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001269a  00000000  00000000  0000b03e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000025f6  00000000  00000000  0001d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000be8  00000000  00000000  0001fcd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 0000091e  00000000  00000000  000208b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00031984  00000000  00000000  000211d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000123c3  00000000  00000000  00052b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fb88  00000000  00000000  00064f1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a4aa5  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000305c  00000000  00000000  001a4ae8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001a7b44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	080096cc 	.word	0x080096cc

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	080096cc 	.word	0x080096cc

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <GNSS_Tanimla>:
#include "SysTick_Timer.h"
U_Blox_frame_high_layer U_Blox_frame_tx;
U_Blox_frame_high_layer U_Blox_frame_rx;
int b = 0;
static uint32_t zaman;
void GNSS_Tanimla(GNSS *GNSS_t) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	U_Blox_Init();
 8000604:	f000 f95e 	bl	80008c4 <U_Blox_Init>
	for (int i = 0; i < 26; i++) {
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e008      	b.n	8000620 <GNSS_Tanimla+0x24>
		U_Blox_frame_tx.payload.data[i] = 0;
 800060e:	4a2c      	ldr	r2, [pc, #176]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	3304      	adds	r3, #4
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b19      	cmp	r3, #25
 8000624:	ddf3      	ble.n	800060e <GNSS_Tanimla+0x12>
	}
	U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 8000626:	4b26      	ldr	r3, [pc, #152]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000628:	2206      	movs	r2, #6
 800062a:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 800062c:	4b24      	ldr	r3, [pc, #144]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800062e:	2200      	movs	r2, #0
 8000630:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000632:	4a23      	ldr	r2, [pc, #140]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000634:	7d13      	ldrb	r3, [r2, #20]
 8000636:	f36f 0341 	bfc	r3, #1, #1
 800063a:	7513      	strb	r3, [r2, #20]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 800063c:	4a20      	ldr	r2, [pc, #128]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800063e:	7a13      	ldrb	r3, [r2, #8]
 8000640:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000644:	7213      	strb	r3, [r2, #8]
			3;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 8000646:	4a1e      	ldr	r2, [pc, #120]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000648:	7a13      	ldrb	r3, [r2, #8]
 800064a:	2110      	movs	r1, #16
 800064c:	f361 0305 	bfi	r3, r1, #0, #6
 8000650:	7213      	strb	r3, [r2, #8]
			16;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000652:	4a1b      	ldr	r2, [pc, #108]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000654:	7a53      	ldrb	r3, [r2, #9]
 8000656:	f36f 1305 	bfc	r3, #4, #2
 800065a:	7253      	strb	r3, [r2, #9]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 800065c:	4a18      	ldr	r2, [pc, #96]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800065e:	7a53      	ldrb	r3, [r2, #9]
 8000660:	2104      	movs	r1, #4
 8000662:	f361 0343 	bfi	r3, r1, #1, #3
 8000666:	7253      	strb	r3, [r2, #9]
			4;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 8000668:	4b15      	ldr	r3, [pc, #84]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800066a:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800066e:	60da      	str	r2, [r3, #12]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 8000670:	4b13      	ldr	r3, [pc, #76]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000672:	2200      	movs	r2, #0
 8000674:	80da      	strh	r2, [r3, #6]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 8000676:	4a12      	ldr	r2, [pc, #72]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000678:	7c13      	ldrb	r3, [r2, #16]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	7413      	strb	r3, [r2, #16]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 8000680:	4a0f      	ldr	r2, [pc, #60]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000682:	7c93      	ldrb	r3, [r2, #18]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	7493      	strb	r3, [r2, #18]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 800068a:	4b0d      	ldr	r3, [pc, #52]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 800068c:	2201      	movs	r2, #1
 800068e:	711a      	strb	r2, [r3, #4]
	U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 8000690:	4b0b      	ldr	r3, [pc, #44]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000692:	2214      	movs	r2, #20
 8000694:	805a      	strh	r2, [r3, #2]
	U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000696:	480a      	ldr	r0, [pc, #40]	@ (80006c0 <GNSS_Tanimla+0xc4>)
 8000698:	f000 f9a4 	bl	80009e4 <U_Blox_Set_Frame>
	U_Blox_Send_Frame();
 800069c:	f000 f9e0 	bl	8000a60 <U_Blox_Send_Frame>
	//while(!U_Blox_Is_Packet_Ready());

	GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	2201      	movs	r2, #1
 80006a4:	741a      	strb	r2, [r3, #16]
	GNSS_t->onceki_durum = SM_GNSS_IDLE;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	2200      	movs	r2, #0
 80006aa:	745a      	strb	r2, [r3, #17]
	zaman = SystickGetMs();
 80006ac:	f000 fdf8 	bl	80012a0 <SystickGetMs>
 80006b0:	4603      	mov	r3, r0
 80006b2:	4a04      	ldr	r2, [pc, #16]	@ (80006c4 <GNSS_Tanimla+0xc8>)
 80006b4:	6013      	str	r3, [r2, #0]
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	2400002c 	.word	0x2400002c
 80006c4:	2400041c 	.word	0x2400041c

080006c8 <GNSS_Gorev>:
	} else {
		return 0;
	}
}

void GNSS_Gorev(GNSS *GNSS_t) {
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
	U_Blox_Task();
 80006d0:	f000 f910 	bl	80008f4 <U_Blox_Task>
	switch (GNSS_t->SM) {
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	7c1b      	ldrb	r3, [r3, #16]
 80006d8:	2b03      	cmp	r3, #3
 80006da:	f200 80e9 	bhi.w	80008b0 <GNSS_Gorev+0x1e8>
 80006de:	a201      	add	r2, pc, #4	@ (adr r2, 80006e4 <GNSS_Gorev+0x1c>)
 80006e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006e4:	080006f5 	.word	0x080006f5
 80006e8:	080007a3 	.word	0x080007a3
 80006ec:	08000787 	.word	0x08000787
 80006f0:	0800087b 	.word	0x0800087b
	case SM_GNSS_IDLE:
		U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 80006f4:	4b70      	ldr	r3, [pc, #448]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 80006f6:	2206      	movs	r2, #6
 80006f8:	701a      	strb	r2, [r3, #0]
		U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 80006fa:	4b6f      	ldr	r3, [pc, #444]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	705a      	strb	r2, [r3, #1]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000700:	4a6d      	ldr	r2, [pc, #436]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000702:	7d13      	ldrb	r3, [r2, #20]
 8000704:	f36f 0341 	bfc	r3, #1, #1
 8000708:	7513      	strb	r3, [r2, #20]
				0;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 800070a:	4a6b      	ldr	r2, [pc, #428]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 800070c:	7a13      	ldrb	r3, [r2, #8]
 800070e:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000712:	7213      	strb	r3, [r2, #8]
				3;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 8000714:	4a68      	ldr	r2, [pc, #416]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000716:	7a13      	ldrb	r3, [r2, #8]
 8000718:	2110      	movs	r1, #16
 800071a:	f361 0305 	bfi	r3, r1, #0, #6
 800071e:	7213      	strb	r3, [r2, #8]
				16;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000720:	4a65      	ldr	r2, [pc, #404]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000722:	7a53      	ldrb	r3, [r2, #9]
 8000724:	f36f 1305 	bfc	r3, #4, #2
 8000728:	7253      	strb	r3, [r2, #9]
				0;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 800072a:	4a63      	ldr	r2, [pc, #396]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 800072c:	7a53      	ldrb	r3, [r2, #9]
 800072e:	2104      	movs	r1, #4
 8000730:	f361 0343 	bfi	r3, r1, #1, #3
 8000734:	7253      	strb	r3, [r2, #9]
				4;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 8000736:	4b60      	ldr	r3, [pc, #384]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000738:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800073c:	60da      	str	r2, [r3, #12]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 800073e:	4b5e      	ldr	r3, [pc, #376]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000740:	2200      	movs	r2, #0
 8000742:	80da      	strh	r2, [r3, #6]
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 8000744:	4a5c      	ldr	r2, [pc, #368]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000746:	7c13      	ldrb	r3, [r2, #16]
 8000748:	f043 0301 	orr.w	r3, r3, #1
 800074c:	7413      	strb	r3, [r2, #16]
				1;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 800074e:	4a5a      	ldr	r2, [pc, #360]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000750:	7c93      	ldrb	r3, [r2, #18]
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	7493      	strb	r3, [r2, #18]
				1;
		U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 8000758:	4b57      	ldr	r3, [pc, #348]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 800075a:	2201      	movs	r2, #1
 800075c:	711a      	strb	r2, [r3, #4]
		U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 800075e:	4b56      	ldr	r3, [pc, #344]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000760:	2214      	movs	r2, #20
 8000762:	805a      	strh	r2, [r3, #2]
		U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000764:	4854      	ldr	r0, [pc, #336]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000766:	f000 f93d 	bl	80009e4 <U_Blox_Set_Frame>
		U_Blox_Send_Frame();
 800076a:	f000 f979 	bl	8000a60 <U_Blox_Send_Frame>
		static uint32_t zamanlama;
		zamanlama = SystickGetMs();
 800076e:	f000 fd97 	bl	80012a0 <SystickGetMs>
 8000772:	4603      	mov	r3, r0
 8000774:	4a51      	ldr	r2, [pc, #324]	@ (80008bc <GNSS_Gorev+0x1f4>)
 8000776:	6013      	str	r3, [r2, #0]
		GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	2201      	movs	r2, #1
 800077c:	741a      	strb	r2, [r3, #16]
		GNSS_t->onceki_durum = SM_GNSS_IDLE;
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	2200      	movs	r2, #0
 8000782:	745a      	strb	r2, [r3, #17]
		break;
 8000784:	e094      	b.n	80008b0 <GNSS_Gorev+0x1e8>
	case SM_GNSS_NO_REPLY:

		GNSS_t->İstatistikler_t.veri_gelmedi++;
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	695b      	ldr	r3, [r3, #20]
 800078a:	1c5a      	adds	r2, r3, #1
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	615a      	str	r2, [r3, #20]
		GNSS_t->SM = SM_GNSS_IDLE;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	2200      	movs	r2, #0
 8000794:	741a      	strb	r2, [r3, #16]
		zamanlama = SystickGetMs();
 8000796:	f000 fd83 	bl	80012a0 <SystickGetMs>
 800079a:	4603      	mov	r3, r0
 800079c:	4a47      	ldr	r2, [pc, #284]	@ (80008bc <GNSS_Gorev+0x1f4>)
 800079e:	6013      	str	r3, [r2, #0]
		break;
 80007a0:	e086      	b.n	80008b0 <GNSS_Gorev+0x1e8>
	case SM_GNSS_WAIT_FOR_REPLY:

		if (GNSS_t->onceki_durum == SM_GNSS_IDLE) {
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	7c5b      	ldrb	r3, [r3, #17]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d121      	bne.n	80007ee <GNSS_Gorev+0x126>
			if (U_Blox_Is_Packet_Ready()) {
 80007aa:	f000 f9a5 	bl	8000af8 <U_Blox_Is_Packet_Ready>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d00e      	beq.n	80007d2 <GNSS_Gorev+0x10a>
				U_Blox_Get_Package(&U_Blox_frame_rx);
 80007b4:	4842      	ldr	r0, [pc, #264]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 80007b6:	f000 f9af 	bl	8000b18 <U_Blox_Get_Package>
				if ((U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_ACK)
 80007ba:	4b41      	ldr	r3, [pc, #260]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	2b05      	cmp	r3, #5
 80007c0:	d175      	bne.n	80008ae <GNSS_Gorev+0x1e6>
						&& (U_Blox_frame_rx.message_id == UBX_MESSAGE_ID_ACK)) {
 80007c2:	4b3f      	ldr	r3, [pc, #252]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 80007c4:	785b      	ldrb	r3, [r3, #1]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d171      	bne.n	80008ae <GNSS_Gorev+0x1e6>
					//Acknowledgement alındı.
					GNSS_t->SM = SM_GNSS_SEND;
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	2203      	movs	r2, #3
 80007ce:	741a      	strb	r2, [r3, #16]
				}
			} else if (SystickCheckMs(zamanlama, 1500)) {
				GNSS_t->SM = SM_GNSS_NO_REPLY;
			}
		}
		break;
 80007d0:	e06d      	b.n	80008ae <GNSS_Gorev+0x1e6>
			} else if (SystickCheckMs(zamanlama, 1500)) {
 80007d2:	4b3a      	ldr	r3, [pc, #232]	@ (80008bc <GNSS_Gorev+0x1f4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 80007da:	4618      	mov	r0, r3
 80007dc:	f000 fd6c 	bl	80012b8 <SystickCheckMs>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d063      	beq.n	80008ae <GNSS_Gorev+0x1e6>
				GNSS_t->SM = SM_GNSS_NO_REPLY;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2202      	movs	r2, #2
 80007ea:	741a      	strb	r2, [r3, #16]
		break;
 80007ec:	e05f      	b.n	80008ae <GNSS_Gorev+0x1e6>
		} else if (GNSS_t->onceki_durum == SM_GNSS_SEND) {
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	7c5b      	ldrb	r3, [r3, #17]
 80007f2:	2b03      	cmp	r3, #3
 80007f4:	d15b      	bne.n	80008ae <GNSS_Gorev+0x1e6>
			if (U_Blox_Is_Packet_Ready()) {
 80007f6:	f000 f97f 	bl	8000af8 <U_Blox_Is_Packet_Ready>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d02e      	beq.n	800085e <GNSS_Gorev+0x196>
				U_Blox_Get_Package(&U_Blox_frame_rx);
 8000800:	482f      	ldr	r0, [pc, #188]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000802:	f000 f989 	bl	8000b18 <U_Blox_Get_Package>
				if ((U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_NAV)
 8000806:	4b2e      	ldr	r3, [pc, #184]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b01      	cmp	r3, #1
 800080c:	d14f      	bne.n	80008ae <GNSS_Gorev+0x1e6>
						&& (U_Blox_frame_rx.message_id == UBX_MESSAGE_ID_PVT)) {
 800080e:	4b2c      	ldr	r3, [pc, #176]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000810:	785b      	ldrb	r3, [r3, #1]
 8000812:	2b07      	cmp	r3, #7
 8000814:	d14b      	bne.n	80008ae <GNSS_Gorev+0x1e6>
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.month;
 8000816:	4b2a      	ldr	r3, [pc, #168]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000818:	7a9a      	ldrb	r2, [r3, #10]
					GNSS_t->ay =
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	709a      	strb	r2, [r3, #2]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lon;
 800081e:	4b28      	ldr	r3, [pc, #160]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000820:	69da      	ldr	r2, [r3, #28]
					GNSS_t->boylam =
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	609a      	str	r2, [r3, #8]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lat;
 8000826:	4b26      	ldr	r3, [pc, #152]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000828:	6a1a      	ldr	r2, [r3, #32]
					GNSS_t->enlem =
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	60da      	str	r2, [r3, #12]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.day;
 800082e:	4b24      	ldr	r3, [pc, #144]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000830:	7ada      	ldrb	r2, [r3, #11]
					GNSS_t->gun =
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	70da      	strb	r2, [r3, #3]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.min;
 8000836:	4b22      	ldr	r3, [pc, #136]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000838:	7b5a      	ldrb	r2, [r3, #13]
					GNSS_t->dakika =
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	715a      	strb	r2, [r3, #5]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.year;
 800083e:	4b20      	ldr	r3, [pc, #128]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000840:	891a      	ldrh	r2, [r3, #8]
					GNSS_t->yil =
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	801a      	strh	r2, [r3, #0]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.sec;
 8000846:	4b1e      	ldr	r3, [pc, #120]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000848:	7b9a      	ldrb	r2, [r3, #14]
					GNSS_t->saniye =
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	719a      	strb	r2, [r3, #6]
							U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.hour;
 800084e:	4b1c      	ldr	r3, [pc, #112]	@ (80008c0 <GNSS_Gorev+0x1f8>)
 8000850:	7b1a      	ldrb	r2, [r3, #12]
					GNSS_t->saat =
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	711a      	strb	r2, [r3, #4]
					GNSS_t->SM = SM_GNSS_SEND;
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	2203      	movs	r2, #3
 800085a:	741a      	strb	r2, [r3, #16]
		break;
 800085c:	e027      	b.n	80008ae <GNSS_Gorev+0x1e6>
			} else if (SystickCheckMs(zamanlama, 1500)) {
 800085e:	4b17      	ldr	r3, [pc, #92]	@ (80008bc <GNSS_Gorev+0x1f4>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f240 51dc 	movw	r1, #1500	@ 0x5dc
 8000866:	4618      	mov	r0, r3
 8000868:	f000 fd26 	bl	80012b8 <SystickCheckMs>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d01d      	beq.n	80008ae <GNSS_Gorev+0x1e6>
				GNSS_t->SM = SM_GNSS_NO_REPLY;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2202      	movs	r2, #2
 8000876:	741a      	strb	r2, [r3, #16]
		break;
 8000878:	e019      	b.n	80008ae <GNSS_Gorev+0x1e6>
	case SM_GNSS_SEND:
		GNSS_t->onceki_durum = SM_GNSS_SEND;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2203      	movs	r2, #3
 800087e:	745a      	strb	r2, [r3, #17]
		U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_NAV;
 8000880:	4b0d      	ldr	r3, [pc, #52]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
		U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PVT;
 8000886:	4b0c      	ldr	r3, [pc, #48]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000888:	2207      	movs	r2, #7
 800088a:	705a      	strb	r2, [r3, #1]
		U_Blox_frame_tx.length = 0;
 800088c:	4b0a      	ldr	r3, [pc, #40]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 800088e:	2200      	movs	r2, #0
 8000890:	805a      	strh	r2, [r3, #2]
		U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000892:	4809      	ldr	r0, [pc, #36]	@ (80008b8 <GNSS_Gorev+0x1f0>)
 8000894:	f000 f8a6 	bl	80009e4 <U_Blox_Set_Frame>
		U_Blox_Send_Frame();
 8000898:	f000 f8e2 	bl	8000a60 <U_Blox_Send_Frame>
		GNSS_t->SM = SM_GNSS_WAIT_FOR_REPLY;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2201      	movs	r2, #1
 80008a0:	741a      	strb	r2, [r3, #16]
		zamanlama = SystickGetMs();
 80008a2:	f000 fcfd 	bl	80012a0 <SystickGetMs>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a04      	ldr	r2, [pc, #16]	@ (80008bc <GNSS_Gorev+0x1f4>)
 80008aa:	6013      	str	r3, [r2, #0]
		break;
 80008ac:	e000      	b.n	80008b0 <GNSS_Gorev+0x1e8>
		break;
 80008ae:	bf00      	nop
	}
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2400002c 	.word	0x2400002c
 80008bc:	24000420 	.word	0x24000420
 80008c0:	24000224 	.word	0x24000224

080008c4 <U_Blox_Init>:
	} Sm;
	uint8_t Buffer[500];
	uint16_t buffer_index;
} U_Blox_Tx;

void U_Blox_Init() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	U_Blox_Rx.Sm = SM_RX_IDLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	@ (80008e4 <U_Blox_Init+0x20>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	701a      	strb	r2, [r3, #0]
	U_Blox_Tx.Sm = SM_TX_IDLE;
 80008ce:	4b06      	ldr	r3, [pc, #24]	@ (80008e8 <U_Blox_Init+0x24>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 80008d4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80008d8:	4904      	ldr	r1, [pc, #16]	@ (80008ec <U_Blox_Init+0x28>)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <U_Blox_Init+0x2c>)
 80008dc:	f006 fdde 	bl	800749c <HAL_UART_Receive_DMA>
}
 80008e0:	bf00      	nop
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	24000620 	.word	0x24000620
 80008e8:	24000818 	.word	0x24000818
 80008ec:	24000621 	.word	0x24000621
 80008f0:	24000a10 	.word	0x24000a10

080008f4 <U_Blox_Task>:
void U_Blox_Task() {
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t;
	switch (U_Blox_Tx.Sm) {
 80008fa:	4b35      	ldr	r3, [pc, #212]	@ (80009d0 <U_Blox_Task+0xdc>)
 80008fc:	781b      	ldrb	r3, [r3, #0]
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d005      	beq.n	800090e <U_Blox_Task+0x1a>
 8000902:	2b02      	cmp	r3, #2
 8000904:	dc10      	bgt.n	8000928 <U_Blox_Task+0x34>
 8000906:	2b00      	cmp	r3, #0
 8000908:	d00d      	beq.n	8000926 <U_Blox_Task+0x32>
 800090a:	2b01      	cmp	r3, #1
	case SM_TX_IDLE:
		break;
	case SM_TX_PREPARE:
		break;
 800090c:	e00c      	b.n	8000928 <U_Blox_Task+0x34>
	case SM_TX_SEND:
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Tx.Buffer;
 800090e:	4b31      	ldr	r3, [pc, #196]	@ (80009d4 <U_Blox_Task+0xe0>)
 8000910:	607b      	str	r3, [r7, #4]
		HAL_UART_Transmit_DMA(&huart3,(uint8_t*)U_Blox_frame_low_layer_t,U_Blox_frame_low_layer_t->length+8);
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	889b      	ldrh	r3, [r3, #4]
 8000916:	3308      	adds	r3, #8
 8000918:	b29b      	uxth	r3, r3
 800091a:	461a      	mov	r2, r3
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	482e      	ldr	r0, [pc, #184]	@ (80009d8 <U_Blox_Task+0xe4>)
 8000920:	f006 fd3c 	bl	800739c <HAL_UART_Transmit_DMA>
		//	U_Blox_Send_Data(U_Blox_Tx.Buffer[U_Blox_Tx.buffer_index]);
		//}
		//if (U_Blox_Tx.buffer_index >= U_Blox_frame_low_layer_t->length + 8) {
		//	U_Blox_Tx.Sm = SM_TX_IDLE;
		//}
		break;
 8000924:	e000      	b.n	8000928 <U_Blox_Task+0x34>
		break;
 8000926:	bf00      	nop
	}
	switch (U_Blox_Rx.Sm) {
 8000928:	4b2c      	ldr	r3, [pc, #176]	@ (80009dc <U_Blox_Task+0xe8>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <U_Blox_Task+0x40>
 8000930:	2b01      	cmp	r3, #1
		//		}
		//	}
		//}
		break;
	case SM_RX_PROCESS:
		break;
 8000932:	e048      	b.n	80009c6 <U_Blox_Task+0xd2>
		U_Blox_Rx.buffer_index = GetRxBufferIndex();
 8000934:	f000 f94c 	bl	8000bd0 <GetRxBufferIndex>
 8000938:	4603      	mov	r3, r0
 800093a:	461a      	mov	r2, r3
 800093c:	4b27      	ldr	r3, [pc, #156]	@ (80009dc <U_Blox_Task+0xe8>)
 800093e:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) &U_Blox_Rx.Buffer;
 8000942:	4b27      	ldr	r3, [pc, #156]	@ (80009e0 <U_Blox_Task+0xec>)
 8000944:	607b      	str	r3, [r7, #4]
		if (U_Blox_Rx.buffer_index >= 2) {
 8000946:	4b25      	ldr	r3, [pc, #148]	@ (80009dc <U_Blox_Task+0xe8>)
 8000948:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 800094c:	2b01      	cmp	r3, #1
 800094e:	d939      	bls.n	80009c4 <U_Blox_Task+0xd0>
			if ((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2bb5      	cmp	r3, #181	@ 0xb5
 8000956:	d12a      	bne.n	80009ae <U_Blox_Task+0xba>
					&& (U_Blox_frame_low_layer_t->sync_char_2 == 0x62)) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	785b      	ldrb	r3, [r3, #1]
 800095c:	2b62      	cmp	r3, #98	@ 0x62
 800095e:	d126      	bne.n	80009ae <U_Blox_Task+0xba>
				if (U_Blox_Rx.buffer_index >= 5) {
 8000960:	4b1e      	ldr	r3, [pc, #120]	@ (80009dc <U_Blox_Task+0xe8>)
 8000962:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000966:	2b04      	cmp	r3, #4
 8000968:	d92b      	bls.n	80009c2 <U_Blox_Task+0xce>
							>= U_Blox_frame_low_layer_t->length + 7) {
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	889b      	ldrh	r3, [r3, #4]
 800096e:	3306      	adds	r3, #6
					if (U_Blox_Rx.buffer_index
 8000970:	4a1a      	ldr	r2, [pc, #104]	@ (80009dc <U_Blox_Task+0xe8>)
 8000972:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 8000976:	4293      	cmp	r3, r2
 8000978:	da23      	bge.n	80009c2 <U_Blox_Task+0xce>
								+ U_Blox_frame_low_layer_t->length])
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	889b      	ldrh	r3, [r3, #4]
 800097e:	3306      	adds	r3, #6
						if ((*(uint16_t*) &U_Blox_Rx.Buffer[6
 8000980:	4a16      	ldr	r2, [pc, #88]	@ (80009dc <U_Blox_Task+0xe8>)
 8000982:	4413      	add	r3, r2
 8000984:	3301      	adds	r3, #1
 8000986:	881c      	ldrh	r4, [r3, #0]
								== U_Blox_Calculate_Checksum(
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f000 f883 	bl	8000a94 <U_Blox_Calculate_Checksum>
 800098e:	4603      	mov	r3, r0
						if ((*(uint16_t*) &U_Blox_Rx.Buffer[6
 8000990:	429c      	cmp	r4, r3
 8000992:	d116      	bne.n	80009c2 <U_Blox_Task+0xce>
							HAL_UART_DMAStop(&huart3);
 8000994:	4810      	ldr	r0, [pc, #64]	@ (80009d8 <U_Blox_Task+0xe4>)
 8000996:	f006 fdcd 	bl	8007534 <HAL_UART_DMAStop>
							HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer,
 800099a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800099e:	4910      	ldr	r1, [pc, #64]	@ (80009e0 <U_Blox_Task+0xec>)
 80009a0:	480d      	ldr	r0, [pc, #52]	@ (80009d8 <U_Blox_Task+0xe4>)
 80009a2:	f006 fd7b 	bl	800749c <HAL_UART_Receive_DMA>
							U_Blox_Rx.Sm = SM_RX_PROCESS;
 80009a6:	4b0d      	ldr	r3, [pc, #52]	@ (80009dc <U_Blox_Task+0xe8>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
				if (U_Blox_Rx.buffer_index >= 5) {
 80009ac:	e009      	b.n	80009c2 <U_Blox_Task+0xce>
				HAL_UART_DMAStop(&huart3);
 80009ae:	480a      	ldr	r0, [pc, #40]	@ (80009d8 <U_Blox_Task+0xe4>)
 80009b0:	f006 fdc0 	bl	8007534 <HAL_UART_DMAStop>
				HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 80009b4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80009b8:	4909      	ldr	r1, [pc, #36]	@ (80009e0 <U_Blox_Task+0xec>)
 80009ba:	4807      	ldr	r0, [pc, #28]	@ (80009d8 <U_Blox_Task+0xe4>)
 80009bc:	f006 fd6e 	bl	800749c <HAL_UART_Receive_DMA>
		break;
 80009c0:	e000      	b.n	80009c4 <U_Blox_Task+0xd0>
				if (U_Blox_Rx.buffer_index >= 5) {
 80009c2:	bf00      	nop
		break;
 80009c4:	bf00      	nop
	}
}
 80009c6:	bf00      	nop
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd90      	pop	{r4, r7, pc}
 80009ce:	bf00      	nop
 80009d0:	24000818 	.word	0x24000818
 80009d4:	24000819 	.word	0x24000819
 80009d8:	24000a10 	.word	0x24000a10
 80009dc:	24000620 	.word	0x24000620
 80009e0:	24000621 	.word	0x24000621

080009e4 <U_Blox_Set_Frame>:

void U_Blox_Set_Frame(U_Blox_frame_high_layer *U_Blox_frame_high_layer_t) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer_transmit.sync_char_1 = 0xB5;
 80009ec:	4b19      	ldr	r3, [pc, #100]	@ (8000a54 <U_Blox_Set_Frame+0x70>)
 80009ee:	22b5      	movs	r2, #181	@ 0xb5
 80009f0:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_low_layer_transmit.sync_char_2 = 0x62;
 80009f2:	4b18      	ldr	r3, [pc, #96]	@ (8000a54 <U_Blox_Set_Frame+0x70>)
 80009f4:	2262      	movs	r2, #98	@ 0x62
 80009f6:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_low_layer_transmit.length = U_Blox_frame_high_layer_t->length;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	885a      	ldrh	r2, [r3, #2]
 80009fc:	4b15      	ldr	r3, [pc, #84]	@ (8000a54 <U_Blox_Set_Frame+0x70>)
 80009fe:	809a      	strh	r2, [r3, #4]
	U_Blox_frame_low_layer_transmit.message_class = U_Blox_frame_high_layer_t->message_class;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	781a      	ldrb	r2, [r3, #0]
 8000a04:	4b13      	ldr	r3, [pc, #76]	@ (8000a54 <U_Blox_Set_Frame+0x70>)
 8000a06:	709a      	strb	r2, [r3, #2]
	U_Blox_frame_low_layer_transmit.message_id = U_Blox_frame_high_layer_t->message_id;
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	785a      	ldrb	r2, [r3, #1]
 8000a0c:	4b11      	ldr	r3, [pc, #68]	@ (8000a54 <U_Blox_Set_Frame+0x70>)
 8000a0e:	70da      	strb	r2, [r3, #3]
	memcpy(&U_Blox_frame_low_layer_transmit.payload, U_Blox_frame_high_layer_t->payload.data,
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	1d19      	adds	r1, r3, #4
			U_Blox_frame_high_layer_t->length);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	885b      	ldrh	r3, [r3, #2]
	memcpy(&U_Blox_frame_low_layer_transmit.payload, U_Blox_frame_high_layer_t->payload.data,
 8000a18:	461a      	mov	r2, r3
 8000a1a:	480f      	ldr	r0, [pc, #60]	@ (8000a58 <U_Blox_Set_Frame+0x74>)
 8000a1c:	f008 fe48 	bl	80096b0 <memcpy>
	(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000a20:	4b0c      	ldr	r3, [pc, #48]	@ (8000a54 <U_Blox_Set_Frame+0x70>)
 8000a22:	889b      	ldrh	r3, [r3, #4]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b0b      	ldr	r3, [pc, #44]	@ (8000a54 <U_Blox_Set_Frame+0x70>)
 8000a28:	4413      	add	r3, r2
 8000a2a:	1d9c      	adds	r4, r3, #6
			U_Blox_Calculate_Checksum(&U_Blox_frame_low_layer_transmit);
 8000a2c:	4809      	ldr	r0, [pc, #36]	@ (8000a54 <U_Blox_Set_Frame+0x70>)
 8000a2e:	f000 f831 	bl	8000a94 <U_Blox_Calculate_Checksum>
 8000a32:	4603      	mov	r3, r0
	(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000a34:	8023      	strh	r3, [r4, #0]
	memset(&U_Blox_frame_high_layer_t->payload, 0, 500);
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	3304      	adds	r3, #4
 8000a3a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4618      	mov	r0, r3
 8000a42:	f008 fe09 	bl	8009658 <memset>
	U_Blox_Tx.Sm = SM_TX_PREPARE;
 8000a46:	4b05      	ldr	r3, [pc, #20]	@ (8000a5c <U_Blox_Set_Frame+0x78>)
 8000a48:	2201      	movs	r2, #1
 8000a4a:	701a      	strb	r2, [r3, #0]
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	24000424 	.word	0x24000424
 8000a58:	2400042a 	.word	0x2400042a
 8000a5c:	24000818 	.word	0x24000818

08000a60 <U_Blox_Send_Frame>:
uint8_t U_Blox_Send_Frame() {
 8000a60:	b580      	push	{r7, lr}
 8000a62:	af00      	add	r7, sp, #0
//paket hazır mı kontrolu gerek
	HAL_UART_Transmit(&huart3,
 8000a64:	2364      	movs	r3, #100	@ 0x64
 8000a66:	2206      	movs	r2, #6
 8000a68:	4907      	ldr	r1, [pc, #28]	@ (8000a88 <U_Blox_Send_Frame+0x28>)
 8000a6a:	4808      	ldr	r0, [pc, #32]	@ (8000a8c <U_Blox_Send_Frame+0x2c>)
 8000a6c:	f006 fc08 	bl	8007280 <HAL_UART_Transmit>
			(uint8_t*) &U_Blox_frame_low_layer_transmit.sync_char_1, 6, 100);
	HAL_UART_Transmit(&huart3,
			(uint8_t*) &U_Blox_frame_low_layer_transmit.payload,
			U_Blox_frame_low_layer_transmit.length + 2, 100);
 8000a70:	4b05      	ldr	r3, [pc, #20]	@ (8000a88 <U_Blox_Send_Frame+0x28>)
 8000a72:	889b      	ldrh	r3, [r3, #4]
	HAL_UART_Transmit(&huart3,
 8000a74:	3302      	adds	r3, #2
 8000a76:	b29a      	uxth	r2, r3
 8000a78:	2364      	movs	r3, #100	@ 0x64
 8000a7a:	4905      	ldr	r1, [pc, #20]	@ (8000a90 <U_Blox_Send_Frame+0x30>)
 8000a7c:	4803      	ldr	r0, [pc, #12]	@ (8000a8c <U_Blox_Send_Frame+0x2c>)
 8000a7e:	f006 fbff 	bl	8007280 <HAL_UART_Transmit>
	return 1;
 8000a82:	2301      	movs	r3, #1
}
 8000a84:	4618      	mov	r0, r3
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	24000424 	.word	0x24000424
 8000a8c:	24000a10 	.word	0x24000a10
 8000a90:	2400042a 	.word	0x2400042a

08000a94 <U_Blox_Calculate_Checksum>:
uint16_t U_Blox_Calculate_Checksum(U_Blox_frame_low_layer *U_blox_Frame) {
 8000a94:	b480      	push	{r7}
 8000a96:	b087      	sub	sp, #28
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	uint8_t ck_a = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	75fb      	strb	r3, [r7, #23]
	uint8_t ck_b = 0;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	75bb      	strb	r3, [r7, #22]
	uint8_t *data = (uint8_t*) &U_blox_Frame->message_class;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	3302      	adds	r3, #2
 8000aa8:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
 8000aae:	e00e      	b.n	8000ace <U_Blox_Calculate_Checksum+0x3a>
		ck_a = ck_a + *data;
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	781a      	ldrb	r2, [r3, #0]
 8000ab4:	7dfb      	ldrb	r3, [r7, #23]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	75fb      	strb	r3, [r7, #23]
		ck_b = ck_b + ck_a;
 8000aba:	7dba      	ldrb	r2, [r7, #22]
 8000abc:	7dfb      	ldrb	r3, [r7, #23]
 8000abe:	4413      	add	r3, r2
 8000ac0:	75bb      	strb	r3, [r7, #22]
		data++;
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	3301      	adds	r3, #1
 8000acc:	60fb      	str	r3, [r7, #12]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	889b      	ldrh	r3, [r3, #4]
 8000ad2:	3303      	adds	r3, #3
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	ddea      	ble.n	8000ab0 <U_Blox_Calculate_Checksum+0x1c>
	}
	return (uint16_t) (ck_a + (uint16_t) ((uint16_t) ck_b << 8));
 8000ada:	7dfb      	ldrb	r3, [r7, #23]
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	7dbb      	ldrb	r3, [r7, #22]
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	021b      	lsls	r3, r3, #8
 8000ae4:	b29b      	uxth	r3, r3
 8000ae6:	4413      	add	r3, r2
 8000ae8:	b29b      	uxth	r3, r3
}
 8000aea:	4618      	mov	r0, r3
 8000aec:	371c      	adds	r7, #28
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
	...

08000af8 <U_Blox_Is_Packet_Ready>:
	}
	U_Blox_Rx.Buffer[U_Blox_Rx.buffer_index] = data;
	U_Blox_Rx.buffer_index++;
}

uint8_t U_Blox_Is_Packet_Ready() {
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
	return (U_Blox_Rx.Sm == SM_RX_PROCESS);
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <U_Blox_Is_Packet_Ready+0x1c>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	bf0c      	ite	eq
 8000b04:	2301      	moveq	r3, #1
 8000b06:	2300      	movne	r3, #0
 8000b08:	b2db      	uxtb	r3, r3
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	46bd      	mov	sp, r7
 8000b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b12:	4770      	bx	lr
 8000b14:	24000620 	.word	0x24000620

08000b18 <U_Blox_Get_Package>:
	}
}
void U_Blox_Send_Data(uint8_t data) {
	HAL_UART_Transmit(&huart3, &data, 1, 10);
}
void U_Blox_Get_Package(U_Blox_frame_high_layer *U_Blox_frame_high_layer_t) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t =
 8000b20:	4b18      	ldr	r3, [pc, #96]	@ (8000b84 <U_Blox_Get_Package+0x6c>)
 8000b22:	60bb      	str	r3, [r7, #8]
			(U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;

	U_Blox_frame_high_layer_t->length = U_Blox_frame_low_layer_t->length;
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	889a      	ldrh	r2, [r3, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	805a      	strh	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
			U_Blox_frame_low_layer_t->message_class;
 8000b2c:	68bb      	ldr	r3, [r7, #8]
 8000b2e:	789a      	ldrb	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_high_layer_t->message_id =
			U_Blox_frame_low_layer_t->message_id;
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	78da      	ldrb	r2, [r3, #3]
	U_Blox_frame_high_layer_t->message_id =
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 500; i++) {
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	e00d      	b.n	8000b5e <U_Blox_Get_Package+0x46>
		U_Blox_frame_high_layer_t->payload.data[i] =
				U_Blox_frame_low_layer_t->payload[i];
 8000b42:	68ba      	ldr	r2, [r7, #8]
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	3306      	adds	r3, #6
 8000b4a:	7819      	ldrb	r1, [r3, #0]
		U_Blox_frame_high_layer_t->payload.data[i] =
 8000b4c:	687a      	ldr	r2, [r7, #4]
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	4413      	add	r3, r2
 8000b52:	3304      	adds	r3, #4
 8000b54:	460a      	mov	r2, r1
 8000b56:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 500; i++) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b64:	dbed      	blt.n	8000b42 <U_Blox_Get_Package+0x2a>
	}
	memset(U_Blox_Rx.Buffer, 0, 8 + U_Blox_frame_low_layer_t->length);
 8000b66:	68bb      	ldr	r3, [r7, #8]
 8000b68:	889b      	ldrh	r3, [r3, #4]
 8000b6a:	3308      	adds	r3, #8
 8000b6c:	461a      	mov	r2, r3
 8000b6e:	2100      	movs	r1, #0
 8000b70:	4804      	ldr	r0, [pc, #16]	@ (8000b84 <U_Blox_Get_Package+0x6c>)
 8000b72:	f008 fd71 	bl	8009658 <memset>
	U_Blox_Rx.Sm = SM_RX_IDLE;
 8000b76:	4b04      	ldr	r3, [pc, #16]	@ (8000b88 <U_Blox_Get_Package+0x70>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	701a      	strb	r2, [r3, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	3710      	adds	r7, #16
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	24000621 	.word	0x24000621
 8000b88:	24000620 	.word	0x24000620

08000b8c <HAL_UART_TxCpltCallback>:
		U_Blox_Rx.Buffer[index++] = U_Blox_Rx.Buffer[size++];
	}
}

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	b083      	sub	sp, #12
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	U_Blox_Tx.Sm = SM_TX_IDLE;
 8000b94:	4b04      	ldr	r3, [pc, #16]	@ (8000ba8 <HAL_UART_TxCpltCallback+0x1c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	24000818 	.word	0x24000818

08000bac <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b082      	sub	sp, #8
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
	/* Prevent unused argument(s) compilation warning */

	HAL_UART_Receive_DMA(&huart3, U_Blox_Rx.Buffer, 500);
 8000bb4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000bb8:	4903      	ldr	r1, [pc, #12]	@ (8000bc8 <HAL_UART_RxCpltCallback+0x1c>)
 8000bba:	4804      	ldr	r0, [pc, #16]	@ (8000bcc <HAL_UART_RxCpltCallback+0x20>)
 8000bbc:	f006 fc6e 	bl	800749c <HAL_UART_Receive_DMA>
	/* NOTE : This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback can be implemented in the user file.
	 */
}
 8000bc0:	bf00      	nop
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	24000621 	.word	0x24000621
 8000bcc:	24000a10 	.word	0x24000a10

08000bd0 <GetRxBufferIndex>:
uint16_t GetRxBufferIndex() {
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
	int a = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
	a = 499 - DMA1_Stream0->NDTR;
 8000bda:	4b09      	ldr	r3, [pc, #36]	@ (8000c00 <GetRxBufferIndex+0x30>)
 8000bdc:	685a      	ldr	r2, [r3, #4]
 8000bde:	f240 13f3 	movw	r3, #499	@ 0x1f3
 8000be2:	1a9b      	subs	r3, r3, r2
 8000be4:	607b      	str	r3, [r7, #4]
	if (a < 0) {
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	da01      	bge.n	8000bf0 <GetRxBufferIndex+0x20>
		return 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	e001      	b.n	8000bf4 <GetRxBufferIndex+0x24>
	} else {
		return a;
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	b29b      	uxth	r3, r3
	}
}
 8000bf4:	4618      	mov	r0, r3
 8000bf6:	370c      	adds	r7, #12
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr
 8000c00:	40020010 	.word	0x40020010

08000c04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000c08:	f000 f970 	bl	8000eec <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c0c:	f000 fb7a 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c10:	f000 f828 	bl	8000c64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c14:	f000 f900 	bl	8000e18 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c18:	f000 f8de 	bl	8000dd8 <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000c1c:	f000 f890 	bl	8000d40 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Receive_IT(&huart3, &data,1);
  //HAL_UART_Receive_DMA(&huart3, uart_buffer, 500);
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c26:	480a      	ldr	r0, [pc, #40]	@ (8000c50 <main+0x4c>)
 8000c28:	f003 fd5e 	bl	80046e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	2102      	movs	r1, #2
 8000c30:	4808      	ldr	r0, [pc, #32]	@ (8000c54 <main+0x50>)
 8000c32:	f003 fd59 	bl	80046e8 <HAL_GPIO_WritePin>
  GNSS_Tanimla(&GNSS_t);
 8000c36:	4808      	ldr	r0, [pc, #32]	@ (8000c58 <main+0x54>)
 8000c38:	f7ff fce0 	bl	80005fc <GNSS_Tanimla>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    GNSS_Gorev(&GNSS_t);
 8000c3c:	4806      	ldr	r0, [pc, #24]	@ (8000c58 <main+0x54>)
 8000c3e:	f7ff fd43 	bl	80006c8 <GNSS_Gorev>
	    a=DMA1_Stream0->NDTR;
 8000c42:	4b06      	ldr	r3, [pc, #24]	@ (8000c5c <main+0x58>)
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	461a      	mov	r2, r3
 8000c48:	4b05      	ldr	r3, [pc, #20]	@ (8000c60 <main+0x5c>)
 8000c4a:	601a      	str	r2, [r3, #0]
	    GNSS_Gorev(&GNSS_t);
 8000c4c:	bf00      	nop
 8000c4e:	e7f5      	b.n	8000c3c <main+0x38>
 8000c50:	58020400 	.word	0x58020400
 8000c54:	58021000 	.word	0x58021000
 8000c58:	24000b1c 	.word	0x24000b1c
 8000c5c:	40020010 	.word	0x40020010
 8000c60:	24000b38 	.word	0x24000b38

08000c64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b09c      	sub	sp, #112	@ 0x70
 8000c68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c6e:	224c      	movs	r2, #76	@ 0x4c
 8000c70:	2100      	movs	r1, #0
 8000c72:	4618      	mov	r0, r3
 8000c74:	f008 fcf0 	bl	8009658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c78:	1d3b      	adds	r3, r7, #4
 8000c7a:	2220      	movs	r2, #32
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f008 fcea 	bl	8009658 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f003 fd49 	bl	800471c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	603b      	str	r3, [r7, #0]
 8000c8e:	4b2b      	ldr	r3, [pc, #172]	@ (8000d3c <SystemClock_Config+0xd8>)
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4a2a      	ldr	r2, [pc, #168]	@ (8000d3c <SystemClock_Config+0xd8>)
 8000c94:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c98:	6193      	str	r3, [r2, #24]
 8000c9a:	4b28      	ldr	r3, [pc, #160]	@ (8000d3c <SystemClock_Config+0xd8>)
 8000c9c:	699b      	ldr	r3, [r3, #24]
 8000c9e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ca2:	603b      	str	r3, [r7, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000ca6:	bf00      	nop
 8000ca8:	4b24      	ldr	r3, [pc, #144]	@ (8000d3c <SystemClock_Config+0xd8>)
 8000caa:	699b      	ldr	r3, [r3, #24]
 8000cac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cb4:	d1f8      	bne.n	8000ca8 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cc0:	2302      	movs	r3, #2
 8000cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000ccc:	2322      	movs	r3, #34	@ 0x22
 8000cce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000cd8:	2302      	movs	r3, #2
 8000cda:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000cdc:	230c      	movs	r3, #12
 8000cde:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000ce4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ce8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f003 fd4e 	bl	8004790 <HAL_RCC_OscConfig>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d001      	beq.n	8000cfe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cfa:	f000 f923 	bl	8000f44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cfe:	233f      	movs	r3, #63	@ 0x3f
 8000d00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d02:	2303      	movs	r3, #3
 8000d04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d0e:	2340      	movs	r3, #64	@ 0x40
 8000d10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d12:	2340      	movs	r3, #64	@ 0x40
 8000d14:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d1c:	2340      	movs	r3, #64	@ 0x40
 8000d1e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000d20:	1d3b      	adds	r3, r7, #4
 8000d22:	2103      	movs	r1, #3
 8000d24:	4618      	mov	r0, r3
 8000d26:	f004 f90d 	bl	8004f44 <HAL_RCC_ClockConfig>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000d30:	f000 f908 	bl	8000f44 <Error_Handler>
  }
}
 8000d34:	bf00      	nop
 8000d36:	3770      	adds	r7, #112	@ 0x70
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	58024800 	.word	0x58024800

08000d40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d44:	4b22      	ldr	r3, [pc, #136]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d46:	4a23      	ldr	r2, [pc, #140]	@ (8000dd4 <MX_USART3_UART_Init+0x94>)
 8000d48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d4c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d52:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d58:	4b1d      	ldr	r3, [pc, #116]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d64:	4b1a      	ldr	r3, [pc, #104]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d66:	220c      	movs	r2, #12
 8000d68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d6a:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d70:	4b17      	ldr	r3, [pc, #92]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d72:	2200      	movs	r2, #0
 8000d74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d76:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d7c:	4b14      	ldr	r3, [pc, #80]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d82:	4b13      	ldr	r3, [pc, #76]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d88:	4811      	ldr	r0, [pc, #68]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d8a:	f006 fa29 	bl	80071e0 <HAL_UART_Init>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d94:	f000 f8d6 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d98:	2100      	movs	r1, #0
 8000d9a:	480d      	ldr	r0, [pc, #52]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000d9c:	f008 fb92 	bl	80094c4 <HAL_UARTEx_SetTxFifoThreshold>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000da6:	f000 f8cd 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000daa:	2100      	movs	r1, #0
 8000dac:	4808      	ldr	r0, [pc, #32]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000dae:	f008 fbc7 	bl	8009540 <HAL_UARTEx_SetRxFifoThreshold>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000db8:	f000 f8c4 	bl	8000f44 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000dbc:	4804      	ldr	r0, [pc, #16]	@ (8000dd0 <MX_USART3_UART_Init+0x90>)
 8000dbe:	f008 fb48 	bl	8009452 <HAL_UARTEx_DisableFifoMode>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000dc8:	f000 f8bc 	bl	8000f44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	24000a10 	.word	0x24000a10
 8000dd4:	40004800 	.word	0x40004800

08000dd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dde:	4b0d      	ldr	r3, [pc, #52]	@ (8000e14 <MX_DMA_Init+0x3c>)
 8000de0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000de4:	4a0b      	ldr	r2, [pc, #44]	@ (8000e14 <MX_DMA_Init+0x3c>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000dee:	4b09      	ldr	r3, [pc, #36]	@ (8000e14 <MX_DMA_Init+0x3c>)
 8000df0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000df4:	f003 0301 	and.w	r3, r3, #1
 8000df8:	607b      	str	r3, [r7, #4]
 8000dfa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	2100      	movs	r1, #0
 8000e00:	200b      	movs	r0, #11
 8000e02:	f000 fbd8 	bl	80015b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000e06:	200b      	movs	r0, #11
 8000e08:	f000 fbef 	bl	80015ea <HAL_NVIC_EnableIRQ>

}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	58024400 	.word	0x58024400

08000e18 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b088      	sub	sp, #32
 8000e1c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	2200      	movs	r2, #0
 8000e24:	601a      	str	r2, [r3, #0]
 8000e26:	605a      	str	r2, [r3, #4]
 8000e28:	609a      	str	r2, [r3, #8]
 8000e2a:	60da      	str	r2, [r3, #12]
 8000e2c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e2e:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e34:	4a2a      	ldr	r2, [pc, #168]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e52:	4a23      	ldr	r2, [pc, #140]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e54:	f043 0302 	orr.w	r3, r3, #2
 8000e58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e5c:	4b20      	ldr	r3, [pc, #128]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e62:	f003 0302 	and.w	r3, r3, #2
 8000e66:	607b      	str	r3, [r7, #4]
 8000e68:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e70:	4a1b      	ldr	r2, [pc, #108]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e7a:	4b19      	ldr	r3, [pc, #100]	@ (8000ee0 <MX_GPIO_Init+0xc8>)
 8000e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e80:	f003 0310 	and.w	r3, r3, #16
 8000e84:	603b      	str	r3, [r7, #0]
 8000e86:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e8e:	4815      	ldr	r0, [pc, #84]	@ (8000ee4 <MX_GPIO_Init+0xcc>)
 8000e90:	f003 fc2a 	bl	80046e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e94:	2200      	movs	r2, #0
 8000e96:	2102      	movs	r1, #2
 8000e98:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <MX_GPIO_Init+0xd0>)
 8000e9a:	f003 fc25 	bl	80046e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eb0:	f107 030c 	add.w	r3, r7, #12
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	480b      	ldr	r0, [pc, #44]	@ (8000ee4 <MX_GPIO_Init+0xcc>)
 8000eb8:	f003 fa6e 	bl	8004398 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ecc:	f107 030c 	add.w	r3, r7, #12
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4805      	ldr	r0, [pc, #20]	@ (8000ee8 <MX_GPIO_Init+0xd0>)
 8000ed4:	f003 fa60 	bl	8004398 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ed8:	bf00      	nop
 8000eda:	3720      	adds	r7, #32
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	58024400 	.word	0x58024400
 8000ee4:	58020400 	.word	0x58020400
 8000ee8:	58021000 	.word	0x58021000

08000eec <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ef2:	463b      	mov	r3, r7
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000efe:	f000 fb8f 	bl	8001620 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000f02:	2301      	movs	r3, #1
 8000f04:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000f0e:	231f      	movs	r3, #31
 8000f10:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000f12:	2387      	movs	r3, #135	@ 0x87
 8000f14:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000f22:	2301      	movs	r3, #1
 8000f24:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000f2e:	463b      	mov	r3, r7
 8000f30:	4618      	mov	r0, r3
 8000f32:	f000 fbad 	bl	8001690 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000f36:	2004      	movs	r0, #4
 8000f38:	f000 fb8a 	bl	8001650 <HAL_MPU_Enable>

}
 8000f3c:	bf00      	nop
 8000f3e:	3710      	adds	r7, #16
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f48:	b672      	cpsid	i
}
 8000f4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f4c:	bf00      	nop
 8000f4e:	e7fd      	b.n	8000f4c <Error_Handler+0x8>

08000f50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f56:	4b0a      	ldr	r3, [pc, #40]	@ (8000f80 <HAL_MspInit+0x30>)
 8000f58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f5c:	4a08      	ldr	r2, [pc, #32]	@ (8000f80 <HAL_MspInit+0x30>)
 8000f5e:	f043 0302 	orr.w	r3, r3, #2
 8000f62:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f66:	4b06      	ldr	r3, [pc, #24]	@ (8000f80 <HAL_MspInit+0x30>)
 8000f68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f6c:	f003 0302 	and.w	r3, r3, #2
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	58024400 	.word	0x58024400

08000f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b0b8      	sub	sp, #224	@ 0xe0
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
 8000f9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	22b8      	movs	r2, #184	@ 0xb8
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f008 fb57 	bl	8009658 <memset>
  if(huart->Instance==USART3)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	4a42      	ldr	r2, [pc, #264]	@ (80010b8 <HAL_UART_MspInit+0x134>)
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d17d      	bne.n	80010b0 <HAL_UART_MspInit+0x12c>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000fb4:	f04f 0202 	mov.w	r2, #2
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fc6:	f107 0310 	add.w	r3, r7, #16
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f004 fb46 	bl	800565c <HAL_RCCEx_PeriphCLKConfig>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d001      	beq.n	8000fda <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000fd6:	f7ff ffb5 	bl	8000f44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000fda:	4b38      	ldr	r3, [pc, #224]	@ (80010bc <HAL_UART_MspInit+0x138>)
 8000fdc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fe0:	4a36      	ldr	r2, [pc, #216]	@ (80010bc <HAL_UART_MspInit+0x138>)
 8000fe2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000fe6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fea:	4b34      	ldr	r3, [pc, #208]	@ (80010bc <HAL_UART_MspInit+0x138>)
 8000fec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000ff0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff8:	4b30      	ldr	r3, [pc, #192]	@ (80010bc <HAL_UART_MspInit+0x138>)
 8000ffa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffe:	4a2f      	ldr	r2, [pc, #188]	@ (80010bc <HAL_UART_MspInit+0x138>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001008:	4b2c      	ldr	r3, [pc, #176]	@ (80010bc <HAL_UART_MspInit+0x138>)
 800100a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60bb      	str	r3, [r7, #8]
 8001014:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001016:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800101a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001024:	2300      	movs	r3, #0
 8001026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102a:	2300      	movs	r3, #0
 800102c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001030:	2307      	movs	r3, #7
 8001032:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001036:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800103a:	4619      	mov	r1, r3
 800103c:	4820      	ldr	r0, [pc, #128]	@ (80010c0 <HAL_UART_MspInit+0x13c>)
 800103e:	f003 f9ab 	bl	8004398 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8001042:	4b20      	ldr	r3, [pc, #128]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 8001044:	4a20      	ldr	r2, [pc, #128]	@ (80010c8 <HAL_UART_MspInit+0x144>)
 8001046:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001048:	4b1e      	ldr	r3, [pc, #120]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 800104a:	222d      	movs	r2, #45	@ 0x2d
 800104c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800104e:	4b1d      	ldr	r3, [pc, #116]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 8001050:	2200      	movs	r2, #0
 8001052:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001054:	4b1b      	ldr	r3, [pc, #108]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 8001056:	2200      	movs	r2, #0
 8001058:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800105a:	4b1a      	ldr	r3, [pc, #104]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 800105c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001060:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001062:	4b18      	ldr	r3, [pc, #96]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 8001064:	2200      	movs	r2, #0
 8001066:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001068:	4b16      	ldr	r3, [pc, #88]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 800106a:	2200      	movs	r2, #0
 800106c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800106e:	4b15      	ldr	r3, [pc, #84]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 8001070:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001074:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001076:	4b13      	ldr	r3, [pc, #76]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 8001078:	2200      	movs	r2, #0
 800107a:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800107c:	4b11      	ldr	r3, [pc, #68]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 800107e:	2200      	movs	r2, #0
 8001080:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001082:	4810      	ldr	r0, [pc, #64]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 8001084:	f000 fb44 	bl	8001710 <HAL_DMA_Init>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x10e>
    {
      Error_Handler();
 800108e:	f7ff ff59 	bl	8000f44 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4a0b      	ldr	r2, [pc, #44]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 8001096:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800109a:	4a0a      	ldr	r2, [pc, #40]	@ (80010c4 <HAL_UART_MspInit+0x140>)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 80010a0:	2200      	movs	r2, #0
 80010a2:	2103      	movs	r1, #3
 80010a4:	2027      	movs	r0, #39	@ 0x27
 80010a6:	f000 fa86 	bl	80015b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80010aa:	2027      	movs	r0, #39	@ 0x27
 80010ac:	f000 fa9d 	bl	80015ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80010b0:	bf00      	nop
 80010b2:	37e0      	adds	r7, #224	@ 0xe0
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40004800 	.word	0x40004800
 80010bc:	58024400 	.word	0x58024400
 80010c0:	58020400 	.word	0x58020400
 80010c4:	24000aa4 	.word	0x24000aa4
 80010c8:	40020010 	.word	0x40020010

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <NMI_Handler+0x4>

080010d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <DMA1_Stream0_IRQHandler+0x10>)
 8001126:	f001 fe19 	bl	8002d5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	24000aa4 	.word	0x24000aa4

08001134 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <USART3_IRQHandler+0x10>)
 800113a:	f006 fa91 	bl	8007660 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  //HAL_UART_Receive_IT(&huart3, &data,1);
  //U_Blox_Receive_Data(data);
  /* USER CODE END USART3_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	24000a10 	.word	0x24000a10

08001148 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]

   //U_Blox_Receive_5_Byte(uart_buffer);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8001150:	bf00      	nop
 8001152:	370c      	adds	r7, #12
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <SystemInit+0xd0>)
 8001162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001166:	4a31      	ldr	r2, [pc, #196]	@ (800122c <SystemInit+0xd0>)
 8001168:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800116c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001170:	4b2f      	ldr	r3, [pc, #188]	@ (8001230 <SystemInit+0xd4>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 030f 	and.w	r3, r3, #15
 8001178:	2b06      	cmp	r3, #6
 800117a:	d807      	bhi.n	800118c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800117c:	4b2c      	ldr	r3, [pc, #176]	@ (8001230 <SystemInit+0xd4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	f023 030f 	bic.w	r3, r3, #15
 8001184:	4a2a      	ldr	r2, [pc, #168]	@ (8001230 <SystemInit+0xd4>)
 8001186:	f043 0307 	orr.w	r3, r3, #7
 800118a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800118c:	4b29      	ldr	r3, [pc, #164]	@ (8001234 <SystemInit+0xd8>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a28      	ldr	r2, [pc, #160]	@ (8001234 <SystemInit+0xd8>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001198:	4b26      	ldr	r3, [pc, #152]	@ (8001234 <SystemInit+0xd8>)
 800119a:	2200      	movs	r2, #0
 800119c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800119e:	4b25      	ldr	r3, [pc, #148]	@ (8001234 <SystemInit+0xd8>)
 80011a0:	681a      	ldr	r2, [r3, #0]
 80011a2:	4924      	ldr	r1, [pc, #144]	@ (8001234 <SystemInit+0xd8>)
 80011a4:	4b24      	ldr	r3, [pc, #144]	@ (8001238 <SystemInit+0xdc>)
 80011a6:	4013      	ands	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80011aa:	4b21      	ldr	r3, [pc, #132]	@ (8001230 <SystemInit+0xd4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0308 	and.w	r3, r3, #8
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d007      	beq.n	80011c6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80011b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001230 <SystemInit+0xd4>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f023 030f 	bic.w	r3, r3, #15
 80011be:	4a1c      	ldr	r2, [pc, #112]	@ (8001230 <SystemInit+0xd4>)
 80011c0:	f043 0307 	orr.w	r3, r3, #7
 80011c4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80011c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001234 <SystemInit+0xd8>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80011cc:	4b19      	ldr	r3, [pc, #100]	@ (8001234 <SystemInit+0xd8>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80011d2:	4b18      	ldr	r3, [pc, #96]	@ (8001234 <SystemInit+0xd8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80011d8:	4b16      	ldr	r3, [pc, #88]	@ (8001234 <SystemInit+0xd8>)
 80011da:	4a18      	ldr	r2, [pc, #96]	@ (800123c <SystemInit+0xe0>)
 80011dc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80011de:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <SystemInit+0xd8>)
 80011e0:	4a17      	ldr	r2, [pc, #92]	@ (8001240 <SystemInit+0xe4>)
 80011e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80011e4:	4b13      	ldr	r3, [pc, #76]	@ (8001234 <SystemInit+0xd8>)
 80011e6:	4a17      	ldr	r2, [pc, #92]	@ (8001244 <SystemInit+0xe8>)
 80011e8:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80011ea:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <SystemInit+0xd8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80011f0:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <SystemInit+0xd8>)
 80011f2:	4a14      	ldr	r2, [pc, #80]	@ (8001244 <SystemInit+0xe8>)
 80011f4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80011f6:	4b0f      	ldr	r3, [pc, #60]	@ (8001234 <SystemInit+0xd8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80011fc:	4b0d      	ldr	r3, [pc, #52]	@ (8001234 <SystemInit+0xd8>)
 80011fe:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <SystemInit+0xe8>)
 8001200:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001202:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <SystemInit+0xd8>)
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001208:	4b0a      	ldr	r3, [pc, #40]	@ (8001234 <SystemInit+0xd8>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a09      	ldr	r2, [pc, #36]	@ (8001234 <SystemInit+0xd8>)
 800120e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001212:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001214:	4b07      	ldr	r3, [pc, #28]	@ (8001234 <SystemInit+0xd8>)
 8001216:	2200      	movs	r2, #0
 8001218:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800121a:	4b0b      	ldr	r3, [pc, #44]	@ (8001248 <SystemInit+0xec>)
 800121c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8001220:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00
 8001230:	52002000 	.word	0x52002000
 8001234:	58024400 	.word	0x58024400
 8001238:	eaf6ed7f 	.word	0xeaf6ed7f
 800123c:	02020200 	.word	0x02020200
 8001240:	01ff0000 	.word	0x01ff0000
 8001244:	01010280 	.word	0x01010280
 8001248:	52004000 	.word	0x52004000

0800124c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800124c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001284 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001250:	f7ff ff84 	bl	800115c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001254:	480c      	ldr	r0, [pc, #48]	@ (8001288 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001256:	490d      	ldr	r1, [pc, #52]	@ (800128c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001258:	4a0d      	ldr	r2, [pc, #52]	@ (8001290 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800125c:	e002      	b.n	8001264 <LoopCopyDataInit>

0800125e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001260:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001262:	3304      	adds	r3, #4

08001264 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001264:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001266:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001268:	d3f9      	bcc.n	800125e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800126a:	4a0a      	ldr	r2, [pc, #40]	@ (8001294 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800126c:	4c0a      	ldr	r4, [pc, #40]	@ (8001298 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001270:	e001      	b.n	8001276 <LoopFillZerobss>

08001272 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001272:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001274:	3204      	adds	r2, #4

08001276 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001276:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001278:	d3fb      	bcc.n	8001272 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800127a:	f008 f9f5 	bl	8009668 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127e:	f7ff fcc1 	bl	8000c04 <main>
  bx  lr
 8001282:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001284:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001288:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800128c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001290:	08009734 	.word	0x08009734
  ldr r2, =_sbss
 8001294:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8001298:	24000b44 	.word	0x24000b44

0800129c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC3_IRQHandler>
	...

080012a0 <SystickGetMs>:
#include "stm32h7xx.h"

static uint32_t ms;

 uint32_t SystickGetMs()
 {
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
   return ms;
 80012a4:	4b03      	ldr	r3, [pc, #12]	@ (80012b4 <SystickGetMs+0x14>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 }
 80012a8:	4618      	mov	r0, r3
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	24000b3c 	.word	0x24000b3c

080012b8 <SystickCheckMs>:


 uint8_t SystickCheckMs(uint32_t reference,uint32_t time_passed)
 {
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
   if((ms-reference)>=time_passed)
 80012c2:	4b08      	ldr	r3, [pc, #32]	@ (80012e4 <SystickCheckMs+0x2c>)
 80012c4:	681a      	ldr	r2, [r3, #0]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	683a      	ldr	r2, [r7, #0]
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d801      	bhi.n	80012d4 <SystickCheckMs+0x1c>
	   return 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	e000      	b.n	80012d6 <SystickCheckMs+0x1e>
   else
	  return 0;
 80012d4:	2300      	movs	r3, #0
 }
 80012d6:	4618      	mov	r0, r3
 80012d8:	370c      	adds	r7, #12
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr
 80012e2:	bf00      	nop
 80012e4:	24000b3c 	.word	0x24000b3c

080012e8 <SysTick_Handler>:


 void SysTick_Handler(void)
 {
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN SysTick_IRQn 0 */
    ms++;
 80012ec:	4b04      	ldr	r3, [pc, #16]	@ (8001300 <SysTick_Handler+0x18>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a03      	ldr	r2, [pc, #12]	@ (8001300 <SysTick_Handler+0x18>)
 80012f4:	6013      	str	r3, [r2, #0]


   /* USER CODE BEGIN SysTick_IRQn 1 */

   /* USER CODE END SysTick_IRQn 1 */
 }
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	24000b3c 	.word	0x24000b3c

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800130a:	2003      	movs	r0, #3
 800130c:	f000 f948 	bl	80015a0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001310:	f003 ffce 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8001314:	4602      	mov	r2, r0
 8001316:	4b15      	ldr	r3, [pc, #84]	@ (800136c <HAL_Init+0x68>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	0a1b      	lsrs	r3, r3, #8
 800131c:	f003 030f 	and.w	r3, r3, #15
 8001320:	4913      	ldr	r1, [pc, #76]	@ (8001370 <HAL_Init+0x6c>)
 8001322:	5ccb      	ldrb	r3, [r1, r3]
 8001324:	f003 031f 	and.w	r3, r3, #31
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800132e:	4b0f      	ldr	r3, [pc, #60]	@ (800136c <HAL_Init+0x68>)
 8001330:	699b      	ldr	r3, [r3, #24]
 8001332:	f003 030f 	and.w	r3, r3, #15
 8001336:	4a0e      	ldr	r2, [pc, #56]	@ (8001370 <HAL_Init+0x6c>)
 8001338:	5cd3      	ldrb	r3, [r2, r3]
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	687a      	ldr	r2, [r7, #4]
 8001340:	fa22 f303 	lsr.w	r3, r2, r3
 8001344:	4a0b      	ldr	r2, [pc, #44]	@ (8001374 <HAL_Init+0x70>)
 8001346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001348:	4a0b      	ldr	r2, [pc, #44]	@ (8001378 <HAL_Init+0x74>)
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800134e:	200f      	movs	r0, #15
 8001350:	f000 f814 	bl	800137c <HAL_InitTick>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e002      	b.n	8001364 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800135e:	f7ff fdf7 	bl	8000f50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	58024400 	.word	0x58024400
 8001370:	080096e4 	.word	0x080096e4
 8001374:	24000004 	.word	0x24000004
 8001378:	24000000 	.word	0x24000000

0800137c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001384:	4b15      	ldr	r3, [pc, #84]	@ (80013dc <HAL_InitTick+0x60>)
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e021      	b.n	80013d4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001390:	4b13      	ldr	r3, [pc, #76]	@ (80013e0 <HAL_InitTick+0x64>)
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	4b11      	ldr	r3, [pc, #68]	@ (80013dc <HAL_InitTick+0x60>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	4619      	mov	r1, r3
 800139a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800139e:	fbb3 f3f1 	udiv	r3, r3, r1
 80013a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 f92d 	bl	8001606 <HAL_SYSTICK_Config>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e00e      	b.n	80013d4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	2b0f      	cmp	r3, #15
 80013ba:	d80a      	bhi.n	80013d2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013bc:	2200      	movs	r2, #0
 80013be:	6879      	ldr	r1, [r7, #4]
 80013c0:	f04f 30ff 	mov.w	r0, #4294967295
 80013c4:	f000 f8f7 	bl	80015b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013c8:	4a06      	ldr	r2, [pc, #24]	@ (80013e4 <HAL_InitTick+0x68>)
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	e000      	b.n	80013d4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
}
 80013d4:	4618      	mov	r0, r3
 80013d6:	3708      	adds	r7, #8
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	2400000c 	.word	0x2400000c
 80013e0:	24000000 	.word	0x24000000
 80013e4:	24000008 	.word	0x24000008

080013e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b03      	ldr	r3, [pc, #12]	@ (80013fc <HAL_GetTick+0x14>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	24000b40 	.word	0x24000b40

08001400 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	f003 0307 	and.w	r3, r3, #7
 800140e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001410:	4b0b      	ldr	r3, [pc, #44]	@ (8001440 <__NVIC_SetPriorityGrouping+0x40>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001416:	68ba      	ldr	r2, [r7, #8]
 8001418:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800141c:	4013      	ands	r3, r2
 800141e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001428:	4b06      	ldr	r3, [pc, #24]	@ (8001444 <__NVIC_SetPriorityGrouping+0x44>)
 800142a:	4313      	orrs	r3, r2
 800142c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800142e:	4a04      	ldr	r2, [pc, #16]	@ (8001440 <__NVIC_SetPriorityGrouping+0x40>)
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	60d3      	str	r3, [r2, #12]
}
 8001434:	bf00      	nop
 8001436:	3714      	adds	r7, #20
 8001438:	46bd      	mov	sp, r7
 800143a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143e:	4770      	bx	lr
 8001440:	e000ed00 	.word	0xe000ed00
 8001444:	05fa0000 	.word	0x05fa0000

08001448 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800144c:	4b04      	ldr	r3, [pc, #16]	@ (8001460 <__NVIC_GetPriorityGrouping+0x18>)
 800144e:	68db      	ldr	r3, [r3, #12]
 8001450:	0a1b      	lsrs	r3, r3, #8
 8001452:	f003 0307 	and.w	r3, r3, #7
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145e:	4770      	bx	lr
 8001460:	e000ed00 	.word	0xe000ed00

08001464 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800146e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001472:	2b00      	cmp	r3, #0
 8001474:	db0b      	blt.n	800148e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001476:	88fb      	ldrh	r3, [r7, #6]
 8001478:	f003 021f 	and.w	r2, r3, #31
 800147c:	4907      	ldr	r1, [pc, #28]	@ (800149c <__NVIC_EnableIRQ+0x38>)
 800147e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001482:	095b      	lsrs	r3, r3, #5
 8001484:	2001      	movs	r0, #1
 8001486:	fa00 f202 	lsl.w	r2, r0, r2
 800148a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	e000e100 	.word	0xe000e100

080014a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	4603      	mov	r3, r0
 80014a8:	6039      	str	r1, [r7, #0]
 80014aa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014ac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	db0a      	blt.n	80014ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	b2da      	uxtb	r2, r3
 80014b8:	490c      	ldr	r1, [pc, #48]	@ (80014ec <__NVIC_SetPriority+0x4c>)
 80014ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014be:	0112      	lsls	r2, r2, #4
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	440b      	add	r3, r1
 80014c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c8:	e00a      	b.n	80014e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	4908      	ldr	r1, [pc, #32]	@ (80014f0 <__NVIC_SetPriority+0x50>)
 80014d0:	88fb      	ldrh	r3, [r7, #6]
 80014d2:	f003 030f 	and.w	r3, r3, #15
 80014d6:	3b04      	subs	r3, #4
 80014d8:	0112      	lsls	r2, r2, #4
 80014da:	b2d2      	uxtb	r2, r2
 80014dc:	440b      	add	r3, r1
 80014de:	761a      	strb	r2, [r3, #24]
}
 80014e0:	bf00      	nop
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000e100 	.word	0xe000e100
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	@ 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f003 0307 	and.w	r3, r3, #7
 8001506:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	f1c3 0307 	rsb	r3, r3, #7
 800150e:	2b04      	cmp	r3, #4
 8001510:	bf28      	it	cs
 8001512:	2304      	movcs	r3, #4
 8001514:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3304      	adds	r3, #4
 800151a:	2b06      	cmp	r3, #6
 800151c:	d902      	bls.n	8001524 <NVIC_EncodePriority+0x30>
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	3b03      	subs	r3, #3
 8001522:	e000      	b.n	8001526 <NVIC_EncodePriority+0x32>
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001528:	f04f 32ff 	mov.w	r2, #4294967295
 800152c:	69bb      	ldr	r3, [r7, #24]
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	43da      	mvns	r2, r3
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	401a      	ands	r2, r3
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800153c:	f04f 31ff 	mov.w	r1, #4294967295
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	fa01 f303 	lsl.w	r3, r1, r3
 8001546:	43d9      	mvns	r1, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	4313      	orrs	r3, r2
         );
}
 800154e:	4618      	mov	r0, r3
 8001550:	3724      	adds	r7, #36	@ 0x24
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr
	...

0800155c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b082      	sub	sp, #8
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	3b01      	subs	r3, #1
 8001568:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800156c:	d301      	bcc.n	8001572 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800156e:	2301      	movs	r3, #1
 8001570:	e00f      	b.n	8001592 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001572:	4a0a      	ldr	r2, [pc, #40]	@ (800159c <SysTick_Config+0x40>)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3b01      	subs	r3, #1
 8001578:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157a:	210f      	movs	r1, #15
 800157c:	f04f 30ff 	mov.w	r0, #4294967295
 8001580:	f7ff ff8e 	bl	80014a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001584:	4b05      	ldr	r3, [pc, #20]	@ (800159c <SysTick_Config+0x40>)
 8001586:	2200      	movs	r2, #0
 8001588:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158a:	4b04      	ldr	r3, [pc, #16]	@ (800159c <SysTick_Config+0x40>)
 800158c:	2207      	movs	r2, #7
 800158e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001590:	2300      	movs	r3, #0
}
 8001592:	4618      	mov	r0, r3
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	e000e010 	.word	0xe000e010

080015a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f7ff ff29 	bl	8001400 <__NVIC_SetPriorityGrouping>
}
 80015ae:	bf00      	nop
 80015b0:	3708      	adds	r7, #8
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b086      	sub	sp, #24
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	60b9      	str	r1, [r7, #8]
 80015c0:	607a      	str	r2, [r7, #4]
 80015c2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015c4:	f7ff ff40 	bl	8001448 <__NVIC_GetPriorityGrouping>
 80015c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015ca:	687a      	ldr	r2, [r7, #4]
 80015cc:	68b9      	ldr	r1, [r7, #8]
 80015ce:	6978      	ldr	r0, [r7, #20]
 80015d0:	f7ff ff90 	bl	80014f4 <NVIC_EncodePriority>
 80015d4:	4602      	mov	r2, r0
 80015d6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015da:	4611      	mov	r1, r2
 80015dc:	4618      	mov	r0, r3
 80015de:	f7ff ff5f 	bl	80014a0 <__NVIC_SetPriority>
}
 80015e2:	bf00      	nop
 80015e4:	3718      	adds	r7, #24
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b082      	sub	sp, #8
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff ff33 	bl	8001464 <__NVIC_EnableIRQ>
}
 80015fe:	bf00      	nop
 8001600:	3708      	adds	r7, #8
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}

08001606 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001606:	b580      	push	{r7, lr}
 8001608:	b082      	sub	sp, #8
 800160a:	af00      	add	r7, sp, #0
 800160c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f7ff ffa4 	bl	800155c <SysTick_Config>
 8001614:	4603      	mov	r3, r0
}
 8001616:	4618      	mov	r0, r3
 8001618:	3708      	adds	r7, #8
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
	...

08001620 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001624:	f3bf 8f5f 	dmb	sy
}
 8001628:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800162a:	4b07      	ldr	r3, [pc, #28]	@ (8001648 <HAL_MPU_Disable+0x28>)
 800162c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800162e:	4a06      	ldr	r2, [pc, #24]	@ (8001648 <HAL_MPU_Disable+0x28>)
 8001630:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001634:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001636:	4b05      	ldr	r3, [pc, #20]	@ (800164c <HAL_MPU_Disable+0x2c>)
 8001638:	2200      	movs	r2, #0
 800163a:	605a      	str	r2, [r3, #4]
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	e000ed90 	.word	0xe000ed90

08001650 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8001650:	b480      	push	{r7}
 8001652:	b083      	sub	sp, #12
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001658:	4a0b      	ldr	r2, [pc, #44]	@ (8001688 <HAL_MPU_Enable+0x38>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8001662:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <HAL_MPU_Enable+0x3c>)
 8001664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001666:	4a09      	ldr	r2, [pc, #36]	@ (800168c <HAL_MPU_Enable+0x3c>)
 8001668:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800166c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800166e:	f3bf 8f4f 	dsb	sy
}
 8001672:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001674:	f3bf 8f6f 	isb	sy
}
 8001678:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800167a:	bf00      	nop
 800167c:	370c      	adds	r7, #12
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000ed90 	.word	0xe000ed90
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001690:	b480      	push	{r7}
 8001692:	b083      	sub	sp, #12
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	785a      	ldrb	r2, [r3, #1]
 800169c:	4b1b      	ldr	r3, [pc, #108]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
 800169e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80016a0:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
 80016a2:	691b      	ldr	r3, [r3, #16]
 80016a4:	4a19      	ldr	r2, [pc, #100]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
 80016a6:	f023 0301 	bic.w	r3, r3, #1
 80016aa:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80016ac:	4a17      	ldr	r2, [pc, #92]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	7b1b      	ldrb	r3, [r3, #12]
 80016b8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	7adb      	ldrb	r3, [r3, #11]
 80016be:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016c0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	7a9b      	ldrb	r3, [r3, #10]
 80016c6:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80016c8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	7b5b      	ldrb	r3, [r3, #13]
 80016ce:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80016d0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	7b9b      	ldrb	r3, [r3, #14]
 80016d6:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80016d8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	7bdb      	ldrb	r3, [r3, #15]
 80016de:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80016e0:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	7a5b      	ldrb	r3, [r3, #9]
 80016e6:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80016e8:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	7a1b      	ldrb	r3, [r3, #8]
 80016ee:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80016f0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	7812      	ldrb	r2, [r2, #0]
 80016f6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016f8:	4a04      	ldr	r2, [pc, #16]	@ (800170c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80016fa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80016fc:	6113      	str	r3, [r2, #16]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
 800170a:	bf00      	nop
 800170c:	e000ed90 	.word	0xe000ed90

08001710 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
 8001716:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001718:	f7ff fe66 	bl	80013e8 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d101      	bne.n	8001728 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001724:	2301      	movs	r3, #1
 8001726:	e312      	b.n	8001d4e <HAL_DMA_Init+0x63e>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a66      	ldr	r2, [pc, #408]	@ (80018c8 <HAL_DMA_Init+0x1b8>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d04a      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a65      	ldr	r2, [pc, #404]	@ (80018cc <HAL_DMA_Init+0x1bc>)
 8001738:	4293      	cmp	r3, r2
 800173a:	d045      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4a63      	ldr	r2, [pc, #396]	@ (80018d0 <HAL_DMA_Init+0x1c0>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d040      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4a62      	ldr	r2, [pc, #392]	@ (80018d4 <HAL_DMA_Init+0x1c4>)
 800174c:	4293      	cmp	r3, r2
 800174e:	d03b      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a60      	ldr	r2, [pc, #384]	@ (80018d8 <HAL_DMA_Init+0x1c8>)
 8001756:	4293      	cmp	r3, r2
 8001758:	d036      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a5f      	ldr	r2, [pc, #380]	@ (80018dc <HAL_DMA_Init+0x1cc>)
 8001760:	4293      	cmp	r3, r2
 8001762:	d031      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a5d      	ldr	r2, [pc, #372]	@ (80018e0 <HAL_DMA_Init+0x1d0>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d02c      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a5c      	ldr	r2, [pc, #368]	@ (80018e4 <HAL_DMA_Init+0x1d4>)
 8001774:	4293      	cmp	r3, r2
 8001776:	d027      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	4a5a      	ldr	r2, [pc, #360]	@ (80018e8 <HAL_DMA_Init+0x1d8>)
 800177e:	4293      	cmp	r3, r2
 8001780:	d022      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a59      	ldr	r2, [pc, #356]	@ (80018ec <HAL_DMA_Init+0x1dc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d01d      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a57      	ldr	r2, [pc, #348]	@ (80018f0 <HAL_DMA_Init+0x1e0>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d018      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a56      	ldr	r2, [pc, #344]	@ (80018f4 <HAL_DMA_Init+0x1e4>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d013      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a54      	ldr	r2, [pc, #336]	@ (80018f8 <HAL_DMA_Init+0x1e8>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d00e      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a53      	ldr	r2, [pc, #332]	@ (80018fc <HAL_DMA_Init+0x1ec>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d009      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a51      	ldr	r2, [pc, #324]	@ (8001900 <HAL_DMA_Init+0x1f0>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d004      	beq.n	80017c8 <HAL_DMA_Init+0xb8>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a50      	ldr	r2, [pc, #320]	@ (8001904 <HAL_DMA_Init+0x1f4>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d101      	bne.n	80017cc <HAL_DMA_Init+0xbc>
 80017c8:	2301      	movs	r3, #1
 80017ca:	e000      	b.n	80017ce <HAL_DMA_Init+0xbe>
 80017cc:	2300      	movs	r3, #0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f000 813c 	beq.w	8001a4c <HAL_DMA_Init+0x33c>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2202      	movs	r2, #2
 80017d8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2200      	movs	r2, #0
 80017e0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a37      	ldr	r2, [pc, #220]	@ (80018c8 <HAL_DMA_Init+0x1b8>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d04a      	beq.n	8001884 <HAL_DMA_Init+0x174>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a36      	ldr	r2, [pc, #216]	@ (80018cc <HAL_DMA_Init+0x1bc>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d045      	beq.n	8001884 <HAL_DMA_Init+0x174>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a34      	ldr	r2, [pc, #208]	@ (80018d0 <HAL_DMA_Init+0x1c0>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d040      	beq.n	8001884 <HAL_DMA_Init+0x174>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a33      	ldr	r2, [pc, #204]	@ (80018d4 <HAL_DMA_Init+0x1c4>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d03b      	beq.n	8001884 <HAL_DMA_Init+0x174>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a31      	ldr	r2, [pc, #196]	@ (80018d8 <HAL_DMA_Init+0x1c8>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d036      	beq.n	8001884 <HAL_DMA_Init+0x174>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a30      	ldr	r2, [pc, #192]	@ (80018dc <HAL_DMA_Init+0x1cc>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d031      	beq.n	8001884 <HAL_DMA_Init+0x174>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2e      	ldr	r2, [pc, #184]	@ (80018e0 <HAL_DMA_Init+0x1d0>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d02c      	beq.n	8001884 <HAL_DMA_Init+0x174>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2d      	ldr	r2, [pc, #180]	@ (80018e4 <HAL_DMA_Init+0x1d4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d027      	beq.n	8001884 <HAL_DMA_Init+0x174>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	4a2b      	ldr	r2, [pc, #172]	@ (80018e8 <HAL_DMA_Init+0x1d8>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d022      	beq.n	8001884 <HAL_DMA_Init+0x174>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a2a      	ldr	r2, [pc, #168]	@ (80018ec <HAL_DMA_Init+0x1dc>)
 8001844:	4293      	cmp	r3, r2
 8001846:	d01d      	beq.n	8001884 <HAL_DMA_Init+0x174>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a28      	ldr	r2, [pc, #160]	@ (80018f0 <HAL_DMA_Init+0x1e0>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d018      	beq.n	8001884 <HAL_DMA_Init+0x174>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a27      	ldr	r2, [pc, #156]	@ (80018f4 <HAL_DMA_Init+0x1e4>)
 8001858:	4293      	cmp	r3, r2
 800185a:	d013      	beq.n	8001884 <HAL_DMA_Init+0x174>
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	4a25      	ldr	r2, [pc, #148]	@ (80018f8 <HAL_DMA_Init+0x1e8>)
 8001862:	4293      	cmp	r3, r2
 8001864:	d00e      	beq.n	8001884 <HAL_DMA_Init+0x174>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a24      	ldr	r2, [pc, #144]	@ (80018fc <HAL_DMA_Init+0x1ec>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d009      	beq.n	8001884 <HAL_DMA_Init+0x174>
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a22      	ldr	r2, [pc, #136]	@ (8001900 <HAL_DMA_Init+0x1f0>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d004      	beq.n	8001884 <HAL_DMA_Init+0x174>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a21      	ldr	r2, [pc, #132]	@ (8001904 <HAL_DMA_Init+0x1f4>)
 8001880:	4293      	cmp	r3, r2
 8001882:	d108      	bne.n	8001896 <HAL_DMA_Init+0x186>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	681a      	ldr	r2, [r3, #0]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f022 0201 	bic.w	r2, r2, #1
 8001892:	601a      	str	r2, [r3, #0]
 8001894:	e007      	b.n	80018a6 <HAL_DMA_Init+0x196>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f022 0201 	bic.w	r2, r2, #1
 80018a4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80018a6:	e02f      	b.n	8001908 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018a8:	f7ff fd9e 	bl	80013e8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b05      	cmp	r3, #5
 80018b4:	d928      	bls.n	8001908 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2220      	movs	r2, #32
 80018ba:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2203      	movs	r2, #3
 80018c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e242      	b.n	8001d4e <HAL_DMA_Init+0x63e>
 80018c8:	40020010 	.word	0x40020010
 80018cc:	40020028 	.word	0x40020028
 80018d0:	40020040 	.word	0x40020040
 80018d4:	40020058 	.word	0x40020058
 80018d8:	40020070 	.word	0x40020070
 80018dc:	40020088 	.word	0x40020088
 80018e0:	400200a0 	.word	0x400200a0
 80018e4:	400200b8 	.word	0x400200b8
 80018e8:	40020410 	.word	0x40020410
 80018ec:	40020428 	.word	0x40020428
 80018f0:	40020440 	.word	0x40020440
 80018f4:	40020458 	.word	0x40020458
 80018f8:	40020470 	.word	0x40020470
 80018fc:	40020488 	.word	0x40020488
 8001900:	400204a0 	.word	0x400204a0
 8001904:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1c8      	bne.n	80018a8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800191e:	697a      	ldr	r2, [r7, #20]
 8001920:	4b83      	ldr	r3, [pc, #524]	@ (8001b30 <HAL_DMA_Init+0x420>)
 8001922:	4013      	ands	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800192e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800193a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001946:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	4313      	orrs	r3, r2
 8001952:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001958:	2b04      	cmp	r3, #4
 800195a:	d107      	bne.n	800196c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001964:	4313      	orrs	r3, r2
 8001966:	697a      	ldr	r2, [r7, #20]
 8001968:	4313      	orrs	r3, r2
 800196a:	617b      	str	r3, [r7, #20]
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b28      	cmp	r3, #40	@ 0x28
 8001972:	d903      	bls.n	800197c <HAL_DMA_Init+0x26c>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b2e      	cmp	r3, #46	@ 0x2e
 800197a:	d91f      	bls.n	80019bc <HAL_DMA_Init+0x2ac>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b3e      	cmp	r3, #62	@ 0x3e
 8001982:	d903      	bls.n	800198c <HAL_DMA_Init+0x27c>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b42      	cmp	r3, #66	@ 0x42
 800198a:	d917      	bls.n	80019bc <HAL_DMA_Init+0x2ac>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	2b46      	cmp	r3, #70	@ 0x46
 8001992:	d903      	bls.n	800199c <HAL_DMA_Init+0x28c>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	2b48      	cmp	r3, #72	@ 0x48
 800199a:	d90f      	bls.n	80019bc <HAL_DMA_Init+0x2ac>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	2b4e      	cmp	r3, #78	@ 0x4e
 80019a2:	d903      	bls.n	80019ac <HAL_DMA_Init+0x29c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	2b52      	cmp	r3, #82	@ 0x52
 80019aa:	d907      	bls.n	80019bc <HAL_DMA_Init+0x2ac>
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b73      	cmp	r3, #115	@ 0x73
 80019b2:	d905      	bls.n	80019c0 <HAL_DMA_Init+0x2b0>
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b77      	cmp	r3, #119	@ 0x77
 80019ba:	d801      	bhi.n	80019c0 <HAL_DMA_Init+0x2b0>
 80019bc:	2301      	movs	r3, #1
 80019be:	e000      	b.n	80019c2 <HAL_DMA_Init+0x2b2>
 80019c0:	2300      	movs	r3, #0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_DMA_Init+0x2be>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80019cc:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	697a      	ldr	r2, [r7, #20]
 80019d4:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	695b      	ldr	r3, [r3, #20]
 80019dc:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f023 0307 	bic.w	r3, r3, #7
 80019e4:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019ea:	697a      	ldr	r2, [r7, #20]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019f4:	2b04      	cmp	r3, #4
 80019f6:	d117      	bne.n	8001a28 <HAL_DMA_Init+0x318>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019fc:	697a      	ldr	r2, [r7, #20]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d00e      	beq.n	8001a28 <HAL_DMA_Init+0x318>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f002 fb3a 	bl	8004084 <DMA_CheckFifoParam>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d008      	beq.n	8001a28 <HAL_DMA_Init+0x318>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2240      	movs	r2, #64	@ 0x40
 8001a1a:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e192      	b.n	8001d4e <HAL_DMA_Init+0x63e>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a30:	6878      	ldr	r0, [r7, #4]
 8001a32:	f002 fa75 	bl	8003f20 <DMA_CalcBaseAndBitshift>
 8001a36:	4603      	mov	r3, r0
 8001a38:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a3e:	f003 031f 	and.w	r3, r3, #31
 8001a42:	223f      	movs	r2, #63	@ 0x3f
 8001a44:	409a      	lsls	r2, r3
 8001a46:	68bb      	ldr	r3, [r7, #8]
 8001a48:	609a      	str	r2, [r3, #8]
 8001a4a:	e0c8      	b.n	8001bde <HAL_DMA_Init+0x4ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a38      	ldr	r2, [pc, #224]	@ (8001b34 <HAL_DMA_Init+0x424>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d022      	beq.n	8001a9c <HAL_DMA_Init+0x38c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a37      	ldr	r2, [pc, #220]	@ (8001b38 <HAL_DMA_Init+0x428>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d01d      	beq.n	8001a9c <HAL_DMA_Init+0x38c>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a35      	ldr	r2, [pc, #212]	@ (8001b3c <HAL_DMA_Init+0x42c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d018      	beq.n	8001a9c <HAL_DMA_Init+0x38c>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a34      	ldr	r2, [pc, #208]	@ (8001b40 <HAL_DMA_Init+0x430>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d013      	beq.n	8001a9c <HAL_DMA_Init+0x38c>
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a32      	ldr	r2, [pc, #200]	@ (8001b44 <HAL_DMA_Init+0x434>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00e      	beq.n	8001a9c <HAL_DMA_Init+0x38c>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a31      	ldr	r2, [pc, #196]	@ (8001b48 <HAL_DMA_Init+0x438>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d009      	beq.n	8001a9c <HAL_DMA_Init+0x38c>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001b4c <HAL_DMA_Init+0x43c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d004      	beq.n	8001a9c <HAL_DMA_Init+0x38c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a2e      	ldr	r2, [pc, #184]	@ (8001b50 <HAL_DMA_Init+0x440>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d101      	bne.n	8001aa0 <HAL_DMA_Init+0x390>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_DMA_Init+0x392>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f000 8092 	beq.w	8001bcc <HAL_DMA_Init+0x4bc>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a21      	ldr	r2, [pc, #132]	@ (8001b34 <HAL_DMA_Init+0x424>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d021      	beq.n	8001af6 <HAL_DMA_Init+0x3e6>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a20      	ldr	r2, [pc, #128]	@ (8001b38 <HAL_DMA_Init+0x428>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d01c      	beq.n	8001af6 <HAL_DMA_Init+0x3e6>
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8001b3c <HAL_DMA_Init+0x42c>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d017      	beq.n	8001af6 <HAL_DMA_Init+0x3e6>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a1d      	ldr	r2, [pc, #116]	@ (8001b40 <HAL_DMA_Init+0x430>)
 8001acc:	4293      	cmp	r3, r2
 8001ace:	d012      	beq.n	8001af6 <HAL_DMA_Init+0x3e6>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_DMA_Init+0x434>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d00d      	beq.n	8001af6 <HAL_DMA_Init+0x3e6>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a1a      	ldr	r2, [pc, #104]	@ (8001b48 <HAL_DMA_Init+0x438>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d008      	beq.n	8001af6 <HAL_DMA_Init+0x3e6>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a18      	ldr	r2, [pc, #96]	@ (8001b4c <HAL_DMA_Init+0x43c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d003      	beq.n	8001af6 <HAL_DMA_Init+0x3e6>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a17      	ldr	r2, [pc, #92]	@ (8001b50 <HAL_DMA_Init+0x440>)
 8001af4:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2202      	movs	r2, #2
 8001afa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	4b10      	ldr	r3, [pc, #64]	@ (8001b54 <HAL_DMA_Init+0x444>)
 8001b12:	4013      	ands	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	2b40      	cmp	r3, #64	@ 0x40
 8001b1c:	d01c      	beq.n	8001b58 <HAL_DMA_Init+0x448>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	2b80      	cmp	r3, #128	@ 0x80
 8001b24:	d102      	bne.n	8001b2c <HAL_DMA_Init+0x41c>
 8001b26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b2a:	e016      	b.n	8001b5a <HAL_DMA_Init+0x44a>
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	e014      	b.n	8001b5a <HAL_DMA_Init+0x44a>
 8001b30:	fe10803f 	.word	0xfe10803f
 8001b34:	58025408 	.word	0x58025408
 8001b38:	5802541c 	.word	0x5802541c
 8001b3c:	58025430 	.word	0x58025430
 8001b40:	58025444 	.word	0x58025444
 8001b44:	58025458 	.word	0x58025458
 8001b48:	5802546c 	.word	0x5802546c
 8001b4c:	58025480 	.word	0x58025480
 8001b50:	58025494 	.word	0x58025494
 8001b54:	fffe000f 	.word	0xfffe000f
 8001b58:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68d2      	ldr	r2, [r2, #12]
 8001b5e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b60:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001b68:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	695b      	ldr	r3, [r3, #20]
 8001b6e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001b70:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	699b      	ldr	r3, [r3, #24]
 8001b76:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001b78:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	69db      	ldr	r3, [r3, #28]
 8001b7e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001b80:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001b88:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	697a      	ldr	r2, [r7, #20]
 8001b96:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	461a      	mov	r2, r3
 8001b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8001d58 <HAL_DMA_Init+0x648>)
 8001ba0:	4413      	add	r3, r2
 8001ba2:	4a6e      	ldr	r2, [pc, #440]	@ (8001d5c <HAL_DMA_Init+0x64c>)
 8001ba4:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba8:	091b      	lsrs	r3, r3, #4
 8001baa:	009a      	lsls	r2, r3, #2
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f002 f9b5 	bl	8003f20 <DMA_CalcBaseAndBitshift>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	409a      	lsls	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	e008      	b.n	8001bde <HAL_DMA_Init+0x4ce>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2240      	movs	r2, #64	@ 0x40
 8001bd0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2203      	movs	r2, #3
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e0b7      	b.n	8001d4e <HAL_DMA_Init+0x63e>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a5f      	ldr	r2, [pc, #380]	@ (8001d60 <HAL_DMA_Init+0x650>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d072      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a5d      	ldr	r2, [pc, #372]	@ (8001d64 <HAL_DMA_Init+0x654>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d06d      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d68 <HAL_DMA_Init+0x658>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d068      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a5a      	ldr	r2, [pc, #360]	@ (8001d6c <HAL_DMA_Init+0x65c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d063      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a59      	ldr	r2, [pc, #356]	@ (8001d70 <HAL_DMA_Init+0x660>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d05e      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a57      	ldr	r2, [pc, #348]	@ (8001d74 <HAL_DMA_Init+0x664>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d059      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a56      	ldr	r2, [pc, #344]	@ (8001d78 <HAL_DMA_Init+0x668>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d054      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a54      	ldr	r2, [pc, #336]	@ (8001d7c <HAL_DMA_Init+0x66c>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d04f      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a53      	ldr	r2, [pc, #332]	@ (8001d80 <HAL_DMA_Init+0x670>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d04a      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a51      	ldr	r2, [pc, #324]	@ (8001d84 <HAL_DMA_Init+0x674>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d045      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a50      	ldr	r2, [pc, #320]	@ (8001d88 <HAL_DMA_Init+0x678>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d040      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a4e      	ldr	r2, [pc, #312]	@ (8001d8c <HAL_DMA_Init+0x67c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d03b      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a4d      	ldr	r2, [pc, #308]	@ (8001d90 <HAL_DMA_Init+0x680>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d036      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a4b      	ldr	r2, [pc, #300]	@ (8001d94 <HAL_DMA_Init+0x684>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d031      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a4a      	ldr	r2, [pc, #296]	@ (8001d98 <HAL_DMA_Init+0x688>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d02c      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a48      	ldr	r2, [pc, #288]	@ (8001d9c <HAL_DMA_Init+0x68c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d027      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a47      	ldr	r2, [pc, #284]	@ (8001da0 <HAL_DMA_Init+0x690>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d022      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a45      	ldr	r2, [pc, #276]	@ (8001da4 <HAL_DMA_Init+0x694>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d01d      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a44      	ldr	r2, [pc, #272]	@ (8001da8 <HAL_DMA_Init+0x698>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d018      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a42      	ldr	r2, [pc, #264]	@ (8001dac <HAL_DMA_Init+0x69c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d013      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a41      	ldr	r2, [pc, #260]	@ (8001db0 <HAL_DMA_Init+0x6a0>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00e      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a3f      	ldr	r2, [pc, #252]	@ (8001db4 <HAL_DMA_Init+0x6a4>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d009      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a3e      	ldr	r2, [pc, #248]	@ (8001db8 <HAL_DMA_Init+0x6a8>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d004      	beq.n	8001cce <HAL_DMA_Init+0x5be>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a3c      	ldr	r2, [pc, #240]	@ (8001dbc <HAL_DMA_Init+0x6ac>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d101      	bne.n	8001cd2 <HAL_DMA_Init+0x5c2>
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e000      	b.n	8001cd4 <HAL_DMA_Init+0x5c4>
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d032      	beq.n	8001d3e <HAL_DMA_Init+0x62e>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f002 fa4f 	bl	800417c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	2b80      	cmp	r3, #128	@ 0x80
 8001ce4:	d102      	bne.n	8001cec <HAL_DMA_Init+0x5dc>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cf4:	b2d2      	uxtb	r2, r2
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001d00:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_DMA_Init+0x61c>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	2b08      	cmp	r3, #8
 8001d10:	d80c      	bhi.n	8001d2c <HAL_DMA_Init+0x61c>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d12:	6878      	ldr	r0, [r7, #4]
 8001d14:	f002 facc 	bl	80042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001d28:	605a      	str	r2, [r3, #4]
 8001d2a:	e008      	b.n	8001d3e <HAL_DMA_Init+0x62e>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2200      	movs	r2, #0
 8001d36:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3718      	adds	r7, #24
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	a7fdabf8 	.word	0xa7fdabf8
 8001d5c:	cccccccd 	.word	0xcccccccd
 8001d60:	40020010 	.word	0x40020010
 8001d64:	40020028 	.word	0x40020028
 8001d68:	40020040 	.word	0x40020040
 8001d6c:	40020058 	.word	0x40020058
 8001d70:	40020070 	.word	0x40020070
 8001d74:	40020088 	.word	0x40020088
 8001d78:	400200a0 	.word	0x400200a0
 8001d7c:	400200b8 	.word	0x400200b8
 8001d80:	40020410 	.word	0x40020410
 8001d84:	40020428 	.word	0x40020428
 8001d88:	40020440 	.word	0x40020440
 8001d8c:	40020458 	.word	0x40020458
 8001d90:	40020470 	.word	0x40020470
 8001d94:	40020488 	.word	0x40020488
 8001d98:	400204a0 	.word	0x400204a0
 8001d9c:	400204b8 	.word	0x400204b8
 8001da0:	58025408 	.word	0x58025408
 8001da4:	5802541c 	.word	0x5802541c
 8001da8:	58025430 	.word	0x58025430
 8001dac:	58025444 	.word	0x58025444
 8001db0:	58025458 	.word	0x58025458
 8001db4:	5802546c 	.word	0x5802546c
 8001db8:	58025480 	.word	0x58025480
 8001dbc:	58025494 	.word	0x58025494

08001dc0 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	607a      	str	r2, [r7, #4]
 8001dcc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d101      	bne.n	8001ddc <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e226      	b.n	800222a <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d101      	bne.n	8001dea <HAL_DMA_Start_IT+0x2a>
 8001de6:	2302      	movs	r3, #2
 8001de8:	e21f      	b.n	800222a <HAL_DMA_Start_IT+0x46a>
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	f040 820a 	bne.w	8002214 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	2202      	movs	r2, #2
 8001e04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a68      	ldr	r2, [pc, #416]	@ (8001fb4 <HAL_DMA_Start_IT+0x1f4>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d04a      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a66      	ldr	r2, [pc, #408]	@ (8001fb8 <HAL_DMA_Start_IT+0x1f8>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d045      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a65      	ldr	r2, [pc, #404]	@ (8001fbc <HAL_DMA_Start_IT+0x1fc>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d040      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a63      	ldr	r2, [pc, #396]	@ (8001fc0 <HAL_DMA_Start_IT+0x200>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d03b      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a62      	ldr	r2, [pc, #392]	@ (8001fc4 <HAL_DMA_Start_IT+0x204>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d036      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a60      	ldr	r2, [pc, #384]	@ (8001fc8 <HAL_DMA_Start_IT+0x208>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d031      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5f      	ldr	r2, [pc, #380]	@ (8001fcc <HAL_DMA_Start_IT+0x20c>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d02c      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a5d      	ldr	r2, [pc, #372]	@ (8001fd0 <HAL_DMA_Start_IT+0x210>)
 8001e5a:	4293      	cmp	r3, r2
 8001e5c:	d027      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a5c      	ldr	r2, [pc, #368]	@ (8001fd4 <HAL_DMA_Start_IT+0x214>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d022      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a5a      	ldr	r2, [pc, #360]	@ (8001fd8 <HAL_DMA_Start_IT+0x218>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d01d      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a59      	ldr	r2, [pc, #356]	@ (8001fdc <HAL_DMA_Start_IT+0x21c>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d018      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a57      	ldr	r2, [pc, #348]	@ (8001fe0 <HAL_DMA_Start_IT+0x220>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a56      	ldr	r2, [pc, #344]	@ (8001fe4 <HAL_DMA_Start_IT+0x224>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d00e      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a54      	ldr	r2, [pc, #336]	@ (8001fe8 <HAL_DMA_Start_IT+0x228>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d009      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a53      	ldr	r2, [pc, #332]	@ (8001fec <HAL_DMA_Start_IT+0x22c>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d004      	beq.n	8001eae <HAL_DMA_Start_IT+0xee>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a51      	ldr	r2, [pc, #324]	@ (8001ff0 <HAL_DMA_Start_IT+0x230>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d108      	bne.n	8001ec0 <HAL_DMA_Start_IT+0x100>
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0201 	bic.w	r2, r2, #1
 8001ebc:	601a      	str	r2, [r3, #0]
 8001ebe:	e007      	b.n	8001ed0 <HAL_DMA_Start_IT+0x110>
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f022 0201 	bic.w	r2, r2, #1
 8001ece:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68b9      	ldr	r1, [r7, #8]
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f001 fe76 	bl	8003bc8 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a34      	ldr	r2, [pc, #208]	@ (8001fb4 <HAL_DMA_Start_IT+0x1f4>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d04a      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a33      	ldr	r2, [pc, #204]	@ (8001fb8 <HAL_DMA_Start_IT+0x1f8>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d045      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a31      	ldr	r2, [pc, #196]	@ (8001fbc <HAL_DMA_Start_IT+0x1fc>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d040      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a30      	ldr	r2, [pc, #192]	@ (8001fc0 <HAL_DMA_Start_IT+0x200>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d03b      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2e      	ldr	r2, [pc, #184]	@ (8001fc4 <HAL_DMA_Start_IT+0x204>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d036      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc8 <HAL_DMA_Start_IT+0x208>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d031      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	@ (8001fcc <HAL_DMA_Start_IT+0x20c>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d02c      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd0 <HAL_DMA_Start_IT+0x210>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d027      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a28      	ldr	r2, [pc, #160]	@ (8001fd4 <HAL_DMA_Start_IT+0x214>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d022      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a27      	ldr	r2, [pc, #156]	@ (8001fd8 <HAL_DMA_Start_IT+0x218>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d01d      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a25      	ldr	r2, [pc, #148]	@ (8001fdc <HAL_DMA_Start_IT+0x21c>)
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d018      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	4a24      	ldr	r2, [pc, #144]	@ (8001fe0 <HAL_DMA_Start_IT+0x220>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d013      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <HAL_DMA_Start_IT+0x224>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d00e      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <HAL_DMA_Start_IT+0x228>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d009      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fec <HAL_DMA_Start_IT+0x22c>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d004      	beq.n	8001f7c <HAL_DMA_Start_IT+0x1bc>
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <HAL_DMA_Start_IT+0x230>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d101      	bne.n	8001f80 <HAL_DMA_Start_IT+0x1c0>
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	e000      	b.n	8001f82 <HAL_DMA_Start_IT+0x1c2>
 8001f80:	2300      	movs	r3, #0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d036      	beq.n	8001ff4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f023 021e 	bic.w	r2, r3, #30
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f042 0216 	orr.w	r2, r2, #22
 8001f98:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d03e      	beq.n	8002020 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f042 0208 	orr.w	r2, r2, #8
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	e035      	b.n	8002020 <HAL_DMA_Start_IT+0x260>
 8001fb4:	40020010 	.word	0x40020010
 8001fb8:	40020028 	.word	0x40020028
 8001fbc:	40020040 	.word	0x40020040
 8001fc0:	40020058 	.word	0x40020058
 8001fc4:	40020070 	.word	0x40020070
 8001fc8:	40020088 	.word	0x40020088
 8001fcc:	400200a0 	.word	0x400200a0
 8001fd0:	400200b8 	.word	0x400200b8
 8001fd4:	40020410 	.word	0x40020410
 8001fd8:	40020428 	.word	0x40020428
 8001fdc:	40020440 	.word	0x40020440
 8001fe0:	40020458 	.word	0x40020458
 8001fe4:	40020470 	.word	0x40020470
 8001fe8:	40020488 	.word	0x40020488
 8001fec:	400204a0 	.word	0x400204a0
 8001ff0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f023 020e 	bic.w	r2, r3, #14
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f042 020a 	orr.w	r2, r2, #10
 8002006:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f042 0204 	orr.w	r2, r2, #4
 800201e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a83      	ldr	r2, [pc, #524]	@ (8002234 <HAL_DMA_Start_IT+0x474>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d072      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a82      	ldr	r2, [pc, #520]	@ (8002238 <HAL_DMA_Start_IT+0x478>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d06d      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a80      	ldr	r2, [pc, #512]	@ (800223c <HAL_DMA_Start_IT+0x47c>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d068      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a7f      	ldr	r2, [pc, #508]	@ (8002240 <HAL_DMA_Start_IT+0x480>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d063      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a7d      	ldr	r2, [pc, #500]	@ (8002244 <HAL_DMA_Start_IT+0x484>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d05e      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a7c      	ldr	r2, [pc, #496]	@ (8002248 <HAL_DMA_Start_IT+0x488>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d059      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a7a      	ldr	r2, [pc, #488]	@ (800224c <HAL_DMA_Start_IT+0x48c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d054      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	4a79      	ldr	r2, [pc, #484]	@ (8002250 <HAL_DMA_Start_IT+0x490>)
 800206c:	4293      	cmp	r3, r2
 800206e:	d04f      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a77      	ldr	r2, [pc, #476]	@ (8002254 <HAL_DMA_Start_IT+0x494>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d04a      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a76      	ldr	r2, [pc, #472]	@ (8002258 <HAL_DMA_Start_IT+0x498>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d045      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a74      	ldr	r2, [pc, #464]	@ (800225c <HAL_DMA_Start_IT+0x49c>)
 800208a:	4293      	cmp	r3, r2
 800208c:	d040      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a73      	ldr	r2, [pc, #460]	@ (8002260 <HAL_DMA_Start_IT+0x4a0>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d03b      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a71      	ldr	r2, [pc, #452]	@ (8002264 <HAL_DMA_Start_IT+0x4a4>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d036      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4a70      	ldr	r2, [pc, #448]	@ (8002268 <HAL_DMA_Start_IT+0x4a8>)
 80020a8:	4293      	cmp	r3, r2
 80020aa:	d031      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a6e      	ldr	r2, [pc, #440]	@ (800226c <HAL_DMA_Start_IT+0x4ac>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d02c      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a6d      	ldr	r2, [pc, #436]	@ (8002270 <HAL_DMA_Start_IT+0x4b0>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d027      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a6b      	ldr	r2, [pc, #428]	@ (8002274 <HAL_DMA_Start_IT+0x4b4>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d022      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6a      	ldr	r2, [pc, #424]	@ (8002278 <HAL_DMA_Start_IT+0x4b8>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d01d      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a68      	ldr	r2, [pc, #416]	@ (800227c <HAL_DMA_Start_IT+0x4bc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d018      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4a67      	ldr	r2, [pc, #412]	@ (8002280 <HAL_DMA_Start_IT+0x4c0>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d013      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a65      	ldr	r2, [pc, #404]	@ (8002284 <HAL_DMA_Start_IT+0x4c4>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d00e      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a64      	ldr	r2, [pc, #400]	@ (8002288 <HAL_DMA_Start_IT+0x4c8>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d009      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a62      	ldr	r2, [pc, #392]	@ (800228c <HAL_DMA_Start_IT+0x4cc>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d004      	beq.n	8002110 <HAL_DMA_Start_IT+0x350>
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a61      	ldr	r2, [pc, #388]	@ (8002290 <HAL_DMA_Start_IT+0x4d0>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d101      	bne.n	8002114 <HAL_DMA_Start_IT+0x354>
 8002110:	2301      	movs	r3, #1
 8002112:	e000      	b.n	8002116 <HAL_DMA_Start_IT+0x356>
 8002114:	2300      	movs	r3, #0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d01a      	beq.n	8002150 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800212c:	681a      	ldr	r2, [r3, #0]
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002132:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002136:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800213c:	2b00      	cmp	r3, #0
 800213e:	d007      	beq.n	8002150 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800214a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800214e:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a37      	ldr	r2, [pc, #220]	@ (8002234 <HAL_DMA_Start_IT+0x474>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d04a      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a36      	ldr	r2, [pc, #216]	@ (8002238 <HAL_DMA_Start_IT+0x478>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d045      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a34      	ldr	r2, [pc, #208]	@ (800223c <HAL_DMA_Start_IT+0x47c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d040      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a33      	ldr	r2, [pc, #204]	@ (8002240 <HAL_DMA_Start_IT+0x480>)
 8002174:	4293      	cmp	r3, r2
 8002176:	d03b      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a31      	ldr	r2, [pc, #196]	@ (8002244 <HAL_DMA_Start_IT+0x484>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d036      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a30      	ldr	r2, [pc, #192]	@ (8002248 <HAL_DMA_Start_IT+0x488>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d031      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a2e      	ldr	r2, [pc, #184]	@ (800224c <HAL_DMA_Start_IT+0x48c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d02c      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a2d      	ldr	r2, [pc, #180]	@ (8002250 <HAL_DMA_Start_IT+0x490>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d027      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2b      	ldr	r2, [pc, #172]	@ (8002254 <HAL_DMA_Start_IT+0x494>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d022      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a2a      	ldr	r2, [pc, #168]	@ (8002258 <HAL_DMA_Start_IT+0x498>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d01d      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a28      	ldr	r2, [pc, #160]	@ (800225c <HAL_DMA_Start_IT+0x49c>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d018      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a27      	ldr	r2, [pc, #156]	@ (8002260 <HAL_DMA_Start_IT+0x4a0>)
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d013      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	4a25      	ldr	r2, [pc, #148]	@ (8002264 <HAL_DMA_Start_IT+0x4a4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d00e      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a24      	ldr	r2, [pc, #144]	@ (8002268 <HAL_DMA_Start_IT+0x4a8>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d009      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a22      	ldr	r2, [pc, #136]	@ (800226c <HAL_DMA_Start_IT+0x4ac>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d004      	beq.n	80021f0 <HAL_DMA_Start_IT+0x430>
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a21      	ldr	r2, [pc, #132]	@ (8002270 <HAL_DMA_Start_IT+0x4b0>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d108      	bne.n	8002202 <HAL_DMA_Start_IT+0x442>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0201 	orr.w	r2, r2, #1
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e012      	b.n	8002228 <HAL_DMA_Start_IT+0x468>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f042 0201 	orr.w	r2, r2, #1
 8002210:	601a      	str	r2, [r3, #0]
 8002212:	e009      	b.n	8002228 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800221a:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2200      	movs	r2, #0
 8002220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8002228:	7dfb      	ldrb	r3, [r7, #23]
}
 800222a:	4618      	mov	r0, r3
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40020010 	.word	0x40020010
 8002238:	40020028 	.word	0x40020028
 800223c:	40020040 	.word	0x40020040
 8002240:	40020058 	.word	0x40020058
 8002244:	40020070 	.word	0x40020070
 8002248:	40020088 	.word	0x40020088
 800224c:	400200a0 	.word	0x400200a0
 8002250:	400200b8 	.word	0x400200b8
 8002254:	40020410 	.word	0x40020410
 8002258:	40020428 	.word	0x40020428
 800225c:	40020440 	.word	0x40020440
 8002260:	40020458 	.word	0x40020458
 8002264:	40020470 	.word	0x40020470
 8002268:	40020488 	.word	0x40020488
 800226c:	400204a0 	.word	0x400204a0
 8002270:	400204b8 	.word	0x400204b8
 8002274:	58025408 	.word	0x58025408
 8002278:	5802541c 	.word	0x5802541c
 800227c:	58025430 	.word	0x58025430
 8002280:	58025444 	.word	0x58025444
 8002284:	58025458 	.word	0x58025458
 8002288:	5802546c 	.word	0x5802546c
 800228c:	58025480 	.word	0x58025480
 8002290:	58025494 	.word	0x58025494

08002294 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800229c:	f7ff f8a4 	bl	80013e8 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d101      	bne.n	80022ac <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e2dc      	b.n	8002866 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d008      	beq.n	80022ca <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2280      	movs	r2, #128	@ 0x80
 80022bc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2200      	movs	r2, #0
 80022c2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	e2cd      	b.n	8002866 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a76      	ldr	r2, [pc, #472]	@ (80024a8 <HAL_DMA_Abort+0x214>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d04a      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a74      	ldr	r2, [pc, #464]	@ (80024ac <HAL_DMA_Abort+0x218>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d045      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a73      	ldr	r2, [pc, #460]	@ (80024b0 <HAL_DMA_Abort+0x21c>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d040      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a71      	ldr	r2, [pc, #452]	@ (80024b4 <HAL_DMA_Abort+0x220>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d03b      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a70      	ldr	r2, [pc, #448]	@ (80024b8 <HAL_DMA_Abort+0x224>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d036      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a6e      	ldr	r2, [pc, #440]	@ (80024bc <HAL_DMA_Abort+0x228>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d031      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a6d      	ldr	r2, [pc, #436]	@ (80024c0 <HAL_DMA_Abort+0x22c>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d02c      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a6b      	ldr	r2, [pc, #428]	@ (80024c4 <HAL_DMA_Abort+0x230>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d027      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a6a      	ldr	r2, [pc, #424]	@ (80024c8 <HAL_DMA_Abort+0x234>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d022      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a68      	ldr	r2, [pc, #416]	@ (80024cc <HAL_DMA_Abort+0x238>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d01d      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a67      	ldr	r2, [pc, #412]	@ (80024d0 <HAL_DMA_Abort+0x23c>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d018      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a65      	ldr	r2, [pc, #404]	@ (80024d4 <HAL_DMA_Abort+0x240>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d013      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a64      	ldr	r2, [pc, #400]	@ (80024d8 <HAL_DMA_Abort+0x244>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d00e      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a62      	ldr	r2, [pc, #392]	@ (80024dc <HAL_DMA_Abort+0x248>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d009      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a61      	ldr	r2, [pc, #388]	@ (80024e0 <HAL_DMA_Abort+0x24c>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d004      	beq.n	800236a <HAL_DMA_Abort+0xd6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a5f      	ldr	r2, [pc, #380]	@ (80024e4 <HAL_DMA_Abort+0x250>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d101      	bne.n	800236e <HAL_DMA_Abort+0xda>
 800236a:	2301      	movs	r3, #1
 800236c:	e000      	b.n	8002370 <HAL_DMA_Abort+0xdc>
 800236e:	2300      	movs	r3, #0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f022 021e 	bic.w	r2, r2, #30
 8002382:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695a      	ldr	r2, [r3, #20]
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002392:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	e00a      	b.n	80023b2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f022 020e 	bic.w	r2, r2, #14
 80023aa:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a3c      	ldr	r2, [pc, #240]	@ (80024a8 <HAL_DMA_Abort+0x214>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d072      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a3a      	ldr	r2, [pc, #232]	@ (80024ac <HAL_DMA_Abort+0x218>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d06d      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a39      	ldr	r2, [pc, #228]	@ (80024b0 <HAL_DMA_Abort+0x21c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d068      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a37      	ldr	r2, [pc, #220]	@ (80024b4 <HAL_DMA_Abort+0x220>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d063      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a36      	ldr	r2, [pc, #216]	@ (80024b8 <HAL_DMA_Abort+0x224>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d05e      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a34      	ldr	r2, [pc, #208]	@ (80024bc <HAL_DMA_Abort+0x228>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d059      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a33      	ldr	r2, [pc, #204]	@ (80024c0 <HAL_DMA_Abort+0x22c>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d054      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a31      	ldr	r2, [pc, #196]	@ (80024c4 <HAL_DMA_Abort+0x230>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d04f      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a30      	ldr	r2, [pc, #192]	@ (80024c8 <HAL_DMA_Abort+0x234>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04a      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2e      	ldr	r2, [pc, #184]	@ (80024cc <HAL_DMA_Abort+0x238>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d045      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2d      	ldr	r2, [pc, #180]	@ (80024d0 <HAL_DMA_Abort+0x23c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d040      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2b      	ldr	r2, [pc, #172]	@ (80024d4 <HAL_DMA_Abort+0x240>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d03b      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2a      	ldr	r2, [pc, #168]	@ (80024d8 <HAL_DMA_Abort+0x244>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d036      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a28      	ldr	r2, [pc, #160]	@ (80024dc <HAL_DMA_Abort+0x248>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d031      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	@ (80024e0 <HAL_DMA_Abort+0x24c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d02c      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a25      	ldr	r2, [pc, #148]	@ (80024e4 <HAL_DMA_Abort+0x250>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d027      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a24      	ldr	r2, [pc, #144]	@ (80024e8 <HAL_DMA_Abort+0x254>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a22      	ldr	r2, [pc, #136]	@ (80024ec <HAL_DMA_Abort+0x258>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d01d      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a21      	ldr	r2, [pc, #132]	@ (80024f0 <HAL_DMA_Abort+0x25c>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d018      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a1f      	ldr	r2, [pc, #124]	@ (80024f4 <HAL_DMA_Abort+0x260>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d013      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a1e      	ldr	r2, [pc, #120]	@ (80024f8 <HAL_DMA_Abort+0x264>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d00e      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a1c      	ldr	r2, [pc, #112]	@ (80024fc <HAL_DMA_Abort+0x268>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d009      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1b      	ldr	r2, [pc, #108]	@ (8002500 <HAL_DMA_Abort+0x26c>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d004      	beq.n	80024a2 <HAL_DMA_Abort+0x20e>
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a19      	ldr	r2, [pc, #100]	@ (8002504 <HAL_DMA_Abort+0x270>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d132      	bne.n	8002508 <HAL_DMA_Abort+0x274>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e031      	b.n	800250a <HAL_DMA_Abort+0x276>
 80024a6:	bf00      	nop
 80024a8:	40020010 	.word	0x40020010
 80024ac:	40020028 	.word	0x40020028
 80024b0:	40020040 	.word	0x40020040
 80024b4:	40020058 	.word	0x40020058
 80024b8:	40020070 	.word	0x40020070
 80024bc:	40020088 	.word	0x40020088
 80024c0:	400200a0 	.word	0x400200a0
 80024c4:	400200b8 	.word	0x400200b8
 80024c8:	40020410 	.word	0x40020410
 80024cc:	40020428 	.word	0x40020428
 80024d0:	40020440 	.word	0x40020440
 80024d4:	40020458 	.word	0x40020458
 80024d8:	40020470 	.word	0x40020470
 80024dc:	40020488 	.word	0x40020488
 80024e0:	400204a0 	.word	0x400204a0
 80024e4:	400204b8 	.word	0x400204b8
 80024e8:	58025408 	.word	0x58025408
 80024ec:	5802541c 	.word	0x5802541c
 80024f0:	58025430 	.word	0x58025430
 80024f4:	58025444 	.word	0x58025444
 80024f8:	58025458 	.word	0x58025458
 80024fc:	5802546c 	.word	0x5802546c
 8002500:	58025480 	.word	0x58025480
 8002504:	58025494 	.word	0x58025494
 8002508:	2300      	movs	r3, #0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d007      	beq.n	800251e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002518:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800251c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a6d      	ldr	r2, [pc, #436]	@ (80026d8 <HAL_DMA_Abort+0x444>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d04a      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a6b      	ldr	r2, [pc, #428]	@ (80026dc <HAL_DMA_Abort+0x448>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d045      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a6a      	ldr	r2, [pc, #424]	@ (80026e0 <HAL_DMA_Abort+0x44c>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d040      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a68      	ldr	r2, [pc, #416]	@ (80026e4 <HAL_DMA_Abort+0x450>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d03b      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a67      	ldr	r2, [pc, #412]	@ (80026e8 <HAL_DMA_Abort+0x454>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d036      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a65      	ldr	r2, [pc, #404]	@ (80026ec <HAL_DMA_Abort+0x458>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d031      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a64      	ldr	r2, [pc, #400]	@ (80026f0 <HAL_DMA_Abort+0x45c>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d02c      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a62      	ldr	r2, [pc, #392]	@ (80026f4 <HAL_DMA_Abort+0x460>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d027      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a61      	ldr	r2, [pc, #388]	@ (80026f8 <HAL_DMA_Abort+0x464>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d022      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a5f      	ldr	r2, [pc, #380]	@ (80026fc <HAL_DMA_Abort+0x468>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d01d      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a5e      	ldr	r2, [pc, #376]	@ (8002700 <HAL_DMA_Abort+0x46c>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d018      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a5c      	ldr	r2, [pc, #368]	@ (8002704 <HAL_DMA_Abort+0x470>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d013      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a5b      	ldr	r2, [pc, #364]	@ (8002708 <HAL_DMA_Abort+0x474>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00e      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a59      	ldr	r2, [pc, #356]	@ (800270c <HAL_DMA_Abort+0x478>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d009      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a58      	ldr	r2, [pc, #352]	@ (8002710 <HAL_DMA_Abort+0x47c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d004      	beq.n	80025be <HAL_DMA_Abort+0x32a>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a56      	ldr	r2, [pc, #344]	@ (8002714 <HAL_DMA_Abort+0x480>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d108      	bne.n	80025d0 <HAL_DMA_Abort+0x33c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 0201 	bic.w	r2, r2, #1
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	e007      	b.n	80025e0 <HAL_DMA_Abort+0x34c>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 0201 	bic.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80025e0:	e013      	b.n	800260a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025e2:	f7fe ff01 	bl	80013e8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b05      	cmp	r3, #5
 80025ee:	d90c      	bls.n	800260a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2220      	movs	r2, #32
 80025f4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2203      	movs	r2, #3
 80025fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8002606:	2301      	movs	r3, #1
 8002608:	e12d      	b.n	8002866 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800260a:	697b      	ldr	r3, [r7, #20]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d1e5      	bne.n	80025e2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a2f      	ldr	r2, [pc, #188]	@ (80026d8 <HAL_DMA_Abort+0x444>)
 800261c:	4293      	cmp	r3, r2
 800261e:	d04a      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a2d      	ldr	r2, [pc, #180]	@ (80026dc <HAL_DMA_Abort+0x448>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d045      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	4a2c      	ldr	r2, [pc, #176]	@ (80026e0 <HAL_DMA_Abort+0x44c>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d040      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a2a      	ldr	r2, [pc, #168]	@ (80026e4 <HAL_DMA_Abort+0x450>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d03b      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4a29      	ldr	r2, [pc, #164]	@ (80026e8 <HAL_DMA_Abort+0x454>)
 8002644:	4293      	cmp	r3, r2
 8002646:	d036      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	4a27      	ldr	r2, [pc, #156]	@ (80026ec <HAL_DMA_Abort+0x458>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d031      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a26      	ldr	r2, [pc, #152]	@ (80026f0 <HAL_DMA_Abort+0x45c>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d02c      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a24      	ldr	r2, [pc, #144]	@ (80026f4 <HAL_DMA_Abort+0x460>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d027      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a23      	ldr	r2, [pc, #140]	@ (80026f8 <HAL_DMA_Abort+0x464>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d022      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a21      	ldr	r2, [pc, #132]	@ (80026fc <HAL_DMA_Abort+0x468>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d01d      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a20      	ldr	r2, [pc, #128]	@ (8002700 <HAL_DMA_Abort+0x46c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d018      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1e      	ldr	r2, [pc, #120]	@ (8002704 <HAL_DMA_Abort+0x470>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d013      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1d      	ldr	r2, [pc, #116]	@ (8002708 <HAL_DMA_Abort+0x474>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d00e      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1b      	ldr	r2, [pc, #108]	@ (800270c <HAL_DMA_Abort+0x478>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d009      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002710 <HAL_DMA_Abort+0x47c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d004      	beq.n	80026b6 <HAL_DMA_Abort+0x422>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a18      	ldr	r2, [pc, #96]	@ (8002714 <HAL_DMA_Abort+0x480>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d101      	bne.n	80026ba <HAL_DMA_Abort+0x426>
 80026b6:	2301      	movs	r3, #1
 80026b8:	e000      	b.n	80026bc <HAL_DMA_Abort+0x428>
 80026ba:	2300      	movs	r3, #0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d02b      	beq.n	8002718 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026c4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	f003 031f 	and.w	r3, r3, #31
 80026ce:	223f      	movs	r2, #63	@ 0x3f
 80026d0:	409a      	lsls	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	e02a      	b.n	800272e <HAL_DMA_Abort+0x49a>
 80026d8:	40020010 	.word	0x40020010
 80026dc:	40020028 	.word	0x40020028
 80026e0:	40020040 	.word	0x40020040
 80026e4:	40020058 	.word	0x40020058
 80026e8:	40020070 	.word	0x40020070
 80026ec:	40020088 	.word	0x40020088
 80026f0:	400200a0 	.word	0x400200a0
 80026f4:	400200b8 	.word	0x400200b8
 80026f8:	40020410 	.word	0x40020410
 80026fc:	40020428 	.word	0x40020428
 8002700:	40020440 	.word	0x40020440
 8002704:	40020458 	.word	0x40020458
 8002708:	40020470 	.word	0x40020470
 800270c:	40020488 	.word	0x40020488
 8002710:	400204a0 	.word	0x400204a0
 8002714:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800271c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002722:	f003 031f 	and.w	r3, r3, #31
 8002726:	2201      	movs	r2, #1
 8002728:	409a      	lsls	r2, r3
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a4f      	ldr	r2, [pc, #316]	@ (8002870 <HAL_DMA_Abort+0x5dc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d072      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a4d      	ldr	r2, [pc, #308]	@ (8002874 <HAL_DMA_Abort+0x5e0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d06d      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a4c      	ldr	r2, [pc, #304]	@ (8002878 <HAL_DMA_Abort+0x5e4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d068      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a4a      	ldr	r2, [pc, #296]	@ (800287c <HAL_DMA_Abort+0x5e8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d063      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a49      	ldr	r2, [pc, #292]	@ (8002880 <HAL_DMA_Abort+0x5ec>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d05e      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a47      	ldr	r2, [pc, #284]	@ (8002884 <HAL_DMA_Abort+0x5f0>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d059      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4a46      	ldr	r2, [pc, #280]	@ (8002888 <HAL_DMA_Abort+0x5f4>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d054      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	4a44      	ldr	r2, [pc, #272]	@ (800288c <HAL_DMA_Abort+0x5f8>)
 800277a:	4293      	cmp	r3, r2
 800277c:	d04f      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4a43      	ldr	r2, [pc, #268]	@ (8002890 <HAL_DMA_Abort+0x5fc>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d04a      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a41      	ldr	r2, [pc, #260]	@ (8002894 <HAL_DMA_Abort+0x600>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d045      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a40      	ldr	r2, [pc, #256]	@ (8002898 <HAL_DMA_Abort+0x604>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d040      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a3e      	ldr	r2, [pc, #248]	@ (800289c <HAL_DMA_Abort+0x608>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d03b      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4a3d      	ldr	r2, [pc, #244]	@ (80028a0 <HAL_DMA_Abort+0x60c>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d036      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a3b      	ldr	r2, [pc, #236]	@ (80028a4 <HAL_DMA_Abort+0x610>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d031      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a3a      	ldr	r2, [pc, #232]	@ (80028a8 <HAL_DMA_Abort+0x614>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d02c      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a38      	ldr	r2, [pc, #224]	@ (80028ac <HAL_DMA_Abort+0x618>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d027      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4a37      	ldr	r2, [pc, #220]	@ (80028b0 <HAL_DMA_Abort+0x61c>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d022      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a35      	ldr	r2, [pc, #212]	@ (80028b4 <HAL_DMA_Abort+0x620>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d01d      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a34      	ldr	r2, [pc, #208]	@ (80028b8 <HAL_DMA_Abort+0x624>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d018      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a32      	ldr	r2, [pc, #200]	@ (80028bc <HAL_DMA_Abort+0x628>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d013      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a31      	ldr	r2, [pc, #196]	@ (80028c0 <HAL_DMA_Abort+0x62c>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d00e      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a2f      	ldr	r2, [pc, #188]	@ (80028c4 <HAL_DMA_Abort+0x630>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d009      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2e      	ldr	r2, [pc, #184]	@ (80028c8 <HAL_DMA_Abort+0x634>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d004      	beq.n	800281e <HAL_DMA_Abort+0x58a>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a2c      	ldr	r2, [pc, #176]	@ (80028cc <HAL_DMA_Abort+0x638>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d101      	bne.n	8002822 <HAL_DMA_Abort+0x58e>
 800281e:	2301      	movs	r3, #1
 8002820:	e000      	b.n	8002824 <HAL_DMA_Abort+0x590>
 8002822:	2300      	movs	r3, #0
 8002824:	2b00      	cmp	r3, #0
 8002826:	d015      	beq.n	8002854 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002830:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00c      	beq.n	8002854 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002844:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002848:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800284e:	687a      	ldr	r2, [r7, #4]
 8002850:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002852:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8002864:	2300      	movs	r3, #0
}
 8002866:	4618      	mov	r0, r3
 8002868:	3718      	adds	r7, #24
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40020010 	.word	0x40020010
 8002874:	40020028 	.word	0x40020028
 8002878:	40020040 	.word	0x40020040
 800287c:	40020058 	.word	0x40020058
 8002880:	40020070 	.word	0x40020070
 8002884:	40020088 	.word	0x40020088
 8002888:	400200a0 	.word	0x400200a0
 800288c:	400200b8 	.word	0x400200b8
 8002890:	40020410 	.word	0x40020410
 8002894:	40020428 	.word	0x40020428
 8002898:	40020440 	.word	0x40020440
 800289c:	40020458 	.word	0x40020458
 80028a0:	40020470 	.word	0x40020470
 80028a4:	40020488 	.word	0x40020488
 80028a8:	400204a0 	.word	0x400204a0
 80028ac:	400204b8 	.word	0x400204b8
 80028b0:	58025408 	.word	0x58025408
 80028b4:	5802541c 	.word	0x5802541c
 80028b8:	58025430 	.word	0x58025430
 80028bc:	58025444 	.word	0x58025444
 80028c0:	58025458 	.word	0x58025458
 80028c4:	5802546c 	.word	0x5802546c
 80028c8:	58025480 	.word	0x58025480
 80028cc:	58025494 	.word	0x58025494

080028d0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d101      	bne.n	80028e2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80028de:	2301      	movs	r3, #1
 80028e0:	e237      	b.n	8002d52 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d004      	beq.n	80028f8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2280      	movs	r2, #128	@ 0x80
 80028f2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e22c      	b.n	8002d52 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a5c      	ldr	r2, [pc, #368]	@ (8002a70 <HAL_DMA_Abort_IT+0x1a0>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d04a      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a5b      	ldr	r2, [pc, #364]	@ (8002a74 <HAL_DMA_Abort_IT+0x1a4>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d045      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a59      	ldr	r2, [pc, #356]	@ (8002a78 <HAL_DMA_Abort_IT+0x1a8>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d040      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a58      	ldr	r2, [pc, #352]	@ (8002a7c <HAL_DMA_Abort_IT+0x1ac>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d03b      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a56      	ldr	r2, [pc, #344]	@ (8002a80 <HAL_DMA_Abort_IT+0x1b0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d036      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a55      	ldr	r2, [pc, #340]	@ (8002a84 <HAL_DMA_Abort_IT+0x1b4>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d031      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a53      	ldr	r2, [pc, #332]	@ (8002a88 <HAL_DMA_Abort_IT+0x1b8>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d02c      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a52      	ldr	r2, [pc, #328]	@ (8002a8c <HAL_DMA_Abort_IT+0x1bc>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d027      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a50      	ldr	r2, [pc, #320]	@ (8002a90 <HAL_DMA_Abort_IT+0x1c0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d022      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a4f      	ldr	r2, [pc, #316]	@ (8002a94 <HAL_DMA_Abort_IT+0x1c4>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d01d      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a4d      	ldr	r2, [pc, #308]	@ (8002a98 <HAL_DMA_Abort_IT+0x1c8>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d018      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a4c      	ldr	r2, [pc, #304]	@ (8002a9c <HAL_DMA_Abort_IT+0x1cc>)
 800296c:	4293      	cmp	r3, r2
 800296e:	d013      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa0 <HAL_DMA_Abort_IT+0x1d0>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d00e      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a49      	ldr	r2, [pc, #292]	@ (8002aa4 <HAL_DMA_Abort_IT+0x1d4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d009      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a47      	ldr	r2, [pc, #284]	@ (8002aa8 <HAL_DMA_Abort_IT+0x1d8>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d004      	beq.n	8002998 <HAL_DMA_Abort_IT+0xc8>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a46      	ldr	r2, [pc, #280]	@ (8002aac <HAL_DMA_Abort_IT+0x1dc>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d101      	bne.n	800299c <HAL_DMA_Abort_IT+0xcc>
 8002998:	2301      	movs	r3, #1
 800299a:	e000      	b.n	800299e <HAL_DMA_Abort_IT+0xce>
 800299c:	2300      	movs	r3, #0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 8086 	beq.w	8002ab0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2204      	movs	r2, #4
 80029a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2f      	ldr	r2, [pc, #188]	@ (8002a70 <HAL_DMA_Abort_IT+0x1a0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d04a      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a2e      	ldr	r2, [pc, #184]	@ (8002a74 <HAL_DMA_Abort_IT+0x1a4>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d045      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a2c      	ldr	r2, [pc, #176]	@ (8002a78 <HAL_DMA_Abort_IT+0x1a8>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d040      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a2b      	ldr	r2, [pc, #172]	@ (8002a7c <HAL_DMA_Abort_IT+0x1ac>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d03b      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a29      	ldr	r2, [pc, #164]	@ (8002a80 <HAL_DMA_Abort_IT+0x1b0>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d036      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a28      	ldr	r2, [pc, #160]	@ (8002a84 <HAL_DMA_Abort_IT+0x1b4>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d031      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a26      	ldr	r2, [pc, #152]	@ (8002a88 <HAL_DMA_Abort_IT+0x1b8>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d02c      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a25      	ldr	r2, [pc, #148]	@ (8002a8c <HAL_DMA_Abort_IT+0x1bc>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d027      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a23      	ldr	r2, [pc, #140]	@ (8002a90 <HAL_DMA_Abort_IT+0x1c0>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d022      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a22      	ldr	r2, [pc, #136]	@ (8002a94 <HAL_DMA_Abort_IT+0x1c4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d01d      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a20      	ldr	r2, [pc, #128]	@ (8002a98 <HAL_DMA_Abort_IT+0x1c8>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d018      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002a9c <HAL_DMA_Abort_IT+0x1cc>)
 8002a20:	4293      	cmp	r3, r2
 8002a22:	d013      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a1d      	ldr	r2, [pc, #116]	@ (8002aa0 <HAL_DMA_Abort_IT+0x1d0>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d00e      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a1c      	ldr	r2, [pc, #112]	@ (8002aa4 <HAL_DMA_Abort_IT+0x1d4>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d009      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8002aa8 <HAL_DMA_Abort_IT+0x1d8>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d004      	beq.n	8002a4c <HAL_DMA_Abort_IT+0x17c>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a19      	ldr	r2, [pc, #100]	@ (8002aac <HAL_DMA_Abort_IT+0x1dc>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d108      	bne.n	8002a5e <HAL_DMA_Abort_IT+0x18e>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0201 	bic.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	e178      	b.n	8002d50 <HAL_DMA_Abort_IT+0x480>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f022 0201 	bic.w	r2, r2, #1
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	e16f      	b.n	8002d50 <HAL_DMA_Abort_IT+0x480>
 8002a70:	40020010 	.word	0x40020010
 8002a74:	40020028 	.word	0x40020028
 8002a78:	40020040 	.word	0x40020040
 8002a7c:	40020058 	.word	0x40020058
 8002a80:	40020070 	.word	0x40020070
 8002a84:	40020088 	.word	0x40020088
 8002a88:	400200a0 	.word	0x400200a0
 8002a8c:	400200b8 	.word	0x400200b8
 8002a90:	40020410 	.word	0x40020410
 8002a94:	40020428 	.word	0x40020428
 8002a98:	40020440 	.word	0x40020440
 8002a9c:	40020458 	.word	0x40020458
 8002aa0:	40020470 	.word	0x40020470
 8002aa4:	40020488 	.word	0x40020488
 8002aa8:	400204a0 	.word	0x400204a0
 8002aac:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f022 020e 	bic.w	r2, r2, #14
 8002abe:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a6c      	ldr	r2, [pc, #432]	@ (8002c78 <HAL_DMA_Abort_IT+0x3a8>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d04a      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a6b      	ldr	r2, [pc, #428]	@ (8002c7c <HAL_DMA_Abort_IT+0x3ac>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d045      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a69      	ldr	r2, [pc, #420]	@ (8002c80 <HAL_DMA_Abort_IT+0x3b0>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d040      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	4a68      	ldr	r2, [pc, #416]	@ (8002c84 <HAL_DMA_Abort_IT+0x3b4>)
 8002ae4:	4293      	cmp	r3, r2
 8002ae6:	d03b      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a66      	ldr	r2, [pc, #408]	@ (8002c88 <HAL_DMA_Abort_IT+0x3b8>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d036      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4a65      	ldr	r2, [pc, #404]	@ (8002c8c <HAL_DMA_Abort_IT+0x3bc>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d031      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a63      	ldr	r2, [pc, #396]	@ (8002c90 <HAL_DMA_Abort_IT+0x3c0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d02c      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a62      	ldr	r2, [pc, #392]	@ (8002c94 <HAL_DMA_Abort_IT+0x3c4>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d027      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a60      	ldr	r2, [pc, #384]	@ (8002c98 <HAL_DMA_Abort_IT+0x3c8>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d022      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a5f      	ldr	r2, [pc, #380]	@ (8002c9c <HAL_DMA_Abort_IT+0x3cc>)
 8002b20:	4293      	cmp	r3, r2
 8002b22:	d01d      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a5d      	ldr	r2, [pc, #372]	@ (8002ca0 <HAL_DMA_Abort_IT+0x3d0>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d018      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a5c      	ldr	r2, [pc, #368]	@ (8002ca4 <HAL_DMA_Abort_IT+0x3d4>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d013      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a5a      	ldr	r2, [pc, #360]	@ (8002ca8 <HAL_DMA_Abort_IT+0x3d8>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d00e      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a59      	ldr	r2, [pc, #356]	@ (8002cac <HAL_DMA_Abort_IT+0x3dc>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d009      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a57      	ldr	r2, [pc, #348]	@ (8002cb0 <HAL_DMA_Abort_IT+0x3e0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d004      	beq.n	8002b60 <HAL_DMA_Abort_IT+0x290>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a56      	ldr	r2, [pc, #344]	@ (8002cb4 <HAL_DMA_Abort_IT+0x3e4>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d108      	bne.n	8002b72 <HAL_DMA_Abort_IT+0x2a2>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	e007      	b.n	8002b82 <HAL_DMA_Abort_IT+0x2b2>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0201 	bic.w	r2, r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a3c      	ldr	r2, [pc, #240]	@ (8002c78 <HAL_DMA_Abort_IT+0x3a8>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d072      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a3a      	ldr	r2, [pc, #232]	@ (8002c7c <HAL_DMA_Abort_IT+0x3ac>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d06d      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a39      	ldr	r2, [pc, #228]	@ (8002c80 <HAL_DMA_Abort_IT+0x3b0>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d068      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a37      	ldr	r2, [pc, #220]	@ (8002c84 <HAL_DMA_Abort_IT+0x3b4>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d063      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a36      	ldr	r2, [pc, #216]	@ (8002c88 <HAL_DMA_Abort_IT+0x3b8>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d05e      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4a34      	ldr	r2, [pc, #208]	@ (8002c8c <HAL_DMA_Abort_IT+0x3bc>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d059      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a33      	ldr	r2, [pc, #204]	@ (8002c90 <HAL_DMA_Abort_IT+0x3c0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d054      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a31      	ldr	r2, [pc, #196]	@ (8002c94 <HAL_DMA_Abort_IT+0x3c4>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d04f      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a30      	ldr	r2, [pc, #192]	@ (8002c98 <HAL_DMA_Abort_IT+0x3c8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d04a      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c9c <HAL_DMA_Abort_IT+0x3cc>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d045      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a2d      	ldr	r2, [pc, #180]	@ (8002ca0 <HAL_DMA_Abort_IT+0x3d0>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d040      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a2b      	ldr	r2, [pc, #172]	@ (8002ca4 <HAL_DMA_Abort_IT+0x3d4>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d03b      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a2a      	ldr	r2, [pc, #168]	@ (8002ca8 <HAL_DMA_Abort_IT+0x3d8>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d036      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a28      	ldr	r2, [pc, #160]	@ (8002cac <HAL_DMA_Abort_IT+0x3dc>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d031      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a27      	ldr	r2, [pc, #156]	@ (8002cb0 <HAL_DMA_Abort_IT+0x3e0>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d02c      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a25      	ldr	r2, [pc, #148]	@ (8002cb4 <HAL_DMA_Abort_IT+0x3e4>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d027      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a24      	ldr	r2, [pc, #144]	@ (8002cb8 <HAL_DMA_Abort_IT+0x3e8>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d022      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a22      	ldr	r2, [pc, #136]	@ (8002cbc <HAL_DMA_Abort_IT+0x3ec>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d01d      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a21      	ldr	r2, [pc, #132]	@ (8002cc0 <HAL_DMA_Abort_IT+0x3f0>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d018      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a1f      	ldr	r2, [pc, #124]	@ (8002cc4 <HAL_DMA_Abort_IT+0x3f4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_DMA_Abort_IT+0x3f8>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00e      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a1c      	ldr	r2, [pc, #112]	@ (8002ccc <HAL_DMA_Abort_IT+0x3fc>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d009      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1b      	ldr	r2, [pc, #108]	@ (8002cd0 <HAL_DMA_Abort_IT+0x400>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d004      	beq.n	8002c72 <HAL_DMA_Abort_IT+0x3a2>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a19      	ldr	r2, [pc, #100]	@ (8002cd4 <HAL_DMA_Abort_IT+0x404>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d132      	bne.n	8002cd8 <HAL_DMA_Abort_IT+0x408>
 8002c72:	2301      	movs	r3, #1
 8002c74:	e031      	b.n	8002cda <HAL_DMA_Abort_IT+0x40a>
 8002c76:	bf00      	nop
 8002c78:	40020010 	.word	0x40020010
 8002c7c:	40020028 	.word	0x40020028
 8002c80:	40020040 	.word	0x40020040
 8002c84:	40020058 	.word	0x40020058
 8002c88:	40020070 	.word	0x40020070
 8002c8c:	40020088 	.word	0x40020088
 8002c90:	400200a0 	.word	0x400200a0
 8002c94:	400200b8 	.word	0x400200b8
 8002c98:	40020410 	.word	0x40020410
 8002c9c:	40020428 	.word	0x40020428
 8002ca0:	40020440 	.word	0x40020440
 8002ca4:	40020458 	.word	0x40020458
 8002ca8:	40020470 	.word	0x40020470
 8002cac:	40020488 	.word	0x40020488
 8002cb0:	400204a0 	.word	0x400204a0
 8002cb4:	400204b8 	.word	0x400204b8
 8002cb8:	58025408 	.word	0x58025408
 8002cbc:	5802541c 	.word	0x5802541c
 8002cc0:	58025430 	.word	0x58025430
 8002cc4:	58025444 	.word	0x58025444
 8002cc8:	58025458 	.word	0x58025458
 8002ccc:	5802546c 	.word	0x5802546c
 8002cd0:	58025480 	.word	0x58025480
 8002cd4:	58025494 	.word	0x58025494
 8002cd8:	2300      	movs	r3, #0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d028      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002ce8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002cec:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002cf2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf8:	f003 031f 	and.w	r3, r3, #31
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	409a      	lsls	r2, r3
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d08:	687a      	ldr	r2, [r7, #4]
 8002d0a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002d0c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00c      	beq.n	8002d30 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002d20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d24:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	687a      	ldr	r2, [r7, #4]
 8002d2c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8002d2e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d003      	beq.n	8002d50 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3710      	adds	r7, #16
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop

08002d5c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	@ 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002d68:	4b67      	ldr	r3, [pc, #412]	@ (8002f08 <HAL_DMA_IRQHandler+0x1ac>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a67      	ldr	r2, [pc, #412]	@ (8002f0c <HAL_DMA_IRQHandler+0x1b0>)
 8002d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8002d72:	0a9b      	lsrs	r3, r3, #10
 8002d74:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d7a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d80:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002d82:	6a3b      	ldr	r3, [r7, #32]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a5f      	ldr	r2, [pc, #380]	@ (8002f10 <HAL_DMA_IRQHandler+0x1b4>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d04a      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a5d      	ldr	r2, [pc, #372]	@ (8002f14 <HAL_DMA_IRQHandler+0x1b8>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d045      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a5c      	ldr	r2, [pc, #368]	@ (8002f18 <HAL_DMA_IRQHandler+0x1bc>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d040      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a5a      	ldr	r2, [pc, #360]	@ (8002f1c <HAL_DMA_IRQHandler+0x1c0>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d03b      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4a59      	ldr	r2, [pc, #356]	@ (8002f20 <HAL_DMA_IRQHandler+0x1c4>)
 8002dbc:	4293      	cmp	r3, r2
 8002dbe:	d036      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a57      	ldr	r2, [pc, #348]	@ (8002f24 <HAL_DMA_IRQHandler+0x1c8>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d031      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4a56      	ldr	r2, [pc, #344]	@ (8002f28 <HAL_DMA_IRQHandler+0x1cc>)
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d02c      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a54      	ldr	r2, [pc, #336]	@ (8002f2c <HAL_DMA_IRQHandler+0x1d0>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d027      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a53      	ldr	r2, [pc, #332]	@ (8002f30 <HAL_DMA_IRQHandler+0x1d4>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d022      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a51      	ldr	r2, [pc, #324]	@ (8002f34 <HAL_DMA_IRQHandler+0x1d8>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d01d      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a50      	ldr	r2, [pc, #320]	@ (8002f38 <HAL_DMA_IRQHandler+0x1dc>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d018      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a4e      	ldr	r2, [pc, #312]	@ (8002f3c <HAL_DMA_IRQHandler+0x1e0>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d013      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a4d      	ldr	r2, [pc, #308]	@ (8002f40 <HAL_DMA_IRQHandler+0x1e4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d00e      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a4b      	ldr	r2, [pc, #300]	@ (8002f44 <HAL_DMA_IRQHandler+0x1e8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d009      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a4a      	ldr	r2, [pc, #296]	@ (8002f48 <HAL_DMA_IRQHandler+0x1ec>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d004      	beq.n	8002e2e <HAL_DMA_IRQHandler+0xd2>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a48      	ldr	r2, [pc, #288]	@ (8002f4c <HAL_DMA_IRQHandler+0x1f0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_DMA_IRQHandler+0xd6>
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e000      	b.n	8002e34 <HAL_DMA_IRQHandler+0xd8>
 8002e32:	2300      	movs	r3, #0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	f000 842b 	beq.w	8003690 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e3e:	f003 031f 	and.w	r3, r3, #31
 8002e42:	2208      	movs	r2, #8
 8002e44:	409a      	lsls	r2, r3
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 80a2 	beq.w	8002f94 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4a2e      	ldr	r2, [pc, #184]	@ (8002f10 <HAL_DMA_IRQHandler+0x1b4>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d04a      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a2d      	ldr	r2, [pc, #180]	@ (8002f14 <HAL_DMA_IRQHandler+0x1b8>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d045      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a2b      	ldr	r2, [pc, #172]	@ (8002f18 <HAL_DMA_IRQHandler+0x1bc>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d040      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a2a      	ldr	r2, [pc, #168]	@ (8002f1c <HAL_DMA_IRQHandler+0x1c0>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d03b      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a28      	ldr	r2, [pc, #160]	@ (8002f20 <HAL_DMA_IRQHandler+0x1c4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d036      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a27      	ldr	r2, [pc, #156]	@ (8002f24 <HAL_DMA_IRQHandler+0x1c8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d031      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a25      	ldr	r2, [pc, #148]	@ (8002f28 <HAL_DMA_IRQHandler+0x1cc>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02c      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a24      	ldr	r2, [pc, #144]	@ (8002f2c <HAL_DMA_IRQHandler+0x1d0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d027      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4a22      	ldr	r2, [pc, #136]	@ (8002f30 <HAL_DMA_IRQHandler+0x1d4>)
 8002ea6:	4293      	cmp	r3, r2
 8002ea8:	d022      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a21      	ldr	r2, [pc, #132]	@ (8002f34 <HAL_DMA_IRQHandler+0x1d8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d01d      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002f38 <HAL_DMA_IRQHandler+0x1dc>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d018      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a1e      	ldr	r2, [pc, #120]	@ (8002f3c <HAL_DMA_IRQHandler+0x1e0>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a1c      	ldr	r2, [pc, #112]	@ (8002f40 <HAL_DMA_IRQHandler+0x1e4>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d00e      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4a1b      	ldr	r2, [pc, #108]	@ (8002f44 <HAL_DMA_IRQHandler+0x1e8>)
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d009      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a19      	ldr	r2, [pc, #100]	@ (8002f48 <HAL_DMA_IRQHandler+0x1ec>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d004      	beq.n	8002ef0 <HAL_DMA_IRQHandler+0x194>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	4a18      	ldr	r2, [pc, #96]	@ (8002f4c <HAL_DMA_IRQHandler+0x1f0>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d12f      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x1f4>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0304 	and.w	r3, r3, #4
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	bf14      	ite	ne
 8002efe:	2301      	movne	r3, #1
 8002f00:	2300      	moveq	r3, #0
 8002f02:	b2db      	uxtb	r3, r3
 8002f04:	e02e      	b.n	8002f64 <HAL_DMA_IRQHandler+0x208>
 8002f06:	bf00      	nop
 8002f08:	24000000 	.word	0x24000000
 8002f0c:	1b4e81b5 	.word	0x1b4e81b5
 8002f10:	40020010 	.word	0x40020010
 8002f14:	40020028 	.word	0x40020028
 8002f18:	40020040 	.word	0x40020040
 8002f1c:	40020058 	.word	0x40020058
 8002f20:	40020070 	.word	0x40020070
 8002f24:	40020088 	.word	0x40020088
 8002f28:	400200a0 	.word	0x400200a0
 8002f2c:	400200b8 	.word	0x400200b8
 8002f30:	40020410 	.word	0x40020410
 8002f34:	40020428 	.word	0x40020428
 8002f38:	40020440 	.word	0x40020440
 8002f3c:	40020458 	.word	0x40020458
 8002f40:	40020470 	.word	0x40020470
 8002f44:	40020488 	.word	0x40020488
 8002f48:	400204a0 	.word	0x400204a0
 8002f4c:	400204b8 	.word	0x400204b8
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f003 0308 	and.w	r3, r3, #8
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	bf14      	ite	ne
 8002f5e:	2301      	movne	r3, #1
 8002f60:	2300      	moveq	r3, #0
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d015      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 0204 	bic.w	r2, r2, #4
 8002f76:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	f003 031f 	and.w	r3, r3, #31
 8002f80:	2208      	movs	r2, #8
 8002f82:	409a      	lsls	r2, r3
 8002f84:	6a3b      	ldr	r3, [r7, #32]
 8002f86:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f8c:	f043 0201 	orr.w	r2, r3, #1
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f98:	f003 031f 	and.w	r3, r3, #31
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	fa22 f303 	lsr.w	r3, r2, r3
 8002fa2:	f003 0301 	and.w	r3, r3, #1
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d06e      	beq.n	8003088 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a69      	ldr	r2, [pc, #420]	@ (8003154 <HAL_DMA_IRQHandler+0x3f8>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d04a      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a67      	ldr	r2, [pc, #412]	@ (8003158 <HAL_DMA_IRQHandler+0x3fc>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d045      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a66      	ldr	r2, [pc, #408]	@ (800315c <HAL_DMA_IRQHandler+0x400>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d040      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a64      	ldr	r2, [pc, #400]	@ (8003160 <HAL_DMA_IRQHandler+0x404>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d03b      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a63      	ldr	r2, [pc, #396]	@ (8003164 <HAL_DMA_IRQHandler+0x408>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d036      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a61      	ldr	r2, [pc, #388]	@ (8003168 <HAL_DMA_IRQHandler+0x40c>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d031      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	4a60      	ldr	r2, [pc, #384]	@ (800316c <HAL_DMA_IRQHandler+0x410>)
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d02c      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a5e      	ldr	r2, [pc, #376]	@ (8003170 <HAL_DMA_IRQHandler+0x414>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d027      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a5d      	ldr	r2, [pc, #372]	@ (8003174 <HAL_DMA_IRQHandler+0x418>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d022      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a5b      	ldr	r2, [pc, #364]	@ (8003178 <HAL_DMA_IRQHandler+0x41c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d01d      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a5a      	ldr	r2, [pc, #360]	@ (800317c <HAL_DMA_IRQHandler+0x420>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d018      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a58      	ldr	r2, [pc, #352]	@ (8003180 <HAL_DMA_IRQHandler+0x424>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d013      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a57      	ldr	r2, [pc, #348]	@ (8003184 <HAL_DMA_IRQHandler+0x428>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d00e      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a55      	ldr	r2, [pc, #340]	@ (8003188 <HAL_DMA_IRQHandler+0x42c>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d009      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a54      	ldr	r2, [pc, #336]	@ (800318c <HAL_DMA_IRQHandler+0x430>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d004      	beq.n	800304a <HAL_DMA_IRQHandler+0x2ee>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a52      	ldr	r2, [pc, #328]	@ (8003190 <HAL_DMA_IRQHandler+0x434>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d10a      	bne.n	8003060 <HAL_DMA_IRQHandler+0x304>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	695b      	ldr	r3, [r3, #20]
 8003050:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e003      	b.n	8003068 <HAL_DMA_IRQHandler+0x30c>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2300      	movs	r3, #0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003070:	f003 031f 	and.w	r3, r3, #31
 8003074:	2201      	movs	r2, #1
 8003076:	409a      	lsls	r2, r3
 8003078:	6a3b      	ldr	r3, [r7, #32]
 800307a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	f043 0202 	orr.w	r2, r3, #2
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	f003 031f 	and.w	r3, r3, #31
 8003090:	2204      	movs	r2, #4
 8003092:	409a      	lsls	r2, r3
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 808f 	beq.w	80031bc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a2c      	ldr	r2, [pc, #176]	@ (8003154 <HAL_DMA_IRQHandler+0x3f8>)
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d04a      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a2a      	ldr	r2, [pc, #168]	@ (8003158 <HAL_DMA_IRQHandler+0x3fc>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d045      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a29      	ldr	r2, [pc, #164]	@ (800315c <HAL_DMA_IRQHandler+0x400>)
 80030b8:	4293      	cmp	r3, r2
 80030ba:	d040      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a27      	ldr	r2, [pc, #156]	@ (8003160 <HAL_DMA_IRQHandler+0x404>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d03b      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a26      	ldr	r2, [pc, #152]	@ (8003164 <HAL_DMA_IRQHandler+0x408>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d036      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a24      	ldr	r2, [pc, #144]	@ (8003168 <HAL_DMA_IRQHandler+0x40c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d031      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a23      	ldr	r2, [pc, #140]	@ (800316c <HAL_DMA_IRQHandler+0x410>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d02c      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a21      	ldr	r2, [pc, #132]	@ (8003170 <HAL_DMA_IRQHandler+0x414>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d027      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a20      	ldr	r2, [pc, #128]	@ (8003174 <HAL_DMA_IRQHandler+0x418>)
 80030f4:	4293      	cmp	r3, r2
 80030f6:	d022      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1e      	ldr	r2, [pc, #120]	@ (8003178 <HAL_DMA_IRQHandler+0x41c>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d01d      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a1d      	ldr	r2, [pc, #116]	@ (800317c <HAL_DMA_IRQHandler+0x420>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d018      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a1b      	ldr	r2, [pc, #108]	@ (8003180 <HAL_DMA_IRQHandler+0x424>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d013      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4a1a      	ldr	r2, [pc, #104]	@ (8003184 <HAL_DMA_IRQHandler+0x428>)
 800311c:	4293      	cmp	r3, r2
 800311e:	d00e      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a18      	ldr	r2, [pc, #96]	@ (8003188 <HAL_DMA_IRQHandler+0x42c>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d009      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a17      	ldr	r2, [pc, #92]	@ (800318c <HAL_DMA_IRQHandler+0x430>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d004      	beq.n	800313e <HAL_DMA_IRQHandler+0x3e2>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a15      	ldr	r2, [pc, #84]	@ (8003190 <HAL_DMA_IRQHandler+0x434>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d12a      	bne.n	8003194 <HAL_DMA_IRQHandler+0x438>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0302 	and.w	r3, r3, #2
 8003148:	2b00      	cmp	r3, #0
 800314a:	bf14      	ite	ne
 800314c:	2301      	movne	r3, #1
 800314e:	2300      	moveq	r3, #0
 8003150:	b2db      	uxtb	r3, r3
 8003152:	e023      	b.n	800319c <HAL_DMA_IRQHandler+0x440>
 8003154:	40020010 	.word	0x40020010
 8003158:	40020028 	.word	0x40020028
 800315c:	40020040 	.word	0x40020040
 8003160:	40020058 	.word	0x40020058
 8003164:	40020070 	.word	0x40020070
 8003168:	40020088 	.word	0x40020088
 800316c:	400200a0 	.word	0x400200a0
 8003170:	400200b8 	.word	0x400200b8
 8003174:	40020410 	.word	0x40020410
 8003178:	40020428 	.word	0x40020428
 800317c:	40020440 	.word	0x40020440
 8003180:	40020458 	.word	0x40020458
 8003184:	40020470 	.word	0x40020470
 8003188:	40020488 	.word	0x40020488
 800318c:	400204a0 	.word	0x400204a0
 8003190:	400204b8 	.word	0x400204b8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00d      	beq.n	80031bc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031a4:	f003 031f 	and.w	r3, r3, #31
 80031a8:	2204      	movs	r2, #4
 80031aa:	409a      	lsls	r2, r3
 80031ac:	6a3b      	ldr	r3, [r7, #32]
 80031ae:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031b4:	f043 0204 	orr.w	r2, r3, #4
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031c0:	f003 031f 	and.w	r3, r3, #31
 80031c4:	2210      	movs	r2, #16
 80031c6:	409a      	lsls	r2, r3
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	4013      	ands	r3, r2
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80a6 	beq.w	800331e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a85      	ldr	r2, [pc, #532]	@ (80033ec <HAL_DMA_IRQHandler+0x690>)
 80031d8:	4293      	cmp	r3, r2
 80031da:	d04a      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a83      	ldr	r2, [pc, #524]	@ (80033f0 <HAL_DMA_IRQHandler+0x694>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d045      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a82      	ldr	r2, [pc, #520]	@ (80033f4 <HAL_DMA_IRQHandler+0x698>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d040      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a80      	ldr	r2, [pc, #512]	@ (80033f8 <HAL_DMA_IRQHandler+0x69c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d03b      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a7f      	ldr	r2, [pc, #508]	@ (80033fc <HAL_DMA_IRQHandler+0x6a0>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d036      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a7d      	ldr	r2, [pc, #500]	@ (8003400 <HAL_DMA_IRQHandler+0x6a4>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d031      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a7c      	ldr	r2, [pc, #496]	@ (8003404 <HAL_DMA_IRQHandler+0x6a8>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d02c      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a7a      	ldr	r2, [pc, #488]	@ (8003408 <HAL_DMA_IRQHandler+0x6ac>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d027      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a79      	ldr	r2, [pc, #484]	@ (800340c <HAL_DMA_IRQHandler+0x6b0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d022      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a77      	ldr	r2, [pc, #476]	@ (8003410 <HAL_DMA_IRQHandler+0x6b4>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d01d      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a76      	ldr	r2, [pc, #472]	@ (8003414 <HAL_DMA_IRQHandler+0x6b8>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d018      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a74      	ldr	r2, [pc, #464]	@ (8003418 <HAL_DMA_IRQHandler+0x6bc>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d013      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a73      	ldr	r2, [pc, #460]	@ (800341c <HAL_DMA_IRQHandler+0x6c0>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d00e      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a71      	ldr	r2, [pc, #452]	@ (8003420 <HAL_DMA_IRQHandler+0x6c4>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d009      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a70      	ldr	r2, [pc, #448]	@ (8003424 <HAL_DMA_IRQHandler+0x6c8>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d004      	beq.n	8003272 <HAL_DMA_IRQHandler+0x516>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6e      	ldr	r2, [pc, #440]	@ (8003428 <HAL_DMA_IRQHandler+0x6cc>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d10a      	bne.n	8003288 <HAL_DMA_IRQHandler+0x52c>
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e009      	b.n	800329c <HAL_DMA_IRQHandler+0x540>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f003 0304 	and.w	r3, r3, #4
 8003292:	2b00      	cmp	r3, #0
 8003294:	bf14      	ite	ne
 8003296:	2301      	movne	r3, #1
 8003298:	2300      	moveq	r3, #0
 800329a:	b2db      	uxtb	r3, r3
 800329c:	2b00      	cmp	r3, #0
 800329e:	d03e      	beq.n	800331e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032a4:	f003 031f 	and.w	r3, r3, #31
 80032a8:	2210      	movs	r2, #16
 80032aa:	409a      	lsls	r2, r3
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d018      	beq.n	80032f0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d108      	bne.n	80032de <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d024      	beq.n	800331e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
 80032dc:	e01f      	b.n	800331e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d01b      	beq.n	800331e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	4798      	blx	r3
 80032ee:	e016      	b.n	800331e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d107      	bne.n	800330e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f022 0208 	bic.w	r2, r2, #8
 800330c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003312:	2b00      	cmp	r3, #0
 8003314:	d003      	beq.n	800331e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	6878      	ldr	r0, [r7, #4]
 800331c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003322:	f003 031f 	and.w	r3, r3, #31
 8003326:	2220      	movs	r2, #32
 8003328:	409a      	lsls	r2, r3
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	4013      	ands	r3, r2
 800332e:	2b00      	cmp	r3, #0
 8003330:	f000 8110 	beq.w	8003554 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a2c      	ldr	r2, [pc, #176]	@ (80033ec <HAL_DMA_IRQHandler+0x690>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d04a      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a2b      	ldr	r2, [pc, #172]	@ (80033f0 <HAL_DMA_IRQHandler+0x694>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d045      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a29      	ldr	r2, [pc, #164]	@ (80033f4 <HAL_DMA_IRQHandler+0x698>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d040      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a28      	ldr	r2, [pc, #160]	@ (80033f8 <HAL_DMA_IRQHandler+0x69c>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d03b      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a26      	ldr	r2, [pc, #152]	@ (80033fc <HAL_DMA_IRQHandler+0x6a0>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d036      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a25      	ldr	r2, [pc, #148]	@ (8003400 <HAL_DMA_IRQHandler+0x6a4>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d031      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a23      	ldr	r2, [pc, #140]	@ (8003404 <HAL_DMA_IRQHandler+0x6a8>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d02c      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a22      	ldr	r2, [pc, #136]	@ (8003408 <HAL_DMA_IRQHandler+0x6ac>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d027      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a20      	ldr	r2, [pc, #128]	@ (800340c <HAL_DMA_IRQHandler+0x6b0>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d022      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1f      	ldr	r2, [pc, #124]	@ (8003410 <HAL_DMA_IRQHandler+0x6b4>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d01d      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a1d      	ldr	r2, [pc, #116]	@ (8003414 <HAL_DMA_IRQHandler+0x6b8>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d018      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a1c      	ldr	r2, [pc, #112]	@ (8003418 <HAL_DMA_IRQHandler+0x6bc>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d013      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1a      	ldr	r2, [pc, #104]	@ (800341c <HAL_DMA_IRQHandler+0x6c0>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d00e      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a19      	ldr	r2, [pc, #100]	@ (8003420 <HAL_DMA_IRQHandler+0x6c4>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d009      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a17      	ldr	r2, [pc, #92]	@ (8003424 <HAL_DMA_IRQHandler+0x6c8>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d004      	beq.n	80033d4 <HAL_DMA_IRQHandler+0x678>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a16      	ldr	r2, [pc, #88]	@ (8003428 <HAL_DMA_IRQHandler+0x6cc>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d12b      	bne.n	800342c <HAL_DMA_IRQHandler+0x6d0>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0310 	and.w	r3, r3, #16
 80033de:	2b00      	cmp	r3, #0
 80033e0:	bf14      	ite	ne
 80033e2:	2301      	movne	r3, #1
 80033e4:	2300      	moveq	r3, #0
 80033e6:	b2db      	uxtb	r3, r3
 80033e8:	e02a      	b.n	8003440 <HAL_DMA_IRQHandler+0x6e4>
 80033ea:	bf00      	nop
 80033ec:	40020010 	.word	0x40020010
 80033f0:	40020028 	.word	0x40020028
 80033f4:	40020040 	.word	0x40020040
 80033f8:	40020058 	.word	0x40020058
 80033fc:	40020070 	.word	0x40020070
 8003400:	40020088 	.word	0x40020088
 8003404:	400200a0 	.word	0x400200a0
 8003408:	400200b8 	.word	0x400200b8
 800340c:	40020410 	.word	0x40020410
 8003410:	40020428 	.word	0x40020428
 8003414:	40020440 	.word	0x40020440
 8003418:	40020458 	.word	0x40020458
 800341c:	40020470 	.word	0x40020470
 8003420:	40020488 	.word	0x40020488
 8003424:	400204a0 	.word	0x400204a0
 8003428:	400204b8 	.word	0x400204b8
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	bf14      	ite	ne
 800343a:	2301      	movne	r3, #1
 800343c:	2300      	moveq	r3, #0
 800343e:	b2db      	uxtb	r3, r3
 8003440:	2b00      	cmp	r3, #0
 8003442:	f000 8087 	beq.w	8003554 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800344a:	f003 031f 	and.w	r3, r3, #31
 800344e:	2220      	movs	r2, #32
 8003450:	409a      	lsls	r2, r3
 8003452:	6a3b      	ldr	r3, [r7, #32]
 8003454:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b04      	cmp	r3, #4
 8003460:	d139      	bne.n	80034d6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0216 	bic.w	r2, r2, #22
 8003470:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	695a      	ldr	r2, [r3, #20]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003480:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003486:	2b00      	cmp	r3, #0
 8003488:	d103      	bne.n	8003492 <HAL_DMA_IRQHandler+0x736>
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800348e:	2b00      	cmp	r3, #0
 8003490:	d007      	beq.n	80034a2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f022 0208 	bic.w	r2, r2, #8
 80034a0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034a6:	f003 031f 	and.w	r3, r3, #31
 80034aa:	223f      	movs	r2, #63	@ 0x3f
 80034ac:	409a      	lsls	r2, r3
 80034ae:	6a3b      	ldr	r3, [r7, #32]
 80034b0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 834a 	beq.w	8003b60 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	4798      	blx	r3
          }
          return;
 80034d4:	e344      	b.n	8003b60 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d018      	beq.n	8003516 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d108      	bne.n	8003504 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d02c      	beq.n	8003554 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	4798      	blx	r3
 8003502:	e027      	b.n	8003554 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003508:	2b00      	cmp	r3, #0
 800350a:	d023      	beq.n	8003554 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	4798      	blx	r3
 8003514:	e01e      	b.n	8003554 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10f      	bne.n	8003544 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0210 	bic.w	r2, r2, #16
 8003532:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003558:	2b00      	cmp	r3, #0
 800355a:	f000 8306 	beq.w	8003b6a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003562:	f003 0301 	and.w	r3, r3, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	f000 8088 	beq.w	800367c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2204      	movs	r2, #4
 8003570:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a7a      	ldr	r2, [pc, #488]	@ (8003764 <HAL_DMA_IRQHandler+0xa08>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d04a      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	4a79      	ldr	r2, [pc, #484]	@ (8003768 <HAL_DMA_IRQHandler+0xa0c>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d045      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a77      	ldr	r2, [pc, #476]	@ (800376c <HAL_DMA_IRQHandler+0xa10>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d040      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a76      	ldr	r2, [pc, #472]	@ (8003770 <HAL_DMA_IRQHandler+0xa14>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d03b      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a74      	ldr	r2, [pc, #464]	@ (8003774 <HAL_DMA_IRQHandler+0xa18>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d036      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a73      	ldr	r2, [pc, #460]	@ (8003778 <HAL_DMA_IRQHandler+0xa1c>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d031      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a71      	ldr	r2, [pc, #452]	@ (800377c <HAL_DMA_IRQHandler+0xa20>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02c      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a70      	ldr	r2, [pc, #448]	@ (8003780 <HAL_DMA_IRQHandler+0xa24>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d027      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a6e      	ldr	r2, [pc, #440]	@ (8003784 <HAL_DMA_IRQHandler+0xa28>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d022      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a6d      	ldr	r2, [pc, #436]	@ (8003788 <HAL_DMA_IRQHandler+0xa2c>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d01d      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a6b      	ldr	r2, [pc, #428]	@ (800378c <HAL_DMA_IRQHandler+0xa30>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d018      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a6a      	ldr	r2, [pc, #424]	@ (8003790 <HAL_DMA_IRQHandler+0xa34>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d013      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a68      	ldr	r2, [pc, #416]	@ (8003794 <HAL_DMA_IRQHandler+0xa38>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00e      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a67      	ldr	r2, [pc, #412]	@ (8003798 <HAL_DMA_IRQHandler+0xa3c>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d009      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a65      	ldr	r2, [pc, #404]	@ (800379c <HAL_DMA_IRQHandler+0xa40>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d004      	beq.n	8003614 <HAL_DMA_IRQHandler+0x8b8>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a64      	ldr	r2, [pc, #400]	@ (80037a0 <HAL_DMA_IRQHandler+0xa44>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d108      	bne.n	8003626 <HAL_DMA_IRQHandler+0x8ca>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e007      	b.n	8003636 <HAL_DMA_IRQHandler+0x8da>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f022 0201 	bic.w	r2, r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	3301      	adds	r3, #1
 800363a:	60fb      	str	r3, [r7, #12]
 800363c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800363e:	429a      	cmp	r2, r3
 8003640:	d307      	bcc.n	8003652 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1f2      	bne.n	8003636 <HAL_DMA_IRQHandler+0x8da>
 8003650:	e000      	b.n	8003654 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003652:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 0301 	and.w	r3, r3, #1
 800365e:	2b00      	cmp	r3, #0
 8003660:	d004      	beq.n	800366c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2203      	movs	r2, #3
 8003666:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800366a:	e003      	b.n	8003674 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2200      	movs	r2, #0
 8003678:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 8272 	beq.w	8003b6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	4798      	blx	r3
 800368e:	e26c      	b.n	8003b6a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a43      	ldr	r2, [pc, #268]	@ (80037a4 <HAL_DMA_IRQHandler+0xa48>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d022      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x984>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	4a42      	ldr	r2, [pc, #264]	@ (80037a8 <HAL_DMA_IRQHandler+0xa4c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d01d      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x984>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a40      	ldr	r2, [pc, #256]	@ (80037ac <HAL_DMA_IRQHandler+0xa50>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d018      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x984>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4a3f      	ldr	r2, [pc, #252]	@ (80037b0 <HAL_DMA_IRQHandler+0xa54>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d013      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x984>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a3d      	ldr	r2, [pc, #244]	@ (80037b4 <HAL_DMA_IRQHandler+0xa58>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d00e      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x984>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	4a3c      	ldr	r2, [pc, #240]	@ (80037b8 <HAL_DMA_IRQHandler+0xa5c>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d009      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x984>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4a3a      	ldr	r2, [pc, #232]	@ (80037bc <HAL_DMA_IRQHandler+0xa60>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d004      	beq.n	80036e0 <HAL_DMA_IRQHandler+0x984>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a39      	ldr	r2, [pc, #228]	@ (80037c0 <HAL_DMA_IRQHandler+0xa64>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d101      	bne.n	80036e4 <HAL_DMA_IRQHandler+0x988>
 80036e0:	2301      	movs	r3, #1
 80036e2:	e000      	b.n	80036e6 <HAL_DMA_IRQHandler+0x98a>
 80036e4:	2300      	movs	r3, #0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 823f 	beq.w	8003b6a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036f8:	f003 031f 	and.w	r3, r3, #31
 80036fc:	2204      	movs	r2, #4
 80036fe:	409a      	lsls	r2, r3
 8003700:	697b      	ldr	r3, [r7, #20]
 8003702:	4013      	ands	r3, r2
 8003704:	2b00      	cmp	r3, #0
 8003706:	f000 80cd 	beq.w	80038a4 <HAL_DMA_IRQHandler+0xb48>
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	f003 0304 	and.w	r3, r3, #4
 8003710:	2b00      	cmp	r3, #0
 8003712:	f000 80c7 	beq.w	80038a4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	2204      	movs	r2, #4
 8003720:	409a      	lsls	r2, r3
 8003722:	69fb      	ldr	r3, [r7, #28]
 8003724:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d049      	beq.n	80037c4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003736:	2b00      	cmp	r3, #0
 8003738:	d109      	bne.n	800374e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 8210 	beq.w	8003b64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800374c:	e20a      	b.n	8003b64 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003752:	2b00      	cmp	r3, #0
 8003754:	f000 8206 	beq.w	8003b64 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003760:	e200      	b.n	8003b64 <HAL_DMA_IRQHandler+0xe08>
 8003762:	bf00      	nop
 8003764:	40020010 	.word	0x40020010
 8003768:	40020028 	.word	0x40020028
 800376c:	40020040 	.word	0x40020040
 8003770:	40020058 	.word	0x40020058
 8003774:	40020070 	.word	0x40020070
 8003778:	40020088 	.word	0x40020088
 800377c:	400200a0 	.word	0x400200a0
 8003780:	400200b8 	.word	0x400200b8
 8003784:	40020410 	.word	0x40020410
 8003788:	40020428 	.word	0x40020428
 800378c:	40020440 	.word	0x40020440
 8003790:	40020458 	.word	0x40020458
 8003794:	40020470 	.word	0x40020470
 8003798:	40020488 	.word	0x40020488
 800379c:	400204a0 	.word	0x400204a0
 80037a0:	400204b8 	.word	0x400204b8
 80037a4:	58025408 	.word	0x58025408
 80037a8:	5802541c 	.word	0x5802541c
 80037ac:	58025430 	.word	0x58025430
 80037b0:	58025444 	.word	0x58025444
 80037b4:	58025458 	.word	0x58025458
 80037b8:	5802546c 	.word	0x5802546c
 80037bc:	58025480 	.word	0x58025480
 80037c0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80037c4:	693b      	ldr	r3, [r7, #16]
 80037c6:	f003 0320 	and.w	r3, r3, #32
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d160      	bne.n	8003890 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a7f      	ldr	r2, [pc, #508]	@ (80039d0 <HAL_DMA_IRQHandler+0xc74>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d04a      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7d      	ldr	r2, [pc, #500]	@ (80039d4 <HAL_DMA_IRQHandler+0xc78>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d045      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a7c      	ldr	r2, [pc, #496]	@ (80039d8 <HAL_DMA_IRQHandler+0xc7c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d040      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a7a      	ldr	r2, [pc, #488]	@ (80039dc <HAL_DMA_IRQHandler+0xc80>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d03b      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a79      	ldr	r2, [pc, #484]	@ (80039e0 <HAL_DMA_IRQHandler+0xc84>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d036      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a77      	ldr	r2, [pc, #476]	@ (80039e4 <HAL_DMA_IRQHandler+0xc88>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d031      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a76      	ldr	r2, [pc, #472]	@ (80039e8 <HAL_DMA_IRQHandler+0xc8c>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d02c      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a74      	ldr	r2, [pc, #464]	@ (80039ec <HAL_DMA_IRQHandler+0xc90>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d027      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a73      	ldr	r2, [pc, #460]	@ (80039f0 <HAL_DMA_IRQHandler+0xc94>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d022      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a71      	ldr	r2, [pc, #452]	@ (80039f4 <HAL_DMA_IRQHandler+0xc98>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d01d      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	4a70      	ldr	r2, [pc, #448]	@ (80039f8 <HAL_DMA_IRQHandler+0xc9c>)
 8003838:	4293      	cmp	r3, r2
 800383a:	d018      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a6e      	ldr	r2, [pc, #440]	@ (80039fc <HAL_DMA_IRQHandler+0xca0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d013      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a6d      	ldr	r2, [pc, #436]	@ (8003a00 <HAL_DMA_IRQHandler+0xca4>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d00e      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a6b      	ldr	r2, [pc, #428]	@ (8003a04 <HAL_DMA_IRQHandler+0xca8>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d009      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a6a      	ldr	r2, [pc, #424]	@ (8003a08 <HAL_DMA_IRQHandler+0xcac>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d004      	beq.n	800386e <HAL_DMA_IRQHandler+0xb12>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a68      	ldr	r2, [pc, #416]	@ (8003a0c <HAL_DMA_IRQHandler+0xcb0>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d108      	bne.n	8003880 <HAL_DMA_IRQHandler+0xb24>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f022 0208 	bic.w	r2, r2, #8
 800387c:	601a      	str	r2, [r3, #0]
 800387e:	e007      	b.n	8003890 <HAL_DMA_IRQHandler+0xb34>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681a      	ldr	r2, [r3, #0]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 8165 	beq.w	8003b64 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038a2:	e15f      	b.n	8003b64 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2202      	movs	r2, #2
 80038ae:	409a      	lsls	r2, r3
 80038b0:	697b      	ldr	r3, [r7, #20]
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 80c5 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xce8>
 80038ba:	693b      	ldr	r3, [r7, #16]
 80038bc:	f003 0302 	and.w	r3, r3, #2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	f000 80bf 	beq.w	8003a44 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ca:	f003 031f 	and.w	r3, r3, #31
 80038ce:	2202      	movs	r2, #2
 80038d0:	409a      	lsls	r2, r3
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d018      	beq.n	8003912 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d109      	bne.n	80038fe <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	f000 813a 	beq.w	8003b68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80038fc:	e134      	b.n	8003b68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003902:	2b00      	cmp	r3, #0
 8003904:	f000 8130 	beq.w	8003b68 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800390c:	6878      	ldr	r0, [r7, #4]
 800390e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003910:	e12a      	b.n	8003b68 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	f003 0320 	and.w	r3, r3, #32
 8003918:	2b00      	cmp	r3, #0
 800391a:	f040 8089 	bne.w	8003a30 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a2b      	ldr	r2, [pc, #172]	@ (80039d0 <HAL_DMA_IRQHandler+0xc74>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d04a      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a29      	ldr	r2, [pc, #164]	@ (80039d4 <HAL_DMA_IRQHandler+0xc78>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d045      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a28      	ldr	r2, [pc, #160]	@ (80039d8 <HAL_DMA_IRQHandler+0xc7c>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d040      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a26      	ldr	r2, [pc, #152]	@ (80039dc <HAL_DMA_IRQHandler+0xc80>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d03b      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a25      	ldr	r2, [pc, #148]	@ (80039e0 <HAL_DMA_IRQHandler+0xc84>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d036      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a23      	ldr	r2, [pc, #140]	@ (80039e4 <HAL_DMA_IRQHandler+0xc88>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d031      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a22      	ldr	r2, [pc, #136]	@ (80039e8 <HAL_DMA_IRQHandler+0xc8c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d02c      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a20      	ldr	r2, [pc, #128]	@ (80039ec <HAL_DMA_IRQHandler+0xc90>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d027      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a1f      	ldr	r2, [pc, #124]	@ (80039f0 <HAL_DMA_IRQHandler+0xc94>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d022      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a1d      	ldr	r2, [pc, #116]	@ (80039f4 <HAL_DMA_IRQHandler+0xc98>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d01d      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a1c      	ldr	r2, [pc, #112]	@ (80039f8 <HAL_DMA_IRQHandler+0xc9c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d018      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a1a      	ldr	r2, [pc, #104]	@ (80039fc <HAL_DMA_IRQHandler+0xca0>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d013      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a19      	ldr	r2, [pc, #100]	@ (8003a00 <HAL_DMA_IRQHandler+0xca4>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d00e      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a17      	ldr	r2, [pc, #92]	@ (8003a04 <HAL_DMA_IRQHandler+0xca8>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d009      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a16      	ldr	r2, [pc, #88]	@ (8003a08 <HAL_DMA_IRQHandler+0xcac>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d004      	beq.n	80039be <HAL_DMA_IRQHandler+0xc62>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a14      	ldr	r2, [pc, #80]	@ (8003a0c <HAL_DMA_IRQHandler+0xcb0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d128      	bne.n	8003a10 <HAL_DMA_IRQHandler+0xcb4>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681a      	ldr	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 0214 	bic.w	r2, r2, #20
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	e027      	b.n	8003a20 <HAL_DMA_IRQHandler+0xcc4>
 80039d0:	40020010 	.word	0x40020010
 80039d4:	40020028 	.word	0x40020028
 80039d8:	40020040 	.word	0x40020040
 80039dc:	40020058 	.word	0x40020058
 80039e0:	40020070 	.word	0x40020070
 80039e4:	40020088 	.word	0x40020088
 80039e8:	400200a0 	.word	0x400200a0
 80039ec:	400200b8 	.word	0x400200b8
 80039f0:	40020410 	.word	0x40020410
 80039f4:	40020428 	.word	0x40020428
 80039f8:	40020440 	.word	0x40020440
 80039fc:	40020458 	.word	0x40020458
 8003a00:	40020470 	.word	0x40020470
 8003a04:	40020488 	.word	0x40020488
 8003a08:	400204a0 	.word	0x400204a0
 8003a0c:	400204b8 	.word	0x400204b8
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f022 020a 	bic.w	r2, r2, #10
 8003a1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	f000 8097 	beq.w	8003b68 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003a42:	e091      	b.n	8003b68 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a48:	f003 031f 	and.w	r3, r3, #31
 8003a4c:	2208      	movs	r2, #8
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	4013      	ands	r3, r2
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 8088 	beq.w	8003b6a <HAL_DMA_IRQHandler+0xe0e>
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	f003 0308 	and.w	r3, r3, #8
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	f000 8082 	beq.w	8003b6a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a41      	ldr	r2, [pc, #260]	@ (8003b70 <HAL_DMA_IRQHandler+0xe14>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d04a      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a3f      	ldr	r2, [pc, #252]	@ (8003b74 <HAL_DMA_IRQHandler+0xe18>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d045      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a3e      	ldr	r2, [pc, #248]	@ (8003b78 <HAL_DMA_IRQHandler+0xe1c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d040      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a3c      	ldr	r2, [pc, #240]	@ (8003b7c <HAL_DMA_IRQHandler+0xe20>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d03b      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a3b      	ldr	r2, [pc, #236]	@ (8003b80 <HAL_DMA_IRQHandler+0xe24>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d036      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a39      	ldr	r2, [pc, #228]	@ (8003b84 <HAL_DMA_IRQHandler+0xe28>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d031      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a38      	ldr	r2, [pc, #224]	@ (8003b88 <HAL_DMA_IRQHandler+0xe2c>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d02c      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	4a36      	ldr	r2, [pc, #216]	@ (8003b8c <HAL_DMA_IRQHandler+0xe30>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d027      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4a35      	ldr	r2, [pc, #212]	@ (8003b90 <HAL_DMA_IRQHandler+0xe34>)
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d022      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a33      	ldr	r2, [pc, #204]	@ (8003b94 <HAL_DMA_IRQHandler+0xe38>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d01d      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4a32      	ldr	r2, [pc, #200]	@ (8003b98 <HAL_DMA_IRQHandler+0xe3c>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d018      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a30      	ldr	r2, [pc, #192]	@ (8003b9c <HAL_DMA_IRQHandler+0xe40>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d013      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a2f      	ldr	r2, [pc, #188]	@ (8003ba0 <HAL_DMA_IRQHandler+0xe44>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d00e      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba4 <HAL_DMA_IRQHandler+0xe48>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d009      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a2c      	ldr	r2, [pc, #176]	@ (8003ba8 <HAL_DMA_IRQHandler+0xe4c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d004      	beq.n	8003b06 <HAL_DMA_IRQHandler+0xdaa>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a2a      	ldr	r2, [pc, #168]	@ (8003bac <HAL_DMA_IRQHandler+0xe50>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <HAL_DMA_IRQHandler+0xdbc>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	681a      	ldr	r2, [r3, #0]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f022 021c 	bic.w	r2, r2, #28
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	e007      	b.n	8003b28 <HAL_DMA_IRQHandler+0xdcc>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f022 020e 	bic.w	r2, r2, #14
 8003b26:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b2c:	f003 031f 	and.w	r3, r3, #31
 8003b30:	2201      	movs	r2, #1
 8003b32:	409a      	lsls	r2, r3
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2201      	movs	r2, #1
 8003b42:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2200      	movs	r2, #0
 8003b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d009      	beq.n	8003b6a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	4798      	blx	r3
 8003b5e:	e004      	b.n	8003b6a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8003b60:	bf00      	nop
 8003b62:	e002      	b.n	8003b6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b64:	bf00      	nop
 8003b66:	e000      	b.n	8003b6a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003b68:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003b6a:	3728      	adds	r7, #40	@ 0x28
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	40020010 	.word	0x40020010
 8003b74:	40020028 	.word	0x40020028
 8003b78:	40020040 	.word	0x40020040
 8003b7c:	40020058 	.word	0x40020058
 8003b80:	40020070 	.word	0x40020070
 8003b84:	40020088 	.word	0x40020088
 8003b88:	400200a0 	.word	0x400200a0
 8003b8c:	400200b8 	.word	0x400200b8
 8003b90:	40020410 	.word	0x40020410
 8003b94:	40020428 	.word	0x40020428
 8003b98:	40020440 	.word	0x40020440
 8003b9c:	40020458 	.word	0x40020458
 8003ba0:	40020470 	.word	0x40020470
 8003ba4:	40020488 	.word	0x40020488
 8003ba8:	400204a0 	.word	0x400204a0
 8003bac:	400204b8 	.word	0x400204b8

08003bb0 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b087      	sub	sp, #28
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bda:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003be0:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a7f      	ldr	r2, [pc, #508]	@ (8003de4 <DMA_SetConfig+0x21c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d072      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	4a7d      	ldr	r2, [pc, #500]	@ (8003de8 <DMA_SetConfig+0x220>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d06d      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a7c      	ldr	r2, [pc, #496]	@ (8003dec <DMA_SetConfig+0x224>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d068      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a7a      	ldr	r2, [pc, #488]	@ (8003df0 <DMA_SetConfig+0x228>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d063      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	4a79      	ldr	r2, [pc, #484]	@ (8003df4 <DMA_SetConfig+0x22c>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d05e      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	4a77      	ldr	r2, [pc, #476]	@ (8003df8 <DMA_SetConfig+0x230>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d059      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a76      	ldr	r2, [pc, #472]	@ (8003dfc <DMA_SetConfig+0x234>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d054      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a74      	ldr	r2, [pc, #464]	@ (8003e00 <DMA_SetConfig+0x238>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d04f      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a73      	ldr	r2, [pc, #460]	@ (8003e04 <DMA_SetConfig+0x23c>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d04a      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a71      	ldr	r2, [pc, #452]	@ (8003e08 <DMA_SetConfig+0x240>)
 8003c42:	4293      	cmp	r3, r2
 8003c44:	d045      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a70      	ldr	r2, [pc, #448]	@ (8003e0c <DMA_SetConfig+0x244>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d040      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a6e      	ldr	r2, [pc, #440]	@ (8003e10 <DMA_SetConfig+0x248>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d03b      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a6d      	ldr	r2, [pc, #436]	@ (8003e14 <DMA_SetConfig+0x24c>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d036      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a6b      	ldr	r2, [pc, #428]	@ (8003e18 <DMA_SetConfig+0x250>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d031      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a6a      	ldr	r2, [pc, #424]	@ (8003e1c <DMA_SetConfig+0x254>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d02c      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a68      	ldr	r2, [pc, #416]	@ (8003e20 <DMA_SetConfig+0x258>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d027      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a67      	ldr	r2, [pc, #412]	@ (8003e24 <DMA_SetConfig+0x25c>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d022      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a65      	ldr	r2, [pc, #404]	@ (8003e28 <DMA_SetConfig+0x260>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d01d      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a64      	ldr	r2, [pc, #400]	@ (8003e2c <DMA_SetConfig+0x264>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d018      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a62      	ldr	r2, [pc, #392]	@ (8003e30 <DMA_SetConfig+0x268>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d013      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	4a61      	ldr	r2, [pc, #388]	@ (8003e34 <DMA_SetConfig+0x26c>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d00e      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	4a5f      	ldr	r2, [pc, #380]	@ (8003e38 <DMA_SetConfig+0x270>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d009      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	4a5e      	ldr	r2, [pc, #376]	@ (8003e3c <DMA_SetConfig+0x274>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d004      	beq.n	8003cd2 <DMA_SetConfig+0x10a>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a5c      	ldr	r2, [pc, #368]	@ (8003e40 <DMA_SetConfig+0x278>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d101      	bne.n	8003cd6 <DMA_SetConfig+0x10e>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e000      	b.n	8003cd8 <DMA_SetConfig+0x110>
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00d      	beq.n	8003cf8 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8003ce4:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d004      	beq.n	8003cf8 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003cf2:	68fa      	ldr	r2, [r7, #12]
 8003cf4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003cf6:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a39      	ldr	r2, [pc, #228]	@ (8003de4 <DMA_SetConfig+0x21c>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d04a      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a38      	ldr	r2, [pc, #224]	@ (8003de8 <DMA_SetConfig+0x220>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d045      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a36      	ldr	r2, [pc, #216]	@ (8003dec <DMA_SetConfig+0x224>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d040      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a35      	ldr	r2, [pc, #212]	@ (8003df0 <DMA_SetConfig+0x228>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d03b      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a33      	ldr	r2, [pc, #204]	@ (8003df4 <DMA_SetConfig+0x22c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d036      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a32      	ldr	r2, [pc, #200]	@ (8003df8 <DMA_SetConfig+0x230>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d031      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	4a30      	ldr	r2, [pc, #192]	@ (8003dfc <DMA_SetConfig+0x234>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d02c      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a2f      	ldr	r2, [pc, #188]	@ (8003e00 <DMA_SetConfig+0x238>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d027      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e04 <DMA_SetConfig+0x23c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d022      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a2c      	ldr	r2, [pc, #176]	@ (8003e08 <DMA_SetConfig+0x240>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d01d      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a2a      	ldr	r2, [pc, #168]	@ (8003e0c <DMA_SetConfig+0x244>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d018      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a29      	ldr	r2, [pc, #164]	@ (8003e10 <DMA_SetConfig+0x248>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d013      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a27      	ldr	r2, [pc, #156]	@ (8003e14 <DMA_SetConfig+0x24c>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d00e      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4a26      	ldr	r2, [pc, #152]	@ (8003e18 <DMA_SetConfig+0x250>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d009      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a24      	ldr	r2, [pc, #144]	@ (8003e1c <DMA_SetConfig+0x254>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d004      	beq.n	8003d98 <DMA_SetConfig+0x1d0>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a23      	ldr	r2, [pc, #140]	@ (8003e20 <DMA_SetConfig+0x258>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d101      	bne.n	8003d9c <DMA_SetConfig+0x1d4>
 8003d98:	2301      	movs	r3, #1
 8003d9a:	e000      	b.n	8003d9e <DMA_SetConfig+0x1d6>
 8003d9c:	2300      	movs	r3, #0
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d059      	beq.n	8003e56 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003da6:	f003 031f 	and.w	r3, r3, #31
 8003daa:	223f      	movs	r2, #63	@ 0x3f
 8003dac:	409a      	lsls	r2, r3
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003dc0:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	2b40      	cmp	r3, #64	@ 0x40
 8003dd0:	d138      	bne.n	8003e44 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8003de2:	e086      	b.n	8003ef2 <DMA_SetConfig+0x32a>
 8003de4:	40020010 	.word	0x40020010
 8003de8:	40020028 	.word	0x40020028
 8003dec:	40020040 	.word	0x40020040
 8003df0:	40020058 	.word	0x40020058
 8003df4:	40020070 	.word	0x40020070
 8003df8:	40020088 	.word	0x40020088
 8003dfc:	400200a0 	.word	0x400200a0
 8003e00:	400200b8 	.word	0x400200b8
 8003e04:	40020410 	.word	0x40020410
 8003e08:	40020428 	.word	0x40020428
 8003e0c:	40020440 	.word	0x40020440
 8003e10:	40020458 	.word	0x40020458
 8003e14:	40020470 	.word	0x40020470
 8003e18:	40020488 	.word	0x40020488
 8003e1c:	400204a0 	.word	0x400204a0
 8003e20:	400204b8 	.word	0x400204b8
 8003e24:	58025408 	.word	0x58025408
 8003e28:	5802541c 	.word	0x5802541c
 8003e2c:	58025430 	.word	0x58025430
 8003e30:	58025444 	.word	0x58025444
 8003e34:	58025458 	.word	0x58025458
 8003e38:	5802546c 	.word	0x5802546c
 8003e3c:	58025480 	.word	0x58025480
 8003e40:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68ba      	ldr	r2, [r7, #8]
 8003e4a:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	687a      	ldr	r2, [r7, #4]
 8003e52:	60da      	str	r2, [r3, #12]
}
 8003e54:	e04d      	b.n	8003ef2 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a29      	ldr	r2, [pc, #164]	@ (8003f00 <DMA_SetConfig+0x338>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d022      	beq.n	8003ea6 <DMA_SetConfig+0x2de>
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a27      	ldr	r2, [pc, #156]	@ (8003f04 <DMA_SetConfig+0x33c>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d01d      	beq.n	8003ea6 <DMA_SetConfig+0x2de>
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a26      	ldr	r2, [pc, #152]	@ (8003f08 <DMA_SetConfig+0x340>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d018      	beq.n	8003ea6 <DMA_SetConfig+0x2de>
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a24      	ldr	r2, [pc, #144]	@ (8003f0c <DMA_SetConfig+0x344>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d013      	beq.n	8003ea6 <DMA_SetConfig+0x2de>
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a23      	ldr	r2, [pc, #140]	@ (8003f10 <DMA_SetConfig+0x348>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d00e      	beq.n	8003ea6 <DMA_SetConfig+0x2de>
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a21      	ldr	r2, [pc, #132]	@ (8003f14 <DMA_SetConfig+0x34c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d009      	beq.n	8003ea6 <DMA_SetConfig+0x2de>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a20      	ldr	r2, [pc, #128]	@ (8003f18 <DMA_SetConfig+0x350>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d004      	beq.n	8003ea6 <DMA_SetConfig+0x2de>
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a1e      	ldr	r2, [pc, #120]	@ (8003f1c <DMA_SetConfig+0x354>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d101      	bne.n	8003eaa <DMA_SetConfig+0x2e2>
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e000      	b.n	8003eac <DMA_SetConfig+0x2e4>
 8003eaa:	2300      	movs	r3, #0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d020      	beq.n	8003ef2 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eb4:	f003 031f 	and.w	r3, r3, #31
 8003eb8:	2201      	movs	r2, #1
 8003eba:	409a      	lsls	r2, r3
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	683a      	ldr	r2, [r7, #0]
 8003ec6:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	2b40      	cmp	r3, #64	@ 0x40
 8003ece:	d108      	bne.n	8003ee2 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	68ba      	ldr	r2, [r7, #8]
 8003ede:	60da      	str	r2, [r3, #12]
}
 8003ee0:	e007      	b.n	8003ef2 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68ba      	ldr	r2, [r7, #8]
 8003ee8:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	60da      	str	r2, [r3, #12]
}
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
 8003efe:	bf00      	nop
 8003f00:	58025408 	.word	0x58025408
 8003f04:	5802541c 	.word	0x5802541c
 8003f08:	58025430 	.word	0x58025430
 8003f0c:	58025444 	.word	0x58025444
 8003f10:	58025458 	.word	0x58025458
 8003f14:	5802546c 	.word	0x5802546c
 8003f18:	58025480 	.word	0x58025480
 8003f1c:	58025494 	.word	0x58025494

08003f20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b085      	sub	sp, #20
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a42      	ldr	r2, [pc, #264]	@ (8004038 <DMA_CalcBaseAndBitshift+0x118>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d04a      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a41      	ldr	r2, [pc, #260]	@ (800403c <DMA_CalcBaseAndBitshift+0x11c>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d045      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a3f      	ldr	r2, [pc, #252]	@ (8004040 <DMA_CalcBaseAndBitshift+0x120>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d040      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a3e      	ldr	r2, [pc, #248]	@ (8004044 <DMA_CalcBaseAndBitshift+0x124>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d03b      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a3c      	ldr	r2, [pc, #240]	@ (8004048 <DMA_CalcBaseAndBitshift+0x128>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d036      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a3b      	ldr	r2, [pc, #236]	@ (800404c <DMA_CalcBaseAndBitshift+0x12c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d031      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a39      	ldr	r2, [pc, #228]	@ (8004050 <DMA_CalcBaseAndBitshift+0x130>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d02c      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a38      	ldr	r2, [pc, #224]	@ (8004054 <DMA_CalcBaseAndBitshift+0x134>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d027      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a36      	ldr	r2, [pc, #216]	@ (8004058 <DMA_CalcBaseAndBitshift+0x138>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d022      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a35      	ldr	r2, [pc, #212]	@ (800405c <DMA_CalcBaseAndBitshift+0x13c>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d01d      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a33      	ldr	r2, [pc, #204]	@ (8004060 <DMA_CalcBaseAndBitshift+0x140>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d018      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a32      	ldr	r2, [pc, #200]	@ (8004064 <DMA_CalcBaseAndBitshift+0x144>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d013      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a30      	ldr	r2, [pc, #192]	@ (8004068 <DMA_CalcBaseAndBitshift+0x148>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d00e      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a2f      	ldr	r2, [pc, #188]	@ (800406c <DMA_CalcBaseAndBitshift+0x14c>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d009      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2d      	ldr	r2, [pc, #180]	@ (8004070 <DMA_CalcBaseAndBitshift+0x150>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d004      	beq.n	8003fc8 <DMA_CalcBaseAndBitshift+0xa8>
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a2c      	ldr	r2, [pc, #176]	@ (8004074 <DMA_CalcBaseAndBitshift+0x154>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d101      	bne.n	8003fcc <DMA_CalcBaseAndBitshift+0xac>
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e000      	b.n	8003fce <DMA_CalcBaseAndBitshift+0xae>
 8003fcc:	2300      	movs	r3, #0
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d024      	beq.n	800401c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	3b10      	subs	r3, #16
 8003fda:	4a27      	ldr	r2, [pc, #156]	@ (8004078 <DMA_CalcBaseAndBitshift+0x158>)
 8003fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe0:	091b      	lsrs	r3, r3, #4
 8003fe2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f003 0307 	and.w	r3, r3, #7
 8003fea:	4a24      	ldr	r2, [pc, #144]	@ (800407c <DMA_CalcBaseAndBitshift+0x15c>)
 8003fec:	5cd3      	ldrb	r3, [r2, r3]
 8003fee:	461a      	mov	r2, r3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2b03      	cmp	r3, #3
 8003ff8:	d908      	bls.n	800400c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	461a      	mov	r2, r3
 8004000:	4b1f      	ldr	r3, [pc, #124]	@ (8004080 <DMA_CalcBaseAndBitshift+0x160>)
 8004002:	4013      	ands	r3, r2
 8004004:	1d1a      	adds	r2, r3, #4
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	659a      	str	r2, [r3, #88]	@ 0x58
 800400a:	e00d      	b.n	8004028 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	461a      	mov	r2, r3
 8004012:	4b1b      	ldr	r3, [pc, #108]	@ (8004080 <DMA_CalcBaseAndBitshift+0x160>)
 8004014:	4013      	ands	r3, r2
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	6593      	str	r3, [r2, #88]	@ 0x58
 800401a:	e005      	b.n	8004028 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800402c:	4618      	mov	r0, r3
 800402e:	3714      	adds	r7, #20
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	40020010 	.word	0x40020010
 800403c:	40020028 	.word	0x40020028
 8004040:	40020040 	.word	0x40020040
 8004044:	40020058 	.word	0x40020058
 8004048:	40020070 	.word	0x40020070
 800404c:	40020088 	.word	0x40020088
 8004050:	400200a0 	.word	0x400200a0
 8004054:	400200b8 	.word	0x400200b8
 8004058:	40020410 	.word	0x40020410
 800405c:	40020428 	.word	0x40020428
 8004060:	40020440 	.word	0x40020440
 8004064:	40020458 	.word	0x40020458
 8004068:	40020470 	.word	0x40020470
 800406c:	40020488 	.word	0x40020488
 8004070:	400204a0 	.word	0x400204a0
 8004074:	400204b8 	.word	0x400204b8
 8004078:	aaaaaaab 	.word	0xaaaaaaab
 800407c:	080096f4 	.word	0x080096f4
 8004080:	fffffc00 	.word	0xfffffc00

08004084 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800408c:	2300      	movs	r3, #0
 800408e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	699b      	ldr	r3, [r3, #24]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d120      	bne.n	80040da <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409c:	2b03      	cmp	r3, #3
 800409e:	d858      	bhi.n	8004152 <DMA_CheckFifoParam+0xce>
 80040a0:	a201      	add	r2, pc, #4	@ (adr r2, 80040a8 <DMA_CheckFifoParam+0x24>)
 80040a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a6:	bf00      	nop
 80040a8:	080040b9 	.word	0x080040b9
 80040ac:	080040cb 	.word	0x080040cb
 80040b0:	080040b9 	.word	0x080040b9
 80040b4:	08004153 	.word	0x08004153
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d048      	beq.n	8004156 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040c8:	e045      	b.n	8004156 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80040d2:	d142      	bne.n	800415a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80040d8:	e03f      	b.n	800415a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040e2:	d123      	bne.n	800412c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e8:	2b03      	cmp	r3, #3
 80040ea:	d838      	bhi.n	800415e <DMA_CheckFifoParam+0xda>
 80040ec:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <DMA_CheckFifoParam+0x70>)
 80040ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f2:	bf00      	nop
 80040f4:	08004105 	.word	0x08004105
 80040f8:	0800410b 	.word	0x0800410b
 80040fc:	08004105 	.word	0x08004105
 8004100:	0800411d 	.word	0x0800411d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	73fb      	strb	r3, [r7, #15]
        break;
 8004108:	e030      	b.n	800416c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800410e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d025      	beq.n	8004162 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004116:	2301      	movs	r3, #1
 8004118:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800411a:	e022      	b.n	8004162 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004120:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004124:	d11f      	bne.n	8004166 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800412a:	e01c      	b.n	8004166 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004130:	2b02      	cmp	r3, #2
 8004132:	d902      	bls.n	800413a <DMA_CheckFifoParam+0xb6>
 8004134:	2b03      	cmp	r3, #3
 8004136:	d003      	beq.n	8004140 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004138:	e018      	b.n	800416c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	73fb      	strb	r3, [r7, #15]
        break;
 800413e:	e015      	b.n	800416c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004144:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00e      	beq.n	800416a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	73fb      	strb	r3, [r7, #15]
    break;
 8004150:	e00b      	b.n	800416a <DMA_CheckFifoParam+0xe6>
        break;
 8004152:	bf00      	nop
 8004154:	e00a      	b.n	800416c <DMA_CheckFifoParam+0xe8>
        break;
 8004156:	bf00      	nop
 8004158:	e008      	b.n	800416c <DMA_CheckFifoParam+0xe8>
        break;
 800415a:	bf00      	nop
 800415c:	e006      	b.n	800416c <DMA_CheckFifoParam+0xe8>
        break;
 800415e:	bf00      	nop
 8004160:	e004      	b.n	800416c <DMA_CheckFifoParam+0xe8>
        break;
 8004162:	bf00      	nop
 8004164:	e002      	b.n	800416c <DMA_CheckFifoParam+0xe8>
        break;
 8004166:	bf00      	nop
 8004168:	e000      	b.n	800416c <DMA_CheckFifoParam+0xe8>
    break;
 800416a:	bf00      	nop
    }
  }

  return status;
 800416c:	7bfb      	ldrb	r3, [r7, #15]
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop

0800417c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800417c:	b480      	push	{r7}
 800417e:	b085      	sub	sp, #20
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a38      	ldr	r2, [pc, #224]	@ (8004270 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004190:	4293      	cmp	r3, r2
 8004192:	d022      	beq.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	4a36      	ldr	r2, [pc, #216]	@ (8004274 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d01d      	beq.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a35      	ldr	r2, [pc, #212]	@ (8004278 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d018      	beq.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a33      	ldr	r2, [pc, #204]	@ (800427c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d013      	beq.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4a32      	ldr	r2, [pc, #200]	@ (8004280 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00e      	beq.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a30      	ldr	r2, [pc, #192]	@ (8004284 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d009      	beq.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004288 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d004      	beq.n	80041da <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	4a2d      	ldr	r2, [pc, #180]	@ (800428c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d101      	bne.n	80041de <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80041de:	2300      	movs	r3, #0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01a      	beq.n	800421a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	3b08      	subs	r3, #8
 80041ec:	4a28      	ldr	r2, [pc, #160]	@ (8004290 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80041ee:	fba2 2303 	umull	r2, r3, r2, r3
 80041f2:	091b      	lsrs	r3, r3, #4
 80041f4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	4b26      	ldr	r3, [pc, #152]	@ (8004294 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80041fa:	4413      	add	r3, r2
 80041fc:	009b      	lsls	r3, r3, #2
 80041fe:	461a      	mov	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a24      	ldr	r2, [pc, #144]	@ (8004298 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004208:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f003 031f 	and.w	r3, r3, #31
 8004210:	2201      	movs	r2, #1
 8004212:	409a      	lsls	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004218:	e024      	b.n	8004264 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	b2db      	uxtb	r3, r3
 8004220:	3b10      	subs	r3, #16
 8004222:	4a1e      	ldr	r2, [pc, #120]	@ (800429c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004224:	fba2 2303 	umull	r2, r3, r2, r3
 8004228:	091b      	lsrs	r3, r3, #4
 800422a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	4a1c      	ldr	r2, [pc, #112]	@ (80042a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d806      	bhi.n	8004242 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4a1b      	ldr	r2, [pc, #108]	@ (80042a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d902      	bls.n	8004242 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	3308      	adds	r3, #8
 8004240:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004242:	68fa      	ldr	r2, [r7, #12]
 8004244:	4b18      	ldr	r3, [pc, #96]	@ (80042a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	461a      	mov	r2, r3
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	4a16      	ldr	r2, [pc, #88]	@ (80042ac <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004254:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f003 031f 	and.w	r3, r3, #31
 800425c:	2201      	movs	r2, #1
 800425e:	409a      	lsls	r2, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004264:	bf00      	nop
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	58025408 	.word	0x58025408
 8004274:	5802541c 	.word	0x5802541c
 8004278:	58025430 	.word	0x58025430
 800427c:	58025444 	.word	0x58025444
 8004280:	58025458 	.word	0x58025458
 8004284:	5802546c 	.word	0x5802546c
 8004288:	58025480 	.word	0x58025480
 800428c:	58025494 	.word	0x58025494
 8004290:	cccccccd 	.word	0xcccccccd
 8004294:	16009600 	.word	0x16009600
 8004298:	58025880 	.word	0x58025880
 800429c:	aaaaaaab 	.word	0xaaaaaaab
 80042a0:	400204b8 	.word	0x400204b8
 80042a4:	4002040f 	.word	0x4002040f
 80042a8:	10008200 	.word	0x10008200
 80042ac:	40020880 	.word	0x40020880

080042b0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b085      	sub	sp, #20
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	685b      	ldr	r3, [r3, #4]
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d04a      	beq.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b08      	cmp	r3, #8
 80042ca:	d847      	bhi.n	800435c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a25      	ldr	r2, [pc, #148]	@ (8004368 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d022      	beq.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a24      	ldr	r2, [pc, #144]	@ (800436c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d01d      	beq.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a22      	ldr	r2, [pc, #136]	@ (8004370 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d018      	beq.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a21      	ldr	r2, [pc, #132]	@ (8004374 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d013      	beq.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4a1f      	ldr	r2, [pc, #124]	@ (8004378 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d00e      	beq.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	4a1e      	ldr	r2, [pc, #120]	@ (800437c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d009      	beq.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a1c      	ldr	r2, [pc, #112]	@ (8004380 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d004      	beq.n	800431c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a1b      	ldr	r2, [pc, #108]	@ (8004384 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d101      	bne.n	8004320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004320:	2300      	movs	r3, #0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4b17      	ldr	r3, [pc, #92]	@ (8004388 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800432a:	4413      	add	r3, r2
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	461a      	mov	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	4a15      	ldr	r2, [pc, #84]	@ (800438c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004338:	671a      	str	r2, [r3, #112]	@ 0x70
 800433a:	e009      	b.n	8004350 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	4b14      	ldr	r3, [pc, #80]	@ (8004390 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	461a      	mov	r2, r3
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a11      	ldr	r2, [pc, #68]	@ (8004394 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800434e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	3b01      	subs	r3, #1
 8004354:	2201      	movs	r2, #1
 8004356:	409a      	lsls	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800435c:	bf00      	nop
 800435e:	3714      	adds	r7, #20
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	58025408 	.word	0x58025408
 800436c:	5802541c 	.word	0x5802541c
 8004370:	58025430 	.word	0x58025430
 8004374:	58025444 	.word	0x58025444
 8004378:	58025458 	.word	0x58025458
 800437c:	5802546c 	.word	0x5802546c
 8004380:	58025480 	.word	0x58025480
 8004384:	58025494 	.word	0x58025494
 8004388:	1600963f 	.word	0x1600963f
 800438c:	58025940 	.word	0x58025940
 8004390:	1000823f 	.word	0x1000823f
 8004394:	40020940 	.word	0x40020940

08004398 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004398:	b480      	push	{r7}
 800439a:	b089      	sub	sp, #36	@ 0x24
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80043a2:	2300      	movs	r3, #0
 80043a4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80043a6:	4b86      	ldr	r3, [pc, #536]	@ (80045c0 <HAL_GPIO_Init+0x228>)
 80043a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80043aa:	e18c      	b.n	80046c6 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	2101      	movs	r1, #1
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	fa01 f303 	lsl.w	r3, r1, r3
 80043b8:	4013      	ands	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 817e 	beq.w	80046c0 <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	f003 0303 	and.w	r3, r3, #3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d005      	beq.n	80043dc <HAL_GPIO_Init+0x44>
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	2b02      	cmp	r3, #2
 80043da:	d130      	bne.n	800443e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	2203      	movs	r2, #3
 80043e8:	fa02 f303 	lsl.w	r3, r2, r3
 80043ec:	43db      	mvns	r3, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4013      	ands	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	69fb      	ldr	r3, [r7, #28]
 80043fa:	005b      	lsls	r3, r3, #1
 80043fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	4313      	orrs	r3, r2
 8004404:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004412:	2201      	movs	r2, #1
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	fa02 f303 	lsl.w	r3, r2, r3
 800441a:	43db      	mvns	r3, r3
 800441c:	69ba      	ldr	r2, [r7, #24]
 800441e:	4013      	ands	r3, r2
 8004420:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	091b      	lsrs	r3, r3, #4
 8004428:	f003 0201 	and.w	r2, r3, #1
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	fa02 f303 	lsl.w	r3, r2, r3
 8004432:	69ba      	ldr	r2, [r7, #24]
 8004434:	4313      	orrs	r3, r2
 8004436:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f003 0303 	and.w	r3, r3, #3
 8004446:	2b03      	cmp	r3, #3
 8004448:	d017      	beq.n	800447a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	68db      	ldr	r3, [r3, #12]
 800444e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004450:	69fb      	ldr	r3, [r7, #28]
 8004452:	005b      	lsls	r3, r3, #1
 8004454:	2203      	movs	r2, #3
 8004456:	fa02 f303 	lsl.w	r3, r2, r3
 800445a:	43db      	mvns	r3, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4013      	ands	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	689a      	ldr	r2, [r3, #8]
 8004466:	69fb      	ldr	r3, [r7, #28]
 8004468:	005b      	lsls	r3, r3, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	69ba      	ldr	r2, [r7, #24]
 8004470:	4313      	orrs	r3, r2
 8004472:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	69ba      	ldr	r2, [r7, #24]
 8004478:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	685b      	ldr	r3, [r3, #4]
 800447e:	f003 0303 	and.w	r3, r3, #3
 8004482:	2b02      	cmp	r3, #2
 8004484:	d123      	bne.n	80044ce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	08da      	lsrs	r2, r3, #3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	3208      	adds	r2, #8
 800448e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004492:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	f003 0307 	and.w	r3, r3, #7
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	220f      	movs	r2, #15
 800449e:	fa02 f303 	lsl.w	r3, r2, r3
 80044a2:	43db      	mvns	r3, r3
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	4013      	ands	r3, r2
 80044a8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	691a      	ldr	r2, [r3, #16]
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	f003 0307 	and.w	r3, r3, #7
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	fa02 f303 	lsl.w	r3, r2, r3
 80044ba:	69ba      	ldr	r2, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	08da      	lsrs	r2, r3, #3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3208      	adds	r2, #8
 80044c8:	69b9      	ldr	r1, [r7, #24]
 80044ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80044d4:	69fb      	ldr	r3, [r7, #28]
 80044d6:	005b      	lsls	r3, r3, #1
 80044d8:	2203      	movs	r2, #3
 80044da:	fa02 f303 	lsl.w	r3, r2, r3
 80044de:	43db      	mvns	r3, r3
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	4013      	ands	r3, r2
 80044e4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044e6:	683b      	ldr	r3, [r7, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f003 0203 	and.w	r2, r3, #3
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	005b      	lsls	r3, r3, #1
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4313      	orrs	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	69ba      	ldr	r2, [r7, #24]
 8004500:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	685b      	ldr	r3, [r3, #4]
 8004506:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800450a:	2b00      	cmp	r3, #0
 800450c:	f000 80d8 	beq.w	80046c0 <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004510:	4b2c      	ldr	r3, [pc, #176]	@ (80045c4 <HAL_GPIO_Init+0x22c>)
 8004512:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004516:	4a2b      	ldr	r2, [pc, #172]	@ (80045c4 <HAL_GPIO_Init+0x22c>)
 8004518:	f043 0302 	orr.w	r3, r3, #2
 800451c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004520:	4b28      	ldr	r3, [pc, #160]	@ (80045c4 <HAL_GPIO_Init+0x22c>)
 8004522:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800452e:	4a26      	ldr	r2, [pc, #152]	@ (80045c8 <HAL_GPIO_Init+0x230>)
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	089b      	lsrs	r3, r3, #2
 8004534:	3302      	adds	r3, #2
 8004536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800453a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	f003 0303 	and.w	r3, r3, #3
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	220f      	movs	r2, #15
 8004546:	fa02 f303 	lsl.w	r3, r2, r3
 800454a:	43db      	mvns	r3, r3
 800454c:	69ba      	ldr	r2, [r7, #24]
 800454e:	4013      	ands	r3, r2
 8004550:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a1d      	ldr	r2, [pc, #116]	@ (80045cc <HAL_GPIO_Init+0x234>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d04a      	beq.n	80045f0 <HAL_GPIO_Init+0x258>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a1c      	ldr	r2, [pc, #112]	@ (80045d0 <HAL_GPIO_Init+0x238>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d02b      	beq.n	80045ba <HAL_GPIO_Init+0x222>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a1b      	ldr	r2, [pc, #108]	@ (80045d4 <HAL_GPIO_Init+0x23c>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d025      	beq.n	80045b6 <HAL_GPIO_Init+0x21e>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a1a      	ldr	r2, [pc, #104]	@ (80045d8 <HAL_GPIO_Init+0x240>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01f      	beq.n	80045b2 <HAL_GPIO_Init+0x21a>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <HAL_GPIO_Init+0x244>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d019      	beq.n	80045ae <HAL_GPIO_Init+0x216>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a18      	ldr	r2, [pc, #96]	@ (80045e0 <HAL_GPIO_Init+0x248>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d013      	beq.n	80045aa <HAL_GPIO_Init+0x212>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a17      	ldr	r2, [pc, #92]	@ (80045e4 <HAL_GPIO_Init+0x24c>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d00d      	beq.n	80045a6 <HAL_GPIO_Init+0x20e>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a16      	ldr	r2, [pc, #88]	@ (80045e8 <HAL_GPIO_Init+0x250>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d007      	beq.n	80045a2 <HAL_GPIO_Init+0x20a>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a15      	ldr	r2, [pc, #84]	@ (80045ec <HAL_GPIO_Init+0x254>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d101      	bne.n	800459e <HAL_GPIO_Init+0x206>
 800459a:	2309      	movs	r3, #9
 800459c:	e029      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 800459e:	230a      	movs	r3, #10
 80045a0:	e027      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 80045a2:	2307      	movs	r3, #7
 80045a4:	e025      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 80045a6:	2306      	movs	r3, #6
 80045a8:	e023      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 80045aa:	2305      	movs	r3, #5
 80045ac:	e021      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 80045ae:	2304      	movs	r3, #4
 80045b0:	e01f      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 80045b2:	2303      	movs	r3, #3
 80045b4:	e01d      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e01b      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 80045ba:	2301      	movs	r3, #1
 80045bc:	e019      	b.n	80045f2 <HAL_GPIO_Init+0x25a>
 80045be:	bf00      	nop
 80045c0:	58000080 	.word	0x58000080
 80045c4:	58024400 	.word	0x58024400
 80045c8:	58000400 	.word	0x58000400
 80045cc:	58020000 	.word	0x58020000
 80045d0:	58020400 	.word	0x58020400
 80045d4:	58020800 	.word	0x58020800
 80045d8:	58020c00 	.word	0x58020c00
 80045dc:	58021000 	.word	0x58021000
 80045e0:	58021400 	.word	0x58021400
 80045e4:	58021800 	.word	0x58021800
 80045e8:	58021c00 	.word	0x58021c00
 80045ec:	58022400 	.word	0x58022400
 80045f0:	2300      	movs	r3, #0
 80045f2:	69fa      	ldr	r2, [r7, #28]
 80045f4:	f002 0203 	and.w	r2, r2, #3
 80045f8:	0092      	lsls	r2, r2, #2
 80045fa:	4093      	lsls	r3, r2
 80045fc:	69ba      	ldr	r2, [r7, #24]
 80045fe:	4313      	orrs	r3, r2
 8004600:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004602:	4938      	ldr	r1, [pc, #224]	@ (80046e4 <HAL_GPIO_Init+0x34c>)
 8004604:	69fb      	ldr	r3, [r7, #28]
 8004606:	089b      	lsrs	r3, r3, #2
 8004608:	3302      	adds	r3, #2
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004610:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	43db      	mvns	r3, r3
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	4013      	ands	r3, r2
 8004620:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8004636:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800463a:	69bb      	ldr	r3, [r7, #24]
 800463c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800463e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004646:	693b      	ldr	r3, [r7, #16]
 8004648:	43db      	mvns	r3, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4013      	ands	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800465c:	69ba      	ldr	r2, [r7, #24]
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4313      	orrs	r3, r2
 8004662:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8004664:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d003      	beq.n	8004690 <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	43db      	mvns	r3, r3
 80046a0:	69ba      	ldr	r2, [r7, #24]
 80046a2:	4013      	ands	r3, r2
 80046a4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d003      	beq.n	80046ba <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80046ba:	697b      	ldr	r3, [r7, #20]
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80046c0:	69fb      	ldr	r3, [r7, #28]
 80046c2:	3301      	adds	r3, #1
 80046c4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	fa22 f303 	lsr.w	r3, r2, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f ae6b 	bne.w	80043ac <HAL_GPIO_Init+0x14>
  }
}
 80046d6:	bf00      	nop
 80046d8:	bf00      	nop
 80046da:	3724      	adds	r7, #36	@ 0x24
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr
 80046e4:	58000400 	.word	0x58000400

080046e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	460b      	mov	r3, r1
 80046f2:	807b      	strh	r3, [r7, #2]
 80046f4:	4613      	mov	r3, r2
 80046f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80046f8:	787b      	ldrb	r3, [r7, #1]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d003      	beq.n	8004706 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046fe:	887a      	ldrh	r2, [r7, #2]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8004704:	e003      	b.n	800470e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8004706:	887b      	ldrh	r3, [r7, #2]
 8004708:	041a      	lsls	r2, r3, #16
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	619a      	str	r2, [r3, #24]
}
 800470e:	bf00      	nop
 8004710:	370c      	adds	r7, #12
 8004712:	46bd      	mov	sp, r7
 8004714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004718:	4770      	bx	lr
	...

0800471c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8004724:	4b19      	ldr	r3, [pc, #100]	@ (800478c <HAL_PWREx_ConfigSupply+0x70>)
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b04      	cmp	r3, #4
 800472e:	d00a      	beq.n	8004746 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004730:	4b16      	ldr	r3, [pc, #88]	@ (800478c <HAL_PWREx_ConfigSupply+0x70>)
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	687a      	ldr	r2, [r7, #4]
 800473a:	429a      	cmp	r2, r3
 800473c:	d001      	beq.n	8004742 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e01f      	b.n	8004782 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e01d      	b.n	8004782 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004746:	4b11      	ldr	r3, [pc, #68]	@ (800478c <HAL_PWREx_ConfigSupply+0x70>)
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	f023 0207 	bic.w	r2, r3, #7
 800474e:	490f      	ldr	r1, [pc, #60]	@ (800478c <HAL_PWREx_ConfigSupply+0x70>)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	4313      	orrs	r3, r2
 8004754:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004756:	f7fc fe47 	bl	80013e8 <HAL_GetTick>
 800475a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800475c:	e009      	b.n	8004772 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800475e:	f7fc fe43 	bl	80013e8 <HAL_GetTick>
 8004762:	4602      	mov	r2, r0
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	1ad3      	subs	r3, r2, r3
 8004768:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800476c:	d901      	bls.n	8004772 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e007      	b.n	8004782 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004772:	4b06      	ldr	r3, [pc, #24]	@ (800478c <HAL_PWREx_ConfigSupply+0x70>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800477a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800477e:	d1ee      	bne.n	800475e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	3710      	adds	r7, #16
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	58024800 	.word	0x58024800

08004790 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08c      	sub	sp, #48	@ 0x30
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e3c8      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	f000 8087 	beq.w	80048be <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80047b0:	4b88      	ldr	r3, [pc, #544]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80047ba:	4b86      	ldr	r3, [pc, #536]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80047bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047be:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80047c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c2:	2b10      	cmp	r3, #16
 80047c4:	d007      	beq.n	80047d6 <HAL_RCC_OscConfig+0x46>
 80047c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c8:	2b18      	cmp	r3, #24
 80047ca:	d110      	bne.n	80047ee <HAL_RCC_OscConfig+0x5e>
 80047cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ce:	f003 0303 	and.w	r3, r3, #3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d10b      	bne.n	80047ee <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d6:	4b7f      	ldr	r3, [pc, #508]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d06c      	beq.n	80048bc <HAL_RCC_OscConfig+0x12c>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d168      	bne.n	80048bc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e3a2      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047f6:	d106      	bne.n	8004806 <HAL_RCC_OscConfig+0x76>
 80047f8:	4b76      	ldr	r3, [pc, #472]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4a75      	ldr	r2, [pc, #468]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80047fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e02e      	b.n	8004864 <HAL_RCC_OscConfig+0xd4>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0x98>
 800480e:	4b71      	ldr	r3, [pc, #452]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a70      	ldr	r2, [pc, #448]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004814:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b6e      	ldr	r3, [pc, #440]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6d      	ldr	r2, [pc, #436]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004820:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e01d      	b.n	8004864 <HAL_RCC_OscConfig+0xd4>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004830:	d10c      	bne.n	800484c <HAL_RCC_OscConfig+0xbc>
 8004832:	4b68      	ldr	r3, [pc, #416]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a67      	ldr	r2, [pc, #412]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004838:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800483c:	6013      	str	r3, [r2, #0]
 800483e:	4b65      	ldr	r3, [pc, #404]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a64      	ldr	r2, [pc, #400]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004848:	6013      	str	r3, [r2, #0]
 800484a:	e00b      	b.n	8004864 <HAL_RCC_OscConfig+0xd4>
 800484c:	4b61      	ldr	r3, [pc, #388]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a60      	ldr	r2, [pc, #384]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004852:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004856:	6013      	str	r3, [r2, #0]
 8004858:	4b5e      	ldr	r3, [pc, #376]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5d      	ldr	r2, [pc, #372]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 800485e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004862:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d013      	beq.n	8004894 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800486c:	f7fc fdbc 	bl	80013e8 <HAL_GetTick>
 8004870:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004874:	f7fc fdb8 	bl	80013e8 <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b64      	cmp	r3, #100	@ 0x64
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e356      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004886:	4b53      	ldr	r3, [pc, #332]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d0f0      	beq.n	8004874 <HAL_RCC_OscConfig+0xe4>
 8004892:	e014      	b.n	80048be <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004894:	f7fc fda8 	bl	80013e8 <HAL_GetTick>
 8004898:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800489a:	e008      	b.n	80048ae <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800489c:	f7fc fda4 	bl	80013e8 <HAL_GetTick>
 80048a0:	4602      	mov	r2, r0
 80048a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048a4:	1ad3      	subs	r3, r2, r3
 80048a6:	2b64      	cmp	r3, #100	@ 0x64
 80048a8:	d901      	bls.n	80048ae <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e342      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80048ae:	4b49      	ldr	r3, [pc, #292]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d1f0      	bne.n	800489c <HAL_RCC_OscConfig+0x10c>
 80048ba:	e000      	b.n	80048be <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 0302 	and.w	r3, r3, #2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	f000 808c 	beq.w	80049e4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048cc:	4b41      	ldr	r3, [pc, #260]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80048ce:	691b      	ldr	r3, [r3, #16]
 80048d0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048d4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80048d6:	4b3f      	ldr	r3, [pc, #252]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80048d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048da:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80048dc:	6a3b      	ldr	r3, [r7, #32]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d007      	beq.n	80048f2 <HAL_RCC_OscConfig+0x162>
 80048e2:	6a3b      	ldr	r3, [r7, #32]
 80048e4:	2b18      	cmp	r3, #24
 80048e6:	d137      	bne.n	8004958 <HAL_RCC_OscConfig+0x1c8>
 80048e8:	69fb      	ldr	r3, [r7, #28]
 80048ea:	f003 0303 	and.w	r3, r3, #3
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d132      	bne.n	8004958 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80048f2:	4b38      	ldr	r3, [pc, #224]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0304 	and.w	r3, r3, #4
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d005      	beq.n	800490a <HAL_RCC_OscConfig+0x17a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e314      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800490a:	4b32      	ldr	r3, [pc, #200]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 0219 	bic.w	r2, r3, #25
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	492f      	ldr	r1, [pc, #188]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004918:	4313      	orrs	r3, r2
 800491a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491c:	f7fc fd64 	bl	80013e8 <HAL_GetTick>
 8004920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004922:	e008      	b.n	8004936 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004924:	f7fc fd60 	bl	80013e8 <HAL_GetTick>
 8004928:	4602      	mov	r2, r0
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	1ad3      	subs	r3, r2, r3
 800492e:	2b02      	cmp	r3, #2
 8004930:	d901      	bls.n	8004936 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8004932:	2303      	movs	r3, #3
 8004934:	e2fe      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004936:	4b27      	ldr	r3, [pc, #156]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0304 	and.w	r3, r3, #4
 800493e:	2b00      	cmp	r3, #0
 8004940:	d0f0      	beq.n	8004924 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004942:	4b24      	ldr	r3, [pc, #144]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	061b      	lsls	r3, r3, #24
 8004950:	4920      	ldr	r1, [pc, #128]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004952:	4313      	orrs	r3, r2
 8004954:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004956:	e045      	b.n	80049e4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d026      	beq.n	80049ae <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004960:	4b1c      	ldr	r3, [pc, #112]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f023 0219 	bic.w	r2, r3, #25
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	4919      	ldr	r1, [pc, #100]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004972:	f7fc fd39 	bl	80013e8 <HAL_GetTick>
 8004976:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004978:	e008      	b.n	800498c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800497a:	f7fc fd35 	bl	80013e8 <HAL_GetTick>
 800497e:	4602      	mov	r2, r0
 8004980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004982:	1ad3      	subs	r3, r2, r3
 8004984:	2b02      	cmp	r3, #2
 8004986:	d901      	bls.n	800498c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004988:	2303      	movs	r3, #3
 800498a:	e2d3      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800498c:	4b11      	ldr	r3, [pc, #68]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d0f0      	beq.n	800497a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004998:	4b0e      	ldr	r3, [pc, #56]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	061b      	lsls	r3, r3, #24
 80049a6:	490b      	ldr	r1, [pc, #44]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	604b      	str	r3, [r1, #4]
 80049ac:	e01a      	b.n	80049e4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049ae:	4b09      	ldr	r3, [pc, #36]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a08      	ldr	r2, [pc, #32]	@ (80049d4 <HAL_RCC_OscConfig+0x244>)
 80049b4:	f023 0301 	bic.w	r3, r3, #1
 80049b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ba:	f7fc fd15 	bl	80013e8 <HAL_GetTick>
 80049be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049c0:	e00a      	b.n	80049d8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c2:	f7fc fd11 	bl	80013e8 <HAL_GetTick>
 80049c6:	4602      	mov	r2, r0
 80049c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	2b02      	cmp	r3, #2
 80049ce:	d903      	bls.n	80049d8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80049d0:	2303      	movs	r3, #3
 80049d2:	e2af      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
 80049d4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80049d8:	4b96      	ldr	r3, [pc, #600]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1ee      	bne.n	80049c2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0310 	and.w	r3, r3, #16
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d06a      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049f0:	4b90      	ldr	r3, [pc, #576]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049f8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80049fa:	4b8e      	ldr	r3, [pc, #568]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fe:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	d007      	beq.n	8004a16 <HAL_RCC_OscConfig+0x286>
 8004a06:	69bb      	ldr	r3, [r7, #24]
 8004a08:	2b18      	cmp	r3, #24
 8004a0a:	d11b      	bne.n	8004a44 <HAL_RCC_OscConfig+0x2b4>
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 0303 	and.w	r3, r3, #3
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d116      	bne.n	8004a44 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a16:	4b87      	ldr	r3, [pc, #540]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d005      	beq.n	8004a2e <HAL_RCC_OscConfig+0x29e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69db      	ldr	r3, [r3, #28]
 8004a26:	2b80      	cmp	r3, #128	@ 0x80
 8004a28:	d001      	beq.n	8004a2e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e282      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a2e:	4b81      	ldr	r3, [pc, #516]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a30:	68db      	ldr	r3, [r3, #12]
 8004a32:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a1b      	ldr	r3, [r3, #32]
 8004a3a:	061b      	lsls	r3, r3, #24
 8004a3c:	497d      	ldr	r1, [pc, #500]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004a42:	e040      	b.n	8004ac6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	69db      	ldr	r3, [r3, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d023      	beq.n	8004a94 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004a4c:	4b79      	ldr	r3, [pc, #484]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a78      	ldr	r2, [pc, #480]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a58:	f7fc fcc6 	bl	80013e8 <HAL_GetTick>
 8004a5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a5e:	e008      	b.n	8004a72 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004a60:	f7fc fcc2 	bl	80013e8 <HAL_GetTick>
 8004a64:	4602      	mov	r2, r0
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	1ad3      	subs	r3, r2, r3
 8004a6a:	2b02      	cmp	r3, #2
 8004a6c:	d901      	bls.n	8004a72 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e260      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004a72:	4b70      	ldr	r3, [pc, #448]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d0f0      	beq.n	8004a60 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004a7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	061b      	lsls	r3, r3, #24
 8004a8c:	4969      	ldr	r1, [pc, #420]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	60cb      	str	r3, [r1, #12]
 8004a92:	e018      	b.n	8004ac6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004a94:	4b67      	ldr	r3, [pc, #412]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a66      	ldr	r2, [pc, #408]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004a9a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa0:	f7fc fca2 	bl	80013e8 <HAL_GetTick>
 8004aa4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004aa6:	e008      	b.n	8004aba <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8004aa8:	f7fc fc9e 	bl	80013e8 <HAL_GetTick>
 8004aac:	4602      	mov	r2, r0
 8004aae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ab0:	1ad3      	subs	r3, r2, r3
 8004ab2:	2b02      	cmp	r3, #2
 8004ab4:	d901      	bls.n	8004aba <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8004ab6:	2303      	movs	r3, #3
 8004ab8:	e23c      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004aba:	4b5e      	ldr	r3, [pc, #376]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d1f0      	bne.n	8004aa8 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0308 	and.w	r3, r3, #8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d036      	beq.n	8004b40 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	695b      	ldr	r3, [r3, #20]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d019      	beq.n	8004b0e <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ada:	4b56      	ldr	r3, [pc, #344]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ade:	4a55      	ldr	r2, [pc, #340]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004ae0:	f043 0301 	orr.w	r3, r3, #1
 8004ae4:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ae6:	f7fc fc7f 	bl	80013e8 <HAL_GetTick>
 8004aea:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004aec:	e008      	b.n	8004b00 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aee:	f7fc fc7b 	bl	80013e8 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d901      	bls.n	8004b00 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e219      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004b00:	4b4c      	ldr	r3, [pc, #304]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b04:	f003 0302 	and.w	r3, r3, #2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d0f0      	beq.n	8004aee <HAL_RCC_OscConfig+0x35e>
 8004b0c:	e018      	b.n	8004b40 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b0e:	4b49      	ldr	r3, [pc, #292]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b12:	4a48      	ldr	r2, [pc, #288]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b1a:	f7fc fc65 	bl	80013e8 <HAL_GetTick>
 8004b1e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b20:	e008      	b.n	8004b34 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b22:	f7fc fc61 	bl	80013e8 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e1ff      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8004b34:	4b3f      	ldr	r3, [pc, #252]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b38:	f003 0302 	and.w	r3, r3, #2
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0320 	and.w	r3, r3, #32
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d036      	beq.n	8004bba <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	699b      	ldr	r3, [r3, #24]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d019      	beq.n	8004b88 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004b54:	4b37      	ldr	r3, [pc, #220]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a36      	ldr	r2, [pc, #216]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b5a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004b5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b60:	f7fc fc42 	bl	80013e8 <HAL_GetTick>
 8004b64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b66:	e008      	b.n	8004b7a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b68:	f7fc fc3e 	bl	80013e8 <HAL_GetTick>
 8004b6c:	4602      	mov	r2, r0
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	1ad3      	subs	r3, r2, r3
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d901      	bls.n	8004b7a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e1dc      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8004b7a:	4b2e      	ldr	r3, [pc, #184]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d0f0      	beq.n	8004b68 <HAL_RCC_OscConfig+0x3d8>
 8004b86:	e018      	b.n	8004bba <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004b88:	4b2a      	ldr	r3, [pc, #168]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a29      	ldr	r2, [pc, #164]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004b8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004b92:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8004b94:	f7fc fc28 	bl	80013e8 <HAL_GetTick>
 8004b98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004b9c:	f7fc fc24 	bl	80013e8 <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e1c2      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8004bae:	4b21      	ldr	r3, [pc, #132]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0304 	and.w	r3, r3, #4
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8086 	beq.w	8004cd4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004c38 <HAL_RCC_OscConfig+0x4a8>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a1a      	ldr	r2, [pc, #104]	@ (8004c38 <HAL_RCC_OscConfig+0x4a8>)
 8004bce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004bd4:	f7fc fc08 	bl	80013e8 <HAL_GetTick>
 8004bd8:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bdc:	f7fc fc04 	bl	80013e8 <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b64      	cmp	r3, #100	@ 0x64
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e1a2      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004bee:	4b12      	ldr	r3, [pc, #72]	@ (8004c38 <HAL_RCC_OscConfig+0x4a8>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	689b      	ldr	r3, [r3, #8]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d106      	bne.n	8004c10 <HAL_RCC_OscConfig+0x480>
 8004c02:	4b0c      	ldr	r3, [pc, #48]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c06:	4a0b      	ldr	r2, [pc, #44]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004c08:	f043 0301 	orr.w	r3, r3, #1
 8004c0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c0e:	e032      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d111      	bne.n	8004c3c <HAL_RCC_OscConfig+0x4ac>
 8004c18:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004c1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c1c:	4a05      	ldr	r2, [pc, #20]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004c1e:	f023 0301 	bic.w	r3, r3, #1
 8004c22:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c24:	4b03      	ldr	r3, [pc, #12]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004c26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c28:	4a02      	ldr	r2, [pc, #8]	@ (8004c34 <HAL_RCC_OscConfig+0x4a4>)
 8004c2a:	f023 0304 	bic.w	r3, r3, #4
 8004c2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c30:	e021      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e6>
 8004c32:	bf00      	nop
 8004c34:	58024400 	.word	0x58024400
 8004c38:	58024800 	.word	0x58024800
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	2b05      	cmp	r3, #5
 8004c42:	d10c      	bne.n	8004c5e <HAL_RCC_OscConfig+0x4ce>
 8004c44:	4b83      	ldr	r3, [pc, #524]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c48:	4a82      	ldr	r2, [pc, #520]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c4a:	f043 0304 	orr.w	r3, r3, #4
 8004c4e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c50:	4b80      	ldr	r3, [pc, #512]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c54:	4a7f      	ldr	r2, [pc, #508]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c56:	f043 0301 	orr.w	r3, r3, #1
 8004c5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c5c:	e00b      	b.n	8004c76 <HAL_RCC_OscConfig+0x4e6>
 8004c5e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c62:	4a7c      	ldr	r2, [pc, #496]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c64:	f023 0301 	bic.w	r3, r3, #1
 8004c68:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c6a:	4b7a      	ldr	r3, [pc, #488]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c6e:	4a79      	ldr	r2, [pc, #484]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c70:	f023 0304 	bic.w	r3, r3, #4
 8004c74:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	689b      	ldr	r3, [r3, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d015      	beq.n	8004caa <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c7e:	f7fc fbb3 	bl	80013e8 <HAL_GetTick>
 8004c82:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c84:	e00a      	b.n	8004c9c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c86:	f7fc fbaf 	bl	80013e8 <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c94:	4293      	cmp	r3, r2
 8004c96:	d901      	bls.n	8004c9c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8004c98:	2303      	movs	r3, #3
 8004c9a:	e14b      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004c9c:	4b6d      	ldr	r3, [pc, #436]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	f003 0302 	and.w	r3, r3, #2
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d0ee      	beq.n	8004c86 <HAL_RCC_OscConfig+0x4f6>
 8004ca8:	e014      	b.n	8004cd4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004caa:	f7fc fb9d 	bl	80013e8 <HAL_GetTick>
 8004cae:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cb0:	e00a      	b.n	8004cc8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb2:	f7fc fb99 	bl	80013e8 <HAL_GetTick>
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d901      	bls.n	8004cc8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8004cc4:	2303      	movs	r3, #3
 8004cc6:	e135      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8004cc8:	4b62      	ldr	r3, [pc, #392]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d1ee      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	f000 812a 	beq.w	8004f32 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8004cde:	4b5d      	ldr	r3, [pc, #372]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ce6:	2b18      	cmp	r3, #24
 8004ce8:	f000 80ba 	beq.w	8004e60 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	f040 8095 	bne.w	8004e20 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf6:	4b57      	ldr	r3, [pc, #348]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a56      	ldr	r2, [pc, #344]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004cfc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004d00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d02:	f7fc fb71 	bl	80013e8 <HAL_GetTick>
 8004d06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d08:	e008      	b.n	8004d1c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0a:	f7fc fb6d 	bl	80013e8 <HAL_GetTick>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d12:	1ad3      	subs	r3, r2, r3
 8004d14:	2b02      	cmp	r3, #2
 8004d16:	d901      	bls.n	8004d1c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e10b      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004d1c:	4b4d      	ldr	r3, [pc, #308]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1f0      	bne.n	8004d0a <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d28:	4b4a      	ldr	r3, [pc, #296]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d2a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004d2c:	4b4a      	ldr	r3, [pc, #296]	@ (8004e58 <HAL_RCC_OscConfig+0x6c8>)
 8004d2e:	4013      	ands	r3, r2
 8004d30:	687a      	ldr	r2, [r7, #4]
 8004d32:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d38:	0112      	lsls	r2, r2, #4
 8004d3a:	430a      	orrs	r2, r1
 8004d3c:	4945      	ldr	r1, [pc, #276]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	628b      	str	r3, [r1, #40]	@ 0x28
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d46:	3b01      	subs	r3, #1
 8004d48:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004d50:	3b01      	subs	r3, #1
 8004d52:	025b      	lsls	r3, r3, #9
 8004d54:	b29b      	uxth	r3, r3
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	041b      	lsls	r3, r3, #16
 8004d60:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004d64:	431a      	orrs	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	061b      	lsls	r3, r3, #24
 8004d6e:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004d72:	4938      	ldr	r1, [pc, #224]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8004d78:	4b36      	ldr	r3, [pc, #216]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7c:	4a35      	ldr	r2, [pc, #212]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d7e:	f023 0301 	bic.w	r3, r3, #1
 8004d82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004d84:	4b33      	ldr	r3, [pc, #204]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d88:	4b34      	ldr	r3, [pc, #208]	@ (8004e5c <HAL_RCC_OscConfig+0x6cc>)
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004d90:	00d2      	lsls	r2, r2, #3
 8004d92:	4930      	ldr	r1, [pc, #192]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8004d98:	4b2e      	ldr	r3, [pc, #184]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004d9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9c:	f023 020c 	bic.w	r2, r3, #12
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	492b      	ldr	r1, [pc, #172]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8004daa:	4b2a      	ldr	r3, [pc, #168]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004dac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dae:	f023 0202 	bic.w	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004db6:	4927      	ldr	r1, [pc, #156]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004db8:	4313      	orrs	r3, r2
 8004dba:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8004dbc:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004dbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dc0:	4a24      	ldr	r2, [pc, #144]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004dc2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004dc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004dc8:	4b22      	ldr	r3, [pc, #136]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004dca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dcc:	4a21      	ldr	r2, [pc, #132]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004dce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004dd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8004dd4:	4b1f      	ldr	r3, [pc, #124]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004dd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dd8:	4a1e      	ldr	r2, [pc, #120]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004dda:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004dde:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8004de0:	4b1c      	ldr	r3, [pc, #112]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004de4:	4a1b      	ldr	r2, [pc, #108]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004de6:	f043 0301 	orr.w	r3, r3, #1
 8004dea:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dec:	4b19      	ldr	r3, [pc, #100]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a18      	ldr	r2, [pc, #96]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004df2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc faf6 	bl	80013e8 <HAL_GetTick>
 8004dfc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004dfe:	e008      	b.n	8004e12 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e00:	f7fc faf2 	bl	80013e8 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d901      	bls.n	8004e12 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8004e0e:	2303      	movs	r3, #3
 8004e10:	e090      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d0f0      	beq.n	8004e00 <HAL_RCC_OscConfig+0x670>
 8004e1e:	e088      	b.n	8004f32 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e20:	4b0c      	ldr	r3, [pc, #48]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a0b      	ldr	r2, [pc, #44]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004e26:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e2c:	f7fc fadc 	bl	80013e8 <HAL_GetTick>
 8004e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fc fad8 	bl	80013e8 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e076      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8004e46:	4b03      	ldr	r3, [pc, #12]	@ (8004e54 <HAL_RCC_OscConfig+0x6c4>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x6a4>
 8004e52:	e06e      	b.n	8004f32 <HAL_RCC_OscConfig+0x7a2>
 8004e54:	58024400 	.word	0x58024400
 8004e58:	fffffc0c 	.word	0xfffffc0c
 8004e5c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8004e60:	4b36      	ldr	r3, [pc, #216]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8004e66:	4b35      	ldr	r3, [pc, #212]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e6a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d031      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	f003 0203 	and.w	r2, r3, #3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d12a      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	091b      	lsrs	r3, r3, #4
 8004e86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d122      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e9c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d11a      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	0a5b      	lsrs	r3, r3, #9
 8004ea6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004eae:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d111      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ec0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d108      	bne.n	8004ed8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	0e1b      	lsrs	r3, r3, #24
 8004eca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ed2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d001      	beq.n	8004edc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	e02b      	b.n	8004f34 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8004edc:	4b17      	ldr	r3, [pc, #92]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee0:	08db      	lsrs	r3, r3, #3
 8004ee2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ee6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004eec:	693a      	ldr	r2, [r7, #16]
 8004eee:	429a      	cmp	r2, r3
 8004ef0:	d01f      	beq.n	8004f32 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8004ef2:	4b12      	ldr	r3, [pc, #72]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ef6:	4a11      	ldr	r2, [pc, #68]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004ef8:	f023 0301 	bic.w	r3, r3, #1
 8004efc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004efe:	f7fc fa73 	bl	80013e8 <HAL_GetTick>
 8004f02:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8004f04:	bf00      	nop
 8004f06:	f7fc fa6f 	bl	80013e8 <HAL_GetTick>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d0f9      	beq.n	8004f06 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8004f12:	4b0a      	ldr	r3, [pc, #40]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004f14:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004f16:	4b0a      	ldr	r3, [pc, #40]	@ (8004f40 <HAL_RCC_OscConfig+0x7b0>)
 8004f18:	4013      	ands	r3, r2
 8004f1a:	687a      	ldr	r2, [r7, #4]
 8004f1c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8004f1e:	00d2      	lsls	r2, r2, #3
 8004f20:	4906      	ldr	r1, [pc, #24]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8004f26:	4b05      	ldr	r3, [pc, #20]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004f28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f2a:	4a04      	ldr	r2, [pc, #16]	@ (8004f3c <HAL_RCC_OscConfig+0x7ac>)
 8004f2c:	f043 0301 	orr.w	r3, r3, #1
 8004f30:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3730      	adds	r7, #48	@ 0x30
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}
 8004f3c:	58024400 	.word	0x58024400
 8004f40:	ffff0007 	.word	0xffff0007

08004f44 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b086      	sub	sp, #24
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	6078      	str	r0, [r7, #4]
 8004f4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d101      	bne.n	8004f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f54:	2301      	movs	r3, #1
 8004f56:	e19c      	b.n	8005292 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f58:	4b8a      	ldr	r3, [pc, #552]	@ (8005184 <HAL_RCC_ClockConfig+0x240>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d910      	bls.n	8004f88 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f66:	4b87      	ldr	r3, [pc, #540]	@ (8005184 <HAL_RCC_ClockConfig+0x240>)
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f023 020f 	bic.w	r2, r3, #15
 8004f6e:	4985      	ldr	r1, [pc, #532]	@ (8005184 <HAL_RCC_ClockConfig+0x240>)
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f76:	4b83      	ldr	r3, [pc, #524]	@ (8005184 <HAL_RCC_ClockConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 030f 	and.w	r3, r3, #15
 8004f7e:	683a      	ldr	r2, [r7, #0]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d001      	beq.n	8004f88 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004f84:	2301      	movs	r3, #1
 8004f86:	e184      	b.n	8005292 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0304 	and.w	r3, r3, #4
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d010      	beq.n	8004fb6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	691a      	ldr	r2, [r3, #16]
 8004f98:	4b7b      	ldr	r3, [pc, #492]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8004f9a:	699b      	ldr	r3, [r3, #24]
 8004f9c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d908      	bls.n	8004fb6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8004fa4:	4b78      	ldr	r3, [pc, #480]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	4975      	ldr	r1, [pc, #468]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0308 	and.w	r3, r3, #8
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d010      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	695a      	ldr	r2, [r3, #20]
 8004fc6:	4b70      	ldr	r3, [pc, #448]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d908      	bls.n	8004fe4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8004fd2:	4b6d      	ldr	r3, [pc, #436]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8004fd4:	69db      	ldr	r3, [r3, #28]
 8004fd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	695b      	ldr	r3, [r3, #20]
 8004fde:	496a      	ldr	r1, [pc, #424]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0310 	and.w	r3, r3, #16
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d010      	beq.n	8005012 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	699a      	ldr	r2, [r3, #24]
 8004ff4:	4b64      	ldr	r3, [pc, #400]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8004ff6:	69db      	ldr	r3, [r3, #28]
 8004ff8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d908      	bls.n	8005012 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005000:	4b61      	ldr	r3, [pc, #388]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005002:	69db      	ldr	r3, [r3, #28]
 8005004:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	495e      	ldr	r1, [pc, #376]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 800500e:	4313      	orrs	r3, r2
 8005010:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d010      	beq.n	8005040 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	69da      	ldr	r2, [r3, #28]
 8005022:	4b59      	ldr	r3, [pc, #356]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800502a:	429a      	cmp	r2, r3
 800502c:	d908      	bls.n	8005040 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800502e:	4b56      	ldr	r3, [pc, #344]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005030:	6a1b      	ldr	r3, [r3, #32]
 8005032:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	69db      	ldr	r3, [r3, #28]
 800503a:	4953      	ldr	r1, [pc, #332]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 800503c:	4313      	orrs	r3, r2
 800503e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b00      	cmp	r3, #0
 800504a:	d010      	beq.n	800506e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	68da      	ldr	r2, [r3, #12]
 8005050:	4b4d      	ldr	r3, [pc, #308]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	f003 030f 	and.w	r3, r3, #15
 8005058:	429a      	cmp	r2, r3
 800505a:	d908      	bls.n	800506e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800505c:	4b4a      	ldr	r3, [pc, #296]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 800505e:	699b      	ldr	r3, [r3, #24]
 8005060:	f023 020f 	bic.w	r2, r3, #15
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	4947      	ldr	r1, [pc, #284]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 800506a:	4313      	orrs	r3, r2
 800506c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0301 	and.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	d055      	beq.n	8005126 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800507a:	4b43      	ldr	r3, [pc, #268]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 800507c:	699b      	ldr	r3, [r3, #24]
 800507e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4940      	ldr	r1, [pc, #256]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005088:	4313      	orrs	r3, r2
 800508a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d107      	bne.n	80050a4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005094:	4b3c      	ldr	r3, [pc, #240]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d121      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050a0:	2301      	movs	r3, #1
 80050a2:	e0f6      	b.n	8005292 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	2b03      	cmp	r3, #3
 80050aa:	d107      	bne.n	80050bc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80050ac:	4b36      	ldr	r3, [pc, #216]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d115      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e0ea      	b.n	8005292 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d107      	bne.n	80050d4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80050c4:	4b30      	ldr	r3, [pc, #192]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d109      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e0de      	b.n	8005292 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80050d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d101      	bne.n	80050e4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80050e0:	2301      	movs	r3, #1
 80050e2:	e0d6      	b.n	8005292 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80050e4:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 80050e6:	691b      	ldr	r3, [r3, #16]
 80050e8:	f023 0207 	bic.w	r2, r3, #7
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	4925      	ldr	r1, [pc, #148]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 80050f2:	4313      	orrs	r3, r2
 80050f4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050f6:	f7fc f977 	bl	80013e8 <HAL_GetTick>
 80050fa:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fc:	e00a      	b.n	8005114 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050fe:	f7fc f973 	bl	80013e8 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800510c:	4293      	cmp	r3, r2
 800510e:	d901      	bls.n	8005114 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8005110:	2303      	movs	r3, #3
 8005112:	e0be      	b.n	8005292 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005114:	4b1c      	ldr	r3, [pc, #112]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	429a      	cmp	r2, r3
 8005124:	d1eb      	bne.n	80050fe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0302 	and.w	r3, r3, #2
 800512e:	2b00      	cmp	r3, #0
 8005130:	d010      	beq.n	8005154 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	4b14      	ldr	r3, [pc, #80]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005138:	699b      	ldr	r3, [r3, #24]
 800513a:	f003 030f 	and.w	r3, r3, #15
 800513e:	429a      	cmp	r2, r3
 8005140:	d208      	bcs.n	8005154 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005142:	4b11      	ldr	r3, [pc, #68]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005144:	699b      	ldr	r3, [r3, #24]
 8005146:	f023 020f 	bic.w	r2, r3, #15
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68db      	ldr	r3, [r3, #12]
 800514e:	490e      	ldr	r1, [pc, #56]	@ (8005188 <HAL_RCC_ClockConfig+0x244>)
 8005150:	4313      	orrs	r3, r2
 8005152:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005154:	4b0b      	ldr	r3, [pc, #44]	@ (8005184 <HAL_RCC_ClockConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 030f 	and.w	r3, r3, #15
 800515c:	683a      	ldr	r2, [r7, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d214      	bcs.n	800518c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005162:	4b08      	ldr	r3, [pc, #32]	@ (8005184 <HAL_RCC_ClockConfig+0x240>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f023 020f 	bic.w	r2, r3, #15
 800516a:	4906      	ldr	r1, [pc, #24]	@ (8005184 <HAL_RCC_ClockConfig+0x240>)
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	4313      	orrs	r3, r2
 8005170:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005172:	4b04      	ldr	r3, [pc, #16]	@ (8005184 <HAL_RCC_ClockConfig+0x240>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f003 030f 	and.w	r3, r3, #15
 800517a:	683a      	ldr	r2, [r7, #0]
 800517c:	429a      	cmp	r2, r3
 800517e:	d005      	beq.n	800518c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e086      	b.n	8005292 <HAL_RCC_ClockConfig+0x34e>
 8005184:	52002000 	.word	0x52002000
 8005188:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0304 	and.w	r3, r3, #4
 8005194:	2b00      	cmp	r3, #0
 8005196:	d010      	beq.n	80051ba <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	691a      	ldr	r2, [r3, #16]
 800519c:	4b3f      	ldr	r3, [pc, #252]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 800519e:	699b      	ldr	r3, [r3, #24]
 80051a0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d208      	bcs.n	80051ba <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80051a8:	4b3c      	ldr	r3, [pc, #240]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	691b      	ldr	r3, [r3, #16]
 80051b4:	4939      	ldr	r1, [pc, #228]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 80051b6:	4313      	orrs	r3, r2
 80051b8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0308 	and.w	r3, r3, #8
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d010      	beq.n	80051e8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	695a      	ldr	r2, [r3, #20]
 80051ca:	4b34      	ldr	r3, [pc, #208]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 80051cc:	69db      	ldr	r3, [r3, #28]
 80051ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051d2:	429a      	cmp	r2, r3
 80051d4:	d208      	bcs.n	80051e8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80051d6:	4b31      	ldr	r3, [pc, #196]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	492e      	ldr	r1, [pc, #184]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d010      	beq.n	8005216 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	699a      	ldr	r2, [r3, #24]
 80051f8:	4b28      	ldr	r3, [pc, #160]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 80051fa:	69db      	ldr	r3, [r3, #28]
 80051fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005200:	429a      	cmp	r2, r3
 8005202:	d208      	bcs.n	8005216 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005204:	4b25      	ldr	r3, [pc, #148]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 8005206:	69db      	ldr	r3, [r3, #28]
 8005208:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	699b      	ldr	r3, [r3, #24]
 8005210:	4922      	ldr	r1, [pc, #136]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 8005212:	4313      	orrs	r3, r2
 8005214:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f003 0320 	and.w	r3, r3, #32
 800521e:	2b00      	cmp	r3, #0
 8005220:	d010      	beq.n	8005244 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	69da      	ldr	r2, [r3, #28]
 8005226:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 8005228:	6a1b      	ldr	r3, [r3, #32]
 800522a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800522e:	429a      	cmp	r2, r3
 8005230:	d208      	bcs.n	8005244 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8005232:	4b1a      	ldr	r3, [pc, #104]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 8005234:	6a1b      	ldr	r3, [r3, #32]
 8005236:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	69db      	ldr	r3, [r3, #28]
 800523e:	4917      	ldr	r1, [pc, #92]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 8005240:	4313      	orrs	r3, r2
 8005242:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005244:	f000 f834 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 8005248:	4602      	mov	r2, r0
 800524a:	4b14      	ldr	r3, [pc, #80]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	0a1b      	lsrs	r3, r3, #8
 8005250:	f003 030f 	and.w	r3, r3, #15
 8005254:	4912      	ldr	r1, [pc, #72]	@ (80052a0 <HAL_RCC_ClockConfig+0x35c>)
 8005256:	5ccb      	ldrb	r3, [r1, r3]
 8005258:	f003 031f 	and.w	r3, r3, #31
 800525c:	fa22 f303 	lsr.w	r3, r2, r3
 8005260:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005262:	4b0e      	ldr	r3, [pc, #56]	@ (800529c <HAL_RCC_ClockConfig+0x358>)
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f003 030f 	and.w	r3, r3, #15
 800526a:	4a0d      	ldr	r2, [pc, #52]	@ (80052a0 <HAL_RCC_ClockConfig+0x35c>)
 800526c:	5cd3      	ldrb	r3, [r2, r3]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	fa22 f303 	lsr.w	r3, r2, r3
 8005278:	4a0a      	ldr	r2, [pc, #40]	@ (80052a4 <HAL_RCC_ClockConfig+0x360>)
 800527a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800527c:	4a0a      	ldr	r2, [pc, #40]	@ (80052a8 <HAL_RCC_ClockConfig+0x364>)
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <HAL_RCC_ClockConfig+0x368>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4618      	mov	r0, r3
 8005288:	f7fc f878 	bl	800137c <HAL_InitTick>
 800528c:	4603      	mov	r3, r0
 800528e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005290:	7bfb      	ldrb	r3, [r7, #15]
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	58024400 	.word	0x58024400
 80052a0:	080096e4 	.word	0x080096e4
 80052a4:	24000004 	.word	0x24000004
 80052a8:	24000000 	.word	0x24000000
 80052ac:	24000008 	.word	0x24000008

080052b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b089      	sub	sp, #36	@ 0x24
 80052b4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80052b6:	4bb3      	ldr	r3, [pc, #716]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052be:	2b18      	cmp	r3, #24
 80052c0:	f200 8155 	bhi.w	800556e <HAL_RCC_GetSysClockFreq+0x2be>
 80052c4:	a201      	add	r2, pc, #4	@ (adr r2, 80052cc <HAL_RCC_GetSysClockFreq+0x1c>)
 80052c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052ca:	bf00      	nop
 80052cc:	08005331 	.word	0x08005331
 80052d0:	0800556f 	.word	0x0800556f
 80052d4:	0800556f 	.word	0x0800556f
 80052d8:	0800556f 	.word	0x0800556f
 80052dc:	0800556f 	.word	0x0800556f
 80052e0:	0800556f 	.word	0x0800556f
 80052e4:	0800556f 	.word	0x0800556f
 80052e8:	0800556f 	.word	0x0800556f
 80052ec:	08005357 	.word	0x08005357
 80052f0:	0800556f 	.word	0x0800556f
 80052f4:	0800556f 	.word	0x0800556f
 80052f8:	0800556f 	.word	0x0800556f
 80052fc:	0800556f 	.word	0x0800556f
 8005300:	0800556f 	.word	0x0800556f
 8005304:	0800556f 	.word	0x0800556f
 8005308:	0800556f 	.word	0x0800556f
 800530c:	0800535d 	.word	0x0800535d
 8005310:	0800556f 	.word	0x0800556f
 8005314:	0800556f 	.word	0x0800556f
 8005318:	0800556f 	.word	0x0800556f
 800531c:	0800556f 	.word	0x0800556f
 8005320:	0800556f 	.word	0x0800556f
 8005324:	0800556f 	.word	0x0800556f
 8005328:	0800556f 	.word	0x0800556f
 800532c:	08005363 	.word	0x08005363
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005330:	4b94      	ldr	r3, [pc, #592]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f003 0320 	and.w	r3, r3, #32
 8005338:	2b00      	cmp	r3, #0
 800533a:	d009      	beq.n	8005350 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800533c:	4b91      	ldr	r3, [pc, #580]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	08db      	lsrs	r3, r3, #3
 8005342:	f003 0303 	and.w	r3, r3, #3
 8005346:	4a90      	ldr	r2, [pc, #576]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005348:	fa22 f303 	lsr.w	r3, r2, r3
 800534c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800534e:	e111      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8005350:	4b8d      	ldr	r3, [pc, #564]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8005352:	61bb      	str	r3, [r7, #24]
      break;
 8005354:	e10e      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8005356:	4b8d      	ldr	r3, [pc, #564]	@ (800558c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005358:	61bb      	str	r3, [r7, #24]
      break;
 800535a:	e10b      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800535c:	4b8c      	ldr	r3, [pc, #560]	@ (8005590 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800535e:	61bb      	str	r3, [r7, #24]
      break;
 8005360:	e108      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005362:	4b88      	ldr	r3, [pc, #544]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	f003 0303 	and.w	r3, r3, #3
 800536a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800536c:	4b85      	ldr	r3, [pc, #532]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800536e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005370:	091b      	lsrs	r3, r3, #4
 8005372:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005376:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005378:	4b82      	ldr	r3, [pc, #520]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800537a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537c:	f003 0301 	and.w	r3, r3, #1
 8005380:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8005382:	4b80      	ldr	r3, [pc, #512]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005384:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005386:	08db      	lsrs	r3, r3, #3
 8005388:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	fb02 f303 	mul.w	r3, r2, r3
 8005392:	ee07 3a90 	vmov	s15, r3
 8005396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800539a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 80e1 	beq.w	8005568 <HAL_RCC_GetSysClockFreq+0x2b8>
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	f000 8083 	beq.w	80054b4 <HAL_RCC_GetSysClockFreq+0x204>
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b02      	cmp	r3, #2
 80053b2:	f200 80a1 	bhi.w	80054f8 <HAL_RCC_GetSysClockFreq+0x248>
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <HAL_RCC_GetSysClockFreq+0x114>
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2b01      	cmp	r3, #1
 80053c0:	d056      	beq.n	8005470 <HAL_RCC_GetSysClockFreq+0x1c0>
 80053c2:	e099      	b.n	80054f8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80053c4:	4b6f      	ldr	r3, [pc, #444]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d02d      	beq.n	800542c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80053d0:	4b6c      	ldr	r3, [pc, #432]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	08db      	lsrs	r3, r3, #3
 80053d6:	f003 0303 	and.w	r3, r3, #3
 80053da:	4a6b      	ldr	r2, [pc, #428]	@ (8005588 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80053dc:	fa22 f303 	lsr.w	r3, r2, r3
 80053e0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	ee07 3a90 	vmov	s15, r3
 80053e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	ee07 3a90 	vmov	s15, r3
 80053f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80053f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80053fa:	4b62      	ldr	r3, [pc, #392]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80053fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005402:	ee07 3a90 	vmov	s15, r3
 8005406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800540a:	ed97 6a02 	vldr	s12, [r7, #8]
 800540e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8005594 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800541a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800541e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005426:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800542a:	e087      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8005598 <HAL_RCC_GetSysClockFreq+0x2e8>
 800543a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800543e:	4b51      	ldr	r3, [pc, #324]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005446:	ee07 3a90 	vmov	s15, r3
 800544a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800544e:	ed97 6a02 	vldr	s12, [r7, #8]
 8005452:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8005594 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800545a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800545e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8005462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800546a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800546e:	e065      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	ee07 3a90 	vmov	s15, r3
 8005476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800547a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800559c <HAL_RCC_GetSysClockFreq+0x2ec>
 800547e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005482:	4b40      	ldr	r3, [pc, #256]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548a:	ee07 3a90 	vmov	s15, r3
 800548e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005492:	ed97 6a02 	vldr	s12, [r7, #8]
 8005496:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8005594 <HAL_RCC_GetSysClockFreq+0x2e4>
 800549a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800549e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054ae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054b2:	e043      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054b4:	693b      	ldr	r3, [r7, #16]
 80054b6:	ee07 3a90 	vmov	s15, r3
 80054ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054be:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80055a0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80054c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80054c6:	4b2f      	ldr	r3, [pc, #188]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80054c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054ce:	ee07 3a90 	vmov	s15, r3
 80054d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80054d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80054da:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8005594 <HAL_RCC_GetSysClockFreq+0x2e4>
 80054de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80054e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80054e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80054ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80054ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80054f6:	e021      	b.n	800553c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	ee07 3a90 	vmov	s15, r3
 80054fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005502:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800559c <HAL_RCC_GetSysClockFreq+0x2ec>
 8005506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800550a:	4b1e      	ldr	r3, [pc, #120]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800550c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800550e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005512:	ee07 3a90 	vmov	s15, r3
 8005516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800551a:	ed97 6a02 	vldr	s12, [r7, #8]
 800551e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8005594 <HAL_RCC_GetSysClockFreq+0x2e4>
 8005522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800552a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800552e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005532:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005536:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800553a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800553c:	4b11      	ldr	r3, [pc, #68]	@ (8005584 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800553e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005540:	0a5b      	lsrs	r3, r3, #9
 8005542:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005546:	3301      	adds	r3, #1
 8005548:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	ee07 3a90 	vmov	s15, r3
 8005550:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005554:	edd7 6a07 	vldr	s13, [r7, #28]
 8005558:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800555c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005560:	ee17 3a90 	vmov	r3, s15
 8005564:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8005566:	e005      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8005568:	2300      	movs	r3, #0
 800556a:	61bb      	str	r3, [r7, #24]
      break;
 800556c:	e002      	b.n	8005574 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800556e:	4b07      	ldr	r3, [pc, #28]	@ (800558c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005570:	61bb      	str	r3, [r7, #24]
      break;
 8005572:	bf00      	nop
  }

  return sysclockfreq;
 8005574:	69bb      	ldr	r3, [r7, #24]
}
 8005576:	4618      	mov	r0, r3
 8005578:	3724      	adds	r7, #36	@ 0x24
 800557a:	46bd      	mov	sp, r7
 800557c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005580:	4770      	bx	lr
 8005582:	bf00      	nop
 8005584:	58024400 	.word	0x58024400
 8005588:	03d09000 	.word	0x03d09000
 800558c:	003d0900 	.word	0x003d0900
 8005590:	007a1200 	.word	0x007a1200
 8005594:	46000000 	.word	0x46000000
 8005598:	4c742400 	.word	0x4c742400
 800559c:	4a742400 	.word	0x4a742400
 80055a0:	4af42400 	.word	0x4af42400

080055a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80055aa:	f7ff fe81 	bl	80052b0 <HAL_RCC_GetSysClockFreq>
 80055ae:	4602      	mov	r2, r0
 80055b0:	4b10      	ldr	r3, [pc, #64]	@ (80055f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	0a1b      	lsrs	r3, r3, #8
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	490f      	ldr	r1, [pc, #60]	@ (80055f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80055bc:	5ccb      	ldrb	r3, [r1, r3]
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	fa22 f303 	lsr.w	r3, r2, r3
 80055c6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80055c8:	4b0a      	ldr	r3, [pc, #40]	@ (80055f4 <HAL_RCC_GetHCLKFreq+0x50>)
 80055ca:	699b      	ldr	r3, [r3, #24]
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	4a09      	ldr	r2, [pc, #36]	@ (80055f8 <HAL_RCC_GetHCLKFreq+0x54>)
 80055d2:	5cd3      	ldrb	r3, [r2, r3]
 80055d4:	f003 031f 	and.w	r3, r3, #31
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	fa22 f303 	lsr.w	r3, r2, r3
 80055de:	4a07      	ldr	r2, [pc, #28]	@ (80055fc <HAL_RCC_GetHCLKFreq+0x58>)
 80055e0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80055e2:	4a07      	ldr	r2, [pc, #28]	@ (8005600 <HAL_RCC_GetHCLKFreq+0x5c>)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80055e8:	4b04      	ldr	r3, [pc, #16]	@ (80055fc <HAL_RCC_GetHCLKFreq+0x58>)
 80055ea:	681b      	ldr	r3, [r3, #0]
}
 80055ec:	4618      	mov	r0, r3
 80055ee:	3708      	adds	r7, #8
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	58024400 	.word	0x58024400
 80055f8:	080096e4 	.word	0x080096e4
 80055fc:	24000004 	.word	0x24000004
 8005600:	24000000 	.word	0x24000000

08005604 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005608:	f7ff ffcc 	bl	80055a4 <HAL_RCC_GetHCLKFreq>
 800560c:	4602      	mov	r2, r0
 800560e:	4b06      	ldr	r3, [pc, #24]	@ (8005628 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	091b      	lsrs	r3, r3, #4
 8005614:	f003 0307 	and.w	r3, r3, #7
 8005618:	4904      	ldr	r1, [pc, #16]	@ (800562c <HAL_RCC_GetPCLK1Freq+0x28>)
 800561a:	5ccb      	ldrb	r3, [r1, r3]
 800561c:	f003 031f 	and.w	r3, r3, #31
 8005620:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005624:	4618      	mov	r0, r3
 8005626:	bd80      	pop	{r7, pc}
 8005628:	58024400 	.word	0x58024400
 800562c:	080096e4 	.word	0x080096e4

08005630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005634:	f7ff ffb6 	bl	80055a4 <HAL_RCC_GetHCLKFreq>
 8005638:	4602      	mov	r2, r0
 800563a:	4b06      	ldr	r3, [pc, #24]	@ (8005654 <HAL_RCC_GetPCLK2Freq+0x24>)
 800563c:	69db      	ldr	r3, [r3, #28]
 800563e:	0a1b      	lsrs	r3, r3, #8
 8005640:	f003 0307 	and.w	r3, r3, #7
 8005644:	4904      	ldr	r1, [pc, #16]	@ (8005658 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005646:	5ccb      	ldrb	r3, [r1, r3]
 8005648:	f003 031f 	and.w	r3, r3, #31
 800564c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005650:	4618      	mov	r0, r3
 8005652:	bd80      	pop	{r7, pc}
 8005654:	58024400 	.word	0x58024400
 8005658:	080096e4 	.word	0x080096e4

0800565c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800565c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005660:	b0c6      	sub	sp, #280	@ 0x118
 8005662:	af00      	add	r7, sp, #0
 8005664:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005668:	2300      	movs	r3, #0
 800566a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800566e:	2300      	movs	r3, #0
 8005670:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005674:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800567c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8005680:	2500      	movs	r5, #0
 8005682:	ea54 0305 	orrs.w	r3, r4, r5
 8005686:	d049      	beq.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8005688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800568c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800568e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005692:	d02f      	beq.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8005694:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005698:	d828      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 800569a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800569e:	d01a      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80056a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80056a4:	d822      	bhi.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d003      	beq.n	80056b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80056aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056ae:	d007      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80056b0:	e01c      	b.n	80056ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80056b2:	4bab      	ldr	r3, [pc, #684]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056b6:	4aaa      	ldr	r2, [pc, #680]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80056b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80056bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056be:	e01a      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80056c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056c4:	3308      	adds	r3, #8
 80056c6:	2102      	movs	r1, #2
 80056c8:	4618      	mov	r0, r3
 80056ca:	f001 fc25 	bl	8006f18 <RCCEx_PLL2_Config>
 80056ce:	4603      	mov	r3, r0
 80056d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056d4:	e00f      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80056d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80056da:	3328      	adds	r3, #40	@ 0x28
 80056dc:	2102      	movs	r1, #2
 80056de:	4618      	mov	r0, r3
 80056e0:	f001 fccc 	bl	800707c <RCCEx_PLL3_Config>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80056ea:	e004      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80056f2:	e000      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80056f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80056f6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d10a      	bne.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80056fe:	4b98      	ldr	r3, [pc, #608]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005700:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005702:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8005706:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800570a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800570c:	4a94      	ldr	r2, [pc, #592]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800570e:	430b      	orrs	r3, r1
 8005710:	6513      	str	r3, [r2, #80]	@ 0x50
 8005712:	e003      	b.n	800571c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005714:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005718:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800571c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8005728:	f04f 0900 	mov.w	r9, #0
 800572c:	ea58 0309 	orrs.w	r3, r8, r9
 8005730:	d047      	beq.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8005732:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005738:	2b04      	cmp	r3, #4
 800573a:	d82a      	bhi.n	8005792 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800573c:	a201      	add	r2, pc, #4	@ (adr r2, 8005744 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800573e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005742:	bf00      	nop
 8005744:	08005759 	.word	0x08005759
 8005748:	08005767 	.word	0x08005767
 800574c:	0800577d 	.word	0x0800577d
 8005750:	0800579b 	.word	0x0800579b
 8005754:	0800579b 	.word	0x0800579b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005758:	4b81      	ldr	r3, [pc, #516]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800575a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800575c:	4a80      	ldr	r2, [pc, #512]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800575e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005762:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005764:	e01a      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005766:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800576a:	3308      	adds	r3, #8
 800576c:	2100      	movs	r1, #0
 800576e:	4618      	mov	r0, r3
 8005770:	f001 fbd2 	bl	8006f18 <RCCEx_PLL2_Config>
 8005774:	4603      	mov	r3, r0
 8005776:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800577a:	e00f      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800577c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005780:	3328      	adds	r3, #40	@ 0x28
 8005782:	2100      	movs	r1, #0
 8005784:	4618      	mov	r0, r3
 8005786:	f001 fc79 	bl	800707c <RCCEx_PLL3_Config>
 800578a:	4603      	mov	r3, r0
 800578c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005790:	e004      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005798:	e000      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800579a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800579c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10a      	bne.n	80057ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80057a4:	4b6e      	ldr	r3, [pc, #440]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a8:	f023 0107 	bic.w	r1, r3, #7
 80057ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057b2:	4a6b      	ldr	r2, [pc, #428]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80057b4:	430b      	orrs	r3, r1
 80057b6:	6513      	str	r3, [r2, #80]	@ 0x50
 80057b8:	e003      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80057ba:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80057be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80057c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ca:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 80057ce:	f04f 0b00 	mov.w	fp, #0
 80057d2:	ea5a 030b 	orrs.w	r3, sl, fp
 80057d6:	d05b      	beq.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80057d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80057dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80057e0:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80057e4:	d03b      	beq.n	800585e <HAL_RCCEx_PeriphCLKConfig+0x202>
 80057e6:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 80057ea:	d834      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80057ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057f0:	d037      	beq.n	8005862 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80057f2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80057f6:	d82e      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 80057f8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80057fc:	d033      	beq.n	8005866 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80057fe:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8005802:	d828      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005808:	d01a      	beq.n	8005840 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 800580a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800580e:	d822      	bhi.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8005814:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005818:	d007      	beq.n	800582a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 800581a:	e01c      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800581c:	4b50      	ldr	r3, [pc, #320]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800581e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005820:	4a4f      	ldr	r2, [pc, #316]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005822:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005826:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005828:	e01e      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800582a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800582e:	3308      	adds	r3, #8
 8005830:	2100      	movs	r1, #0
 8005832:	4618      	mov	r0, r3
 8005834:	f001 fb70 	bl	8006f18 <RCCEx_PLL2_Config>
 8005838:	4603      	mov	r3, r0
 800583a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800583e:	e013      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005840:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005844:	3328      	adds	r3, #40	@ 0x28
 8005846:	2100      	movs	r1, #0
 8005848:	4618      	mov	r0, r3
 800584a:	f001 fc17 	bl	800707c <RCCEx_PLL3_Config>
 800584e:	4603      	mov	r3, r0
 8005850:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005854:	e008      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800585c:	e004      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 800585e:	bf00      	nop
 8005860:	e002      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005862:	bf00      	nop
 8005864:	e000      	b.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8005866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005868:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800586c:	2b00      	cmp	r3, #0
 800586e:	d10b      	bne.n	8005888 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005870:	4b3b      	ldr	r3, [pc, #236]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005874:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8005878:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800587c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005880:	4a37      	ldr	r2, [pc, #220]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8005882:	430b      	orrs	r3, r1
 8005884:	6593      	str	r3, [r2, #88]	@ 0x58
 8005886:	e003      	b.n	8005890 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005888:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800588c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005890:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005898:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800589c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80058a0:	2300      	movs	r3, #0
 80058a2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80058a6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80058aa:	460b      	mov	r3, r1
 80058ac:	4313      	orrs	r3, r2
 80058ae:	d05d      	beq.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80058b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80058b4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80058b8:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058bc:	d03b      	beq.n	8005936 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80058be:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 80058c2:	d834      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80058c4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058c8:	d037      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 80058ca:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80058ce:	d82e      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80058d0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058d4:	d033      	beq.n	800593e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 80058d6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80058da:	d828      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80058dc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e0:	d01a      	beq.n	8005918 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 80058e2:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80058e6:	d822      	bhi.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d003      	beq.n	80058f4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80058ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80058f0:	d007      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80058f2:	e01c      	b.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80058f4:	4b1a      	ldr	r3, [pc, #104]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058f8:	4a19      	ldr	r2, [pc, #100]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80058fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80058fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8005900:	e01e      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005902:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005906:	3308      	adds	r3, #8
 8005908:	2100      	movs	r1, #0
 800590a:	4618      	mov	r0, r3
 800590c:	f001 fb04 	bl	8006f18 <RCCEx_PLL2_Config>
 8005910:	4603      	mov	r3, r0
 8005912:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8005916:	e013      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800591c:	3328      	adds	r3, #40	@ 0x28
 800591e:	2100      	movs	r1, #0
 8005920:	4618      	mov	r0, r3
 8005922:	f001 fbab 	bl	800707c <RCCEx_PLL3_Config>
 8005926:	4603      	mov	r3, r0
 8005928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800592c:	e008      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800592e:	2301      	movs	r3, #1
 8005930:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005934:	e004      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8005936:	bf00      	nop
 8005938:	e002      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800593a:	bf00      	nop
 800593c:	e000      	b.n	8005940 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800593e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005940:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005944:	2b00      	cmp	r3, #0
 8005946:	d10d      	bne.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005948:	4b05      	ldr	r3, [pc, #20]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800594a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800594c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8005950:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005954:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8005958:	4a01      	ldr	r2, [pc, #4]	@ (8005960 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800595a:	430b      	orrs	r3, r1
 800595c:	6593      	str	r3, [r2, #88]	@ 0x58
 800595e:	e005      	b.n	800596c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8005960:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005964:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005968:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800596c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8005978:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800597c:	2300      	movs	r3, #0
 800597e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8005982:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8005986:	460b      	mov	r3, r1
 8005988:	4313      	orrs	r3, r2
 800598a:	d03a      	beq.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 800598c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005990:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005992:	2b30      	cmp	r3, #48	@ 0x30
 8005994:	d01f      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8005996:	2b30      	cmp	r3, #48	@ 0x30
 8005998:	d819      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 800599a:	2b20      	cmp	r3, #32
 800599c:	d00c      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 800599e:	2b20      	cmp	r3, #32
 80059a0:	d815      	bhi.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x372>
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d019      	beq.n	80059da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80059a6:	2b10      	cmp	r3, #16
 80059a8:	d111      	bne.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80059aa:	4baa      	ldr	r3, [pc, #680]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ae:	4aa9      	ldr	r2, [pc, #676]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80059b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80059b6:	e011      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80059b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059bc:	3308      	adds	r3, #8
 80059be:	2102      	movs	r1, #2
 80059c0:	4618      	mov	r0, r3
 80059c2:	f001 faa9 	bl	8006f18 <RCCEx_PLL2_Config>
 80059c6:	4603      	mov	r3, r0
 80059c8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 80059cc:	e006      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80059ce:	2301      	movs	r3, #1
 80059d0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80059d4:	e002      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80059d6:	bf00      	nop
 80059d8:	e000      	b.n	80059dc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 80059da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80059dc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d10a      	bne.n	80059fa <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80059e4:	4b9b      	ldr	r3, [pc, #620]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059e8:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 80059ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80059f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059f2:	4a98      	ldr	r2, [pc, #608]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80059f4:	430b      	orrs	r3, r1
 80059f6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80059f8:	e003      	b.n	8005a02 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80059fa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80059fe:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005a02:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8005a0e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005a12:	2300      	movs	r3, #0
 8005a14:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8005a18:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8005a1c:	460b      	mov	r3, r1
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	d051      	beq.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8005a22:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a2c:	d035      	beq.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8005a2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005a32:	d82e      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005a34:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a38:	d031      	beq.n	8005a9e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8005a3a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8005a3e:	d828      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005a40:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a44:	d01a      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8005a46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a4a:	d822      	bhi.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d003      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8005a50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a54:	d007      	beq.n	8005a66 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8005a56:	e01c      	b.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005a58:	4b7e      	ldr	r3, [pc, #504]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a5c:	4a7d      	ldr	r2, [pc, #500]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005a5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005a62:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a64:	e01c      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005a66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f001 fa52 	bl	8006f18 <RCCEx_PLL2_Config>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a7a:	e011      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005a7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005a80:	3328      	adds	r3, #40	@ 0x28
 8005a82:	2100      	movs	r1, #0
 8005a84:	4618      	mov	r0, r3
 8005a86:	f001 faf9 	bl	800707c <RCCEx_PLL3_Config>
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8005a90:	e006      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005a98:	e002      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8005a9e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005aa0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005aa8:	4b6a      	ldr	r3, [pc, #424]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005aaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aac:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8005ab0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ab6:	4a67      	ldr	r2, [pc, #412]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005ab8:	430b      	orrs	r3, r1
 8005aba:	6513      	str	r3, [r2, #80]	@ 0x50
 8005abc:	e003      	b.n	8005ac6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005abe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ac2:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ace:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8005ad2:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005adc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8005ae0:	460b      	mov	r3, r1
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	d053      	beq.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8005ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005aea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af0:	d033      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8005af2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005af6:	d82c      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005af8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005afc:	d02f      	beq.n	8005b5e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8005afe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b02:	d826      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005b04:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b08:	d02b      	beq.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005b0a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8005b0e:	d820      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005b10:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b14:	d012      	beq.n	8005b3c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8005b16:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8005b1a:	d81a      	bhi.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d022      	beq.n	8005b66 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8005b20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005b24:	d115      	bne.n	8005b52 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005b26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b2a:	3308      	adds	r3, #8
 8005b2c:	2101      	movs	r1, #1
 8005b2e:	4618      	mov	r0, r3
 8005b30:	f001 f9f2 	bl	8006f18 <RCCEx_PLL2_Config>
 8005b34:	4603      	mov	r3, r0
 8005b36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b3a:	e015      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005b3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b40:	3328      	adds	r3, #40	@ 0x28
 8005b42:	2101      	movs	r1, #1
 8005b44:	4618      	mov	r0, r3
 8005b46:	f001 fa99 	bl	800707c <RCCEx_PLL3_Config>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8005b50:	e00a      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005b52:	2301      	movs	r3, #1
 8005b54:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005b58:	e006      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005b5a:	bf00      	nop
 8005b5c:	e004      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005b5e:	bf00      	nop
 8005b60:	e002      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005b62:	bf00      	nop
 8005b64:	e000      	b.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8005b66:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005b68:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d10a      	bne.n	8005b86 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005b70:	4b38      	ldr	r3, [pc, #224]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005b74:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8005b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b7e:	4a35      	ldr	r2, [pc, #212]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005b80:	430b      	orrs	r3, r1
 8005b82:	6513      	str	r3, [r2, #80]	@ 0x50
 8005b84:	e003      	b.n	8005b8e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b86:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005b8a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005b8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b96:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8005b9a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8005ba4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ba8:	460b      	mov	r3, r1
 8005baa:	4313      	orrs	r3, r2
 8005bac:	d058      	beq.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8005bae:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005bb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bba:	d033      	beq.n	8005c24 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8005bbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005bc0:	d82c      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bc6:	d02f      	beq.n	8005c28 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8005bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005bcc:	d826      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005bce:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bd2:	d02b      	beq.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8005bd4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8005bd8:	d820      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005bda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005bde:	d012      	beq.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 8005be0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005be4:	d81a      	bhi.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d022      	beq.n	8005c30 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8005bea:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005bee:	d115      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005bf4:	3308      	adds	r3, #8
 8005bf6:	2101      	movs	r1, #1
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 f98d 	bl	8006f18 <RCCEx_PLL2_Config>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c04:	e015      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005c06:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c0a:	3328      	adds	r3, #40	@ 0x28
 8005c0c:	2101      	movs	r1, #1
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f001 fa34 	bl	800707c <RCCEx_PLL3_Config>
 8005c14:	4603      	mov	r3, r0
 8005c16:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8005c1a:	e00a      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005c22:	e006      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c24:	bf00      	nop
 8005c26:	e004      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c28:	bf00      	nop
 8005c2a:	e002      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c2c:	bf00      	nop
 8005c2e:	e000      	b.n	8005c32 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8005c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005c32:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10e      	bne.n	8005c58 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8005c3a:	4b06      	ldr	r3, [pc, #24]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c3e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8005c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c46:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005c4a:	4a02      	ldr	r2, [pc, #8]	@ (8005c54 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8005c4c:	430b      	orrs	r3, r1
 8005c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005c50:	e006      	b.n	8005c60 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8005c52:	bf00      	nop
 8005c54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c58:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005c5c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005c60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c68:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8005c6c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c70:	2300      	movs	r3, #0
 8005c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8005c76:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8005c7a:	460b      	mov	r3, r1
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	d037      	beq.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8005c80:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005c84:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005c86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c8a:	d00e      	beq.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8005c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005c90:	d816      	bhi.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d018      	beq.n	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8005c96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005c9a:	d111      	bne.n	8005cc0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c9c:	4bc4      	ldr	r3, [pc, #784]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca0:	4ac3      	ldr	r2, [pc, #780]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005ca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005ca8:	e00f      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005caa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cae:	3308      	adds	r3, #8
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f001 f930 	bl	8006f18 <RCCEx_PLL2_Config>
 8005cb8:	4603      	mov	r3, r0
 8005cba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005cc6:	e000      	b.n	8005cca <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8005cc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005cca:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cd2:	4bb7      	ldr	r3, [pc, #732]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cd6:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8005cda:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ce0:	4ab3      	ldr	r2, [pc, #716]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ce2:	430b      	orrs	r3, r1
 8005ce4:	6513      	str	r3, [r2, #80]	@ 0x50
 8005ce6:	e003      	b.n	8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ce8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005cec:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8005cf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf8:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8005cfc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d00:	2300      	movs	r3, #0
 8005d02:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d06:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4313      	orrs	r3, r2
 8005d0e:	d039      	beq.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8005d10:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d81c      	bhi.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8005d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8005d20 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8005d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d20:	08005d5d 	.word	0x08005d5d
 8005d24:	08005d31 	.word	0x08005d31
 8005d28:	08005d3f 	.word	0x08005d3f
 8005d2c:	08005d5d 	.word	0x08005d5d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d30:	4b9f      	ldr	r3, [pc, #636]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d34:	4a9e      	ldr	r2, [pc, #632]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d36:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d3c:	e00f      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8005d3e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d42:	3308      	adds	r3, #8
 8005d44:	2102      	movs	r1, #2
 8005d46:	4618      	mov	r0, r3
 8005d48:	f001 f8e6 	bl	8006f18 <RCCEx_PLL2_Config>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8005d52:	e004      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8005d54:	2301      	movs	r3, #1
 8005d56:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005d5a:	e000      	b.n	8005d5e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8005d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005d5e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8005d66:	4b92      	ldr	r3, [pc, #584]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d6a:	f023 0103 	bic.w	r1, r3, #3
 8005d6e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d74:	4a8e      	ldr	r2, [pc, #568]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005d76:	430b      	orrs	r3, r1
 8005d78:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8005d7a:	e003      	b.n	8005d84 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d7c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005d80:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d8c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8005d90:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d94:	2300      	movs	r3, #0
 8005d96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005d9a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d9e:	460b      	mov	r3, r1
 8005da0:	4313      	orrs	r3, r2
 8005da2:	f000 8099 	beq.w	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005da6:	4b83      	ldr	r3, [pc, #524]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a82      	ldr	r2, [pc, #520]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005dac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005db0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005db2:	f7fb fb19 	bl	80013e8 <HAL_GetTick>
 8005db6:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dba:	e00b      	b.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dbc:	f7fb fb14 	bl	80013e8 <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	2b64      	cmp	r3, #100	@ 0x64
 8005dca:	d903      	bls.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005dd2:	e005      	b.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005dd4:	4b77      	ldr	r3, [pc, #476]	@ (8005fb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d0ed      	beq.n	8005dbc <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8005de0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d173      	bne.n	8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8005de8:	4b71      	ldr	r3, [pc, #452]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005dea:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005df0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005df4:	4053      	eors	r3, r2
 8005df6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d015      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005dfe:	4b6c      	ldr	r3, [pc, #432]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e06:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e0a:	4b69      	ldr	r3, [pc, #420]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e0e:	4a68      	ldr	r2, [pc, #416]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e14:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e16:	4b66      	ldr	r3, [pc, #408]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e1a:	4a65      	ldr	r2, [pc, #404]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e20:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8005e22:	4a63      	ldr	r2, [pc, #396]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8005e28:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8005e2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e2e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e36:	d118      	bne.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e38:	f7fb fad6 	bl	80013e8 <HAL_GetTick>
 8005e3c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e40:	e00d      	b.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e42:	f7fb fad1 	bl	80013e8 <HAL_GetTick>
 8005e46:	4602      	mov	r2, r0
 8005e48:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8005e4c:	1ad2      	subs	r2, r2, r3
 8005e4e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e52:	429a      	cmp	r2, r3
 8005e54:	d903      	bls.n	8005e5e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8005e56:	2303      	movs	r3, #3
 8005e58:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8005e5c:	e005      	b.n	8005e6a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005e5e:	4b54      	ldr	r3, [pc, #336]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005e62:	f003 0302 	and.w	r3, r3, #2
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d0eb      	beq.n	8005e42 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8005e6a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d129      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e72:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e76:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e7e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005e82:	d10e      	bne.n	8005ea2 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8005e84:	4b4a      	ldr	r3, [pc, #296]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8005e8c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005e90:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005e94:	091a      	lsrs	r2, r3, #4
 8005e96:	4b48      	ldr	r3, [pc, #288]	@ (8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8005e98:	4013      	ands	r3, r2
 8005e9a:	4a45      	ldr	r2, [pc, #276]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005e9c:	430b      	orrs	r3, r1
 8005e9e:	6113      	str	r3, [r2, #16]
 8005ea0:	e005      	b.n	8005eae <HAL_RCCEx_PeriphCLKConfig+0x852>
 8005ea2:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	4a42      	ldr	r2, [pc, #264]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ea8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005eac:	6113      	str	r3, [r2, #16]
 8005eae:	4b40      	ldr	r3, [pc, #256]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005eb0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8005eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005eb6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8005eba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ebe:	4a3c      	ldr	r2, [pc, #240]	@ (8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8005ec0:	430b      	orrs	r3, r1
 8005ec2:	6713      	str	r3, [r2, #112]	@ 0x70
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ec6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005eca:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8005ece:	e003      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ed4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8005ed8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005edc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee0:	f002 0301 	and.w	r3, r2, #1
 8005ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8005eee:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	f000 808f 	beq.w	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8005efa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005efe:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005f00:	2b28      	cmp	r3, #40	@ 0x28
 8005f02:	d871      	bhi.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8005f04:	a201      	add	r2, pc, #4	@ (adr r2, 8005f0c <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8005f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f0a:	bf00      	nop
 8005f0c:	08005ff1 	.word	0x08005ff1
 8005f10:	08005fe9 	.word	0x08005fe9
 8005f14:	08005fe9 	.word	0x08005fe9
 8005f18:	08005fe9 	.word	0x08005fe9
 8005f1c:	08005fe9 	.word	0x08005fe9
 8005f20:	08005fe9 	.word	0x08005fe9
 8005f24:	08005fe9 	.word	0x08005fe9
 8005f28:	08005fe9 	.word	0x08005fe9
 8005f2c:	08005fbd 	.word	0x08005fbd
 8005f30:	08005fe9 	.word	0x08005fe9
 8005f34:	08005fe9 	.word	0x08005fe9
 8005f38:	08005fe9 	.word	0x08005fe9
 8005f3c:	08005fe9 	.word	0x08005fe9
 8005f40:	08005fe9 	.word	0x08005fe9
 8005f44:	08005fe9 	.word	0x08005fe9
 8005f48:	08005fe9 	.word	0x08005fe9
 8005f4c:	08005fd3 	.word	0x08005fd3
 8005f50:	08005fe9 	.word	0x08005fe9
 8005f54:	08005fe9 	.word	0x08005fe9
 8005f58:	08005fe9 	.word	0x08005fe9
 8005f5c:	08005fe9 	.word	0x08005fe9
 8005f60:	08005fe9 	.word	0x08005fe9
 8005f64:	08005fe9 	.word	0x08005fe9
 8005f68:	08005fe9 	.word	0x08005fe9
 8005f6c:	08005ff1 	.word	0x08005ff1
 8005f70:	08005fe9 	.word	0x08005fe9
 8005f74:	08005fe9 	.word	0x08005fe9
 8005f78:	08005fe9 	.word	0x08005fe9
 8005f7c:	08005fe9 	.word	0x08005fe9
 8005f80:	08005fe9 	.word	0x08005fe9
 8005f84:	08005fe9 	.word	0x08005fe9
 8005f88:	08005fe9 	.word	0x08005fe9
 8005f8c:	08005ff1 	.word	0x08005ff1
 8005f90:	08005fe9 	.word	0x08005fe9
 8005f94:	08005fe9 	.word	0x08005fe9
 8005f98:	08005fe9 	.word	0x08005fe9
 8005f9c:	08005fe9 	.word	0x08005fe9
 8005fa0:	08005fe9 	.word	0x08005fe9
 8005fa4:	08005fe9 	.word	0x08005fe9
 8005fa8:	08005fe9 	.word	0x08005fe9
 8005fac:	08005ff1 	.word	0x08005ff1
 8005fb0:	58024400 	.word	0x58024400
 8005fb4:	58024800 	.word	0x58024800
 8005fb8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8005fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fc0:	3308      	adds	r3, #8
 8005fc2:	2101      	movs	r1, #1
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	f000 ffa7 	bl	8006f18 <RCCEx_PLL2_Config>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fd0:	e00f      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005fd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8005fd6:	3328      	adds	r3, #40	@ 0x28
 8005fd8:	2101      	movs	r1, #1
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f001 f84e 	bl	800707c <RCCEx_PLL3_Config>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8005fe6:	e004      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005fe8:	2301      	movs	r3, #1
 8005fea:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8005fee:	e000      	b.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8005ff0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005ff2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8005ffa:	4bbf      	ldr	r3, [pc, #764]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8005ffc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ffe:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8006002:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006006:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006008:	4abb      	ldr	r2, [pc, #748]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800600a:	430b      	orrs	r3, r1
 800600c:	6553      	str	r3, [r2, #84]	@ 0x54
 800600e:	e003      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006010:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006014:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006018:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f002 0302 	and.w	r3, r2, #2
 8006024:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006028:	2300      	movs	r3, #0
 800602a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800602e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8006032:	460b      	mov	r3, r1
 8006034:	4313      	orrs	r3, r2
 8006036:	d041      	beq.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8006038:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800603c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800603e:	2b05      	cmp	r3, #5
 8006040:	d824      	bhi.n	800608c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8006042:	a201      	add	r2, pc, #4	@ (adr r2, 8006048 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8006044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006048:	08006095 	.word	0x08006095
 800604c:	08006061 	.word	0x08006061
 8006050:	08006077 	.word	0x08006077
 8006054:	08006095 	.word	0x08006095
 8006058:	08006095 	.word	0x08006095
 800605c:	08006095 	.word	0x08006095
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006060:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006064:	3308      	adds	r3, #8
 8006066:	2101      	movs	r1, #1
 8006068:	4618      	mov	r0, r3
 800606a:	f000 ff55 	bl	8006f18 <RCCEx_PLL2_Config>
 800606e:	4603      	mov	r3, r0
 8006070:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8006074:	e00f      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006076:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800607a:	3328      	adds	r3, #40	@ 0x28
 800607c:	2101      	movs	r1, #1
 800607e:	4618      	mov	r0, r3
 8006080:	f000 fffc 	bl	800707c <RCCEx_PLL3_Config>
 8006084:	4603      	mov	r3, r0
 8006086:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800608a:	e004      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800608c:	2301      	movs	r3, #1
 800608e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006092:	e000      	b.n	8006096 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8006094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006096:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10a      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800609e:	4b96      	ldr	r3, [pc, #600]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060a2:	f023 0107 	bic.w	r1, r3, #7
 80060a6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ac:	4a92      	ldr	r2, [pc, #584]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80060ae:	430b      	orrs	r3, r1
 80060b0:	6553      	str	r3, [r2, #84]	@ 0x54
 80060b2:	e003      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80060b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c4:	f002 0304 	and.w	r3, r2, #4
 80060c8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80060cc:	2300      	movs	r3, #0
 80060ce:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80060d2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80060d6:	460b      	mov	r3, r1
 80060d8:	4313      	orrs	r3, r2
 80060da:	d044      	beq.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80060dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80060e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80060e4:	2b05      	cmp	r3, #5
 80060e6:	d825      	bhi.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80060e8:	a201      	add	r2, pc, #4	@ (adr r2, 80060f0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80060ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ee:	bf00      	nop
 80060f0:	0800613d 	.word	0x0800613d
 80060f4:	08006109 	.word	0x08006109
 80060f8:	0800611f 	.word	0x0800611f
 80060fc:	0800613d 	.word	0x0800613d
 8006100:	0800613d 	.word	0x0800613d
 8006104:	0800613d 	.word	0x0800613d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006108:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800610c:	3308      	adds	r3, #8
 800610e:	2101      	movs	r1, #1
 8006110:	4618      	mov	r0, r3
 8006112:	f000 ff01 	bl	8006f18 <RCCEx_PLL2_Config>
 8006116:	4603      	mov	r3, r0
 8006118:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800611c:	e00f      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800611e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006122:	3328      	adds	r3, #40	@ 0x28
 8006124:	2101      	movs	r1, #1
 8006126:	4618      	mov	r0, r3
 8006128:	f000 ffa8 	bl	800707c <RCCEx_PLL3_Config>
 800612c:	4603      	mov	r3, r0
 800612e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8006132:	e004      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800613a:	e000      	b.n	800613e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 800613c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800613e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10b      	bne.n	800615e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006146:	4b6c      	ldr	r3, [pc, #432]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800614a:	f023 0107 	bic.w	r1, r3, #7
 800614e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006152:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006156:	4a68      	ldr	r2, [pc, #416]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006158:	430b      	orrs	r3, r1
 800615a:	6593      	str	r3, [r2, #88]	@ 0x58
 800615c:	e003      	b.n	8006166 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800615e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006162:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006166:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800616a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800616e:	f002 0320 	and.w	r3, r2, #32
 8006172:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006176:	2300      	movs	r3, #0
 8006178:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800617c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8006180:	460b      	mov	r3, r1
 8006182:	4313      	orrs	r3, r2
 8006184:	d055      	beq.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8006186:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800618a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800618e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006192:	d033      	beq.n	80061fc <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8006194:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8006198:	d82c      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 800619a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800619e:	d02f      	beq.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80061a4:	d826      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80061a6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061aa:	d02b      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 80061ac:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80061b0:	d820      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80061b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061b6:	d012      	beq.n	80061de <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80061b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061bc:	d81a      	bhi.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d022      	beq.n	8006208 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80061c2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80061c6:	d115      	bne.n	80061f4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80061c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061cc:	3308      	adds	r3, #8
 80061ce:	2100      	movs	r1, #0
 80061d0:	4618      	mov	r0, r3
 80061d2:	f000 fea1 	bl	8006f18 <RCCEx_PLL2_Config>
 80061d6:	4603      	mov	r3, r0
 80061d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061dc:	e015      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80061e2:	3328      	adds	r3, #40	@ 0x28
 80061e4:	2102      	movs	r1, #2
 80061e6:	4618      	mov	r0, r3
 80061e8:	f000 ff48 	bl	800707c <RCCEx_PLL3_Config>
 80061ec:	4603      	mov	r3, r0
 80061ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80061f2:	e00a      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80061fa:	e006      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80061fc:	bf00      	nop
 80061fe:	e004      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006200:	bf00      	nop
 8006202:	e002      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006204:	bf00      	nop
 8006206:	e000      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8006208:	bf00      	nop
    }

    if (ret == HAL_OK)
 800620a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800620e:	2b00      	cmp	r3, #0
 8006210:	d10b      	bne.n	800622a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006212:	4b39      	ldr	r3, [pc, #228]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800621a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800621e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006222:	4a35      	ldr	r2, [pc, #212]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8006224:	430b      	orrs	r3, r1
 8006226:	6553      	str	r3, [r2, #84]	@ 0x54
 8006228:	e003      	b.n	8006232 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800622a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800622e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006232:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800623e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006242:	2300      	movs	r3, #0
 8006244:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006248:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800624c:	460b      	mov	r3, r1
 800624e:	4313      	orrs	r3, r2
 8006250:	d058      	beq.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8006252:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006256:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800625a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800625e:	d033      	beq.n	80062c8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8006260:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006264:	d82c      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006266:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800626a:	d02f      	beq.n	80062cc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 800626c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006270:	d826      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8006272:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006276:	d02b      	beq.n	80062d0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8006278:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800627c:	d820      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800627e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006282:	d012      	beq.n	80062aa <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8006284:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006288:	d81a      	bhi.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 800628a:	2b00      	cmp	r3, #0
 800628c:	d022      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 800628e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006292:	d115      	bne.n	80062c0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006294:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006298:	3308      	adds	r3, #8
 800629a:	2100      	movs	r1, #0
 800629c:	4618      	mov	r0, r3
 800629e:	f000 fe3b 	bl	8006f18 <RCCEx_PLL2_Config>
 80062a2:	4603      	mov	r3, r0
 80062a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062a8:	e015      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80062aa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ae:	3328      	adds	r3, #40	@ 0x28
 80062b0:	2102      	movs	r1, #2
 80062b2:	4618      	mov	r0, r3
 80062b4:	f000 fee2 	bl	800707c <RCCEx_PLL3_Config>
 80062b8:	4603      	mov	r3, r0
 80062ba:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80062be:	e00a      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80062c0:	2301      	movs	r3, #1
 80062c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80062c6:	e006      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062c8:	bf00      	nop
 80062ca:	e004      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062cc:	bf00      	nop
 80062ce:	e002      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062d0:	bf00      	nop
 80062d2:	e000      	b.n	80062d6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80062d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80062d6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d10e      	bne.n	80062fc <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80062de:	4b06      	ldr	r3, [pc, #24]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80062e2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80062e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80062ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80062ee:	4a02      	ldr	r2, [pc, #8]	@ (80062f8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80062f0:	430b      	orrs	r3, r1
 80062f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80062f4:	e006      	b.n	8006304 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80062f6:	bf00      	nop
 80062f8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80062fc:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006300:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006304:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8006310:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006314:	2300      	movs	r3, #0
 8006316:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800631a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800631e:	460b      	mov	r3, r1
 8006320:	4313      	orrs	r3, r2
 8006322:	d055      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8006324:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006328:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800632c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006330:	d033      	beq.n	800639a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8006332:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8006336:	d82c      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006338:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800633c:	d02f      	beq.n	800639e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800633e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006342:	d826      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006344:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8006348:	d02b      	beq.n	80063a2 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 800634a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800634e:	d820      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8006350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006354:	d012      	beq.n	800637c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8006356:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800635a:	d81a      	bhi.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800635c:	2b00      	cmp	r3, #0
 800635e:	d022      	beq.n	80063a6 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8006360:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006364:	d115      	bne.n	8006392 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006366:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800636a:	3308      	adds	r3, #8
 800636c:	2100      	movs	r1, #0
 800636e:	4618      	mov	r0, r3
 8006370:	f000 fdd2 	bl	8006f18 <RCCEx_PLL2_Config>
 8006374:	4603      	mov	r3, r0
 8006376:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800637a:	e015      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800637c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006380:	3328      	adds	r3, #40	@ 0x28
 8006382:	2102      	movs	r1, #2
 8006384:	4618      	mov	r0, r3
 8006386:	f000 fe79 	bl	800707c <RCCEx_PLL3_Config>
 800638a:	4603      	mov	r3, r0
 800638c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8006390:	e00a      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006398:	e006      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800639a:	bf00      	nop
 800639c:	e004      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80063a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80063a8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d10b      	bne.n	80063c8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80063b0:	4ba0      	ldr	r3, [pc, #640]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80063b4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80063b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063bc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80063c0:	4a9c      	ldr	r2, [pc, #624]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80063c2:	430b      	orrs	r3, r1
 80063c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80063c6:	e003      	b.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063c8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80063cc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80063d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063d8:	f002 0308 	and.w	r3, r2, #8
 80063dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80063e0:	2300      	movs	r3, #0
 80063e2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80063e6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80063ea:	460b      	mov	r3, r1
 80063ec:	4313      	orrs	r3, r2
 80063ee:	d01e      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80063f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80063f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80063f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063fc:	d10c      	bne.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80063fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006402:	3328      	adds	r3, #40	@ 0x28
 8006404:	2102      	movs	r1, #2
 8006406:	4618      	mov	r0, r3
 8006408:	f000 fe38 	bl	800707c <RCCEx_PLL3_Config>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8006418:	4b86      	ldr	r3, [pc, #536]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800641a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800641c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006420:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006424:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006428:	4a82      	ldr	r2, [pc, #520]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800642a:	430b      	orrs	r3, r1
 800642c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800642e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006436:	f002 0310 	and.w	r3, r2, #16
 800643a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800643e:	2300      	movs	r3, #0
 8006440:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006444:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8006448:	460b      	mov	r3, r1
 800644a:	4313      	orrs	r3, r2
 800644c:	d01e      	beq.n	800648c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800644e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006452:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006456:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800645a:	d10c      	bne.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800645c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006460:	3328      	adds	r3, #40	@ 0x28
 8006462:	2102      	movs	r1, #2
 8006464:	4618      	mov	r0, r3
 8006466:	f000 fe09 	bl	800707c <RCCEx_PLL3_Config>
 800646a:	4603      	mov	r3, r0
 800646c:	2b00      	cmp	r3, #0
 800646e:	d002      	beq.n	8006476 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006476:	4b6f      	ldr	r3, [pc, #444]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006478:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800647a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800647e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006482:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006486:	4a6b      	ldr	r2, [pc, #428]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006488:	430b      	orrs	r3, r1
 800648a:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800648c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006494:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8006498:	67bb      	str	r3, [r7, #120]	@ 0x78
 800649a:	2300      	movs	r3, #0
 800649c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800649e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80064a2:	460b      	mov	r3, r1
 80064a4:	4313      	orrs	r3, r2
 80064a6:	d03e      	beq.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80064a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80064b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064b4:	d022      	beq.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80064b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80064ba:	d81b      	bhi.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d003      	beq.n	80064c8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80064c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80064c4:	d00b      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80064c6:	e015      	b.n	80064f4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80064c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064cc:	3308      	adds	r3, #8
 80064ce:	2100      	movs	r1, #0
 80064d0:	4618      	mov	r0, r3
 80064d2:	f000 fd21 	bl	8006f18 <RCCEx_PLL2_Config>
 80064d6:	4603      	mov	r3, r0
 80064d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064dc:	e00f      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80064de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80064e2:	3328      	adds	r3, #40	@ 0x28
 80064e4:	2102      	movs	r1, #2
 80064e6:	4618      	mov	r0, r3
 80064e8:	f000 fdc8 	bl	800707c <RCCEx_PLL3_Config>
 80064ec:	4603      	mov	r3, r0
 80064ee:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80064f2:	e004      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80064f4:	2301      	movs	r3, #1
 80064f6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80064fa:	e000      	b.n	80064fe <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80064fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80064fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006502:	2b00      	cmp	r3, #0
 8006504:	d10b      	bne.n	800651e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006506:	4b4b      	ldr	r3, [pc, #300]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006508:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800650a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800650e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006512:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8006516:	4a47      	ldr	r2, [pc, #284]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006518:	430b      	orrs	r3, r1
 800651a:	6593      	str	r3, [r2, #88]	@ 0x58
 800651c:	e003      	b.n	8006526 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800651e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006522:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006526:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800652a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800652e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8006532:	673b      	str	r3, [r7, #112]	@ 0x70
 8006534:	2300      	movs	r3, #0
 8006536:	677b      	str	r3, [r7, #116]	@ 0x74
 8006538:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800653c:	460b      	mov	r3, r1
 800653e:	4313      	orrs	r3, r2
 8006540:	d03b      	beq.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8006542:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006546:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800654a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800654e:	d01f      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8006550:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006554:	d818      	bhi.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8006556:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800655a:	d003      	beq.n	8006564 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800655c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006560:	d007      	beq.n	8006572 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8006562:	e011      	b.n	8006588 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006564:	4b33      	ldr	r3, [pc, #204]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8006566:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006568:	4a32      	ldr	r2, [pc, #200]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800656a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800656e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8006570:	e00f      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006572:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006576:	3328      	adds	r3, #40	@ 0x28
 8006578:	2101      	movs	r1, #1
 800657a:	4618      	mov	r0, r3
 800657c:	f000 fd7e 	bl	800707c <RCCEx_PLL3_Config>
 8006580:	4603      	mov	r3, r0
 8006582:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8006586:	e004      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800658e:	e000      	b.n	8006592 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8006590:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006592:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10b      	bne.n	80065b2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800659a:	4b26      	ldr	r3, [pc, #152]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800659c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800659e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80065a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065aa:	4a22      	ldr	r2, [pc, #136]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065ac:	430b      	orrs	r3, r1
 80065ae:	6553      	str	r3, [r2, #84]	@ 0x54
 80065b0:	e003      	b.n	80065ba <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065b2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80065b6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80065ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065c2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80065c6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065c8:	2300      	movs	r3, #0
 80065ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80065cc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80065d0:	460b      	mov	r3, r1
 80065d2:	4313      	orrs	r3, r2
 80065d4:	d034      	beq.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80065d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 80065e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065e4:	d007      	beq.n	80065f6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 80065e6:	e011      	b.n	800660c <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065e8:	4b12      	ldr	r3, [pc, #72]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ec:	4a11      	ldr	r2, [pc, #68]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80065ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80065f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80065f4:	e00e      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80065f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80065fa:	3308      	adds	r3, #8
 80065fc:	2102      	movs	r1, #2
 80065fe:	4618      	mov	r0, r3
 8006600:	f000 fc8a 	bl	8006f18 <RCCEx_PLL2_Config>
 8006604:	4603      	mov	r3, r0
 8006606:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800660a:	e003      	b.n	8006614 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 800660c:	2301      	movs	r3, #1
 800660e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8006612:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006614:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006618:	2b00      	cmp	r3, #0
 800661a:	d10d      	bne.n	8006638 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800661c:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800661e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006620:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006628:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800662a:	4a02      	ldr	r2, [pc, #8]	@ (8006634 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800662c:	430b      	orrs	r3, r1
 800662e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006630:	e006      	b.n	8006640 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8006632:	bf00      	nop
 8006634:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800663c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8006640:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006648:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800664c:	663b      	str	r3, [r7, #96]	@ 0x60
 800664e:	2300      	movs	r3, #0
 8006650:	667b      	str	r3, [r7, #100]	@ 0x64
 8006652:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8006656:	460b      	mov	r3, r1
 8006658:	4313      	orrs	r3, r2
 800665a:	d00c      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800665c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006660:	3328      	adds	r3, #40	@ 0x28
 8006662:	2102      	movs	r1, #2
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fd09 	bl	800707c <RCCEx_PLL3_Config>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d002      	beq.n	8006676 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8006676:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800667a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800667e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8006682:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006684:	2300      	movs	r3, #0
 8006686:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006688:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800668c:	460b      	mov	r3, r1
 800668e:	4313      	orrs	r3, r2
 8006690:	d036      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8006692:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006696:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006698:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800669c:	d018      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 800669e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066a2:	d811      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80066a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066a8:	d014      	beq.n	80066d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80066aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066ae:	d80b      	bhi.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d011      	beq.n	80066d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 80066b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066b8:	d106      	bne.n	80066c8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80066ba:	4bb7      	ldr	r3, [pc, #732]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066be:	4ab6      	ldr	r2, [pc, #728]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80066c6:	e008      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80066c8:	2301      	movs	r3, #1
 80066ca:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80066ce:	e004      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80066d0:	bf00      	nop
 80066d2:	e002      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80066d4:	bf00      	nop
 80066d6:	e000      	b.n	80066da <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 80066d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80066da:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d10a      	bne.n	80066f8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066e2:	4bad      	ldr	r3, [pc, #692]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80066ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80066ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80066f0:	4aa9      	ldr	r2, [pc, #676]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80066f2:	430b      	orrs	r3, r1
 80066f4:	6553      	str	r3, [r2, #84]	@ 0x54
 80066f6:	e003      	b.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80066fc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8006700:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006708:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800670c:	653b      	str	r3, [r7, #80]	@ 0x50
 800670e:	2300      	movs	r3, #0
 8006710:	657b      	str	r3, [r7, #84]	@ 0x54
 8006712:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8006716:	460b      	mov	r3, r1
 8006718:	4313      	orrs	r3, r2
 800671a:	d009      	beq.n	8006730 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800671c:	4b9e      	ldr	r3, [pc, #632]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800671e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006720:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8006724:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800672a:	4a9b      	ldr	r2, [pc, #620]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800672c:	430b      	orrs	r3, r1
 800672e:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8006730:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800673c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800673e:	2300      	movs	r3, #0
 8006740:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006742:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8006746:	460b      	mov	r3, r1
 8006748:	4313      	orrs	r3, r2
 800674a:	d009      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800674c:	4b92      	ldr	r3, [pc, #584]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800674e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006750:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8006754:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006758:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800675a:	4a8f      	ldr	r2, [pc, #572]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800675c:	430b      	orrs	r3, r1
 800675e:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8006760:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006768:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800676c:	643b      	str	r3, [r7, #64]	@ 0x40
 800676e:	2300      	movs	r3, #0
 8006770:	647b      	str	r3, [r7, #68]	@ 0x44
 8006772:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8006776:	460b      	mov	r3, r1
 8006778:	4313      	orrs	r3, r2
 800677a:	d00e      	beq.n	800679a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800677c:	4b86      	ldr	r3, [pc, #536]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800677e:	691b      	ldr	r3, [r3, #16]
 8006780:	4a85      	ldr	r2, [pc, #532]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006782:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006786:	6113      	str	r3, [r2, #16]
 8006788:	4b83      	ldr	r3, [pc, #524]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800678a:	6919      	ldr	r1, [r3, #16]
 800678c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006790:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8006794:	4a80      	ldr	r2, [pc, #512]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8006796:	430b      	orrs	r3, r1
 8006798:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800679a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800679e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067a2:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80067a8:	2300      	movs	r3, #0
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80067ac:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80067b0:	460b      	mov	r3, r1
 80067b2:	4313      	orrs	r3, r2
 80067b4:	d009      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80067b6:	4b78      	ldr	r3, [pc, #480]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067ba:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80067be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067c4:	4a74      	ldr	r2, [pc, #464]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067c6:	430b      	orrs	r3, r1
 80067c8:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80067ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067d2:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80067d6:	633b      	str	r3, [r7, #48]	@ 0x30
 80067d8:	2300      	movs	r3, #0
 80067da:	637b      	str	r3, [r7, #52]	@ 0x34
 80067dc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80067e0:	460b      	mov	r3, r1
 80067e2:	4313      	orrs	r3, r2
 80067e4:	d00a      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80067e6:	4b6c      	ldr	r3, [pc, #432]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ea:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80067ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f6:	4a68      	ldr	r2, [pc, #416]	@ (8006998 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80067f8:	430b      	orrs	r3, r1
 80067fa:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80067fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006804:	2100      	movs	r1, #0
 8006806:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006808:	f003 0301 	and.w	r3, r3, #1
 800680c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800680e:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8006812:	460b      	mov	r3, r1
 8006814:	4313      	orrs	r3, r2
 8006816:	d011      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8006818:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800681c:	3308      	adds	r3, #8
 800681e:	2100      	movs	r1, #0
 8006820:	4618      	mov	r0, r3
 8006822:	f000 fb79 	bl	8006f18 <RCCEx_PLL2_Config>
 8006826:	4603      	mov	r3, r0
 8006828:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800682c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006830:	2b00      	cmp	r3, #0
 8006832:	d003      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006834:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006838:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800683c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006844:	2100      	movs	r1, #0
 8006846:	6239      	str	r1, [r7, #32]
 8006848:	f003 0302 	and.w	r3, r3, #2
 800684c:	627b      	str	r3, [r7, #36]	@ 0x24
 800684e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8006852:	460b      	mov	r3, r1
 8006854:	4313      	orrs	r3, r2
 8006856:	d011      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8006858:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800685c:	3308      	adds	r3, #8
 800685e:	2101      	movs	r1, #1
 8006860:	4618      	mov	r0, r3
 8006862:	f000 fb59 	bl	8006f18 <RCCEx_PLL2_Config>
 8006866:	4603      	mov	r3, r0
 8006868:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800686c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006870:	2b00      	cmp	r3, #0
 8006872:	d003      	beq.n	800687c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006874:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006878:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800687c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006884:	2100      	movs	r1, #0
 8006886:	61b9      	str	r1, [r7, #24]
 8006888:	f003 0304 	and.w	r3, r3, #4
 800688c:	61fb      	str	r3, [r7, #28]
 800688e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8006892:	460b      	mov	r3, r1
 8006894:	4313      	orrs	r3, r2
 8006896:	d011      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8006898:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800689c:	3308      	adds	r3, #8
 800689e:	2102      	movs	r1, #2
 80068a0:	4618      	mov	r0, r3
 80068a2:	f000 fb39 	bl	8006f18 <RCCEx_PLL2_Config>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80068ac:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d003      	beq.n	80068bc <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068b8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80068bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068c4:	2100      	movs	r1, #0
 80068c6:	6139      	str	r1, [r7, #16]
 80068c8:	f003 0308 	and.w	r3, r3, #8
 80068cc:	617b      	str	r3, [r7, #20]
 80068ce:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80068d2:	460b      	mov	r3, r1
 80068d4:	4313      	orrs	r3, r2
 80068d6:	d011      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80068d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80068dc:	3328      	adds	r3, #40	@ 0x28
 80068de:	2100      	movs	r1, #0
 80068e0:	4618      	mov	r0, r3
 80068e2:	f000 fbcb 	bl	800707c <RCCEx_PLL3_Config>
 80068e6:	4603      	mov	r3, r0
 80068e8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 80068ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d003      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80068f8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80068fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006904:	2100      	movs	r1, #0
 8006906:	60b9      	str	r1, [r7, #8]
 8006908:	f003 0310 	and.w	r3, r3, #16
 800690c:	60fb      	str	r3, [r7, #12]
 800690e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8006912:	460b      	mov	r3, r1
 8006914:	4313      	orrs	r3, r2
 8006916:	d011      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8006918:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800691c:	3328      	adds	r3, #40	@ 0x28
 800691e:	2101      	movs	r1, #1
 8006920:	4618      	mov	r0, r3
 8006922:	f000 fbab 	bl	800707c <RCCEx_PLL3_Config>
 8006926:	4603      	mov	r3, r0
 8006928:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800692c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006930:	2b00      	cmp	r3, #0
 8006932:	d003      	beq.n	800693c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006934:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006938:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800693c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8006940:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006944:	2100      	movs	r1, #0
 8006946:	6039      	str	r1, [r7, #0]
 8006948:	f003 0320 	and.w	r3, r3, #32
 800694c:	607b      	str	r3, [r7, #4]
 800694e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8006952:	460b      	mov	r3, r1
 8006954:	4313      	orrs	r3, r2
 8006956:	d011      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800695c:	3328      	adds	r3, #40	@ 0x28
 800695e:	2102      	movs	r1, #2
 8006960:	4618      	mov	r0, r3
 8006962:	f000 fb8b 	bl	800707c <RCCEx_PLL3_Config>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 800696c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006970:	2b00      	cmp	r3, #0
 8006972:	d003      	beq.n	800697c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006974:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8006978:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 800697c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8006980:	2b00      	cmp	r3, #0
 8006982:	d101      	bne.n	8006988 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8006984:	2300      	movs	r3, #0
 8006986:	e000      	b.n	800698a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8006988:	2301      	movs	r3, #1
}
 800698a:	4618      	mov	r0, r3
 800698c:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006990:	46bd      	mov	sp, r7
 8006992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006996:	bf00      	nop
 8006998:	58024400 	.word	0x58024400

0800699c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80069a0:	f7fe fe00 	bl	80055a4 <HAL_RCC_GetHCLKFreq>
 80069a4:	4602      	mov	r2, r0
 80069a6:	4b06      	ldr	r3, [pc, #24]	@ (80069c0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	091b      	lsrs	r3, r3, #4
 80069ac:	f003 0307 	and.w	r3, r3, #7
 80069b0:	4904      	ldr	r1, [pc, #16]	@ (80069c4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80069b2:	5ccb      	ldrb	r3, [r1, r3]
 80069b4:	f003 031f 	and.w	r3, r3, #31
 80069b8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069bc:	4618      	mov	r0, r3
 80069be:	bd80      	pop	{r7, pc}
 80069c0:	58024400 	.word	0x58024400
 80069c4:	080096e4 	.word	0x080096e4

080069c8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80069c8:	b480      	push	{r7}
 80069ca:	b089      	sub	sp, #36	@ 0x24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069d0:	4ba1      	ldr	r3, [pc, #644]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d4:	f003 0303 	and.w	r3, r3, #3
 80069d8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80069da:	4b9f      	ldr	r3, [pc, #636]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069de:	0b1b      	lsrs	r3, r3, #12
 80069e0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069e4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069e6:	4b9c      	ldr	r3, [pc, #624]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ea:	091b      	lsrs	r3, r3, #4
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 80069f2:	4b99      	ldr	r3, [pc, #612]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069f6:	08db      	lsrs	r3, r3, #3
 80069f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069fc:	693a      	ldr	r2, [r7, #16]
 80069fe:	fb02 f303 	mul.w	r3, r2, r3
 8006a02:	ee07 3a90 	vmov	s15, r3
 8006a06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a0a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006a0e:	697b      	ldr	r3, [r7, #20]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8111 	beq.w	8006c38 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a16:	69bb      	ldr	r3, [r7, #24]
 8006a18:	2b02      	cmp	r3, #2
 8006a1a:	f000 8083 	beq.w	8006b24 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	2b02      	cmp	r3, #2
 8006a22:	f200 80a1 	bhi.w	8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a26:	69bb      	ldr	r3, [r7, #24]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d003      	beq.n	8006a34 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d056      	beq.n	8006ae0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a32:	e099      	b.n	8006b68 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a34:	4b88      	ldr	r3, [pc, #544]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	f003 0320 	and.w	r3, r3, #32
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d02d      	beq.n	8006a9c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006a40:	4b85      	ldr	r3, [pc, #532]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	08db      	lsrs	r3, r3, #3
 8006a46:	f003 0303 	and.w	r3, r3, #3
 8006a4a:	4a84      	ldr	r2, [pc, #528]	@ (8006c5c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a4c:	fa22 f303 	lsr.w	r3, r2, r3
 8006a50:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	ee07 3a90 	vmov	s15, r3
 8006a58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a6a:	4b7b      	ldr	r3, [pc, #492]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a72:	ee07 3a90 	vmov	s15, r3
 8006a76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a7e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006a8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006a9a:	e087      	b.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	ee07 3a90 	vmov	s15, r3
 8006aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aa6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006c64 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006aaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006aae:	4b6a      	ldr	r3, [pc, #424]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab6:	ee07 3a90 	vmov	s15, r3
 8006aba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006abe:	ed97 6a03 	vldr	s12, [r7, #12]
 8006ac2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006aca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006ace:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006ad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ada:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006ade:	e065      	b.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	ee07 3a90 	vmov	s15, r3
 8006ae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006aea:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006aee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006af2:	4b59      	ldr	r3, [pc, #356]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006af6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006afa:	ee07 3a90 	vmov	s15, r3
 8006afe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b02:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b06:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b22:	e043      	b.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	ee07 3a90 	vmov	s15, r3
 8006b2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b2e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006c6c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b36:	4b48      	ldr	r3, [pc, #288]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b3e:	ee07 3a90 	vmov	s15, r3
 8006b42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b46:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b4a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006b66:	e021      	b.n	8006bac <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	ee07 3a90 	vmov	s15, r3
 8006b6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b72:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006c68 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b7a:	4b37      	ldr	r3, [pc, #220]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b82:	ee07 3a90 	vmov	s15, r3
 8006b86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b8e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006c60 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006b9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006baa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006bac:	4b2a      	ldr	r3, [pc, #168]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bb0:	0a5b      	lsrs	r3, r3, #9
 8006bb2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006bb6:	ee07 3a90 	vmov	s15, r3
 8006bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bbe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bc2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bc6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bd2:	ee17 2a90 	vmov	r2, s15
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006bda:	4b1f      	ldr	r3, [pc, #124]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bde:	0c1b      	lsrs	r3, r3, #16
 8006be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006be4:	ee07 3a90 	vmov	s15, r3
 8006be8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006bf0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bf4:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bf8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c00:	ee17 2a90 	vmov	r2, s15
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006c08:	4b13      	ldr	r3, [pc, #76]	@ (8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c0c:	0e1b      	lsrs	r3, r3, #24
 8006c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c12:	ee07 3a90 	vmov	s15, r3
 8006c16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006c1e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c22:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c26:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c2a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c2e:	ee17 2a90 	vmov	r2, s15
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c36:	e008      	b.n	8006c4a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2200      	movs	r2, #0
 8006c48:	609a      	str	r2, [r3, #8]
}
 8006c4a:	bf00      	nop
 8006c4c:	3724      	adds	r7, #36	@ 0x24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c54:	4770      	bx	lr
 8006c56:	bf00      	nop
 8006c58:	58024400 	.word	0x58024400
 8006c5c:	03d09000 	.word	0x03d09000
 8006c60:	46000000 	.word	0x46000000
 8006c64:	4c742400 	.word	0x4c742400
 8006c68:	4a742400 	.word	0x4a742400
 8006c6c:	4af42400 	.word	0x4af42400

08006c70 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b089      	sub	sp, #36	@ 0x24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c78:	4ba1      	ldr	r3, [pc, #644]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c7c:	f003 0303 	and.w	r3, r3, #3
 8006c80:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8006c82:	4b9f      	ldr	r3, [pc, #636]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c86:	0d1b      	lsrs	r3, r3, #20
 8006c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006c8c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c8e:	4b9c      	ldr	r3, [pc, #624]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	0a1b      	lsrs	r3, r3, #8
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8006c9a:	4b99      	ldr	r3, [pc, #612]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c9e:	08db      	lsrs	r3, r3, #3
 8006ca0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006ca4:	693a      	ldr	r2, [r7, #16]
 8006ca6:	fb02 f303 	mul.w	r3, r2, r3
 8006caa:	ee07 3a90 	vmov	s15, r3
 8006cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	f000 8111 	beq.w	8006ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006cbe:	69bb      	ldr	r3, [r7, #24]
 8006cc0:	2b02      	cmp	r3, #2
 8006cc2:	f000 8083 	beq.w	8006dcc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cc6:	69bb      	ldr	r3, [r7, #24]
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	f200 80a1 	bhi.w	8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d003      	beq.n	8006cdc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cd4:	69bb      	ldr	r3, [r7, #24]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d056      	beq.n	8006d88 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cda:	e099      	b.n	8006e10 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cdc:	4b88      	ldr	r3, [pc, #544]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0320 	and.w	r3, r3, #32
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d02d      	beq.n	8006d44 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006ce8:	4b85      	ldr	r3, [pc, #532]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	08db      	lsrs	r3, r3, #3
 8006cee:	f003 0303 	and.w	r3, r3, #3
 8006cf2:	4a84      	ldr	r2, [pc, #528]	@ (8006f04 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8006cf8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	ee07 3a90 	vmov	s15, r3
 8006d00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d04:	697b      	ldr	r3, [r7, #20]
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d12:	4b7b      	ldr	r3, [pc, #492]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d1a:	ee07 3a90 	vmov	s15, r3
 8006d1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d22:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006d42:	e087      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	ee07 3a90 	vmov	s15, r3
 8006d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8006f0c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d56:	4b6a      	ldr	r3, [pc, #424]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d5e:	ee07 3a90 	vmov	s15, r3
 8006d62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006d7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006d86:	e065      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	ee07 3a90 	vmov	s15, r3
 8006d8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d9a:	4b59      	ldr	r3, [pc, #356]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006da2:	ee07 3a90 	vmov	s15, r3
 8006da6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006daa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006db2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006db6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006dbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006dc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006dca:	e043      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	ee07 3a90 	vmov	s15, r3
 8006dd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8006f14 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dde:	4b48      	ldr	r3, [pc, #288]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006de2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006de6:	ee07 3a90 	vmov	s15, r3
 8006dea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006df2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006df6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006dfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e0e:	e021      	b.n	8006e54 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	ee07 3a90 	vmov	s15, r3
 8006e16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006f10 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e22:	4b37      	ldr	r3, [pc, #220]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e2a:	ee07 3a90 	vmov	s15, r3
 8006e2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8006f08 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8006e46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006e52:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006e54:	4b2a      	ldr	r3, [pc, #168]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e58:	0a5b      	lsrs	r3, r3, #9
 8006e5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e5e:	ee07 3a90 	vmov	s15, r3
 8006e62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e7a:	ee17 2a90 	vmov	r2, s15
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8006e82:	4b1f      	ldr	r3, [pc, #124]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e86:	0c1b      	lsrs	r3, r3, #16
 8006e88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006e8c:	ee07 3a90 	vmov	s15, r3
 8006e90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006e98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ea0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ea4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ea8:	ee17 2a90 	vmov	r2, s15
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006eb0:	4b13      	ldr	r3, [pc, #76]	@ (8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006eb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb4:	0e1b      	lsrs	r3, r3, #24
 8006eb6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006eba:	ee07 3a90 	vmov	s15, r3
 8006ebe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ec2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8006ec6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eca:	edd7 6a07 	vldr	s13, [r7, #28]
 8006ece:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ed2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ed6:	ee17 2a90 	vmov	r2, s15
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006ede:	e008      	b.n	8006ef2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	2200      	movs	r2, #0
 8006ef0:	609a      	str	r2, [r3, #8]
}
 8006ef2:	bf00      	nop
 8006ef4:	3724      	adds	r7, #36	@ 0x24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efc:	4770      	bx	lr
 8006efe:	bf00      	nop
 8006f00:	58024400 	.word	0x58024400
 8006f04:	03d09000 	.word	0x03d09000
 8006f08:	46000000 	.word	0x46000000
 8006f0c:	4c742400 	.word	0x4c742400
 8006f10:	4a742400 	.word	0x4a742400
 8006f14:	4af42400 	.word	0x4af42400

08006f18 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
 8006f20:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f22:	2300      	movs	r3, #0
 8006f24:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f26:	4b53      	ldr	r3, [pc, #332]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f2a:	f003 0303 	and.w	r3, r3, #3
 8006f2e:	2b03      	cmp	r3, #3
 8006f30:	d101      	bne.n	8006f36 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e099      	b.n	800706a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f36:	4b4f      	ldr	r3, [pc, #316]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	4a4e      	ldr	r2, [pc, #312]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006f3c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006f40:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f42:	f7fa fa51 	bl	80013e8 <HAL_GetTick>
 8006f46:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f48:	e008      	b.n	8006f5c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006f4a:	f7fa fa4d 	bl	80013e8 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	2b02      	cmp	r3, #2
 8006f56:	d901      	bls.n	8006f5c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f58:	2303      	movs	r3, #3
 8006f5a:	e086      	b.n	800706a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f5c:	4b45      	ldr	r3, [pc, #276]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1f0      	bne.n	8006f4a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f68:	4b42      	ldr	r3, [pc, #264]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f6c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	493f      	ldr	r1, [pc, #252]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006f78:	4313      	orrs	r3, r2
 8006f7a:	628b      	str	r3, [r1, #40]	@ 0x28
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	3b01      	subs	r3, #1
 8006f82:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	3b01      	subs	r3, #1
 8006f8c:	025b      	lsls	r3, r3, #9
 8006f8e:	b29b      	uxth	r3, r3
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	68db      	ldr	r3, [r3, #12]
 8006f96:	3b01      	subs	r3, #1
 8006f98:	041b      	lsls	r3, r3, #16
 8006f9a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8006f9e:	431a      	orrs	r2, r3
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	3b01      	subs	r3, #1
 8006fa6:	061b      	lsls	r3, r3, #24
 8006fa8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8006fac:	4931      	ldr	r1, [pc, #196]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006fb2:	4b30      	ldr	r3, [pc, #192]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006fb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fb6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	695b      	ldr	r3, [r3, #20]
 8006fbe:	492d      	ldr	r1, [pc, #180]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006fc0:	4313      	orrs	r3, r2
 8006fc2:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fc4:	4b2b      	ldr	r3, [pc, #172]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fc8:	f023 0220 	bic.w	r2, r3, #32
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	699b      	ldr	r3, [r3, #24]
 8006fd0:	4928      	ldr	r1, [pc, #160]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fd6:	4b27      	ldr	r3, [pc, #156]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006fd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fda:	4a26      	ldr	r2, [pc, #152]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006fdc:	f023 0310 	bic.w	r3, r3, #16
 8006fe0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fe2:	4b24      	ldr	r3, [pc, #144]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006fe6:	4b24      	ldr	r3, [pc, #144]	@ (8007078 <RCCEx_PLL2_Config+0x160>)
 8006fe8:	4013      	ands	r3, r2
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	69d2      	ldr	r2, [r2, #28]
 8006fee:	00d2      	lsls	r2, r2, #3
 8006ff0:	4920      	ldr	r1, [pc, #128]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006ff6:	4b1f      	ldr	r3, [pc, #124]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ffa:	4a1e      	ldr	r2, [pc, #120]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8006ffc:	f043 0310 	orr.w	r3, r3, #16
 8007000:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b00      	cmp	r3, #0
 8007006:	d106      	bne.n	8007016 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007008:	4b1a      	ldr	r3, [pc, #104]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 800700a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800700c:	4a19      	ldr	r2, [pc, #100]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 800700e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007012:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007014:	e00f      	b.n	8007036 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	2b01      	cmp	r3, #1
 800701a:	d106      	bne.n	800702a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800701c:	4b15      	ldr	r3, [pc, #84]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 800701e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007020:	4a14      	ldr	r2, [pc, #80]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8007022:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007026:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007028:	e005      	b.n	8007036 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800702a:	4b12      	ldr	r3, [pc, #72]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	4a11      	ldr	r2, [pc, #68]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8007030:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007034:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007036:	4b0f      	ldr	r3, [pc, #60]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a0e      	ldr	r2, [pc, #56]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 800703c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007040:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007042:	f7fa f9d1 	bl	80013e8 <HAL_GetTick>
 8007046:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007048:	e008      	b.n	800705c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800704a:	f7fa f9cd 	bl	80013e8 <HAL_GetTick>
 800704e:	4602      	mov	r2, r0
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	1ad3      	subs	r3, r2, r3
 8007054:	2b02      	cmp	r3, #2
 8007056:	d901      	bls.n	800705c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007058:	2303      	movs	r3, #3
 800705a:	e006      	b.n	800706a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800705c:	4b05      	ldr	r3, [pc, #20]	@ (8007074 <RCCEx_PLL2_Config+0x15c>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d0f0      	beq.n	800704a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007068:	7bfb      	ldrb	r3, [r7, #15]
}
 800706a:	4618      	mov	r0, r3
 800706c:	3710      	adds	r7, #16
 800706e:	46bd      	mov	sp, r7
 8007070:	bd80      	pop	{r7, pc}
 8007072:	bf00      	nop
 8007074:	58024400 	.word	0x58024400
 8007078:	ffff0007 	.word	0xffff0007

0800707c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b084      	sub	sp, #16
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007086:	2300      	movs	r3, #0
 8007088:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800708a:	4b53      	ldr	r3, [pc, #332]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 800708c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800708e:	f003 0303 	and.w	r3, r3, #3
 8007092:	2b03      	cmp	r3, #3
 8007094:	d101      	bne.n	800709a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e099      	b.n	80071ce <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800709a:	4b4f      	ldr	r3, [pc, #316]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	4a4e      	ldr	r2, [pc, #312]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 80070a0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070a6:	f7fa f99f 	bl	80013e8 <HAL_GetTick>
 80070aa:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070ac:	e008      	b.n	80070c0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80070ae:	f7fa f99b 	bl	80013e8 <HAL_GetTick>
 80070b2:	4602      	mov	r2, r0
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	1ad3      	subs	r3, r2, r3
 80070b8:	2b02      	cmp	r3, #2
 80070ba:	d901      	bls.n	80070c0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070bc:	2303      	movs	r3, #3
 80070be:	e086      	b.n	80071ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070c0:	4b45      	ldr	r3, [pc, #276]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1f0      	bne.n	80070ae <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070cc:	4b42      	ldr	r3, [pc, #264]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 80070ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070d0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	051b      	lsls	r3, r3, #20
 80070da:	493f      	ldr	r1, [pc, #252]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 80070dc:	4313      	orrs	r3, r2
 80070de:	628b      	str	r3, [r1, #40]	@ 0x28
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	3b01      	subs	r3, #1
 80070e6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	025b      	lsls	r3, r3, #9
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	431a      	orrs	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	041b      	lsls	r3, r3, #16
 80070fe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007102:	431a      	orrs	r2, r3
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	3b01      	subs	r3, #1
 800710a:	061b      	lsls	r3, r3, #24
 800710c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007110:	4931      	ldr	r1, [pc, #196]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007112:	4313      	orrs	r3, r2
 8007114:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007116:	4b30      	ldr	r3, [pc, #192]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007118:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800711a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	492d      	ldr	r1, [pc, #180]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007124:	4313      	orrs	r3, r2
 8007126:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007128:	4b2b      	ldr	r3, [pc, #172]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 800712a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800712c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	699b      	ldr	r3, [r3, #24]
 8007134:	4928      	ldr	r1, [pc, #160]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007136:	4313      	orrs	r3, r2
 8007138:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800713a:	4b27      	ldr	r3, [pc, #156]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 800713c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800713e:	4a26      	ldr	r2, [pc, #152]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007140:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007144:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007146:	4b24      	ldr	r3, [pc, #144]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007148:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800714a:	4b24      	ldr	r3, [pc, #144]	@ (80071dc <RCCEx_PLL3_Config+0x160>)
 800714c:	4013      	ands	r3, r2
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	69d2      	ldr	r2, [r2, #28]
 8007152:	00d2      	lsls	r2, r2, #3
 8007154:	4920      	ldr	r1, [pc, #128]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007156:	4313      	orrs	r3, r2
 8007158:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800715a:	4b1f      	ldr	r3, [pc, #124]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 800715c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800715e:	4a1e      	ldr	r2, [pc, #120]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007164:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d106      	bne.n	800717a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800716c:	4b1a      	ldr	r3, [pc, #104]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 800716e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007170:	4a19      	ldr	r2, [pc, #100]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007172:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8007176:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8007178:	e00f      	b.n	800719a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	2b01      	cmp	r3, #1
 800717e:	d106      	bne.n	800718e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007180:	4b15      	ldr	r3, [pc, #84]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007184:	4a14      	ldr	r2, [pc, #80]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007186:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800718a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800718c:	e005      	b.n	800719a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800718e:	4b12      	ldr	r3, [pc, #72]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007192:	4a11      	ldr	r2, [pc, #68]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 8007194:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007198:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800719a:	4b0f      	ldr	r3, [pc, #60]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	4a0e      	ldr	r2, [pc, #56]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 80071a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80071a6:	f7fa f91f 	bl	80013e8 <HAL_GetTick>
 80071aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071ac:	e008      	b.n	80071c0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80071ae:	f7fa f91b 	bl	80013e8 <HAL_GetTick>
 80071b2:	4602      	mov	r2, r0
 80071b4:	68bb      	ldr	r3, [r7, #8]
 80071b6:	1ad3      	subs	r3, r2, r3
 80071b8:	2b02      	cmp	r3, #2
 80071ba:	d901      	bls.n	80071c0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071bc:	2303      	movs	r3, #3
 80071be:	e006      	b.n	80071ce <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071c0:	4b05      	ldr	r3, [pc, #20]	@ (80071d8 <RCCEx_PLL3_Config+0x15c>)
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d0f0      	beq.n	80071ae <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3710      	adds	r7, #16
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	58024400 	.word	0x58024400
 80071dc:	ffff0007 	.word	0xffff0007

080071e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d101      	bne.n	80071f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
 80071f0:	e042      	b.n	8007278 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d106      	bne.n	800720a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2200      	movs	r2, #0
 8007200:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f7f9 febd 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2224      	movs	r2, #36	@ 0x24
 800720e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f022 0201 	bic.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f001 fc5e 	bl	8008aec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 fdef 	bl	8007e14 <UART_SetConfig>
 8007236:	4603      	mov	r3, r0
 8007238:	2b01      	cmp	r3, #1
 800723a:	d101      	bne.n	8007240 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800723c:	2301      	movs	r3, #1
 800723e:	e01b      	b.n	8007278 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	685a      	ldr	r2, [r3, #4]
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800724e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	689a      	ldr	r2, [r3, #8]
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800725e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	f042 0201 	orr.w	r2, r2, #1
 800726e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f001 fcdd 	bl	8008c30 <UART_CheckIdleState>
 8007276:	4603      	mov	r3, r0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3708      	adds	r7, #8
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b08a      	sub	sp, #40	@ 0x28
 8007284:	af02      	add	r7, sp, #8
 8007286:	60f8      	str	r0, [r7, #12]
 8007288:	60b9      	str	r1, [r7, #8]
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	4613      	mov	r3, r2
 800728e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007296:	2b20      	cmp	r3, #32
 8007298:	d17b      	bne.n	8007392 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800729a:	68bb      	ldr	r3, [r7, #8]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d002      	beq.n	80072a6 <HAL_UART_Transmit+0x26>
 80072a0:	88fb      	ldrh	r3, [r7, #6]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e074      	b.n	8007394 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2221      	movs	r2, #33	@ 0x21
 80072b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80072ba:	f7fa f895 	bl	80013e8 <HAL_GetTick>
 80072be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	88fa      	ldrh	r2, [r7, #6]
 80072c4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	88fa      	ldrh	r2, [r7, #6]
 80072cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	689b      	ldr	r3, [r3, #8]
 80072d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072d8:	d108      	bne.n	80072ec <HAL_UART_Transmit+0x6c>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d104      	bne.n	80072ec <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	61bb      	str	r3, [r7, #24]
 80072ea:	e003      	b.n	80072f4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80072f0:	2300      	movs	r3, #0
 80072f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80072f4:	e030      	b.n	8007358 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80072f6:	683b      	ldr	r3, [r7, #0]
 80072f8:	9300      	str	r3, [sp, #0]
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	2200      	movs	r2, #0
 80072fe:	2180      	movs	r1, #128	@ 0x80
 8007300:	68f8      	ldr	r0, [r7, #12]
 8007302:	f001 fd3f 	bl	8008d84 <UART_WaitOnFlagUntilTimeout>
 8007306:	4603      	mov	r3, r0
 8007308:	2b00      	cmp	r3, #0
 800730a:	d005      	beq.n	8007318 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007314:	2303      	movs	r3, #3
 8007316:	e03d      	b.n	8007394 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10b      	bne.n	8007336 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800731e:	69bb      	ldr	r3, [r7, #24]
 8007320:	881b      	ldrh	r3, [r3, #0]
 8007322:	461a      	mov	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800732c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800732e:	69bb      	ldr	r3, [r7, #24]
 8007330:	3302      	adds	r3, #2
 8007332:	61bb      	str	r3, [r7, #24]
 8007334:	e007      	b.n	8007346 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	3301      	adds	r3, #1
 8007344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800734c:	b29b      	uxth	r3, r3
 800734e:	3b01      	subs	r3, #1
 8007350:	b29a      	uxth	r2, r3
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800735e:	b29b      	uxth	r3, r3
 8007360:	2b00      	cmp	r3, #0
 8007362:	d1c8      	bne.n	80072f6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	9300      	str	r3, [sp, #0]
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	2200      	movs	r2, #0
 800736c:	2140      	movs	r1, #64	@ 0x40
 800736e:	68f8      	ldr	r0, [r7, #12]
 8007370:	f001 fd08 	bl	8008d84 <UART_WaitOnFlagUntilTimeout>
 8007374:	4603      	mov	r3, r0
 8007376:	2b00      	cmp	r3, #0
 8007378:	d005      	beq.n	8007386 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2220      	movs	r2, #32
 800737e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007382:	2303      	movs	r3, #3
 8007384:	e006      	b.n	8007394 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2220      	movs	r2, #32
 800738a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800738e:	2300      	movs	r3, #0
 8007390:	e000      	b.n	8007394 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007392:	2302      	movs	r3, #2
  }
}
 8007394:	4618      	mov	r0, r3
 8007396:	3720      	adds	r7, #32
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b08a      	sub	sp, #40	@ 0x28
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	60f8      	str	r0, [r7, #12]
 80073a4:	60b9      	str	r1, [r7, #8]
 80073a6:	4613      	mov	r3, r2
 80073a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073b0:	2b20      	cmp	r3, #32
 80073b2:	d167      	bne.n	8007484 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 80073b4:	68bb      	ldr	r3, [r7, #8]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d002      	beq.n	80073c0 <HAL_UART_Transmit_DMA+0x24>
 80073ba:	88fb      	ldrh	r3, [r7, #6]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d101      	bne.n	80073c4 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 80073c0:	2301      	movs	r3, #1
 80073c2:	e060      	b.n	8007486 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	68ba      	ldr	r2, [r7, #8]
 80073c8:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	88fa      	ldrh	r2, [r7, #6]
 80073ce:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	88fa      	ldrh	r2, [r7, #6]
 80073d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2221      	movs	r2, #33	@ 0x21
 80073e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d028      	beq.n	8007444 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073f6:	4a26      	ldr	r2, [pc, #152]	@ (8007490 <HAL_UART_Transmit_DMA+0xf4>)
 80073f8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80073fe:	4a25      	ldr	r2, [pc, #148]	@ (8007494 <HAL_UART_Transmit_DMA+0xf8>)
 8007400:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007406:	4a24      	ldr	r2, [pc, #144]	@ (8007498 <HAL_UART_Transmit_DMA+0xfc>)
 8007408:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800740e:	2200      	movs	r2, #0
 8007410:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800741a:	4619      	mov	r1, r3
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	3328      	adds	r3, #40	@ 0x28
 8007422:	461a      	mov	r2, r3
 8007424:	88fb      	ldrh	r3, [r7, #6]
 8007426:	f7fa fccb 	bl	8001dc0 <HAL_DMA_Start_IT>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d009      	beq.n	8007444 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2210      	movs	r2, #16
 8007434:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	2220      	movs	r2, #32
 800743c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	e020      	b.n	8007486 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	2240      	movs	r2, #64	@ 0x40
 800744a:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	3308      	adds	r3, #8
 8007452:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	e853 3f00 	ldrex	r3, [r3]
 800745a:	613b      	str	r3, [r7, #16]
   return(result);
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007462:	627b      	str	r3, [r7, #36]	@ 0x24
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	3308      	adds	r3, #8
 800746a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800746c:	623a      	str	r2, [r7, #32]
 800746e:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007470:	69f9      	ldr	r1, [r7, #28]
 8007472:	6a3a      	ldr	r2, [r7, #32]
 8007474:	e841 2300 	strex	r3, r2, [r1]
 8007478:	61bb      	str	r3, [r7, #24]
   return(result);
 800747a:	69bb      	ldr	r3, [r7, #24]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d1e5      	bne.n	800744c <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 8007480:	2300      	movs	r3, #0
 8007482:	e000      	b.n	8007486 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8007484:	2302      	movs	r3, #2
  }
}
 8007486:	4618      	mov	r0, r3
 8007488:	3728      	adds	r7, #40	@ 0x28
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}
 800748e:	bf00      	nop
 8007490:	080090fd 	.word	0x080090fd
 8007494:	08009193 	.word	0x08009193
 8007498:	08009315 	.word	0x08009315

0800749c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	@ 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	60f8      	str	r0, [r7, #12]
 80074a4:	60b9      	str	r1, [r7, #8]
 80074a6:	4613      	mov	r3, r2
 80074a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80074b0:	2b20      	cmp	r3, #32
 80074b2:	d137      	bne.n	8007524 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d002      	beq.n	80074c0 <HAL_UART_Receive_DMA+0x24>
 80074ba:	88fb      	ldrh	r3, [r7, #6]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d101      	bne.n	80074c4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80074c0:	2301      	movs	r3, #1
 80074c2:	e030      	b.n	8007526 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2200      	movs	r2, #0
 80074c8:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a18      	ldr	r2, [pc, #96]	@ (8007530 <HAL_UART_Receive_DMA+0x94>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d01f      	beq.n	8007514 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d018      	beq.n	8007514 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	e853 3f00 	ldrex	r3, [r3]
 80074ee:	613b      	str	r3, [r7, #16]
   return(result);
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80074f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	461a      	mov	r2, r3
 80074fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007500:	623b      	str	r3, [r7, #32]
 8007502:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007504:	69f9      	ldr	r1, [r7, #28]
 8007506:	6a3a      	ldr	r2, [r7, #32]
 8007508:	e841 2300 	strex	r3, r2, [r1]
 800750c:	61bb      	str	r3, [r7, #24]
   return(result);
 800750e:	69bb      	ldr	r3, [r7, #24]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d1e6      	bne.n	80074e2 <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8007514:	88fb      	ldrh	r3, [r7, #6]
 8007516:	461a      	mov	r2, r3
 8007518:	68b9      	ldr	r1, [r7, #8]
 800751a:	68f8      	ldr	r0, [r7, #12]
 800751c:	f001 fca0 	bl	8008e60 <UART_Start_Receive_DMA>
 8007520:	4603      	mov	r3, r0
 8007522:	e000      	b.n	8007526 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007524:	2302      	movs	r3, #2
  }
}
 8007526:	4618      	mov	r0, r3
 8007528:	3728      	adds	r7, #40	@ 0x28
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}
 800752e:	bf00      	nop
 8007530:	58000c00 	.word	0x58000c00

08007534 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b090      	sub	sp, #64	@ 0x40
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007542:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800754a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689b      	ldr	r3, [r3, #8]
 8007552:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007556:	2b80      	cmp	r3, #128	@ 0x80
 8007558:	d139      	bne.n	80075ce <HAL_UART_DMAStop+0x9a>
 800755a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800755c:	2b21      	cmp	r3, #33	@ 0x21
 800755e:	d136      	bne.n	80075ce <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3308      	adds	r3, #8
 8007566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	6a3b      	ldr	r3, [r7, #32]
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007576:	637b      	str	r3, [r7, #52]	@ 0x34
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	3308      	adds	r3, #8
 800757e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007580:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007582:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007586:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e5      	bne.n	8007560 <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007598:	2b00      	cmp	r3, #0
 800759a:	d015      	beq.n	80075c8 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fa fe77 	bl	8002294 <HAL_DMA_Abort>
 80075a6:	4603      	mov	r3, r0
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d00d      	beq.n	80075c8 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80075b0:	4618      	mov	r0, r3
 80075b2:	f7fc fafd 	bl	8003bb0 <HAL_DMA_GetError>
 80075b6:	4603      	mov	r3, r0
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d105      	bne.n	80075c8 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2210      	movs	r2, #16
 80075c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e047      	b.n	8007658 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f001 fcef 	bl	8008fac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d8:	2b40      	cmp	r3, #64	@ 0x40
 80075da:	d13c      	bne.n	8007656 <HAL_UART_DMAStop+0x122>
 80075dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80075de:	2b22      	cmp	r3, #34	@ 0x22
 80075e0:	d139      	bne.n	8007656 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	3308      	adds	r3, #8
 80075e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	e853 3f00 	ldrex	r3, [r3]
 80075f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	3308      	adds	r3, #8
 8007600:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007602:	61ba      	str	r2, [r7, #24]
 8007604:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007606:	6979      	ldr	r1, [r7, #20]
 8007608:	69ba      	ldr	r2, [r7, #24]
 800760a:	e841 2300 	strex	r3, r2, [r1]
 800760e:	613b      	str	r3, [r7, #16]
   return(result);
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1e5      	bne.n	80075e2 <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800761c:	2b00      	cmp	r3, #0
 800761e:	d017      	beq.n	8007650 <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007626:	4618      	mov	r0, r3
 8007628:	f7fa fe34 	bl	8002294 <HAL_DMA_Abort>
 800762c:	4603      	mov	r3, r0
 800762e:	2b00      	cmp	r3, #0
 8007630:	d00e      	beq.n	8007650 <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007638:	4618      	mov	r0, r3
 800763a:	f7fc fab9 	bl	8003bb0 <HAL_DMA_GetError>
 800763e:	4603      	mov	r3, r0
 8007640:	2b20      	cmp	r3, #32
 8007642:	d105      	bne.n	8007650 <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2210      	movs	r2, #16
 8007648:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e003      	b.n	8007658 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f001 fced 	bl	8009030 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3740      	adds	r7, #64	@ 0x40
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b0ba      	sub	sp, #232	@ 0xe8
 8007664:	af00      	add	r7, sp, #0
 8007666:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	69db      	ldr	r3, [r3, #28]
 800766e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007686:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800768a:	f640 030f 	movw	r3, #2063	@ 0x80f
 800768e:	4013      	ands	r3, r2
 8007690:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007694:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007698:	2b00      	cmp	r3, #0
 800769a:	d11b      	bne.n	80076d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800769c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076a0:	f003 0320 	and.w	r3, r3, #32
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d015      	beq.n	80076d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80076a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076ac:	f003 0320 	and.w	r3, r3, #32
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d105      	bne.n	80076c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80076b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80076b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d009      	beq.n	80076d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	f000 8377 	beq.w	8007db8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	4798      	blx	r3
      }
      return;
 80076d2:	e371      	b.n	8007db8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076d8:	2b00      	cmp	r3, #0
 80076da:	f000 8123 	beq.w	8007924 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80076e2:	4b8d      	ldr	r3, [pc, #564]	@ (8007918 <HAL_UART_IRQHandler+0x2b8>)
 80076e4:	4013      	ands	r3, r2
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d106      	bne.n	80076f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076ee:	4b8b      	ldr	r3, [pc, #556]	@ (800791c <HAL_UART_IRQHandler+0x2bc>)
 80076f0:	4013      	ands	r3, r2
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f000 8116 	beq.w	8007924 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076fc:	f003 0301 	and.w	r3, r3, #1
 8007700:	2b00      	cmp	r3, #0
 8007702:	d011      	beq.n	8007728 <HAL_UART_IRQHandler+0xc8>
 8007704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007708:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00b      	beq.n	8007728 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2201      	movs	r2, #1
 8007716:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800771e:	f043 0201 	orr.w	r2, r3, #1
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800772c:	f003 0302 	and.w	r3, r3, #2
 8007730:	2b00      	cmp	r3, #0
 8007732:	d011      	beq.n	8007758 <HAL_UART_IRQHandler+0xf8>
 8007734:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007738:	f003 0301 	and.w	r3, r3, #1
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	2202      	movs	r2, #2
 8007746:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800774e:	f043 0204 	orr.w	r2, r3, #4
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007758:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800775c:	f003 0304 	and.w	r3, r3, #4
 8007760:	2b00      	cmp	r3, #0
 8007762:	d011      	beq.n	8007788 <HAL_UART_IRQHandler+0x128>
 8007764:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007768:	f003 0301 	and.w	r3, r3, #1
 800776c:	2b00      	cmp	r3, #0
 800776e:	d00b      	beq.n	8007788 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2204      	movs	r2, #4
 8007776:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800777e:	f043 0202 	orr.w	r2, r3, #2
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007788:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800778c:	f003 0308 	and.w	r3, r3, #8
 8007790:	2b00      	cmp	r3, #0
 8007792:	d017      	beq.n	80077c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007798:	f003 0320 	and.w	r3, r3, #32
 800779c:	2b00      	cmp	r3, #0
 800779e:	d105      	bne.n	80077ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80077a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80077a4:	4b5c      	ldr	r3, [pc, #368]	@ (8007918 <HAL_UART_IRQHandler+0x2b8>)
 80077a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00b      	beq.n	80077c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2208      	movs	r2, #8
 80077b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ba:	f043 0208 	orr.w	r2, r3, #8
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d012      	beq.n	80077f6 <HAL_UART_IRQHandler+0x196>
 80077d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077d4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00c      	beq.n	80077f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f000 82dd 	beq.w	8007dbc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007806:	f003 0320 	and.w	r3, r3, #32
 800780a:	2b00      	cmp	r3, #0
 800780c:	d013      	beq.n	8007836 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800780e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007812:	f003 0320 	and.w	r3, r3, #32
 8007816:	2b00      	cmp	r3, #0
 8007818:	d105      	bne.n	8007826 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800781a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800781e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d007      	beq.n	8007836 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800782a:	2b00      	cmp	r3, #0
 800782c:	d003      	beq.n	8007836 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800783c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800784a:	2b40      	cmp	r3, #64	@ 0x40
 800784c:	d005      	beq.n	800785a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800784e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007852:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007856:	2b00      	cmp	r3, #0
 8007858:	d054      	beq.n	8007904 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800785a:	6878      	ldr	r0, [r7, #4]
 800785c:	f001 fbe8 	bl	8009030 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800786a:	2b40      	cmp	r3, #64	@ 0x40
 800786c:	d146      	bne.n	80078fc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	3308      	adds	r3, #8
 8007874:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007884:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007888:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800788c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3308      	adds	r3, #8
 8007896:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800789a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800789e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80078a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80078aa:	e841 2300 	strex	r3, r2, [r1]
 80078ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80078b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1d9      	bne.n	800786e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d017      	beq.n	80078f4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078ca:	4a15      	ldr	r2, [pc, #84]	@ (8007920 <HAL_UART_IRQHandler+0x2c0>)
 80078cc:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078d4:	4618      	mov	r0, r3
 80078d6:	f7fa fffb 	bl	80028d0 <HAL_DMA_Abort_IT>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d019      	beq.n	8007914 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80078e8:	687a      	ldr	r2, [r7, #4]
 80078ea:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80078ee:	4610      	mov	r0, r2
 80078f0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f2:	e00f      	b.n	8007914 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fa77 	bl	8007de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078fa:	e00b      	b.n	8007914 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 fa73 	bl	8007de8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007902:	e007      	b.n	8007914 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007904:	6878      	ldr	r0, [r7, #4]
 8007906:	f000 fa6f 	bl	8007de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	2200      	movs	r2, #0
 800790e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8007912:	e253      	b.n	8007dbc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007914:	bf00      	nop
    return;
 8007916:	e251      	b.n	8007dbc <HAL_UART_IRQHandler+0x75c>
 8007918:	10000001 	.word	0x10000001
 800791c:	04000120 	.word	0x04000120
 8007920:	08009395 	.word	0x08009395

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007928:	2b01      	cmp	r3, #1
 800792a:	f040 81e7 	bne.w	8007cfc <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800792e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007932:	f003 0310 	and.w	r3, r3, #16
 8007936:	2b00      	cmp	r3, #0
 8007938:	f000 81e0 	beq.w	8007cfc <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800793c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007940:	f003 0310 	and.w	r3, r3, #16
 8007944:	2b00      	cmp	r3, #0
 8007946:	f000 81d9 	beq.w	8007cfc <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	2210      	movs	r2, #16
 8007950:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800795c:	2b40      	cmp	r3, #64	@ 0x40
 800795e:	f040 8151 	bne.w	8007c04 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a96      	ldr	r2, [pc, #600]	@ (8007bc4 <HAL_UART_IRQHandler+0x564>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d068      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a93      	ldr	r2, [pc, #588]	@ (8007bc8 <HAL_UART_IRQHandler+0x568>)
 800797a:	4293      	cmp	r3, r2
 800797c:	d061      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a91      	ldr	r2, [pc, #580]	@ (8007bcc <HAL_UART_IRQHandler+0x56c>)
 8007988:	4293      	cmp	r3, r2
 800798a:	d05a      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a8e      	ldr	r2, [pc, #568]	@ (8007bd0 <HAL_UART_IRQHandler+0x570>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d053      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a8c      	ldr	r2, [pc, #560]	@ (8007bd4 <HAL_UART_IRQHandler+0x574>)
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d04c      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a89      	ldr	r2, [pc, #548]	@ (8007bd8 <HAL_UART_IRQHandler+0x578>)
 80079b2:	4293      	cmp	r3, r2
 80079b4:	d045      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a87      	ldr	r2, [pc, #540]	@ (8007bdc <HAL_UART_IRQHandler+0x57c>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d03e      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	4a84      	ldr	r2, [pc, #528]	@ (8007be0 <HAL_UART_IRQHandler+0x580>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d037      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a82      	ldr	r2, [pc, #520]	@ (8007be4 <HAL_UART_IRQHandler+0x584>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d030      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a7f      	ldr	r2, [pc, #508]	@ (8007be8 <HAL_UART_IRQHandler+0x588>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d029      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	4a7d      	ldr	r2, [pc, #500]	@ (8007bec <HAL_UART_IRQHandler+0x58c>)
 80079f8:	4293      	cmp	r3, r2
 80079fa:	d022      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	4a7a      	ldr	r2, [pc, #488]	@ (8007bf0 <HAL_UART_IRQHandler+0x590>)
 8007a06:	4293      	cmp	r3, r2
 8007a08:	d01b      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a78      	ldr	r2, [pc, #480]	@ (8007bf4 <HAL_UART_IRQHandler+0x594>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d014      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a75      	ldr	r2, [pc, #468]	@ (8007bf8 <HAL_UART_IRQHandler+0x598>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00d      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	4a73      	ldr	r2, [pc, #460]	@ (8007bfc <HAL_UART_IRQHandler+0x59c>)
 8007a30:	4293      	cmp	r3, r2
 8007a32:	d006      	beq.n	8007a42 <HAL_UART_IRQHandler+0x3e2>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	4a70      	ldr	r2, [pc, #448]	@ (8007c00 <HAL_UART_IRQHandler+0x5a0>)
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d106      	bne.n	8007a50 <HAL_UART_IRQHandler+0x3f0>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	685b      	ldr	r3, [r3, #4]
 8007a4c:	b29b      	uxth	r3, r3
 8007a4e:	e005      	b.n	8007a5c <HAL_UART_IRQHandler+0x3fc>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	b29b      	uxth	r3, r3
 8007a5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007a60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f000 81ab 	beq.w	8007dc0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007a70:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a74:	429a      	cmp	r2, r3
 8007a76:	f080 81a3 	bcs.w	8007dc0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007a80:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8a:	69db      	ldr	r3, [r3, #28]
 8007a8c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007a90:	f000 8087 	beq.w	8007ba2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007aa8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007aac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ab0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	461a      	mov	r2, r3
 8007aba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8007abe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007ac2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ac6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007aca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007ad6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d1da      	bne.n	8007a94 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007aee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007af0:	f023 0301 	bic.w	r3, r3, #1
 8007af4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	3308      	adds	r3, #8
 8007afe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007b02:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007b06:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b08:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007b0a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007b0e:	e841 2300 	strex	r3, r2, [r1]
 8007b12:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007b14:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d1e1      	bne.n	8007ade <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	3308      	adds	r3, #8
 8007b20:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007b2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b2c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b30:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007b3e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007b40:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007b44:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007b4c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e3      	bne.n	8007b1a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007b68:	e853 3f00 	ldrex	r3, [r3]
 8007b6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007b6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007b70:	f023 0310 	bic.w	r3, r3, #16
 8007b74:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	461a      	mov	r2, r3
 8007b7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b82:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b84:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b86:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007b88:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007b8a:	e841 2300 	strex	r3, r2, [r1]
 8007b8e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007b90:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d1e4      	bne.n	8007b60 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f7fa fb79 	bl	8002294 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2202      	movs	r2, #2
 8007ba6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007bb4:	b29b      	uxth	r3, r3
 8007bb6:	1ad3      	subs	r3, r2, r3
 8007bb8:	b29b      	uxth	r3, r3
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 f91d 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bc2:	e0fd      	b.n	8007dc0 <HAL_UART_IRQHandler+0x760>
 8007bc4:	40020010 	.word	0x40020010
 8007bc8:	40020028 	.word	0x40020028
 8007bcc:	40020040 	.word	0x40020040
 8007bd0:	40020058 	.word	0x40020058
 8007bd4:	40020070 	.word	0x40020070
 8007bd8:	40020088 	.word	0x40020088
 8007bdc:	400200a0 	.word	0x400200a0
 8007be0:	400200b8 	.word	0x400200b8
 8007be4:	40020410 	.word	0x40020410
 8007be8:	40020428 	.word	0x40020428
 8007bec:	40020440 	.word	0x40020440
 8007bf0:	40020458 	.word	0x40020458
 8007bf4:	40020470 	.word	0x40020470
 8007bf8:	40020488 	.word	0x40020488
 8007bfc:	400204a0 	.word	0x400204a0
 8007c00:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c1e:	b29b      	uxth	r3, r3
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80cf 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8007c26:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	f000 80ca 	beq.w	8007dc4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c38:	e853 3f00 	ldrex	r3, [r3]
 8007c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	461a      	mov	r2, r3
 8007c4e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007c52:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c54:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c5a:	e841 2300 	strex	r3, r2, [r1]
 8007c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d1e4      	bne.n	8007c30 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3308      	adds	r3, #8
 8007c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c70:	e853 3f00 	ldrex	r3, [r3]
 8007c74:	623b      	str	r3, [r7, #32]
   return(result);
 8007c76:	6a3a      	ldr	r2, [r7, #32]
 8007c78:	4b55      	ldr	r3, [pc, #340]	@ (8007dd0 <HAL_UART_IRQHandler+0x770>)
 8007c7a:	4013      	ands	r3, r2
 8007c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	3308      	adds	r3, #8
 8007c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007c8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c92:	e841 2300 	strex	r3, r2, [r1]
 8007c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d1e3      	bne.n	8007c66 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2220      	movs	r2, #32
 8007ca2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2200      	movs	r2, #0
 8007caa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2200      	movs	r2, #0
 8007cb0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb8:	693b      	ldr	r3, [r7, #16]
 8007cba:	e853 3f00 	ldrex	r3, [r3]
 8007cbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	f023 0310 	bic.w	r3, r3, #16
 8007cc6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	461a      	mov	r2, r3
 8007cd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cd8:	69b9      	ldr	r1, [r7, #24]
 8007cda:	69fa      	ldr	r2, [r7, #28]
 8007cdc:	e841 2300 	strex	r3, r2, [r1]
 8007ce0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ce2:	697b      	ldr	r3, [r7, #20]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d1e4      	bne.n	8007cb2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2202      	movs	r2, #2
 8007cec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cf2:	4619      	mov	r1, r3
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 f881 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007cfa:	e063      	b.n	8007dc4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007cfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d00:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00e      	beq.n	8007d26 <HAL_UART_IRQHandler+0x6c6>
 8007d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d0c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007d1c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f001 fb79 	bl	8009416 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d24:	e051      	b.n	8007dca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d014      	beq.n	8007d5c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d105      	bne.n	8007d4a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007d3e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007d42:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d008      	beq.n	8007d5c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d03a      	beq.n	8007dc8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007d56:	6878      	ldr	r0, [r7, #4]
 8007d58:	4798      	blx	r3
    }
    return;
 8007d5a:	e035      	b.n	8007dc8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007d5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d009      	beq.n	8007d7c <HAL_UART_IRQHandler+0x71c>
 8007d68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d003      	beq.n	8007d7c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8007d74:	6878      	ldr	r0, [r7, #4]
 8007d76:	f001 fb23 	bl	80093c0 <UART_EndTransmit_IT>
    return;
 8007d7a:	e026      	b.n	8007dca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007d7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d80:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d009      	beq.n	8007d9c <HAL_UART_IRQHandler+0x73c>
 8007d88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007d8c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d003      	beq.n	8007d9c <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f001 fb52 	bl	800943e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007d9a:	e016      	b.n	8007dca <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007d9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007da0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d010      	beq.n	8007dca <HAL_UART_IRQHandler+0x76a>
 8007da8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da0c      	bge.n	8007dca <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007db0:	6878      	ldr	r0, [r7, #4]
 8007db2:	f001 fb3a 	bl	800942a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007db6:	e008      	b.n	8007dca <HAL_UART_IRQHandler+0x76a>
      return;
 8007db8:	bf00      	nop
 8007dba:	e006      	b.n	8007dca <HAL_UART_IRQHandler+0x76a>
    return;
 8007dbc:	bf00      	nop
 8007dbe:	e004      	b.n	8007dca <HAL_UART_IRQHandler+0x76a>
      return;
 8007dc0:	bf00      	nop
 8007dc2:	e002      	b.n	8007dca <HAL_UART_IRQHandler+0x76a>
      return;
 8007dc4:	bf00      	nop
 8007dc6:	e000      	b.n	8007dca <HAL_UART_IRQHandler+0x76a>
    return;
 8007dc8:	bf00      	nop
  }
}
 8007dca:	37e8      	adds	r7, #232	@ 0xe8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}
 8007dd0:	effffffe 	.word	0xeffffffe

08007dd4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
 8007e04:	460b      	mov	r3, r1
 8007e06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007e08:	bf00      	nop
 8007e0a:	370c      	adds	r7, #12
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr

08007e14 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007e14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e18:	b092      	sub	sp, #72	@ 0x48
 8007e1a:	af00      	add	r7, sp, #0
 8007e1c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e1e:	2300      	movs	r3, #0
 8007e20:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e24:	697b      	ldr	r3, [r7, #20]
 8007e26:	689a      	ldr	r2, [r3, #8]
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	691b      	ldr	r3, [r3, #16]
 8007e2c:	431a      	orrs	r2, r3
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	695b      	ldr	r3, [r3, #20]
 8007e32:	431a      	orrs	r2, r3
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	69db      	ldr	r3, [r3, #28]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007e3c:	697b      	ldr	r3, [r7, #20]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	4bbe      	ldr	r3, [pc, #760]	@ (800813c <UART_SetConfig+0x328>)
 8007e44:	4013      	ands	r3, r2
 8007e46:	697a      	ldr	r2, [r7, #20]
 8007e48:	6812      	ldr	r2, [r2, #0]
 8007e4a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007e5a:	697b      	ldr	r3, [r7, #20]
 8007e5c:	68da      	ldr	r2, [r3, #12]
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	430a      	orrs	r2, r1
 8007e64:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	699b      	ldr	r3, [r3, #24]
 8007e6a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007e6c:	697b      	ldr	r3, [r7, #20]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4ab3      	ldr	r2, [pc, #716]	@ (8008140 <UART_SetConfig+0x32c>)
 8007e72:	4293      	cmp	r3, r2
 8007e74:	d004      	beq.n	8007e80 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	6a1b      	ldr	r3, [r3, #32]
 8007e7a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	689a      	ldr	r2, [r3, #8]
 8007e86:	4baf      	ldr	r3, [pc, #700]	@ (8008144 <UART_SetConfig+0x330>)
 8007e88:	4013      	ands	r3, r2
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	6812      	ldr	r2, [r2, #0]
 8007e8e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007e90:	430b      	orrs	r3, r1
 8007e92:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e9a:	f023 010f 	bic.w	r1, r3, #15
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007eaa:	697b      	ldr	r3, [r7, #20]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	4aa6      	ldr	r2, [pc, #664]	@ (8008148 <UART_SetConfig+0x334>)
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d177      	bne.n	8007fa4 <UART_SetConfig+0x190>
 8007eb4:	4ba5      	ldr	r3, [pc, #660]	@ (800814c <UART_SetConfig+0x338>)
 8007eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007eb8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ebc:	2b28      	cmp	r3, #40	@ 0x28
 8007ebe:	d86d      	bhi.n	8007f9c <UART_SetConfig+0x188>
 8007ec0:	a201      	add	r2, pc, #4	@ (adr r2, 8007ec8 <UART_SetConfig+0xb4>)
 8007ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ec6:	bf00      	nop
 8007ec8:	08007f6d 	.word	0x08007f6d
 8007ecc:	08007f9d 	.word	0x08007f9d
 8007ed0:	08007f9d 	.word	0x08007f9d
 8007ed4:	08007f9d 	.word	0x08007f9d
 8007ed8:	08007f9d 	.word	0x08007f9d
 8007edc:	08007f9d 	.word	0x08007f9d
 8007ee0:	08007f9d 	.word	0x08007f9d
 8007ee4:	08007f9d 	.word	0x08007f9d
 8007ee8:	08007f75 	.word	0x08007f75
 8007eec:	08007f9d 	.word	0x08007f9d
 8007ef0:	08007f9d 	.word	0x08007f9d
 8007ef4:	08007f9d 	.word	0x08007f9d
 8007ef8:	08007f9d 	.word	0x08007f9d
 8007efc:	08007f9d 	.word	0x08007f9d
 8007f00:	08007f9d 	.word	0x08007f9d
 8007f04:	08007f9d 	.word	0x08007f9d
 8007f08:	08007f7d 	.word	0x08007f7d
 8007f0c:	08007f9d 	.word	0x08007f9d
 8007f10:	08007f9d 	.word	0x08007f9d
 8007f14:	08007f9d 	.word	0x08007f9d
 8007f18:	08007f9d 	.word	0x08007f9d
 8007f1c:	08007f9d 	.word	0x08007f9d
 8007f20:	08007f9d 	.word	0x08007f9d
 8007f24:	08007f9d 	.word	0x08007f9d
 8007f28:	08007f85 	.word	0x08007f85
 8007f2c:	08007f9d 	.word	0x08007f9d
 8007f30:	08007f9d 	.word	0x08007f9d
 8007f34:	08007f9d 	.word	0x08007f9d
 8007f38:	08007f9d 	.word	0x08007f9d
 8007f3c:	08007f9d 	.word	0x08007f9d
 8007f40:	08007f9d 	.word	0x08007f9d
 8007f44:	08007f9d 	.word	0x08007f9d
 8007f48:	08007f8d 	.word	0x08007f8d
 8007f4c:	08007f9d 	.word	0x08007f9d
 8007f50:	08007f9d 	.word	0x08007f9d
 8007f54:	08007f9d 	.word	0x08007f9d
 8007f58:	08007f9d 	.word	0x08007f9d
 8007f5c:	08007f9d 	.word	0x08007f9d
 8007f60:	08007f9d 	.word	0x08007f9d
 8007f64:	08007f9d 	.word	0x08007f9d
 8007f68:	08007f95 	.word	0x08007f95
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f72:	e326      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007f74:	2304      	movs	r3, #4
 8007f76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f7a:	e322      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007f7c:	2308      	movs	r3, #8
 8007f7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f82:	e31e      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007f84:	2310      	movs	r3, #16
 8007f86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f8a:	e31a      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007f8c:	2320      	movs	r3, #32
 8007f8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f92:	e316      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007f94:	2340      	movs	r3, #64	@ 0x40
 8007f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007f9a:	e312      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007f9c:	2380      	movs	r3, #128	@ 0x80
 8007f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fa2:	e30e      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a69      	ldr	r2, [pc, #420]	@ (8008150 <UART_SetConfig+0x33c>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d130      	bne.n	8008010 <UART_SetConfig+0x1fc>
 8007fae:	4b67      	ldr	r3, [pc, #412]	@ (800814c <UART_SetConfig+0x338>)
 8007fb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fb2:	f003 0307 	and.w	r3, r3, #7
 8007fb6:	2b05      	cmp	r3, #5
 8007fb8:	d826      	bhi.n	8008008 <UART_SetConfig+0x1f4>
 8007fba:	a201      	add	r2, pc, #4	@ (adr r2, 8007fc0 <UART_SetConfig+0x1ac>)
 8007fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc0:	08007fd9 	.word	0x08007fd9
 8007fc4:	08007fe1 	.word	0x08007fe1
 8007fc8:	08007fe9 	.word	0x08007fe9
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007ff9 	.word	0x08007ff9
 8007fd4:	08008001 	.word	0x08008001
 8007fd8:	2300      	movs	r3, #0
 8007fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fde:	e2f0      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007fe0:	2304      	movs	r3, #4
 8007fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fe6:	e2ec      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007fe8:	2308      	movs	r3, #8
 8007fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007fee:	e2e8      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007ff0:	2310      	movs	r3, #16
 8007ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ff6:	e2e4      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8007ff8:	2320      	movs	r3, #32
 8007ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8007ffe:	e2e0      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008000:	2340      	movs	r3, #64	@ 0x40
 8008002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008006:	e2dc      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008008:	2380      	movs	r3, #128	@ 0x80
 800800a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800800e:	e2d8      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	4a4f      	ldr	r2, [pc, #316]	@ (8008154 <UART_SetConfig+0x340>)
 8008016:	4293      	cmp	r3, r2
 8008018:	d130      	bne.n	800807c <UART_SetConfig+0x268>
 800801a:	4b4c      	ldr	r3, [pc, #304]	@ (800814c <UART_SetConfig+0x338>)
 800801c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800801e:	f003 0307 	and.w	r3, r3, #7
 8008022:	2b05      	cmp	r3, #5
 8008024:	d826      	bhi.n	8008074 <UART_SetConfig+0x260>
 8008026:	a201      	add	r2, pc, #4	@ (adr r2, 800802c <UART_SetConfig+0x218>)
 8008028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800802c:	08008045 	.word	0x08008045
 8008030:	0800804d 	.word	0x0800804d
 8008034:	08008055 	.word	0x08008055
 8008038:	0800805d 	.word	0x0800805d
 800803c:	08008065 	.word	0x08008065
 8008040:	0800806d 	.word	0x0800806d
 8008044:	2300      	movs	r3, #0
 8008046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800804a:	e2ba      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800804c:	2304      	movs	r3, #4
 800804e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008052:	e2b6      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008054:	2308      	movs	r3, #8
 8008056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800805a:	e2b2      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800805c:	2310      	movs	r3, #16
 800805e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008062:	e2ae      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008064:	2320      	movs	r3, #32
 8008066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800806a:	e2aa      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800806c:	2340      	movs	r3, #64	@ 0x40
 800806e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008072:	e2a6      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008074:	2380      	movs	r3, #128	@ 0x80
 8008076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800807a:	e2a2      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800807c:	697b      	ldr	r3, [r7, #20]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4a35      	ldr	r2, [pc, #212]	@ (8008158 <UART_SetConfig+0x344>)
 8008082:	4293      	cmp	r3, r2
 8008084:	d130      	bne.n	80080e8 <UART_SetConfig+0x2d4>
 8008086:	4b31      	ldr	r3, [pc, #196]	@ (800814c <UART_SetConfig+0x338>)
 8008088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800808a:	f003 0307 	and.w	r3, r3, #7
 800808e:	2b05      	cmp	r3, #5
 8008090:	d826      	bhi.n	80080e0 <UART_SetConfig+0x2cc>
 8008092:	a201      	add	r2, pc, #4	@ (adr r2, 8008098 <UART_SetConfig+0x284>)
 8008094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008098:	080080b1 	.word	0x080080b1
 800809c:	080080b9 	.word	0x080080b9
 80080a0:	080080c1 	.word	0x080080c1
 80080a4:	080080c9 	.word	0x080080c9
 80080a8:	080080d1 	.word	0x080080d1
 80080ac:	080080d9 	.word	0x080080d9
 80080b0:	2300      	movs	r3, #0
 80080b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080b6:	e284      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80080b8:	2304      	movs	r3, #4
 80080ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080be:	e280      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80080c0:	2308      	movs	r3, #8
 80080c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080c6:	e27c      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80080c8:	2310      	movs	r3, #16
 80080ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080ce:	e278      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80080d0:	2320      	movs	r3, #32
 80080d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080d6:	e274      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80080d8:	2340      	movs	r3, #64	@ 0x40
 80080da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080de:	e270      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80080e0:	2380      	movs	r3, #128	@ 0x80
 80080e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80080e6:	e26c      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a1b      	ldr	r2, [pc, #108]	@ (800815c <UART_SetConfig+0x348>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d142      	bne.n	8008178 <UART_SetConfig+0x364>
 80080f2:	4b16      	ldr	r3, [pc, #88]	@ (800814c <UART_SetConfig+0x338>)
 80080f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080f6:	f003 0307 	and.w	r3, r3, #7
 80080fa:	2b05      	cmp	r3, #5
 80080fc:	d838      	bhi.n	8008170 <UART_SetConfig+0x35c>
 80080fe:	a201      	add	r2, pc, #4	@ (adr r2, 8008104 <UART_SetConfig+0x2f0>)
 8008100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008104:	0800811d 	.word	0x0800811d
 8008108:	08008125 	.word	0x08008125
 800810c:	0800812d 	.word	0x0800812d
 8008110:	08008135 	.word	0x08008135
 8008114:	08008161 	.word	0x08008161
 8008118:	08008169 	.word	0x08008169
 800811c:	2300      	movs	r3, #0
 800811e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008122:	e24e      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008124:	2304      	movs	r3, #4
 8008126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800812a:	e24a      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800812c:	2308      	movs	r3, #8
 800812e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008132:	e246      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008134:	2310      	movs	r3, #16
 8008136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800813a:	e242      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800813c:	cfff69f3 	.word	0xcfff69f3
 8008140:	58000c00 	.word	0x58000c00
 8008144:	11fff4ff 	.word	0x11fff4ff
 8008148:	40011000 	.word	0x40011000
 800814c:	58024400 	.word	0x58024400
 8008150:	40004400 	.word	0x40004400
 8008154:	40004800 	.word	0x40004800
 8008158:	40004c00 	.word	0x40004c00
 800815c:	40005000 	.word	0x40005000
 8008160:	2320      	movs	r3, #32
 8008162:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008166:	e22c      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008168:	2340      	movs	r3, #64	@ 0x40
 800816a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800816e:	e228      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008170:	2380      	movs	r3, #128	@ 0x80
 8008172:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008176:	e224      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4ab1      	ldr	r2, [pc, #708]	@ (8008444 <UART_SetConfig+0x630>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d176      	bne.n	8008270 <UART_SetConfig+0x45c>
 8008182:	4bb1      	ldr	r3, [pc, #708]	@ (8008448 <UART_SetConfig+0x634>)
 8008184:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800818a:	2b28      	cmp	r3, #40	@ 0x28
 800818c:	d86c      	bhi.n	8008268 <UART_SetConfig+0x454>
 800818e:	a201      	add	r2, pc, #4	@ (adr r2, 8008194 <UART_SetConfig+0x380>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	08008239 	.word	0x08008239
 8008198:	08008269 	.word	0x08008269
 800819c:	08008269 	.word	0x08008269
 80081a0:	08008269 	.word	0x08008269
 80081a4:	08008269 	.word	0x08008269
 80081a8:	08008269 	.word	0x08008269
 80081ac:	08008269 	.word	0x08008269
 80081b0:	08008269 	.word	0x08008269
 80081b4:	08008241 	.word	0x08008241
 80081b8:	08008269 	.word	0x08008269
 80081bc:	08008269 	.word	0x08008269
 80081c0:	08008269 	.word	0x08008269
 80081c4:	08008269 	.word	0x08008269
 80081c8:	08008269 	.word	0x08008269
 80081cc:	08008269 	.word	0x08008269
 80081d0:	08008269 	.word	0x08008269
 80081d4:	08008249 	.word	0x08008249
 80081d8:	08008269 	.word	0x08008269
 80081dc:	08008269 	.word	0x08008269
 80081e0:	08008269 	.word	0x08008269
 80081e4:	08008269 	.word	0x08008269
 80081e8:	08008269 	.word	0x08008269
 80081ec:	08008269 	.word	0x08008269
 80081f0:	08008269 	.word	0x08008269
 80081f4:	08008251 	.word	0x08008251
 80081f8:	08008269 	.word	0x08008269
 80081fc:	08008269 	.word	0x08008269
 8008200:	08008269 	.word	0x08008269
 8008204:	08008269 	.word	0x08008269
 8008208:	08008269 	.word	0x08008269
 800820c:	08008269 	.word	0x08008269
 8008210:	08008269 	.word	0x08008269
 8008214:	08008259 	.word	0x08008259
 8008218:	08008269 	.word	0x08008269
 800821c:	08008269 	.word	0x08008269
 8008220:	08008269 	.word	0x08008269
 8008224:	08008269 	.word	0x08008269
 8008228:	08008269 	.word	0x08008269
 800822c:	08008269 	.word	0x08008269
 8008230:	08008269 	.word	0x08008269
 8008234:	08008261 	.word	0x08008261
 8008238:	2301      	movs	r3, #1
 800823a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800823e:	e1c0      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008240:	2304      	movs	r3, #4
 8008242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008246:	e1bc      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008248:	2308      	movs	r3, #8
 800824a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800824e:	e1b8      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008250:	2310      	movs	r3, #16
 8008252:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008256:	e1b4      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008258:	2320      	movs	r3, #32
 800825a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800825e:	e1b0      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008260:	2340      	movs	r3, #64	@ 0x40
 8008262:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008266:	e1ac      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008268:	2380      	movs	r3, #128	@ 0x80
 800826a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800826e:	e1a8      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a75      	ldr	r2, [pc, #468]	@ (800844c <UART_SetConfig+0x638>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d130      	bne.n	80082dc <UART_SetConfig+0x4c8>
 800827a:	4b73      	ldr	r3, [pc, #460]	@ (8008448 <UART_SetConfig+0x634>)
 800827c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800827e:	f003 0307 	and.w	r3, r3, #7
 8008282:	2b05      	cmp	r3, #5
 8008284:	d826      	bhi.n	80082d4 <UART_SetConfig+0x4c0>
 8008286:	a201      	add	r2, pc, #4	@ (adr r2, 800828c <UART_SetConfig+0x478>)
 8008288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828c:	080082a5 	.word	0x080082a5
 8008290:	080082ad 	.word	0x080082ad
 8008294:	080082b5 	.word	0x080082b5
 8008298:	080082bd 	.word	0x080082bd
 800829c:	080082c5 	.word	0x080082c5
 80082a0:	080082cd 	.word	0x080082cd
 80082a4:	2300      	movs	r3, #0
 80082a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082aa:	e18a      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80082ac:	2304      	movs	r3, #4
 80082ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082b2:	e186      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80082b4:	2308      	movs	r3, #8
 80082b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ba:	e182      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80082bc:	2310      	movs	r3, #16
 80082be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082c2:	e17e      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80082c4:	2320      	movs	r3, #32
 80082c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082ca:	e17a      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80082cc:	2340      	movs	r3, #64	@ 0x40
 80082ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082d2:	e176      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80082d4:	2380      	movs	r3, #128	@ 0x80
 80082d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80082da:	e172      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a5b      	ldr	r2, [pc, #364]	@ (8008450 <UART_SetConfig+0x63c>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d130      	bne.n	8008348 <UART_SetConfig+0x534>
 80082e6:	4b58      	ldr	r3, [pc, #352]	@ (8008448 <UART_SetConfig+0x634>)
 80082e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082ea:	f003 0307 	and.w	r3, r3, #7
 80082ee:	2b05      	cmp	r3, #5
 80082f0:	d826      	bhi.n	8008340 <UART_SetConfig+0x52c>
 80082f2:	a201      	add	r2, pc, #4	@ (adr r2, 80082f8 <UART_SetConfig+0x4e4>)
 80082f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082f8:	08008311 	.word	0x08008311
 80082fc:	08008319 	.word	0x08008319
 8008300:	08008321 	.word	0x08008321
 8008304:	08008329 	.word	0x08008329
 8008308:	08008331 	.word	0x08008331
 800830c:	08008339 	.word	0x08008339
 8008310:	2300      	movs	r3, #0
 8008312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008316:	e154      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008318:	2304      	movs	r3, #4
 800831a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800831e:	e150      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008320:	2308      	movs	r3, #8
 8008322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008326:	e14c      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008328:	2310      	movs	r3, #16
 800832a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800832e:	e148      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008330:	2320      	movs	r3, #32
 8008332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008336:	e144      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008338:	2340      	movs	r3, #64	@ 0x40
 800833a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800833e:	e140      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008340:	2380      	movs	r3, #128	@ 0x80
 8008342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008346:	e13c      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008348:	697b      	ldr	r3, [r7, #20]
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	4a41      	ldr	r2, [pc, #260]	@ (8008454 <UART_SetConfig+0x640>)
 800834e:	4293      	cmp	r3, r2
 8008350:	f040 8082 	bne.w	8008458 <UART_SetConfig+0x644>
 8008354:	4b3c      	ldr	r3, [pc, #240]	@ (8008448 <UART_SetConfig+0x634>)
 8008356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008358:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800835c:	2b28      	cmp	r3, #40	@ 0x28
 800835e:	d86d      	bhi.n	800843c <UART_SetConfig+0x628>
 8008360:	a201      	add	r2, pc, #4	@ (adr r2, 8008368 <UART_SetConfig+0x554>)
 8008362:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008366:	bf00      	nop
 8008368:	0800840d 	.word	0x0800840d
 800836c:	0800843d 	.word	0x0800843d
 8008370:	0800843d 	.word	0x0800843d
 8008374:	0800843d 	.word	0x0800843d
 8008378:	0800843d 	.word	0x0800843d
 800837c:	0800843d 	.word	0x0800843d
 8008380:	0800843d 	.word	0x0800843d
 8008384:	0800843d 	.word	0x0800843d
 8008388:	08008415 	.word	0x08008415
 800838c:	0800843d 	.word	0x0800843d
 8008390:	0800843d 	.word	0x0800843d
 8008394:	0800843d 	.word	0x0800843d
 8008398:	0800843d 	.word	0x0800843d
 800839c:	0800843d 	.word	0x0800843d
 80083a0:	0800843d 	.word	0x0800843d
 80083a4:	0800843d 	.word	0x0800843d
 80083a8:	0800841d 	.word	0x0800841d
 80083ac:	0800843d 	.word	0x0800843d
 80083b0:	0800843d 	.word	0x0800843d
 80083b4:	0800843d 	.word	0x0800843d
 80083b8:	0800843d 	.word	0x0800843d
 80083bc:	0800843d 	.word	0x0800843d
 80083c0:	0800843d 	.word	0x0800843d
 80083c4:	0800843d 	.word	0x0800843d
 80083c8:	08008425 	.word	0x08008425
 80083cc:	0800843d 	.word	0x0800843d
 80083d0:	0800843d 	.word	0x0800843d
 80083d4:	0800843d 	.word	0x0800843d
 80083d8:	0800843d 	.word	0x0800843d
 80083dc:	0800843d 	.word	0x0800843d
 80083e0:	0800843d 	.word	0x0800843d
 80083e4:	0800843d 	.word	0x0800843d
 80083e8:	0800842d 	.word	0x0800842d
 80083ec:	0800843d 	.word	0x0800843d
 80083f0:	0800843d 	.word	0x0800843d
 80083f4:	0800843d 	.word	0x0800843d
 80083f8:	0800843d 	.word	0x0800843d
 80083fc:	0800843d 	.word	0x0800843d
 8008400:	0800843d 	.word	0x0800843d
 8008404:	0800843d 	.word	0x0800843d
 8008408:	08008435 	.word	0x08008435
 800840c:	2301      	movs	r3, #1
 800840e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008412:	e0d6      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008414:	2304      	movs	r3, #4
 8008416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800841a:	e0d2      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800841c:	2308      	movs	r3, #8
 800841e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008422:	e0ce      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008424:	2310      	movs	r3, #16
 8008426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800842a:	e0ca      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800842c:	2320      	movs	r3, #32
 800842e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008432:	e0c6      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008434:	2340      	movs	r3, #64	@ 0x40
 8008436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800843a:	e0c2      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800843c:	2380      	movs	r3, #128	@ 0x80
 800843e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008442:	e0be      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008444:	40011400 	.word	0x40011400
 8008448:	58024400 	.word	0x58024400
 800844c:	40007800 	.word	0x40007800
 8008450:	40007c00 	.word	0x40007c00
 8008454:	40011800 	.word	0x40011800
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4aad      	ldr	r2, [pc, #692]	@ (8008714 <UART_SetConfig+0x900>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d176      	bne.n	8008550 <UART_SetConfig+0x73c>
 8008462:	4bad      	ldr	r3, [pc, #692]	@ (8008718 <UART_SetConfig+0x904>)
 8008464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800846a:	2b28      	cmp	r3, #40	@ 0x28
 800846c:	d86c      	bhi.n	8008548 <UART_SetConfig+0x734>
 800846e:	a201      	add	r2, pc, #4	@ (adr r2, 8008474 <UART_SetConfig+0x660>)
 8008470:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008474:	08008519 	.word	0x08008519
 8008478:	08008549 	.word	0x08008549
 800847c:	08008549 	.word	0x08008549
 8008480:	08008549 	.word	0x08008549
 8008484:	08008549 	.word	0x08008549
 8008488:	08008549 	.word	0x08008549
 800848c:	08008549 	.word	0x08008549
 8008490:	08008549 	.word	0x08008549
 8008494:	08008521 	.word	0x08008521
 8008498:	08008549 	.word	0x08008549
 800849c:	08008549 	.word	0x08008549
 80084a0:	08008549 	.word	0x08008549
 80084a4:	08008549 	.word	0x08008549
 80084a8:	08008549 	.word	0x08008549
 80084ac:	08008549 	.word	0x08008549
 80084b0:	08008549 	.word	0x08008549
 80084b4:	08008529 	.word	0x08008529
 80084b8:	08008549 	.word	0x08008549
 80084bc:	08008549 	.word	0x08008549
 80084c0:	08008549 	.word	0x08008549
 80084c4:	08008549 	.word	0x08008549
 80084c8:	08008549 	.word	0x08008549
 80084cc:	08008549 	.word	0x08008549
 80084d0:	08008549 	.word	0x08008549
 80084d4:	08008531 	.word	0x08008531
 80084d8:	08008549 	.word	0x08008549
 80084dc:	08008549 	.word	0x08008549
 80084e0:	08008549 	.word	0x08008549
 80084e4:	08008549 	.word	0x08008549
 80084e8:	08008549 	.word	0x08008549
 80084ec:	08008549 	.word	0x08008549
 80084f0:	08008549 	.word	0x08008549
 80084f4:	08008539 	.word	0x08008539
 80084f8:	08008549 	.word	0x08008549
 80084fc:	08008549 	.word	0x08008549
 8008500:	08008549 	.word	0x08008549
 8008504:	08008549 	.word	0x08008549
 8008508:	08008549 	.word	0x08008549
 800850c:	08008549 	.word	0x08008549
 8008510:	08008549 	.word	0x08008549
 8008514:	08008541 	.word	0x08008541
 8008518:	2301      	movs	r3, #1
 800851a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800851e:	e050      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008520:	2304      	movs	r3, #4
 8008522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008526:	e04c      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008528:	2308      	movs	r3, #8
 800852a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800852e:	e048      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008530:	2310      	movs	r3, #16
 8008532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008536:	e044      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008538:	2320      	movs	r3, #32
 800853a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800853e:	e040      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008540:	2340      	movs	r3, #64	@ 0x40
 8008542:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008546:	e03c      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008548:	2380      	movs	r3, #128	@ 0x80
 800854a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800854e:	e038      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a71      	ldr	r2, [pc, #452]	@ (800871c <UART_SetConfig+0x908>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d130      	bne.n	80085bc <UART_SetConfig+0x7a8>
 800855a:	4b6f      	ldr	r3, [pc, #444]	@ (8008718 <UART_SetConfig+0x904>)
 800855c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800855e:	f003 0307 	and.w	r3, r3, #7
 8008562:	2b05      	cmp	r3, #5
 8008564:	d826      	bhi.n	80085b4 <UART_SetConfig+0x7a0>
 8008566:	a201      	add	r2, pc, #4	@ (adr r2, 800856c <UART_SetConfig+0x758>)
 8008568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800856c:	08008585 	.word	0x08008585
 8008570:	0800858d 	.word	0x0800858d
 8008574:	08008595 	.word	0x08008595
 8008578:	0800859d 	.word	0x0800859d
 800857c:	080085a5 	.word	0x080085a5
 8008580:	080085ad 	.word	0x080085ad
 8008584:	2302      	movs	r3, #2
 8008586:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800858a:	e01a      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800858c:	2304      	movs	r3, #4
 800858e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8008592:	e016      	b.n	80085c2 <UART_SetConfig+0x7ae>
 8008594:	2308      	movs	r3, #8
 8008596:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800859a:	e012      	b.n	80085c2 <UART_SetConfig+0x7ae>
 800859c:	2310      	movs	r3, #16
 800859e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085a2:	e00e      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80085a4:	2320      	movs	r3, #32
 80085a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085aa:	e00a      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80085ac:	2340      	movs	r3, #64	@ 0x40
 80085ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085b2:	e006      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80085b4:	2380      	movs	r3, #128	@ 0x80
 80085b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80085ba:	e002      	b.n	80085c2 <UART_SetConfig+0x7ae>
 80085bc:	2380      	movs	r3, #128	@ 0x80
 80085be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	4a55      	ldr	r2, [pc, #340]	@ (800871c <UART_SetConfig+0x908>)
 80085c8:	4293      	cmp	r3, r2
 80085ca:	f040 80f8 	bne.w	80087be <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80085ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80085d2:	2b20      	cmp	r3, #32
 80085d4:	dc46      	bgt.n	8008664 <UART_SetConfig+0x850>
 80085d6:	2b02      	cmp	r3, #2
 80085d8:	db75      	blt.n	80086c6 <UART_SetConfig+0x8b2>
 80085da:	3b02      	subs	r3, #2
 80085dc:	2b1e      	cmp	r3, #30
 80085de:	d872      	bhi.n	80086c6 <UART_SetConfig+0x8b2>
 80085e0:	a201      	add	r2, pc, #4	@ (adr r2, 80085e8 <UART_SetConfig+0x7d4>)
 80085e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085e6:	bf00      	nop
 80085e8:	0800866b 	.word	0x0800866b
 80085ec:	080086c7 	.word	0x080086c7
 80085f0:	08008673 	.word	0x08008673
 80085f4:	080086c7 	.word	0x080086c7
 80085f8:	080086c7 	.word	0x080086c7
 80085fc:	080086c7 	.word	0x080086c7
 8008600:	08008683 	.word	0x08008683
 8008604:	080086c7 	.word	0x080086c7
 8008608:	080086c7 	.word	0x080086c7
 800860c:	080086c7 	.word	0x080086c7
 8008610:	080086c7 	.word	0x080086c7
 8008614:	080086c7 	.word	0x080086c7
 8008618:	080086c7 	.word	0x080086c7
 800861c:	080086c7 	.word	0x080086c7
 8008620:	08008693 	.word	0x08008693
 8008624:	080086c7 	.word	0x080086c7
 8008628:	080086c7 	.word	0x080086c7
 800862c:	080086c7 	.word	0x080086c7
 8008630:	080086c7 	.word	0x080086c7
 8008634:	080086c7 	.word	0x080086c7
 8008638:	080086c7 	.word	0x080086c7
 800863c:	080086c7 	.word	0x080086c7
 8008640:	080086c7 	.word	0x080086c7
 8008644:	080086c7 	.word	0x080086c7
 8008648:	080086c7 	.word	0x080086c7
 800864c:	080086c7 	.word	0x080086c7
 8008650:	080086c7 	.word	0x080086c7
 8008654:	080086c7 	.word	0x080086c7
 8008658:	080086c7 	.word	0x080086c7
 800865c:	080086c7 	.word	0x080086c7
 8008660:	080086b9 	.word	0x080086b9
 8008664:	2b40      	cmp	r3, #64	@ 0x40
 8008666:	d02a      	beq.n	80086be <UART_SetConfig+0x8aa>
 8008668:	e02d      	b.n	80086c6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800866a:	f7fe f997 	bl	800699c <HAL_RCCEx_GetD3PCLK1Freq>
 800866e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008670:	e02f      	b.n	80086d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008672:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8008676:	4618      	mov	r0, r3
 8008678:	f7fe f9a6 	bl	80069c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800867c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800867e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008680:	e027      	b.n	80086d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008682:	f107 0318 	add.w	r3, r7, #24
 8008686:	4618      	mov	r0, r3
 8008688:	f7fe faf2 	bl	8006c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800868c:	69fb      	ldr	r3, [r7, #28]
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008690:	e01f      	b.n	80086d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008692:	4b21      	ldr	r3, [pc, #132]	@ (8008718 <UART_SetConfig+0x904>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800869e:	4b1e      	ldr	r3, [pc, #120]	@ (8008718 <UART_SetConfig+0x904>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	08db      	lsrs	r3, r3, #3
 80086a4:	f003 0303 	and.w	r3, r3, #3
 80086a8:	4a1d      	ldr	r2, [pc, #116]	@ (8008720 <UART_SetConfig+0x90c>)
 80086aa:	fa22 f303 	lsr.w	r3, r2, r3
 80086ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80086b0:	e00f      	b.n	80086d2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80086b2:	4b1b      	ldr	r3, [pc, #108]	@ (8008720 <UART_SetConfig+0x90c>)
 80086b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086b6:	e00c      	b.n	80086d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80086b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008724 <UART_SetConfig+0x910>)
 80086ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086bc:	e009      	b.n	80086d2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086be:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80086c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80086c4:	e005      	b.n	80086d2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80086c6:	2300      	movs	r3, #0
 80086c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80086ca:	2301      	movs	r3, #1
 80086cc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80086d0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80086d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	f000 81ee 	beq.w	8008ab6 <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086de:	4a12      	ldr	r2, [pc, #72]	@ (8008728 <UART_SetConfig+0x914>)
 80086e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80086e4:	461a      	mov	r2, r3
 80086e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80086e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80086ec:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	685a      	ldr	r2, [r3, #4]
 80086f2:	4613      	mov	r3, r2
 80086f4:	005b      	lsls	r3, r3, #1
 80086f6:	4413      	add	r3, r2
 80086f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d305      	bcc.n	800870a <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008704:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008706:	429a      	cmp	r2, r3
 8008708:	d910      	bls.n	800872c <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008710:	e1d1      	b.n	8008ab6 <UART_SetConfig+0xca2>
 8008712:	bf00      	nop
 8008714:	40011c00 	.word	0x40011c00
 8008718:	58024400 	.word	0x58024400
 800871c:	58000c00 	.word	0x58000c00
 8008720:	03d09000 	.word	0x03d09000
 8008724:	003d0900 	.word	0x003d0900
 8008728:	080096fc 	.word	0x080096fc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800872c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800872e:	2200      	movs	r2, #0
 8008730:	60bb      	str	r3, [r7, #8]
 8008732:	60fa      	str	r2, [r7, #12]
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008738:	4ac0      	ldr	r2, [pc, #768]	@ (8008a3c <UART_SetConfig+0xc28>)
 800873a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800873e:	b29b      	uxth	r3, r3
 8008740:	2200      	movs	r2, #0
 8008742:	603b      	str	r3, [r7, #0]
 8008744:	607a      	str	r2, [r7, #4]
 8008746:	e9d7 2300 	ldrd	r2, r3, [r7]
 800874a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800874e:	f7f7 fddd 	bl	800030c <__aeabi_uldivmod>
 8008752:	4602      	mov	r2, r0
 8008754:	460b      	mov	r3, r1
 8008756:	4610      	mov	r0, r2
 8008758:	4619      	mov	r1, r3
 800875a:	f04f 0200 	mov.w	r2, #0
 800875e:	f04f 0300 	mov.w	r3, #0
 8008762:	020b      	lsls	r3, r1, #8
 8008764:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008768:	0202      	lsls	r2, r0, #8
 800876a:	6979      	ldr	r1, [r7, #20]
 800876c:	6849      	ldr	r1, [r1, #4]
 800876e:	0849      	lsrs	r1, r1, #1
 8008770:	2000      	movs	r0, #0
 8008772:	460c      	mov	r4, r1
 8008774:	4605      	mov	r5, r0
 8008776:	eb12 0804 	adds.w	r8, r2, r4
 800877a:	eb43 0905 	adc.w	r9, r3, r5
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	469a      	mov	sl, r3
 8008786:	4693      	mov	fp, r2
 8008788:	4652      	mov	r2, sl
 800878a:	465b      	mov	r3, fp
 800878c:	4640      	mov	r0, r8
 800878e:	4649      	mov	r1, r9
 8008790:	f7f7 fdbc 	bl	800030c <__aeabi_uldivmod>
 8008794:	4602      	mov	r2, r0
 8008796:	460b      	mov	r3, r1
 8008798:	4613      	mov	r3, r2
 800879a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80087a2:	d308      	bcc.n	80087b6 <UART_SetConfig+0x9a2>
 80087a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087aa:	d204      	bcs.n	80087b6 <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80087ac:	697b      	ldr	r3, [r7, #20]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80087b2:	60da      	str	r2, [r3, #12]
 80087b4:	e17f      	b.n	8008ab6 <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80087bc:	e17b      	b.n	8008ab6 <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80087c6:	f040 80bd 	bne.w	8008944 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80087ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80087ce:	2b20      	cmp	r3, #32
 80087d0:	dc48      	bgt.n	8008864 <UART_SetConfig+0xa50>
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	db7b      	blt.n	80088ce <UART_SetConfig+0xaba>
 80087d6:	2b20      	cmp	r3, #32
 80087d8:	d879      	bhi.n	80088ce <UART_SetConfig+0xaba>
 80087da:	a201      	add	r2, pc, #4	@ (adr r2, 80087e0 <UART_SetConfig+0x9cc>)
 80087dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087e0:	0800886b 	.word	0x0800886b
 80087e4:	08008873 	.word	0x08008873
 80087e8:	080088cf 	.word	0x080088cf
 80087ec:	080088cf 	.word	0x080088cf
 80087f0:	0800887b 	.word	0x0800887b
 80087f4:	080088cf 	.word	0x080088cf
 80087f8:	080088cf 	.word	0x080088cf
 80087fc:	080088cf 	.word	0x080088cf
 8008800:	0800888b 	.word	0x0800888b
 8008804:	080088cf 	.word	0x080088cf
 8008808:	080088cf 	.word	0x080088cf
 800880c:	080088cf 	.word	0x080088cf
 8008810:	080088cf 	.word	0x080088cf
 8008814:	080088cf 	.word	0x080088cf
 8008818:	080088cf 	.word	0x080088cf
 800881c:	080088cf 	.word	0x080088cf
 8008820:	0800889b 	.word	0x0800889b
 8008824:	080088cf 	.word	0x080088cf
 8008828:	080088cf 	.word	0x080088cf
 800882c:	080088cf 	.word	0x080088cf
 8008830:	080088cf 	.word	0x080088cf
 8008834:	080088cf 	.word	0x080088cf
 8008838:	080088cf 	.word	0x080088cf
 800883c:	080088cf 	.word	0x080088cf
 8008840:	080088cf 	.word	0x080088cf
 8008844:	080088cf 	.word	0x080088cf
 8008848:	080088cf 	.word	0x080088cf
 800884c:	080088cf 	.word	0x080088cf
 8008850:	080088cf 	.word	0x080088cf
 8008854:	080088cf 	.word	0x080088cf
 8008858:	080088cf 	.word	0x080088cf
 800885c:	080088cf 	.word	0x080088cf
 8008860:	080088c1 	.word	0x080088c1
 8008864:	2b40      	cmp	r3, #64	@ 0x40
 8008866:	d02e      	beq.n	80088c6 <UART_SetConfig+0xab2>
 8008868:	e031      	b.n	80088ce <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800886a:	f7fc fecb 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 800886e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008870:	e033      	b.n	80088da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008872:	f7fc fedd 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 8008876:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8008878:	e02f      	b.n	80088da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800887a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800887e:	4618      	mov	r0, r3
 8008880:	f7fe f8a2 	bl	80069c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008884:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008888:	e027      	b.n	80088da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800888a:	f107 0318 	add.w	r3, r7, #24
 800888e:	4618      	mov	r0, r3
 8008890:	f7fe f9ee 	bl	8006c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008898:	e01f      	b.n	80088da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800889a:	4b69      	ldr	r3, [pc, #420]	@ (8008a40 <UART_SetConfig+0xc2c>)
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	f003 0320 	and.w	r3, r3, #32
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d009      	beq.n	80088ba <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80088a6:	4b66      	ldr	r3, [pc, #408]	@ (8008a40 <UART_SetConfig+0xc2c>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	08db      	lsrs	r3, r3, #3
 80088ac:	f003 0303 	and.w	r3, r3, #3
 80088b0:	4a64      	ldr	r2, [pc, #400]	@ (8008a44 <UART_SetConfig+0xc30>)
 80088b2:	fa22 f303 	lsr.w	r3, r2, r3
 80088b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80088b8:	e00f      	b.n	80088da <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80088ba:	4b62      	ldr	r3, [pc, #392]	@ (8008a44 <UART_SetConfig+0xc30>)
 80088bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088be:	e00c      	b.n	80088da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80088c0:	4b61      	ldr	r3, [pc, #388]	@ (8008a48 <UART_SetConfig+0xc34>)
 80088c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088c4:	e009      	b.n	80088da <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088c6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80088ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80088cc:	e005      	b.n	80088da <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80088d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80088da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 80ea 	beq.w	8008ab6 <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e6:	4a55      	ldr	r2, [pc, #340]	@ (8008a3c <UART_SetConfig+0xc28>)
 80088e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088ec:	461a      	mov	r2, r3
 80088ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80088f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80088f4:	005a      	lsls	r2, r3, #1
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	085b      	lsrs	r3, r3, #1
 80088fc:	441a      	add	r2, r3
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	685b      	ldr	r3, [r3, #4]
 8008902:	fbb2 f3f3 	udiv	r3, r2, r3
 8008906:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800890a:	2b0f      	cmp	r3, #15
 800890c:	d916      	bls.n	800893c <UART_SetConfig+0xb28>
 800890e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008910:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008914:	d212      	bcs.n	800893c <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008918:	b29b      	uxth	r3, r3
 800891a:	f023 030f 	bic.w	r3, r3, #15
 800891e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008922:	085b      	lsrs	r3, r3, #1
 8008924:	b29b      	uxth	r3, r3
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	b29a      	uxth	r2, r3
 800892c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800892e:	4313      	orrs	r3, r2
 8008930:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008938:	60da      	str	r2, [r3, #12]
 800893a:	e0bc      	b.n	8008ab6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 800893c:	2301      	movs	r3, #1
 800893e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8008942:	e0b8      	b.n	8008ab6 <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008944:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8008948:	2b20      	cmp	r3, #32
 800894a:	dc4b      	bgt.n	80089e4 <UART_SetConfig+0xbd0>
 800894c:	2b00      	cmp	r3, #0
 800894e:	f2c0 8087 	blt.w	8008a60 <UART_SetConfig+0xc4c>
 8008952:	2b20      	cmp	r3, #32
 8008954:	f200 8084 	bhi.w	8008a60 <UART_SetConfig+0xc4c>
 8008958:	a201      	add	r2, pc, #4	@ (adr r2, 8008960 <UART_SetConfig+0xb4c>)
 800895a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800895e:	bf00      	nop
 8008960:	080089eb 	.word	0x080089eb
 8008964:	080089f3 	.word	0x080089f3
 8008968:	08008a61 	.word	0x08008a61
 800896c:	08008a61 	.word	0x08008a61
 8008970:	080089fb 	.word	0x080089fb
 8008974:	08008a61 	.word	0x08008a61
 8008978:	08008a61 	.word	0x08008a61
 800897c:	08008a61 	.word	0x08008a61
 8008980:	08008a0b 	.word	0x08008a0b
 8008984:	08008a61 	.word	0x08008a61
 8008988:	08008a61 	.word	0x08008a61
 800898c:	08008a61 	.word	0x08008a61
 8008990:	08008a61 	.word	0x08008a61
 8008994:	08008a61 	.word	0x08008a61
 8008998:	08008a61 	.word	0x08008a61
 800899c:	08008a61 	.word	0x08008a61
 80089a0:	08008a1b 	.word	0x08008a1b
 80089a4:	08008a61 	.word	0x08008a61
 80089a8:	08008a61 	.word	0x08008a61
 80089ac:	08008a61 	.word	0x08008a61
 80089b0:	08008a61 	.word	0x08008a61
 80089b4:	08008a61 	.word	0x08008a61
 80089b8:	08008a61 	.word	0x08008a61
 80089bc:	08008a61 	.word	0x08008a61
 80089c0:	08008a61 	.word	0x08008a61
 80089c4:	08008a61 	.word	0x08008a61
 80089c8:	08008a61 	.word	0x08008a61
 80089cc:	08008a61 	.word	0x08008a61
 80089d0:	08008a61 	.word	0x08008a61
 80089d4:	08008a61 	.word	0x08008a61
 80089d8:	08008a61 	.word	0x08008a61
 80089dc:	08008a61 	.word	0x08008a61
 80089e0:	08008a53 	.word	0x08008a53
 80089e4:	2b40      	cmp	r3, #64	@ 0x40
 80089e6:	d037      	beq.n	8008a58 <UART_SetConfig+0xc44>
 80089e8:	e03a      	b.n	8008a60 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089ea:	f7fc fe0b 	bl	8005604 <HAL_RCC_GetPCLK1Freq>
 80089ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089f0:	e03c      	b.n	8008a6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f2:	f7fc fe1d 	bl	8005630 <HAL_RCC_GetPCLK2Freq>
 80089f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80089f8:	e038      	b.n	8008a6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80089fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80089fe:	4618      	mov	r0, r3
 8008a00:	f7fd ffe2 	bl	80069c8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008a06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a08:	e030      	b.n	8008a6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008a0a:	f107 0318 	add.w	r3, r7, #24
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f7fe f92e 	bl	8006c70 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a18:	e028      	b.n	8008a6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a1a:	4b09      	ldr	r3, [pc, #36]	@ (8008a40 <UART_SetConfig+0xc2c>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d012      	beq.n	8008a4c <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008a26:	4b06      	ldr	r3, [pc, #24]	@ (8008a40 <UART_SetConfig+0xc2c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	08db      	lsrs	r3, r3, #3
 8008a2c:	f003 0303 	and.w	r3, r3, #3
 8008a30:	4a04      	ldr	r2, [pc, #16]	@ (8008a44 <UART_SetConfig+0xc30>)
 8008a32:	fa22 f303 	lsr.w	r3, r2, r3
 8008a36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008a38:	e018      	b.n	8008a6c <UART_SetConfig+0xc58>
 8008a3a:	bf00      	nop
 8008a3c:	080096fc 	.word	0x080096fc
 8008a40:	58024400 	.word	0x58024400
 8008a44:	03d09000 	.word	0x03d09000
 8008a48:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8008a4c:	4b24      	ldr	r3, [pc, #144]	@ (8008ae0 <UART_SetConfig+0xccc>)
 8008a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a50:	e00c      	b.n	8008a6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8008a52:	4b24      	ldr	r3, [pc, #144]	@ (8008ae4 <UART_SetConfig+0xcd0>)
 8008a54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a56:	e009      	b.n	8008a6c <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008a5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8008a5e:	e005      	b.n	8008a6c <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8008a60:	2300      	movs	r3, #0
 8008a62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8008a64:	2301      	movs	r3, #1
 8008a66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8008a6a:	bf00      	nop
    }

    if (pclk != 0U)
 8008a6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d021      	beq.n	8008ab6 <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a72:	697b      	ldr	r3, [r7, #20]
 8008a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a76:	4a1c      	ldr	r2, [pc, #112]	@ (8008ae8 <UART_SetConfig+0xcd4>)
 8008a78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a80:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	085b      	lsrs	r3, r3, #1
 8008a8a:	441a      	add	r2, r3
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a94:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a98:	2b0f      	cmp	r3, #15
 8008a9a:	d909      	bls.n	8008ab0 <UART_SetConfig+0xc9c>
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a9e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008aa2:	d205      	bcs.n	8008ab0 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008aa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008aa6:	b29a      	uxth	r2, r3
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	60da      	str	r2, [r3, #12]
 8008aae:	e002      	b.n	8008ab6 <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008ab6:	697b      	ldr	r3, [r7, #20]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	2201      	movs	r2, #1
 8008ac2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2200      	movs	r2, #0
 8008aca:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008acc:	697b      	ldr	r3, [r7, #20]
 8008ace:	2200      	movs	r2, #0
 8008ad0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008ad2:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8008ad6:	4618      	mov	r0, r3
 8008ad8:	3748      	adds	r7, #72	@ 0x48
 8008ada:	46bd      	mov	sp, r7
 8008adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ae0:	03d09000 	.word	0x03d09000
 8008ae4:	003d0900 	.word	0x003d0900
 8008ae8:	080096fc 	.word	0x080096fc

08008aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008af8:	f003 0308 	and.w	r3, r3, #8
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00a      	beq.n	8008b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	430a      	orrs	r2, r1
 8008b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b1a:	f003 0301 	and.w	r3, r3, #1
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d00a      	beq.n	8008b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	430a      	orrs	r2, r1
 8008b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b3c:	f003 0302 	and.w	r3, r3, #2
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d00a      	beq.n	8008b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	430a      	orrs	r2, r1
 8008b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b5e:	f003 0304 	and.w	r3, r3, #4
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d00a      	beq.n	8008b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	685b      	ldr	r3, [r3, #4]
 8008b6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	430a      	orrs	r2, r1
 8008b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b80:	f003 0310 	and.w	r3, r3, #16
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ba2:	f003 0320 	and.w	r3, r3, #32
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	689b      	ldr	r3, [r3, #8]
 8008bb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d01a      	beq.n	8008c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008be6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008bea:	d10a      	bne.n	8008c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	685b      	ldr	r3, [r3, #4]
 8008bf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d00a      	beq.n	8008c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	430a      	orrs	r2, r1
 8008c22:	605a      	str	r2, [r3, #4]
  }
}
 8008c24:	bf00      	nop
 8008c26:	370c      	adds	r7, #12
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2e:	4770      	bx	lr

08008c30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008c30:	b580      	push	{r7, lr}
 8008c32:	b098      	sub	sp, #96	@ 0x60
 8008c34:	af02      	add	r7, sp, #8
 8008c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008c40:	f7f8 fbd2 	bl	80013e8 <HAL_GetTick>
 8008c44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f003 0308 	and.w	r3, r3, #8
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	d12f      	bne.n	8008cb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008c54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008c58:	9300      	str	r3, [sp, #0]
 8008c5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008c5c:	2200      	movs	r2, #0
 8008c5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f000 f88e 	bl	8008d84 <UART_WaitOnFlagUntilTimeout>
 8008c68:	4603      	mov	r3, r0
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d022      	beq.n	8008cb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008c76:	e853 3f00 	ldrex	r3, [r3]
 8008c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008c7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008c82:	653b      	str	r3, [r7, #80]	@ 0x50
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	461a      	mov	r2, r3
 8008c8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008c8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8008c8e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008c92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008c94:	e841 2300 	strex	r3, r2, [r1]
 8008c98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008c9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d1e6      	bne.n	8008c6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2220      	movs	r2, #32
 8008ca4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	2200      	movs	r2, #0
 8008cac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e063      	b.n	8008d7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f003 0304 	and.w	r3, r3, #4
 8008cbe:	2b04      	cmp	r3, #4
 8008cc0:	d149      	bne.n	8008d56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cc2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008cca:	2200      	movs	r2, #0
 8008ccc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008cd0:	6878      	ldr	r0, [r7, #4]
 8008cd2:	f000 f857 	bl	8008d84 <UART_WaitOnFlagUntilTimeout>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d03c      	beq.n	8008d56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce4:	e853 3f00 	ldrex	r3, [r3]
 8008ce8:	623b      	str	r3, [r7, #32]
   return(result);
 8008cea:	6a3b      	ldr	r3, [r7, #32]
 8008cec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008cf0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008cfa:	633b      	str	r3, [r7, #48]	@ 0x30
 8008cfc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cfe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008d00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d02:	e841 2300 	strex	r3, r2, [r1]
 8008d06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008d08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1e6      	bne.n	8008cdc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	3308      	adds	r3, #8
 8008d14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d16:	693b      	ldr	r3, [r7, #16]
 8008d18:	e853 3f00 	ldrex	r3, [r3]
 8008d1c:	60fb      	str	r3, [r7, #12]
   return(result);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	f023 0301 	bic.w	r3, r3, #1
 8008d24:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	3308      	adds	r3, #8
 8008d2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008d2e:	61fa      	str	r2, [r7, #28]
 8008d30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d32:	69b9      	ldr	r1, [r7, #24]
 8008d34:	69fa      	ldr	r2, [r7, #28]
 8008d36:	e841 2300 	strex	r3, r2, [r1]
 8008d3a:	617b      	str	r3, [r7, #20]
   return(result);
 8008d3c:	697b      	ldr	r3, [r7, #20]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d1e5      	bne.n	8008d0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d52:	2303      	movs	r3, #3
 8008d54:	e012      	b.n	8008d7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2220      	movs	r2, #32
 8008d5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2220      	movs	r2, #32
 8008d62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	2200      	movs	r2, #0
 8008d6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2200      	movs	r2, #0
 8008d70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2200      	movs	r2, #0
 8008d76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008d7a:	2300      	movs	r3, #0
}
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3758      	adds	r7, #88	@ 0x58
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d84:	b580      	push	{r7, lr}
 8008d86:	b084      	sub	sp, #16
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	60f8      	str	r0, [r7, #12]
 8008d8c:	60b9      	str	r1, [r7, #8]
 8008d8e:	603b      	str	r3, [r7, #0]
 8008d90:	4613      	mov	r3, r2
 8008d92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d94:	e04f      	b.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d96:	69bb      	ldr	r3, [r7, #24]
 8008d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d9c:	d04b      	beq.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d9e:	f7f8 fb23 	bl	80013e8 <HAL_GetTick>
 8008da2:	4602      	mov	r2, r0
 8008da4:	683b      	ldr	r3, [r7, #0]
 8008da6:	1ad3      	subs	r3, r2, r3
 8008da8:	69ba      	ldr	r2, [r7, #24]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d302      	bcc.n	8008db4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dae:	69bb      	ldr	r3, [r7, #24]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d101      	bne.n	8008db8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e04e      	b.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0304 	and.w	r3, r3, #4
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d037      	beq.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	2b80      	cmp	r3, #128	@ 0x80
 8008dca:	d034      	beq.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008dcc:	68bb      	ldr	r3, [r7, #8]
 8008dce:	2b40      	cmp	r3, #64	@ 0x40
 8008dd0:	d031      	beq.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	69db      	ldr	r3, [r3, #28]
 8008dd8:	f003 0308 	and.w	r3, r3, #8
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d110      	bne.n	8008e02 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2208      	movs	r2, #8
 8008de6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008de8:	68f8      	ldr	r0, [r7, #12]
 8008dea:	f000 f921 	bl	8009030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2208      	movs	r2, #8
 8008df2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e029      	b.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	69db      	ldr	r3, [r3, #28]
 8008e08:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008e10:	d111      	bne.n	8008e36 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008e1a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008e1c:	68f8      	ldr	r0, [r7, #12]
 8008e1e:	f000 f907 	bl	8009030 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	2220      	movs	r2, #32
 8008e26:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8008e32:	2303      	movs	r3, #3
 8008e34:	e00f      	b.n	8008e56 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	69da      	ldr	r2, [r3, #28]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	4013      	ands	r3, r2
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	429a      	cmp	r2, r3
 8008e44:	bf0c      	ite	eq
 8008e46:	2301      	moveq	r3, #1
 8008e48:	2300      	movne	r3, #0
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	461a      	mov	r2, r3
 8008e4e:	79fb      	ldrb	r3, [r7, #7]
 8008e50:	429a      	cmp	r2, r3
 8008e52:	d0a0      	beq.n	8008d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008e54:	2300      	movs	r3, #0
}
 8008e56:	4618      	mov	r0, r3
 8008e58:	3710      	adds	r7, #16
 8008e5a:	46bd      	mov	sp, r7
 8008e5c:	bd80      	pop	{r7, pc}
	...

08008e60 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b096      	sub	sp, #88	@ 0x58
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	4613      	mov	r3, r2
 8008e6c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	88fa      	ldrh	r2, [r7, #6]
 8008e78:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e7c:	68fb      	ldr	r3, [r7, #12]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	2222      	movs	r2, #34	@ 0x22
 8008e88:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d02d      	beq.n	8008ef2 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008e9c:	4a40      	ldr	r2, [pc, #256]	@ (8008fa0 <UART_Start_Receive_DMA+0x140>)
 8008e9e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008ea6:	4a3f      	ldr	r2, [pc, #252]	@ (8008fa4 <UART_Start_Receive_DMA+0x144>)
 8008ea8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eb0:	4a3d      	ldr	r2, [pc, #244]	@ (8008fa8 <UART_Start_Receive_DMA+0x148>)
 8008eb2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8008eba:	2200      	movs	r2, #0
 8008ebc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	3324      	adds	r3, #36	@ 0x24
 8008eca:	4619      	mov	r1, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ed0:	461a      	mov	r2, r3
 8008ed2:	88fb      	ldrh	r3, [r7, #6]
 8008ed4:	f7f8 ff74 	bl	8001dc0 <HAL_DMA_Start_IT>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d009      	beq.n	8008ef2 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2210      	movs	r2, #16
 8008ee2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	2220      	movs	r2, #32
 8008eea:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8008eee:	2301      	movs	r3, #1
 8008ef0:	e051      	b.n	8008f96 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	691b      	ldr	r3, [r3, #16]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d018      	beq.n	8008f2c <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f02:	e853 3f00 	ldrex	r3, [r3]
 8008f06:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008f0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	461a      	mov	r2, r3
 8008f16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008f18:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008f1a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008f1e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008f20:	e841 2300 	strex	r3, r2, [r1]
 8008f24:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008f26:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d1e6      	bne.n	8008efa <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	3308      	adds	r3, #8
 8008f32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f36:	e853 3f00 	ldrex	r3, [r3]
 8008f3a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f3e:	f043 0301 	orr.w	r3, r3, #1
 8008f42:	653b      	str	r3, [r7, #80]	@ 0x50
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	3308      	adds	r3, #8
 8008f4a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8008f4c:	637a      	str	r2, [r7, #52]	@ 0x34
 8008f4e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f50:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f52:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008f54:	e841 2300 	strex	r3, r2, [r1]
 8008f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d1e5      	bne.n	8008f2c <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	3308      	adds	r3, #8
 8008f66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	e853 3f00 	ldrex	r3, [r3]
 8008f6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008f76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	3308      	adds	r3, #8
 8008f7e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008f80:	623a      	str	r2, [r7, #32]
 8008f82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f84:	69f9      	ldr	r1, [r7, #28]
 8008f86:	6a3a      	ldr	r2, [r7, #32]
 8008f88:	e841 2300 	strex	r3, r2, [r1]
 8008f8c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f8e:	69bb      	ldr	r3, [r7, #24]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d1e5      	bne.n	8008f60 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8008f94:	2300      	movs	r3, #0
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3758      	adds	r7, #88	@ 0x58
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}
 8008f9e:	bf00      	nop
 8008fa0:	080091af 	.word	0x080091af
 8008fa4:	080092d7 	.word	0x080092d7
 8008fa8:	08009315 	.word	0x08009315

08008fac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008fac:	b480      	push	{r7}
 8008fae:	b08f      	sub	sp, #60	@ 0x3c
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	e853 3f00 	ldrex	r3, [r3]
 8008fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008fc2:	69fb      	ldr	r3, [r7, #28]
 8008fc4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008fc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	461a      	mov	r2, r3
 8008fd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008fd4:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fd6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008fd8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fda:	e841 2300 	strex	r3, r2, [r1]
 8008fde:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d1e6      	bne.n	8008fb4 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	3308      	adds	r3, #8
 8008fec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	e853 3f00 	ldrex	r3, [r3]
 8008ff4:	60bb      	str	r3, [r7, #8]
   return(result);
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8008ffc:	633b      	str	r3, [r7, #48]	@ 0x30
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3308      	adds	r3, #8
 8009004:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009006:	61ba      	str	r2, [r7, #24]
 8009008:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800900a:	6979      	ldr	r1, [r7, #20]
 800900c:	69ba      	ldr	r2, [r7, #24]
 800900e:	e841 2300 	strex	r3, r2, [r1]
 8009012:	613b      	str	r3, [r7, #16]
   return(result);
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	2b00      	cmp	r3, #0
 8009018:	d1e5      	bne.n	8008fe6 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2220      	movs	r2, #32
 800901e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8009022:	bf00      	nop
 8009024:	373c      	adds	r7, #60	@ 0x3c
 8009026:	46bd      	mov	sp, r7
 8009028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902c:	4770      	bx	lr
	...

08009030 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009030:	b480      	push	{r7}
 8009032:	b095      	sub	sp, #84	@ 0x54
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009040:	e853 3f00 	ldrex	r3, [r3]
 8009044:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009048:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800904c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	461a      	mov	r2, r3
 8009054:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009056:	643b      	str	r3, [r7, #64]	@ 0x40
 8009058:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800905c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800905e:	e841 2300 	strex	r3, r2, [r1]
 8009062:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009066:	2b00      	cmp	r3, #0
 8009068:	d1e6      	bne.n	8009038 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	3308      	adds	r3, #8
 8009070:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009072:	6a3b      	ldr	r3, [r7, #32]
 8009074:	e853 3f00 	ldrex	r3, [r3]
 8009078:	61fb      	str	r3, [r7, #28]
   return(result);
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	4b1e      	ldr	r3, [pc, #120]	@ (80090f8 <UART_EndRxTransfer+0xc8>)
 800907e:	4013      	ands	r3, r2
 8009080:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	3308      	adds	r3, #8
 8009088:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800908a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800908c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800908e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009090:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009092:	e841 2300 	strex	r3, r2, [r1]
 8009096:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800909a:	2b00      	cmp	r3, #0
 800909c:	d1e5      	bne.n	800906a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80090a2:	2b01      	cmp	r3, #1
 80090a4:	d118      	bne.n	80090d8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	e853 3f00 	ldrex	r3, [r3]
 80090b2:	60bb      	str	r3, [r7, #8]
   return(result);
 80090b4:	68bb      	ldr	r3, [r7, #8]
 80090b6:	f023 0310 	bic.w	r3, r3, #16
 80090ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	461a      	mov	r2, r3
 80090c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80090c4:	61bb      	str	r3, [r7, #24]
 80090c6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090c8:	6979      	ldr	r1, [r7, #20]
 80090ca:	69ba      	ldr	r2, [r7, #24]
 80090cc:	e841 2300 	strex	r3, r2, [r1]
 80090d0:	613b      	str	r3, [r7, #16]
   return(result);
 80090d2:	693b      	ldr	r3, [r7, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d1e6      	bne.n	80090a6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2220      	movs	r2, #32
 80090dc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80090ec:	bf00      	nop
 80090ee:	3754      	adds	r7, #84	@ 0x54
 80090f0:	46bd      	mov	sp, r7
 80090f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f6:	4770      	bx	lr
 80090f8:	effffffe 	.word	0xeffffffe

080090fc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80090fc:	b580      	push	{r7, lr}
 80090fe:	b090      	sub	sp, #64	@ 0x40
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009108:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	69db      	ldr	r3, [r3, #28]
 800910e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009112:	d037      	beq.n	8009184 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8009114:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009116:	2200      	movs	r2, #0
 8009118:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800911c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3308      	adds	r3, #8
 8009122:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009126:	e853 3f00 	ldrex	r3, [r3]
 800912a:	623b      	str	r3, [r7, #32]
   return(result);
 800912c:	6a3b      	ldr	r3, [r7, #32]
 800912e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009132:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009134:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	3308      	adds	r3, #8
 800913a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800913c:	633a      	str	r2, [r7, #48]	@ 0x30
 800913e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009140:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009142:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009144:	e841 2300 	strex	r3, r2, [r1]
 8009148:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800914a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1e5      	bne.n	800911c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009150:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	e853 3f00 	ldrex	r3, [r3]
 800915c:	60fb      	str	r3, [r7, #12]
   return(result);
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009164:	637b      	str	r3, [r7, #52]	@ 0x34
 8009166:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	461a      	mov	r2, r3
 800916c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800916e:	61fb      	str	r3, [r7, #28]
 8009170:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009172:	69b9      	ldr	r1, [r7, #24]
 8009174:	69fa      	ldr	r2, [r7, #28]
 8009176:	e841 2300 	strex	r3, r2, [r1]
 800917a:	617b      	str	r3, [r7, #20]
   return(result);
 800917c:	697b      	ldr	r3, [r7, #20]
 800917e:	2b00      	cmp	r3, #0
 8009180:	d1e6      	bne.n	8009150 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009182:	e002      	b.n	800918a <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8009184:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8009186:	f7f7 fd01 	bl	8000b8c <HAL_UART_TxCpltCallback>
}
 800918a:	bf00      	nop
 800918c:	3740      	adds	r7, #64	@ 0x40
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80091a0:	68f8      	ldr	r0, [r7, #12]
 80091a2:	f7fe fe17 	bl	8007dd4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80091a6:	bf00      	nop
 80091a8:	3710      	adds	r7, #16
 80091aa:	46bd      	mov	sp, r7
 80091ac:	bd80      	pop	{r7, pc}

080091ae <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80091ae:	b580      	push	{r7, lr}
 80091b0:	b09c      	sub	sp, #112	@ 0x70
 80091b2:	af00      	add	r7, sp, #0
 80091b4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ba:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	69db      	ldr	r3, [r3, #28]
 80091c0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80091c4:	d071      	beq.n	80092aa <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 80091c6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091c8:	2200      	movs	r2, #0
 80091ca:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80091ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80091d6:	e853 3f00 	ldrex	r3, [r3]
 80091da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80091dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091de:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80091e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80091e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	461a      	mov	r2, r3
 80091ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80091ec:	65bb      	str	r3, [r7, #88]	@ 0x58
 80091ee:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091f0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80091f2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80091f4:	e841 2300 	strex	r3, r2, [r1]
 80091f8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80091fa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d1e6      	bne.n	80091ce <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	3308      	adds	r3, #8
 8009206:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800920a:	e853 3f00 	ldrex	r3, [r3]
 800920e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009210:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009212:	f023 0301 	bic.w	r3, r3, #1
 8009216:	667b      	str	r3, [r7, #100]	@ 0x64
 8009218:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	3308      	adds	r3, #8
 800921e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009220:	647a      	str	r2, [r7, #68]	@ 0x44
 8009222:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009224:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009226:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009228:	e841 2300 	strex	r3, r2, [r1]
 800922c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800922e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009230:	2b00      	cmp	r3, #0
 8009232:	d1e5      	bne.n	8009200 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009234:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	3308      	adds	r3, #8
 800923a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	623b      	str	r3, [r7, #32]
   return(result);
 8009244:	6a3b      	ldr	r3, [r7, #32]
 8009246:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800924a:	663b      	str	r3, [r7, #96]	@ 0x60
 800924c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	3308      	adds	r3, #8
 8009252:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009254:	633a      	str	r2, [r7, #48]	@ 0x30
 8009256:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009258:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800925a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800925c:	e841 2300 	strex	r3, r2, [r1]
 8009260:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009264:	2b00      	cmp	r3, #0
 8009266:	d1e5      	bne.n	8009234 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009268:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800926a:	2220      	movs	r2, #32
 800926c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009270:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009272:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009274:	2b01      	cmp	r3, #1
 8009276:	d118      	bne.n	80092aa <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009278:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800927e:	693b      	ldr	r3, [r7, #16]
 8009280:	e853 3f00 	ldrex	r3, [r3]
 8009284:	60fb      	str	r3, [r7, #12]
   return(result);
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f023 0310 	bic.w	r3, r3, #16
 800928c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800928e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	461a      	mov	r2, r3
 8009294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009296:	61fb      	str	r3, [r7, #28]
 8009298:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929a:	69b9      	ldr	r1, [r7, #24]
 800929c:	69fa      	ldr	r2, [r7, #28]
 800929e:	e841 2300 	strex	r3, r2, [r1]
 80092a2:	617b      	str	r3, [r7, #20]
   return(result);
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d1e6      	bne.n	8009278 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80092aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ac:	2200      	movs	r2, #0
 80092ae:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092b2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d107      	bne.n	80092c8 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092be:	4619      	mov	r1, r3
 80092c0:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80092c2:	f7fe fd9b 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80092c6:	e002      	b.n	80092ce <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 80092c8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80092ca:	f7f7 fc6f 	bl	8000bac <HAL_UART_RxCpltCallback>
}
 80092ce:	bf00      	nop
 80092d0:	3770      	adds	r7, #112	@ 0x70
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}

080092d6 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80092d6:	b580      	push	{r7, lr}
 80092d8:	b084      	sub	sp, #16
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092e2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	2201      	movs	r2, #1
 80092e8:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d109      	bne.n	8009306 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80092f8:	085b      	lsrs	r3, r3, #1
 80092fa:	b29b      	uxth	r3, r3
 80092fc:	4619      	mov	r1, r3
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	f7fe fd7c 	bl	8007dfc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009304:	e002      	b.n	800930c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8009306:	68f8      	ldr	r0, [r7, #12]
 8009308:	f7f7 ff1e 	bl	8001148 <HAL_UART_RxHalfCpltCallback>
}
 800930c:	bf00      	nop
 800930e:	3710      	adds	r7, #16
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}

08009314 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b086      	sub	sp, #24
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009320:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8009322:	697b      	ldr	r3, [r7, #20]
 8009324:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009328:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800932a:	697b      	ldr	r3, [r7, #20]
 800932c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009330:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	689b      	ldr	r3, [r3, #8]
 8009338:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800933c:	2b80      	cmp	r3, #128	@ 0x80
 800933e:	d109      	bne.n	8009354 <UART_DMAError+0x40>
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	2b21      	cmp	r3, #33	@ 0x21
 8009344:	d106      	bne.n	8009354 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	2200      	movs	r2, #0
 800934a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800934e:	6978      	ldr	r0, [r7, #20]
 8009350:	f7ff fe2c 	bl	8008fac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8009354:	697b      	ldr	r3, [r7, #20]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	689b      	ldr	r3, [r3, #8]
 800935a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800935e:	2b40      	cmp	r3, #64	@ 0x40
 8009360:	d109      	bne.n	8009376 <UART_DMAError+0x62>
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	2b22      	cmp	r3, #34	@ 0x22
 8009366:	d106      	bne.n	8009376 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8009368:	697b      	ldr	r3, [r7, #20]
 800936a:	2200      	movs	r2, #0
 800936c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8009370:	6978      	ldr	r0, [r7, #20]
 8009372:	f7ff fe5d 	bl	8009030 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009376:	697b      	ldr	r3, [r7, #20]
 8009378:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800937c:	f043 0210 	orr.w	r2, r3, #16
 8009380:	697b      	ldr	r3, [r7, #20]
 8009382:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009386:	6978      	ldr	r0, [r7, #20]
 8009388:	f7fe fd2e 	bl	8007de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800938c:	bf00      	nop
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}

08009394 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80093b2:	68f8      	ldr	r0, [r7, #12]
 80093b4:	f7fe fd18 	bl	8007de8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80093b8:	bf00      	nop
 80093ba:	3710      	adds	r7, #16
 80093bc:	46bd      	mov	sp, r7
 80093be:	bd80      	pop	{r7, pc}

080093c0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b088      	sub	sp, #32
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	e853 3f00 	ldrex	r3, [r3]
 80093d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80093dc:	61fb      	str	r3, [r7, #28]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	461a      	mov	r2, r3
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	61bb      	str	r3, [r7, #24]
 80093e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093ea:	6979      	ldr	r1, [r7, #20]
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	e841 2300 	strex	r3, r2, [r1]
 80093f2:	613b      	str	r3, [r7, #16]
   return(result);
 80093f4:	693b      	ldr	r3, [r7, #16]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d1e6      	bne.n	80093c8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2220      	movs	r2, #32
 80093fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009408:	6878      	ldr	r0, [r7, #4]
 800940a:	f7f7 fbbf 	bl	8000b8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800940e:	bf00      	nop
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}

08009416 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009416:	b480      	push	{r7}
 8009418:	b083      	sub	sp, #12
 800941a:	af00      	add	r7, sp, #0
 800941c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009432:	bf00      	nop
 8009434:	370c      	adds	r7, #12
 8009436:	46bd      	mov	sp, r7
 8009438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943c:	4770      	bx	lr

0800943e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800943e:	b480      	push	{r7}
 8009440:	b083      	sub	sp, #12
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009446:	bf00      	nop
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr

08009452 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009452:	b480      	push	{r7}
 8009454:	b085      	sub	sp, #20
 8009456:	af00      	add	r7, sp, #0
 8009458:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009460:	2b01      	cmp	r3, #1
 8009462:	d101      	bne.n	8009468 <HAL_UARTEx_DisableFifoMode+0x16>
 8009464:	2302      	movs	r3, #2
 8009466:	e027      	b.n	80094b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2224      	movs	r2, #36	@ 0x24
 8009474:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	681a      	ldr	r2, [r3, #0]
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	681b      	ldr	r3, [r3, #0]
 800948a:	f022 0201 	bic.w	r2, r2, #1
 800948e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009496:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	68fa      	ldr	r2, [r7, #12]
 80094a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2220      	movs	r2, #32
 80094aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80094d4:	2b01      	cmp	r3, #1
 80094d6:	d101      	bne.n	80094dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80094d8:	2302      	movs	r3, #2
 80094da:	e02d      	b.n	8009538 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2201      	movs	r2, #1
 80094e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2224      	movs	r2, #36	@ 0x24
 80094e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681a      	ldr	r2, [r3, #0]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0201 	bic.w	r2, r2, #1
 8009502:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	689b      	ldr	r3, [r3, #8]
 800950a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	683a      	ldr	r2, [r7, #0]
 8009514:	430a      	orrs	r2, r1
 8009516:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009518:	6878      	ldr	r0, [r7, #4]
 800951a:	f000 f84f 	bl	80095bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	2220      	movs	r2, #32
 800952a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2200      	movs	r2, #0
 8009532:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8009536:	2300      	movs	r3, #0
}
 8009538:	4618      	mov	r0, r3
 800953a:	3710      	adds	r7, #16
 800953c:	46bd      	mov	sp, r7
 800953e:	bd80      	pop	{r7, pc}

08009540 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b084      	sub	sp, #16
 8009544:	af00      	add	r7, sp, #0
 8009546:	6078      	str	r0, [r7, #4]
 8009548:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009550:	2b01      	cmp	r3, #1
 8009552:	d101      	bne.n	8009558 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009554:	2302      	movs	r3, #2
 8009556:	e02d      	b.n	80095b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2224      	movs	r2, #36	@ 0x24
 8009564:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	681a      	ldr	r2, [r3, #0]
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f022 0201 	bic.w	r2, r2, #1
 800957e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	689b      	ldr	r3, [r3, #8]
 8009586:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	430a      	orrs	r2, r1
 8009592:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f000 f811 	bl	80095bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	68fa      	ldr	r2, [r7, #12]
 80095a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	2220      	movs	r2, #32
 80095a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80095b2:	2300      	movs	r3, #0
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}

080095bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80095bc:	b480      	push	{r7}
 80095be:	b085      	sub	sp, #20
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d108      	bne.n	80095de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80095dc:	e031      	b.n	8009642 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80095de:	2310      	movs	r3, #16
 80095e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80095e2:	2310      	movs	r3, #16
 80095e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	689b      	ldr	r3, [r3, #8]
 80095ec:	0e5b      	lsrs	r3, r3, #25
 80095ee:	b2db      	uxtb	r3, r3
 80095f0:	f003 0307 	and.w	r3, r3, #7
 80095f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	689b      	ldr	r3, [r3, #8]
 80095fc:	0f5b      	lsrs	r3, r3, #29
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	f003 0307 	and.w	r3, r3, #7
 8009604:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009606:	7bbb      	ldrb	r3, [r7, #14]
 8009608:	7b3a      	ldrb	r2, [r7, #12]
 800960a:	4911      	ldr	r1, [pc, #68]	@ (8009650 <UARTEx_SetNbDataToProcess+0x94>)
 800960c:	5c8a      	ldrb	r2, [r1, r2]
 800960e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009612:	7b3a      	ldrb	r2, [r7, #12]
 8009614:	490f      	ldr	r1, [pc, #60]	@ (8009654 <UARTEx_SetNbDataToProcess+0x98>)
 8009616:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009618:	fb93 f3f2 	sdiv	r3, r3, r2
 800961c:	b29a      	uxth	r2, r3
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009624:	7bfb      	ldrb	r3, [r7, #15]
 8009626:	7b7a      	ldrb	r2, [r7, #13]
 8009628:	4909      	ldr	r1, [pc, #36]	@ (8009650 <UARTEx_SetNbDataToProcess+0x94>)
 800962a:	5c8a      	ldrb	r2, [r1, r2]
 800962c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009630:	7b7a      	ldrb	r2, [r7, #13]
 8009632:	4908      	ldr	r1, [pc, #32]	@ (8009654 <UARTEx_SetNbDataToProcess+0x98>)
 8009634:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009636:	fb93 f3f2 	sdiv	r3, r3, r2
 800963a:	b29a      	uxth	r2, r3
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009642:	bf00      	nop
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr
 800964e:	bf00      	nop
 8009650:	08009714 	.word	0x08009714
 8009654:	0800971c 	.word	0x0800971c

08009658 <memset>:
 8009658:	4402      	add	r2, r0
 800965a:	4603      	mov	r3, r0
 800965c:	4293      	cmp	r3, r2
 800965e:	d100      	bne.n	8009662 <memset+0xa>
 8009660:	4770      	bx	lr
 8009662:	f803 1b01 	strb.w	r1, [r3], #1
 8009666:	e7f9      	b.n	800965c <memset+0x4>

08009668 <__libc_init_array>:
 8009668:	b570      	push	{r4, r5, r6, lr}
 800966a:	4d0d      	ldr	r5, [pc, #52]	@ (80096a0 <__libc_init_array+0x38>)
 800966c:	4c0d      	ldr	r4, [pc, #52]	@ (80096a4 <__libc_init_array+0x3c>)
 800966e:	1b64      	subs	r4, r4, r5
 8009670:	10a4      	asrs	r4, r4, #2
 8009672:	2600      	movs	r6, #0
 8009674:	42a6      	cmp	r6, r4
 8009676:	d109      	bne.n	800968c <__libc_init_array+0x24>
 8009678:	4d0b      	ldr	r5, [pc, #44]	@ (80096a8 <__libc_init_array+0x40>)
 800967a:	4c0c      	ldr	r4, [pc, #48]	@ (80096ac <__libc_init_array+0x44>)
 800967c:	f000 f826 	bl	80096cc <_init>
 8009680:	1b64      	subs	r4, r4, r5
 8009682:	10a4      	asrs	r4, r4, #2
 8009684:	2600      	movs	r6, #0
 8009686:	42a6      	cmp	r6, r4
 8009688:	d105      	bne.n	8009696 <__libc_init_array+0x2e>
 800968a:	bd70      	pop	{r4, r5, r6, pc}
 800968c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009690:	4798      	blx	r3
 8009692:	3601      	adds	r6, #1
 8009694:	e7ee      	b.n	8009674 <__libc_init_array+0xc>
 8009696:	f855 3b04 	ldr.w	r3, [r5], #4
 800969a:	4798      	blx	r3
 800969c:	3601      	adds	r6, #1
 800969e:	e7f2      	b.n	8009686 <__libc_init_array+0x1e>
 80096a0:	0800972c 	.word	0x0800972c
 80096a4:	0800972c 	.word	0x0800972c
 80096a8:	0800972c 	.word	0x0800972c
 80096ac:	08009730 	.word	0x08009730

080096b0 <memcpy>:
 80096b0:	440a      	add	r2, r1
 80096b2:	4291      	cmp	r1, r2
 80096b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80096b8:	d100      	bne.n	80096bc <memcpy+0xc>
 80096ba:	4770      	bx	lr
 80096bc:	b510      	push	{r4, lr}
 80096be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80096c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80096c6:	4291      	cmp	r1, r2
 80096c8:	d1f9      	bne.n	80096be <memcpy+0xe>
 80096ca:	bd10      	pop	{r4, pc}

080096cc <_init>:
 80096cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096ce:	bf00      	nop
 80096d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096d2:	bc08      	pop	{r3}
 80096d4:	469e      	mov	lr, r3
 80096d6:	4770      	bx	lr

080096d8 <_fini>:
 80096d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096da:	bf00      	nop
 80096dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096de:	bc08      	pop	{r3}
 80096e0:	469e      	mov	lr, r3
 80096e2:	4770      	bx	lr
