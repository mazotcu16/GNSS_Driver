
GNSS_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007764  080002cc  080002cc  000012cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08007a30  08007a30  00008a30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08007a68  08007a68  00008a68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08007a70  08007a70  00008a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08007a74  08007a74  00008a74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  24000000  08007a78  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000ab8  24000010  08007a88  00009010  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000ac8  08007a88  00009ac8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011f5e  00000000  00000000  0000903e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002598  00000000  00000000  0001af9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ba8  00000000  00000000  0001d538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000008ed  00000000  00000000  0001e0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003196c  00000000  00000000  0001e9cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000121b9  00000000  00000000  00050339  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0013fa69  00000000  00000000  000624f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001a1f5b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002f3c  00000000  00000000  001a1fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000049  00000000  00000000  001a4edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002cc <__do_global_dtors_aux>:
 80002cc:	b510      	push	{r4, lr}
 80002ce:	4c05      	ldr	r4, [pc, #20]	@ (80002e4 <__do_global_dtors_aux+0x18>)
 80002d0:	7823      	ldrb	r3, [r4, #0]
 80002d2:	b933      	cbnz	r3, 80002e2 <__do_global_dtors_aux+0x16>
 80002d4:	4b04      	ldr	r3, [pc, #16]	@ (80002e8 <__do_global_dtors_aux+0x1c>)
 80002d6:	b113      	cbz	r3, 80002de <__do_global_dtors_aux+0x12>
 80002d8:	4804      	ldr	r0, [pc, #16]	@ (80002ec <__do_global_dtors_aux+0x20>)
 80002da:	f3af 8000 	nop.w
 80002de:	2301      	movs	r3, #1
 80002e0:	7023      	strb	r3, [r4, #0]
 80002e2:	bd10      	pop	{r4, pc}
 80002e4:	24000010 	.word	0x24000010
 80002e8:	00000000 	.word	0x00000000
 80002ec:	08007a18 	.word	0x08007a18

080002f0 <frame_dummy>:
 80002f0:	b508      	push	{r3, lr}
 80002f2:	4b03      	ldr	r3, [pc, #12]	@ (8000300 <frame_dummy+0x10>)
 80002f4:	b11b      	cbz	r3, 80002fe <frame_dummy+0xe>
 80002f6:	4903      	ldr	r1, [pc, #12]	@ (8000304 <frame_dummy+0x14>)
 80002f8:	4803      	ldr	r0, [pc, #12]	@ (8000308 <frame_dummy+0x18>)
 80002fa:	f3af 8000 	nop.w
 80002fe:	bd08      	pop	{r3, pc}
 8000300:	00000000 	.word	0x00000000
 8000304:	24000014 	.word	0x24000014
 8000308:	08007a18 	.word	0x08007a18

0800030c <__aeabi_uldivmod>:
 800030c:	b953      	cbnz	r3, 8000324 <__aeabi_uldivmod+0x18>
 800030e:	b94a      	cbnz	r2, 8000324 <__aeabi_uldivmod+0x18>
 8000310:	2900      	cmp	r1, #0
 8000312:	bf08      	it	eq
 8000314:	2800      	cmpeq	r0, #0
 8000316:	bf1c      	itt	ne
 8000318:	f04f 31ff 	movne.w	r1, #4294967295
 800031c:	f04f 30ff 	movne.w	r0, #4294967295
 8000320:	f000 b96a 	b.w	80005f8 <__aeabi_idiv0>
 8000324:	f1ad 0c08 	sub.w	ip, sp, #8
 8000328:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800032c:	f000 f806 	bl	800033c <__udivmoddi4>
 8000330:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000334:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000338:	b004      	add	sp, #16
 800033a:	4770      	bx	lr

0800033c <__udivmoddi4>:
 800033c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000340:	9d08      	ldr	r5, [sp, #32]
 8000342:	460c      	mov	r4, r1
 8000344:	2b00      	cmp	r3, #0
 8000346:	d14e      	bne.n	80003e6 <__udivmoddi4+0xaa>
 8000348:	4694      	mov	ip, r2
 800034a:	458c      	cmp	ip, r1
 800034c:	4686      	mov	lr, r0
 800034e:	fab2 f282 	clz	r2, r2
 8000352:	d962      	bls.n	800041a <__udivmoddi4+0xde>
 8000354:	b14a      	cbz	r2, 800036a <__udivmoddi4+0x2e>
 8000356:	f1c2 0320 	rsb	r3, r2, #32
 800035a:	4091      	lsls	r1, r2
 800035c:	fa20 f303 	lsr.w	r3, r0, r3
 8000360:	fa0c fc02 	lsl.w	ip, ip, r2
 8000364:	4319      	orrs	r1, r3
 8000366:	fa00 fe02 	lsl.w	lr, r0, r2
 800036a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800036e:	fa1f f68c 	uxth.w	r6, ip
 8000372:	fbb1 f4f7 	udiv	r4, r1, r7
 8000376:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800037a:	fb07 1114 	mls	r1, r7, r4, r1
 800037e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000382:	fb04 f106 	mul.w	r1, r4, r6
 8000386:	4299      	cmp	r1, r3
 8000388:	d90a      	bls.n	80003a0 <__udivmoddi4+0x64>
 800038a:	eb1c 0303 	adds.w	r3, ip, r3
 800038e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000392:	f080 8112 	bcs.w	80005ba <__udivmoddi4+0x27e>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 810f 	bls.w	80005ba <__udivmoddi4+0x27e>
 800039c:	3c02      	subs	r4, #2
 800039e:	4463      	add	r3, ip
 80003a0:	1a59      	subs	r1, r3, r1
 80003a2:	fa1f f38e 	uxth.w	r3, lr
 80003a6:	fbb1 f0f7 	udiv	r0, r1, r7
 80003aa:	fb07 1110 	mls	r1, r7, r0, r1
 80003ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b2:	fb00 f606 	mul.w	r6, r0, r6
 80003b6:	429e      	cmp	r6, r3
 80003b8:	d90a      	bls.n	80003d0 <__udivmoddi4+0x94>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c2:	f080 80fc 	bcs.w	80005be <__udivmoddi4+0x282>
 80003c6:	429e      	cmp	r6, r3
 80003c8:	f240 80f9 	bls.w	80005be <__udivmoddi4+0x282>
 80003cc:	4463      	add	r3, ip
 80003ce:	3802      	subs	r0, #2
 80003d0:	1b9b      	subs	r3, r3, r6
 80003d2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003d6:	2100      	movs	r1, #0
 80003d8:	b11d      	cbz	r5, 80003e2 <__udivmoddi4+0xa6>
 80003da:	40d3      	lsrs	r3, r2
 80003dc:	2200      	movs	r2, #0
 80003de:	e9c5 3200 	strd	r3, r2, [r5]
 80003e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d905      	bls.n	80003f6 <__udivmoddi4+0xba>
 80003ea:	b10d      	cbz	r5, 80003f0 <__udivmoddi4+0xb4>
 80003ec:	e9c5 0100 	strd	r0, r1, [r5]
 80003f0:	2100      	movs	r1, #0
 80003f2:	4608      	mov	r0, r1
 80003f4:	e7f5      	b.n	80003e2 <__udivmoddi4+0xa6>
 80003f6:	fab3 f183 	clz	r1, r3
 80003fa:	2900      	cmp	r1, #0
 80003fc:	d146      	bne.n	800048c <__udivmoddi4+0x150>
 80003fe:	42a3      	cmp	r3, r4
 8000400:	d302      	bcc.n	8000408 <__udivmoddi4+0xcc>
 8000402:	4290      	cmp	r0, r2
 8000404:	f0c0 80f0 	bcc.w	80005e8 <__udivmoddi4+0x2ac>
 8000408:	1a86      	subs	r6, r0, r2
 800040a:	eb64 0303 	sbc.w	r3, r4, r3
 800040e:	2001      	movs	r0, #1
 8000410:	2d00      	cmp	r5, #0
 8000412:	d0e6      	beq.n	80003e2 <__udivmoddi4+0xa6>
 8000414:	e9c5 6300 	strd	r6, r3, [r5]
 8000418:	e7e3      	b.n	80003e2 <__udivmoddi4+0xa6>
 800041a:	2a00      	cmp	r2, #0
 800041c:	f040 8090 	bne.w	8000540 <__udivmoddi4+0x204>
 8000420:	eba1 040c 	sub.w	r4, r1, ip
 8000424:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	2101      	movs	r1, #1
 800042e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000432:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000436:	fb08 4416 	mls	r4, r8, r6, r4
 800043a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800043e:	fb07 f006 	mul.w	r0, r7, r6
 8000442:	4298      	cmp	r0, r3
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x11c>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f106 34ff 	add.w	r4, r6, #4294967295
 800044e:	d202      	bcs.n	8000456 <__udivmoddi4+0x11a>
 8000450:	4298      	cmp	r0, r3
 8000452:	f200 80cd 	bhi.w	80005f0 <__udivmoddi4+0x2b4>
 8000456:	4626      	mov	r6, r4
 8000458:	1a1c      	subs	r4, r3, r0
 800045a:	fa1f f38e 	uxth.w	r3, lr
 800045e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000462:	fb08 4410 	mls	r4, r8, r0, r4
 8000466:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800046a:	fb00 f707 	mul.w	r7, r0, r7
 800046e:	429f      	cmp	r7, r3
 8000470:	d908      	bls.n	8000484 <__udivmoddi4+0x148>
 8000472:	eb1c 0303 	adds.w	r3, ip, r3
 8000476:	f100 34ff 	add.w	r4, r0, #4294967295
 800047a:	d202      	bcs.n	8000482 <__udivmoddi4+0x146>
 800047c:	429f      	cmp	r7, r3
 800047e:	f200 80b0 	bhi.w	80005e2 <__udivmoddi4+0x2a6>
 8000482:	4620      	mov	r0, r4
 8000484:	1bdb      	subs	r3, r3, r7
 8000486:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800048a:	e7a5      	b.n	80003d8 <__udivmoddi4+0x9c>
 800048c:	f1c1 0620 	rsb	r6, r1, #32
 8000490:	408b      	lsls	r3, r1
 8000492:	fa22 f706 	lsr.w	r7, r2, r6
 8000496:	431f      	orrs	r7, r3
 8000498:	fa20 fc06 	lsr.w	ip, r0, r6
 800049c:	fa04 f301 	lsl.w	r3, r4, r1
 80004a0:	ea43 030c 	orr.w	r3, r3, ip
 80004a4:	40f4      	lsrs	r4, r6
 80004a6:	fa00 f801 	lsl.w	r8, r0, r1
 80004aa:	0c38      	lsrs	r0, r7, #16
 80004ac:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80004b0:	fbb4 fef0 	udiv	lr, r4, r0
 80004b4:	fa1f fc87 	uxth.w	ip, r7
 80004b8:	fb00 441e 	mls	r4, r0, lr, r4
 80004bc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004c0:	fb0e f90c 	mul.w	r9, lr, ip
 80004c4:	45a1      	cmp	r9, r4
 80004c6:	fa02 f201 	lsl.w	r2, r2, r1
 80004ca:	d90a      	bls.n	80004e2 <__udivmoddi4+0x1a6>
 80004cc:	193c      	adds	r4, r7, r4
 80004ce:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004d2:	f080 8084 	bcs.w	80005de <__udivmoddi4+0x2a2>
 80004d6:	45a1      	cmp	r9, r4
 80004d8:	f240 8081 	bls.w	80005de <__udivmoddi4+0x2a2>
 80004dc:	f1ae 0e02 	sub.w	lr, lr, #2
 80004e0:	443c      	add	r4, r7
 80004e2:	eba4 0409 	sub.w	r4, r4, r9
 80004e6:	fa1f f983 	uxth.w	r9, r3
 80004ea:	fbb4 f3f0 	udiv	r3, r4, r0
 80004ee:	fb00 4413 	mls	r4, r0, r3, r4
 80004f2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004f6:	fb03 fc0c 	mul.w	ip, r3, ip
 80004fa:	45a4      	cmp	ip, r4
 80004fc:	d907      	bls.n	800050e <__udivmoddi4+0x1d2>
 80004fe:	193c      	adds	r4, r7, r4
 8000500:	f103 30ff 	add.w	r0, r3, #4294967295
 8000504:	d267      	bcs.n	80005d6 <__udivmoddi4+0x29a>
 8000506:	45a4      	cmp	ip, r4
 8000508:	d965      	bls.n	80005d6 <__udivmoddi4+0x29a>
 800050a:	3b02      	subs	r3, #2
 800050c:	443c      	add	r4, r7
 800050e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000512:	fba0 9302 	umull	r9, r3, r0, r2
 8000516:	eba4 040c 	sub.w	r4, r4, ip
 800051a:	429c      	cmp	r4, r3
 800051c:	46ce      	mov	lr, r9
 800051e:	469c      	mov	ip, r3
 8000520:	d351      	bcc.n	80005c6 <__udivmoddi4+0x28a>
 8000522:	d04e      	beq.n	80005c2 <__udivmoddi4+0x286>
 8000524:	b155      	cbz	r5, 800053c <__udivmoddi4+0x200>
 8000526:	ebb8 030e 	subs.w	r3, r8, lr
 800052a:	eb64 040c 	sbc.w	r4, r4, ip
 800052e:	fa04 f606 	lsl.w	r6, r4, r6
 8000532:	40cb      	lsrs	r3, r1
 8000534:	431e      	orrs	r6, r3
 8000536:	40cc      	lsrs	r4, r1
 8000538:	e9c5 6400 	strd	r6, r4, [r5]
 800053c:	2100      	movs	r1, #0
 800053e:	e750      	b.n	80003e2 <__udivmoddi4+0xa6>
 8000540:	f1c2 0320 	rsb	r3, r2, #32
 8000544:	fa20 f103 	lsr.w	r1, r0, r3
 8000548:	fa0c fc02 	lsl.w	ip, ip, r2
 800054c:	fa24 f303 	lsr.w	r3, r4, r3
 8000550:	4094      	lsls	r4, r2
 8000552:	430c      	orrs	r4, r1
 8000554:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000558:	fa00 fe02 	lsl.w	lr, r0, r2
 800055c:	fa1f f78c 	uxth.w	r7, ip
 8000560:	fbb3 f0f8 	udiv	r0, r3, r8
 8000564:	fb08 3110 	mls	r1, r8, r0, r3
 8000568:	0c23      	lsrs	r3, r4, #16
 800056a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800056e:	fb00 f107 	mul.w	r1, r0, r7
 8000572:	4299      	cmp	r1, r3
 8000574:	d908      	bls.n	8000588 <__udivmoddi4+0x24c>
 8000576:	eb1c 0303 	adds.w	r3, ip, r3
 800057a:	f100 36ff 	add.w	r6, r0, #4294967295
 800057e:	d22c      	bcs.n	80005da <__udivmoddi4+0x29e>
 8000580:	4299      	cmp	r1, r3
 8000582:	d92a      	bls.n	80005da <__udivmoddi4+0x29e>
 8000584:	3802      	subs	r0, #2
 8000586:	4463      	add	r3, ip
 8000588:	1a5b      	subs	r3, r3, r1
 800058a:	b2a4      	uxth	r4, r4
 800058c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000590:	fb08 3311 	mls	r3, r8, r1, r3
 8000594:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000598:	fb01 f307 	mul.w	r3, r1, r7
 800059c:	42a3      	cmp	r3, r4
 800059e:	d908      	bls.n	80005b2 <__udivmoddi4+0x276>
 80005a0:	eb1c 0404 	adds.w	r4, ip, r4
 80005a4:	f101 36ff 	add.w	r6, r1, #4294967295
 80005a8:	d213      	bcs.n	80005d2 <__udivmoddi4+0x296>
 80005aa:	42a3      	cmp	r3, r4
 80005ac:	d911      	bls.n	80005d2 <__udivmoddi4+0x296>
 80005ae:	3902      	subs	r1, #2
 80005b0:	4464      	add	r4, ip
 80005b2:	1ae4      	subs	r4, r4, r3
 80005b4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80005b8:	e739      	b.n	800042e <__udivmoddi4+0xf2>
 80005ba:	4604      	mov	r4, r0
 80005bc:	e6f0      	b.n	80003a0 <__udivmoddi4+0x64>
 80005be:	4608      	mov	r0, r1
 80005c0:	e706      	b.n	80003d0 <__udivmoddi4+0x94>
 80005c2:	45c8      	cmp	r8, r9
 80005c4:	d2ae      	bcs.n	8000524 <__udivmoddi4+0x1e8>
 80005c6:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ca:	eb63 0c07 	sbc.w	ip, r3, r7
 80005ce:	3801      	subs	r0, #1
 80005d0:	e7a8      	b.n	8000524 <__udivmoddi4+0x1e8>
 80005d2:	4631      	mov	r1, r6
 80005d4:	e7ed      	b.n	80005b2 <__udivmoddi4+0x276>
 80005d6:	4603      	mov	r3, r0
 80005d8:	e799      	b.n	800050e <__udivmoddi4+0x1d2>
 80005da:	4630      	mov	r0, r6
 80005dc:	e7d4      	b.n	8000588 <__udivmoddi4+0x24c>
 80005de:	46d6      	mov	lr, sl
 80005e0:	e77f      	b.n	80004e2 <__udivmoddi4+0x1a6>
 80005e2:	4463      	add	r3, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e74d      	b.n	8000484 <__udivmoddi4+0x148>
 80005e8:	4606      	mov	r6, r0
 80005ea:	4623      	mov	r3, r4
 80005ec:	4608      	mov	r0, r1
 80005ee:	e70f      	b.n	8000410 <__udivmoddi4+0xd4>
 80005f0:	3e02      	subs	r6, #2
 80005f2:	4463      	add	r3, ip
 80005f4:	e730      	b.n	8000458 <__udivmoddi4+0x11c>
 80005f6:	bf00      	nop

080005f8 <__aeabi_idiv0>:
 80005f8:	4770      	bx	lr
 80005fa:	bf00      	nop

080005fc <GNSS_Tanimla>:
#include "SysTick_Timer.h"
U_Blox_frame_high_layer U_Blox_frame_tx;
U_Blox_frame_high_layer U_Blox_frame_rx;
int b=0;
static uint32_t zaman;
void GNSS_Tanimla(GNSS *GNSS_t) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
	U_Blox_Init();
 8000604:	f000 f8e8 	bl	80007d8 <U_Blox_Init>
	for (int i = 0; i < 26; i++) {
 8000608:	2300      	movs	r3, #0
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	e008      	b.n	8000620 <GNSS_Tanimla+0x24>
		U_Blox_frame_tx.payload.data[i] = 0;
 800060e:	4a2e      	ldr	r2, [pc, #184]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	4413      	add	r3, r2
 8000614:	3304      	adds	r3, #4
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 26; i++) {
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	3301      	adds	r3, #1
 800061e:	60fb      	str	r3, [r7, #12]
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	2b19      	cmp	r3, #25
 8000624:	ddf3      	ble.n	800060e <GNSS_Tanimla+0x12>
	}
	U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_CFG; //config classi
 8000626:	4b28      	ldr	r3, [pc, #160]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000628:	2206      	movs	r2, #6
 800062a:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PRT; //Port
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800062e:	2200      	movs	r2, #0
 8000630:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Flags_t.bit_s.extended_Tx_Timeout_u1 =
 8000632:	4a25      	ldr	r2, [pc, #148]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000634:	7d13      	ldrb	r3, [r2, #20]
 8000636:	f36f 0341 	bfc	r3, #1, #1
 800063a:	7513      	strb	r3, [r2, #20]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.char_len_1_0_u2 =
 800063c:	4a22      	ldr	r2, [pc, #136]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800063e:	7a13      	ldrb	r3, [r2, #8]
 8000640:	f043 03c0 	orr.w	r3, r3, #192	@ 0xc0
 8000644:	7213      	strb	r3, [r2, #8]
			3;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.reserved_5_0_u6 =
 8000646:	4a20      	ldr	r2, [pc, #128]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000648:	7a13      	ldrb	r3, [r2, #8]
 800064a:	2110      	movs	r1, #16
 800064c:	f361 0305 	bfi	r3, r1, #0, #6
 8000650:	7213      	strb	r3, [r2, #8]
			16;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.n_stop_bits_1_0_u2 =
 8000652:	4a1d      	ldr	r2, [pc, #116]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000654:	7a53      	ldrb	r3, [r2, #9]
 8000656:	f36f 1305 	bfc	r3, #4, #2
 800065a:	7253      	strb	r3, [r2, #9]
			0;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Mode_t.bit_s.parity_2_0_u3 =
 800065c:	4a1a      	ldr	r2, [pc, #104]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800065e:	7a53      	ldrb	r3, [r2, #9]
 8000660:	2104      	movs	r1, #4
 8000662:	f361 0343 	bfi	r3, r1, #1, #3
 8000666:	7253      	strb	r3, [r2, #9]
			4;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.baudrate = 38400;
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800066a:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800066e:	60da      	str	r2, [r3, #12]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.Tx_Ready_t.u16 = 0;
 8000670:	4b15      	ldr	r3, [pc, #84]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000672:	2200      	movs	r2, #0
 8000674:	80da      	strh	r2, [r3, #6]
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.in_Proto_Mask_t.bit_s.in_Ubx_u1 =
 8000676:	4a14      	ldr	r2, [pc, #80]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000678:	7c13      	ldrb	r3, [r2, #16]
 800067a:	f043 0301 	orr.w	r3, r3, #1
 800067e:	7413      	strb	r3, [r2, #16]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.out_Proto_Mask_t.bit_s.out_Ubx_u1 =
 8000680:	4a11      	ldr	r2, [pc, #68]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000682:	7c93      	ldrb	r3, [r2, #18]
 8000684:	f043 0301 	orr.w	r3, r3, #1
 8000688:	7493      	strb	r3, [r2, #18]
			1;
	U_Blox_frame_tx.payload.U_Blox_Payload_Cfg_Prt_t.port_id = 1;
 800068a:	4b0f      	ldr	r3, [pc, #60]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 800068c:	2201      	movs	r2, #1
 800068e:	711a      	strb	r2, [r3, #4]
	U_Blox_frame_tx.length = UBX_CFG_PRT_LEN;
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000692:	2214      	movs	r2, #20
 8000694:	805a      	strh	r2, [r3, #2]
	U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000696:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <GNSS_Tanimla+0xcc>)
 8000698:	f000 f92c 	bl	80008f4 <U_Blox_Set_Frame>
	if(U_Blox_Is_Packet_Ready_To_Send())
 800069c:	f000 f9ee 	bl	8000a7c <U_Blox_Is_Packet_Ready_To_Send>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <GNSS_Tanimla+0xae>
	{
		U_Blox_Send_Packet();
 80006a6:	f000 f9f9 	bl	8000a9c <U_Blox_Send_Packet>
	}
	U_Blox_Send_Frame();
 80006aa:	f000 f961 	bl	8000970 <U_Blox_Send_Frame>
	//while(!U_Blox_Is_Packet_Ready());
	GNSS_t->SM=SM_GNSS_WAIT_FOR_REPLY;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2201      	movs	r2, #1
 80006b2:	741a      	strb	r2, [r3, #16]
	zaman=SystickGetMs();
 80006b4:	f000 fd7a 	bl	80011ac <SystickGetMs>
 80006b8:	4603      	mov	r3, r0
 80006ba:	4a04      	ldr	r2, [pc, #16]	@ (80006cc <GNSS_Tanimla+0xd0>)
 80006bc:	6013      	str	r3, [r2, #0]
}
 80006be:	bf00      	nop
 80006c0:	3710      	adds	r7, #16
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	2400002c 	.word	0x2400002c
 80006cc:	24000420 	.word	0x24000420

080006d0 <GNSS_Veri_Al>:
uint8_t GNSS_Veri_Al(GNSS *GNSS_t) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
	if(SystickCheckMs(zaman,500))
 80006d8:	4b36      	ldr	r3, [pc, #216]	@ (80007b4 <GNSS_Veri_Al+0xe4>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fd6f 	bl	80011c4 <SystickCheckMs>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d01c      	beq.n	8000726 <GNSS_Veri_Al+0x56>
	{
	U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_NAV;
 80006ec:	4b32      	ldr	r3, [pc, #200]	@ (80007b8 <GNSS_Veri_Al+0xe8>)
 80006ee:	2201      	movs	r2, #1
 80006f0:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PVT;
 80006f2:	4b31      	ldr	r3, [pc, #196]	@ (80007b8 <GNSS_Veri_Al+0xe8>)
 80006f4:	2207      	movs	r2, #7
 80006f6:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_tx.length = 0;
 80006f8:	4b2f      	ldr	r3, [pc, #188]	@ (80007b8 <GNSS_Veri_Al+0xe8>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	805a      	strh	r2, [r3, #2]
	U_Blox_Set_Frame(&U_Blox_frame_tx);
 80006fe:	482e      	ldr	r0, [pc, #184]	@ (80007b8 <GNSS_Veri_Al+0xe8>)
 8000700:	f000 f8f8 	bl	80008f4 <U_Blox_Set_Frame>
	if(U_Blox_Is_Packet_Ready_To_Send())
 8000704:	f000 f9ba 	bl	8000a7c <U_Blox_Is_Packet_Ready_To_Send>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d004      	beq.n	8000718 <GNSS_Veri_Al+0x48>
	{
		U_Blox_Send_Packet();
 800070e:	f000 f9c5 	bl	8000a9c <U_Blox_Send_Packet>
		GNSS_t->SM=SM_GNSS_IDLE;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	2200      	movs	r2, #0
 8000716:	741a      	strb	r2, [r3, #16]
	}
	U_Blox_Send_Frame();
 8000718:	f000 f92a 	bl	8000970 <U_Blox_Send_Frame>
	zaman=SystickGetMs();
 800071c:	f000 fd46 	bl	80011ac <SystickGetMs>
 8000720:	4603      	mov	r3, r0
 8000722:	4a24      	ldr	r2, [pc, #144]	@ (80007b4 <GNSS_Veri_Al+0xe4>)
 8000724:	6013      	str	r3, [r2, #0]
	}

	if (U_Blox_Is_Packet_Ready()) {
 8000726:	f000 f999 	bl	8000a5c <U_Blox_Is_Packet_Ready>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d03b      	beq.n	80007a8 <GNSS_Veri_Al+0xd8>
		U_Blox_Get_Package(&U_Blox_frame_rx);
 8000730:	4822      	ldr	r0, [pc, #136]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000732:	f000 f9d9 	bl	8000ae8 <U_Blox_Get_Package>
		if (U_Blox_frame_rx.message_class == UBX_MESSAGE_CLASS_NAV) {
 8000736:	4b21      	ldr	r3, [pc, #132]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b01      	cmp	r3, #1
 800073c:	d129      	bne.n	8000792 <GNSS_Veri_Al+0xc2>
			GNSS_t->ay = U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.month;
 800073e:	4b1f      	ldr	r3, [pc, #124]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000740:	7a9a      	ldrb	r2, [r3, #10]
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	709a      	strb	r2, [r3, #2]
			GNSS_t->boylam =
					U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lon;
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000748:	69da      	ldr	r2, [r3, #28]
			GNSS_t->boylam =
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	609a      	str	r2, [r3, #8]
			GNSS_t->enlem = U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.lat;
 800074e:	4b1b      	ldr	r3, [pc, #108]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000750:	6a1a      	ldr	r2, [r3, #32]
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	60da      	str	r2, [r3, #12]
			GNSS_t->gun = U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.day;
 8000756:	4b19      	ldr	r3, [pc, #100]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000758:	7ada      	ldrb	r2, [r3, #11]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	70da      	strb	r2, [r3, #3]
			GNSS_t->dakika =
					U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.min;
 800075e:	4b17      	ldr	r3, [pc, #92]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000760:	7b5a      	ldrb	r2, [r3, #13]
			GNSS_t->dakika =
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	711a      	strb	r2, [r3, #4]
			GNSS_t->yil = U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.year;
 8000766:	4b15      	ldr	r3, [pc, #84]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000768:	891a      	ldrh	r2, [r3, #8]
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	801a      	strh	r2, [r3, #0]
			GNSS_t->saniye =
					U_Blox_frame_rx.payload.U_Blox_Payload_Nav_Pvt_t.sec;
 800076e:	4b13      	ldr	r3, [pc, #76]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000770:	7b9a      	ldrb	r2, [r3, #14]
			GNSS_t->saniye =
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	715a      	strb	r2, [r3, #5]
			U_Blox_frame_tx.message_class = UBX_MESSAGE_CLASS_NAV;
 8000776:	4b10      	ldr	r3, [pc, #64]	@ (80007b8 <GNSS_Veri_Al+0xe8>)
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
			U_Blox_frame_tx.message_id = UBX_MESSAGE_ID_PVT;
 800077c:	4b0e      	ldr	r3, [pc, #56]	@ (80007b8 <GNSS_Veri_Al+0xe8>)
 800077e:	2207      	movs	r2, #7
 8000780:	705a      	strb	r2, [r3, #1]
			U_Blox_frame_tx.length = 0;
 8000782:	4b0d      	ldr	r3, [pc, #52]	@ (80007b8 <GNSS_Veri_Al+0xe8>)
 8000784:	2200      	movs	r2, #0
 8000786:	805a      	strh	r2, [r3, #2]
			U_Blox_Set_Frame(&U_Blox_frame_tx);
 8000788:	480b      	ldr	r0, [pc, #44]	@ (80007b8 <GNSS_Veri_Al+0xe8>)
 800078a:	f000 f8b3 	bl	80008f4 <U_Blox_Set_Frame>
			U_Blox_Send_Frame();
 800078e:	f000 f8ef 	bl	8000970 <U_Blox_Send_Frame>
		}
		if (U_Blox_frame_rx.message_class == 5) {
 8000792:	4b0a      	ldr	r3, [pc, #40]	@ (80007bc <GNSS_Veri_Al+0xec>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b05      	cmp	r3, #5
 8000798:	d104      	bne.n	80007a4 <GNSS_Veri_Al+0xd4>
			b++;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <GNSS_Veri_Al+0xf0>)
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	3301      	adds	r3, #1
 80007a0:	4a07      	ldr	r2, [pc, #28]	@ (80007c0 <GNSS_Veri_Al+0xf0>)
 80007a2:	6013      	str	r3, [r2, #0]
		}
        return 1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	e000      	b.n	80007aa <GNSS_Veri_Al+0xda>
	}
	else{
		return 0;
 80007a8:	2300      	movs	r3, #0
	}
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	24000420 	.word	0x24000420
 80007b8:	2400002c 	.word	0x2400002c
 80007bc:	24000224 	.word	0x24000224
 80007c0:	2400041c 	.word	0x2400041c

080007c4 <GNSS_Gorev>:

void GNSS_Gorev(GNSS *GNSS_t) {
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
	U_Blox_Task();
 80007cc:	f000 f816 	bl	80007fc <U_Blox_Task>
}
 80007d0:	bf00      	nop
 80007d2:	3708      	adds	r7, #8
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <U_Blox_Init>:
	} Sm;
	uint8_t Buffer[500];
	uint16_t buffer_index;
} U_Blox_Tx;

void U_Blox_Init() {
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
	U_Blox_Rx.Sm = SM_RX_IDLE;
 80007dc:	4b05      	ldr	r3, [pc, #20]	@ (80007f4 <U_Blox_Init+0x1c>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
	U_Blox_Tx.Sm=SM_TX_IDLE;
 80007e2:	4b05      	ldr	r3, [pc, #20]	@ (80007f8 <U_Blox_Init+0x20>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	24000620 	.word	0x24000620
 80007f8:	24000818 	.word	0x24000818

080007fc <U_Blox_Task>:
void U_Blox_Task() {
 80007fc:	b590      	push	{r4, r7, lr}
 80007fe:	b083      	sub	sp, #12
 8000800:	af00      	add	r7, sp, #0
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t;
	switch (U_Blox_Tx.Sm) {
 8000802:	4b38      	ldr	r3, [pc, #224]	@ (80008e4 <U_Blox_Task+0xe8>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	2b02      	cmp	r3, #2
 8000808:	d005      	beq.n	8000816 <U_Blox_Task+0x1a>
 800080a:	2b02      	cmp	r3, #2
 800080c:	dc27      	bgt.n	800085e <U_Blox_Task+0x62>
 800080e:	2b00      	cmp	r3, #0
 8000810:	d022      	beq.n	8000858 <U_Blox_Task+0x5c>
 8000812:	2b01      	cmp	r3, #1
	case SM_TX_IDLE:
		break;
	case SM_TX_PREPARE:
		break;
 8000814:	e023      	b.n	800085e <U_Blox_Task+0x62>
	case SM_TX_SEND:
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Tx.Buffer;
 8000816:	4b34      	ldr	r3, [pc, #208]	@ (80008e8 <U_Blox_Task+0xec>)
 8000818:	607b      	str	r3, [r7, #4]
		while (U_Blox_Tx.buffer_index < U_Blox_frame_low_layer_t->length + 8)
 800081a:	e009      	b.n	8000830 <U_Blox_Task+0x34>
		{
				U_Blox_Send_Data(U_Blox_Tx.Buffer[U_Blox_Tx.buffer_index]);
 800081c:	4b31      	ldr	r3, [pc, #196]	@ (80008e4 <U_Blox_Task+0xe8>)
 800081e:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000822:	461a      	mov	r2, r3
 8000824:	4b2f      	ldr	r3, [pc, #188]	@ (80008e4 <U_Blox_Task+0xe8>)
 8000826:	4413      	add	r3, r2
 8000828:	785b      	ldrb	r3, [r3, #1]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f94a 	bl	8000ac4 <U_Blox_Send_Data>
		while (U_Blox_Tx.buffer_index < U_Blox_frame_low_layer_t->length + 8)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	889b      	ldrh	r3, [r3, #4]
 8000834:	3307      	adds	r3, #7
 8000836:	4a2b      	ldr	r2, [pc, #172]	@ (80008e4 <U_Blox_Task+0xe8>)
 8000838:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 800083c:	4293      	cmp	r3, r2
 800083e:	daed      	bge.n	800081c <U_Blox_Task+0x20>
		}
		if(U_Blox_Tx.buffer_index >= U_Blox_frame_low_layer_t->length + 8)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	889b      	ldrh	r3, [r3, #4]
 8000844:	3307      	adds	r3, #7
 8000846:	4a27      	ldr	r2, [pc, #156]	@ (80008e4 <U_Blox_Task+0xe8>)
 8000848:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 800084c:	4293      	cmp	r3, r2
 800084e:	da05      	bge.n	800085c <U_Blox_Task+0x60>
		{
			U_Blox_Tx.Sm=SM_TX_IDLE;
 8000850:	4b24      	ldr	r3, [pc, #144]	@ (80008e4 <U_Blox_Task+0xe8>)
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
		}
		break;
 8000856:	e001      	b.n	800085c <U_Blox_Task+0x60>
		break;
 8000858:	bf00      	nop
 800085a:	e000      	b.n	800085e <U_Blox_Task+0x62>
		break;
 800085c:	bf00      	nop
	}
	switch (U_Blox_Rx.Sm) {
 800085e:	4b23      	ldr	r3, [pc, #140]	@ (80008ec <U_Blox_Task+0xf0>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <U_Blox_Task+0x6e>
 8000866:	2b01      	cmp	r3, #1
				}
			}
		}
		break;
	case SM_RX_PROCESS:
		break;
 8000868:	e037      	b.n	80008da <U_Blox_Task+0xde>
		U_Blox_frame_low_layer_t = (U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;
 800086a:	4b21      	ldr	r3, [pc, #132]	@ (80008f0 <U_Blox_Task+0xf4>)
 800086c:	607b      	str	r3, [r7, #4]
		if (U_Blox_Rx.buffer_index >= 2) {
 800086e:	4b1f      	ldr	r3, [pc, #124]	@ (80008ec <U_Blox_Task+0xf0>)
 8000870:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000874:	2b01      	cmp	r3, #1
 8000876:	d92f      	bls.n	80008d8 <U_Blox_Task+0xdc>
			if (!((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2bb5      	cmp	r3, #181	@ 0xb5
 800087e:	d103      	bne.n	8000888 <U_Blox_Task+0x8c>
					&& (U_Blox_frame_low_layer_t->sync_char_2 == 0x62))) {
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	785b      	ldrb	r3, [r3, #1]
			if (!((U_Blox_frame_low_layer_t->sync_char_1 == 0xB5)
 8000884:	2b62      	cmp	r3, #98	@ 0x62
 8000886:	d003      	beq.n	8000890 <U_Blox_Task+0x94>
				RxBufferMove(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f000 f961 	bl	8000b50 <RxBufferMove>
		break;
 800088e:	e023      	b.n	80008d8 <U_Blox_Task+0xdc>
					>= (U_Blox_frame_low_layer_t->length + 8)) {
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	889b      	ldrh	r3, [r3, #4]
 8000894:	3307      	adds	r3, #7
			} else if (U_Blox_Rx.buffer_index
 8000896:	4a15      	ldr	r2, [pc, #84]	@ (80008ec <U_Blox_Task+0xf0>)
 8000898:	f8b2 21f6 	ldrh.w	r2, [r2, #502]	@ 0x1f6
 800089c:	4293      	cmp	r3, r2
 800089e:	da1b      	bge.n	80008d8 <U_Blox_Task+0xdc>
				if ((*(uint16_t*) &U_Blox_frame_low_layer_t->payload[U_Blox_frame_low_layer_t->length])
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	889b      	ldrh	r3, [r3, #4]
 80008a4:	461a      	mov	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	4413      	add	r3, r2
 80008aa:	3306      	adds	r3, #6
 80008ac:	881c      	ldrh	r4, [r3, #0]
						!= U_Blox_Calculate_Checksum(
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f000 f878 	bl	80009a4 <U_Blox_Calculate_Checksum>
 80008b4:	4603      	mov	r3, r0
				if ((*(uint16_t*) &U_Blox_frame_low_layer_t->payload[U_Blox_frame_low_layer_t->length])
 80008b6:	429c      	cmp	r4, r3
 80008b8:	d007      	beq.n	80008ca <U_Blox_Task+0xce>
					RxBufferMove(U_Blox_frame_low_layer_t->length + 8);
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	889b      	ldrh	r3, [r3, #4]
 80008be:	3308      	adds	r3, #8
 80008c0:	b29b      	uxth	r3, r3
 80008c2:	4618      	mov	r0, r3
 80008c4:	f000 f944 	bl	8000b50 <RxBufferMove>
		break;
 80008c8:	e006      	b.n	80008d8 <U_Blox_Task+0xdc>
					U_Blox_Rx.Sm = SM_RX_PROCESS;
 80008ca:	4b08      	ldr	r3, [pc, #32]	@ (80008ec <U_Blox_Task+0xf0>)
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
					U_Blox_Rx.buffer_index = 0;
 80008d0:	4b06      	ldr	r3, [pc, #24]	@ (80008ec <U_Blox_Task+0xf0>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		break;
 80008d8:	bf00      	nop
	}
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	bd90      	pop	{r4, r7, pc}
 80008e2:	bf00      	nop
 80008e4:	24000818 	.word	0x24000818
 80008e8:	24000819 	.word	0x24000819
 80008ec:	24000620 	.word	0x24000620
 80008f0:	24000621 	.word	0x24000621

080008f4 <U_Blox_Set_Frame>:

void U_Blox_Set_Frame(U_Blox_frame_high_layer *U_blox_Frame) {
 80008f4:	b590      	push	{r4, r7, lr}
 80008f6:	b083      	sub	sp, #12
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer_transmit.sync_char_1 = 0xB5;
 80008fc:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <U_Blox_Set_Frame+0x70>)
 80008fe:	22b5      	movs	r2, #181	@ 0xb5
 8000900:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_low_layer_transmit.sync_char_2 = 0x62;
 8000902:	4b18      	ldr	r3, [pc, #96]	@ (8000964 <U_Blox_Set_Frame+0x70>)
 8000904:	2262      	movs	r2, #98	@ 0x62
 8000906:	705a      	strb	r2, [r3, #1]
	U_Blox_frame_low_layer_transmit.length = U_blox_Frame->length;
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	885a      	ldrh	r2, [r3, #2]
 800090c:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <U_Blox_Set_Frame+0x70>)
 800090e:	809a      	strh	r2, [r3, #4]
	U_Blox_frame_low_layer_transmit.message_class = U_blox_Frame->message_class;
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <U_Blox_Set_Frame+0x70>)
 8000916:	709a      	strb	r2, [r3, #2]
	U_Blox_frame_low_layer_transmit.message_id = U_blox_Frame->message_id;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	785a      	ldrb	r2, [r3, #1]
 800091c:	4b11      	ldr	r3, [pc, #68]	@ (8000964 <U_Blox_Set_Frame+0x70>)
 800091e:	70da      	strb	r2, [r3, #3]
	memcpy(&U_Blox_frame_low_layer_transmit.payload, U_blox_Frame->payload.data,
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	1d19      	adds	r1, r3, #4
			U_blox_Frame->length);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	885b      	ldrh	r3, [r3, #2]
	memcpy(&U_Blox_frame_low_layer_transmit.payload, U_blox_Frame->payload.data,
 8000928:	461a      	mov	r2, r3
 800092a:	480f      	ldr	r0, [pc, #60]	@ (8000968 <U_Blox_Set_Frame+0x74>)
 800092c:	f007 f866 	bl	80079fc <memcpy>
	(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000930:	4b0c      	ldr	r3, [pc, #48]	@ (8000964 <U_Blox_Set_Frame+0x70>)
 8000932:	889b      	ldrh	r3, [r3, #4]
 8000934:	461a      	mov	r2, r3
 8000936:	4b0b      	ldr	r3, [pc, #44]	@ (8000964 <U_Blox_Set_Frame+0x70>)
 8000938:	4413      	add	r3, r2
 800093a:	1d9c      	adds	r4, r3, #6
			U_Blox_Calculate_Checksum(&U_Blox_frame_low_layer_transmit);
 800093c:	4809      	ldr	r0, [pc, #36]	@ (8000964 <U_Blox_Set_Frame+0x70>)
 800093e:	f000 f831 	bl	80009a4 <U_Blox_Calculate_Checksum>
 8000942:	4603      	mov	r3, r0
	(*(uint16_t*) &U_Blox_frame_low_layer_transmit.payload[U_Blox_frame_low_layer_transmit.length]) =
 8000944:	8023      	strh	r3, [r4, #0]
	memset(&U_blox_Frame->payload, 0, 500);
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	3304      	adds	r3, #4
 800094a:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800094e:	2100      	movs	r1, #0
 8000950:	4618      	mov	r0, r3
 8000952:	f007 f827 	bl	80079a4 <memset>
	U_Blox_Tx.Sm=SM_TX_PREPARE;
 8000956:	4b05      	ldr	r3, [pc, #20]	@ (800096c <U_Blox_Set_Frame+0x78>)
 8000958:	2201      	movs	r2, #1
 800095a:	701a      	strb	r2, [r3, #0]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	24000424 	.word	0x24000424
 8000968:	2400042a 	.word	0x2400042a
 800096c:	24000818 	.word	0x24000818

08000970 <U_Blox_Send_Frame>:
uint8_t U_Blox_Send_Frame() {
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	//paket hazır mı kontrolu gerek
	HAL_UART_Transmit(&huart3,
 8000974:	2364      	movs	r3, #100	@ 0x64
 8000976:	2206      	movs	r2, #6
 8000978:	4907      	ldr	r1, [pc, #28]	@ (8000998 <U_Blox_Send_Frame+0x28>)
 800097a:	4808      	ldr	r0, [pc, #32]	@ (800099c <U_Blox_Send_Frame+0x2c>)
 800097c:	f004 fb26 	bl	8004fcc <HAL_UART_Transmit>
			(uint8_t*) &U_Blox_frame_low_layer_transmit.sync_char_1, 6, 100);
	HAL_UART_Transmit(&huart3,
			(uint8_t*) &U_Blox_frame_low_layer_transmit.payload,
			U_Blox_frame_low_layer_transmit.length + 2, 100);
 8000980:	4b05      	ldr	r3, [pc, #20]	@ (8000998 <U_Blox_Send_Frame+0x28>)
 8000982:	889b      	ldrh	r3, [r3, #4]
	HAL_UART_Transmit(&huart3,
 8000984:	3302      	adds	r3, #2
 8000986:	b29a      	uxth	r2, r3
 8000988:	2364      	movs	r3, #100	@ 0x64
 800098a:	4905      	ldr	r1, [pc, #20]	@ (80009a0 <U_Blox_Send_Frame+0x30>)
 800098c:	4803      	ldr	r0, [pc, #12]	@ (800099c <U_Blox_Send_Frame+0x2c>)
 800098e:	f004 fb1d 	bl	8004fcc <HAL_UART_Transmit>
	return 1;
 8000992:	2301      	movs	r3, #1
}
 8000994:	4618      	mov	r0, r3
 8000996:	bd80      	pop	{r7, pc}
 8000998:	24000424 	.word	0x24000424
 800099c:	24000a10 	.word	0x24000a10
 80009a0:	2400042a 	.word	0x2400042a

080009a4 <U_Blox_Calculate_Checksum>:
uint16_t U_Blox_Calculate_Checksum(U_Blox_frame_low_layer *U_blox_Frame) {
 80009a4:	b480      	push	{r7}
 80009a6:	b087      	sub	sp, #28
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
	uint8_t ck_a = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	75fb      	strb	r3, [r7, #23]
	uint8_t ck_b = 0;
 80009b0:	2300      	movs	r3, #0
 80009b2:	75bb      	strb	r3, [r7, #22]
	uint8_t *data = (uint8_t*) &U_blox_Frame->message_class;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3302      	adds	r3, #2
 80009b8:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 80009ba:	2300      	movs	r3, #0
 80009bc:	60fb      	str	r3, [r7, #12]
 80009be:	e00e      	b.n	80009de <U_Blox_Calculate_Checksum+0x3a>
		ck_a = ck_a + *data;
 80009c0:	693b      	ldr	r3, [r7, #16]
 80009c2:	781a      	ldrb	r2, [r3, #0]
 80009c4:	7dfb      	ldrb	r3, [r7, #23]
 80009c6:	4413      	add	r3, r2
 80009c8:	75fb      	strb	r3, [r7, #23]
		ck_b = ck_b + ck_a;
 80009ca:	7dba      	ldrb	r2, [r7, #22]
 80009cc:	7dfb      	ldrb	r3, [r7, #23]
 80009ce:	4413      	add	r3, r2
 80009d0:	75bb      	strb	r3, [r7, #22]
		data++;
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	3301      	adds	r3, #1
 80009d6:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < U_blox_Frame->length + 4; i++) {
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	3301      	adds	r3, #1
 80009dc:	60fb      	str	r3, [r7, #12]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	889b      	ldrh	r3, [r3, #4]
 80009e2:	3303      	adds	r3, #3
 80009e4:	68fa      	ldr	r2, [r7, #12]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	ddea      	ble.n	80009c0 <U_Blox_Calculate_Checksum+0x1c>
	}
	return (uint16_t) (ck_a + (uint16_t) ((uint16_t) ck_b << 8));
 80009ea:	7dfb      	ldrb	r3, [r7, #23]
 80009ec:	b29a      	uxth	r2, r3
 80009ee:	7dbb      	ldrb	r3, [r7, #22]
 80009f0:	b29b      	uxth	r3, r3
 80009f2:	021b      	lsls	r3, r3, #8
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	4413      	add	r3, r2
 80009f8:	b29b      	uxth	r3, r3
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	371c      	adds	r7, #28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a04:	4770      	bx	lr
	...

08000a08 <U_Blox_Receive_Data>:
void U_Blox_Receive_Data(uint8_t data) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	if (U_Blox_Rx.buffer_index > 498) {
 8000a12:	4b11      	ldr	r3, [pc, #68]	@ (8000a58 <U_Blox_Receive_Data+0x50>)
 8000a14:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000a18:	f5b3 7ff9 	cmp.w	r3, #498	@ 0x1f2
 8000a1c:	d907      	bls.n	8000a2e <U_Blox_Receive_Data+0x26>
		U_Blox_Rx.buffer_index = 0;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a58 <U_Blox_Receive_Data+0x50>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		RxBufferMove(400);
 8000a26:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000a2a:	f000 f891 	bl	8000b50 <RxBufferMove>
	}
	U_Blox_Rx.Buffer[U_Blox_Rx.buffer_index] = data;
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8000a58 <U_Blox_Receive_Data+0x50>)
 8000a30:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000a34:	461a      	mov	r2, r3
 8000a36:	4b08      	ldr	r3, [pc, #32]	@ (8000a58 <U_Blox_Receive_Data+0x50>)
 8000a38:	4413      	add	r3, r2
 8000a3a:	79fa      	ldrb	r2, [r7, #7]
 8000a3c:	705a      	strb	r2, [r3, #1]
	U_Blox_Rx.buffer_index++;
 8000a3e:	4b06      	ldr	r3, [pc, #24]	@ (8000a58 <U_Blox_Receive_Data+0x50>)
 8000a40:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000a44:	3301      	adds	r3, #1
 8000a46:	b29a      	uxth	r2, r3
 8000a48:	4b03      	ldr	r3, [pc, #12]	@ (8000a58 <U_Blox_Receive_Data+0x50>)
 8000a4a:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	24000620 	.word	0x24000620

08000a5c <U_Blox_Is_Packet_Ready>:

uint8_t U_Blox_Is_Packet_Ready() {
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
	return (U_Blox_Rx.Sm == SM_RX_PROCESS);
 8000a60:	4b05      	ldr	r3, [pc, #20]	@ (8000a78 <U_Blox_Is_Packet_Ready+0x1c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b01      	cmp	r3, #1
 8000a66:	bf0c      	ite	eq
 8000a68:	2301      	moveq	r3, #1
 8000a6a:	2300      	movne	r3, #0
 8000a6c:	b2db      	uxtb	r3, r3
}
 8000a6e:	4618      	mov	r0, r3
 8000a70:	46bd      	mov	sp, r7
 8000a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a76:	4770      	bx	lr
 8000a78:	24000620 	.word	0x24000620

08000a7c <U_Blox_Is_Packet_Ready_To_Send>:

uint8_t U_Blox_Is_Packet_Ready_To_Send(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
	return (U_Blox_Tx.Sm==SM_TX_IDLE);
 8000a80:	4b05      	ldr	r3, [pc, #20]	@ (8000a98 <U_Blox_Is_Packet_Ready_To_Send+0x1c>)
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf0c      	ite	eq
 8000a88:	2301      	moveq	r3, #1
 8000a8a:	2300      	movne	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	24000818 	.word	0x24000818

08000a9c <U_Blox_Send_Packet>:

void U_Blox_Send_Packet()
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
	if(U_Blox_Tx.Sm==SM_TX_PREPARE)
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <U_Blox_Send_Packet+0x24>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d106      	bne.n	8000ab6 <U_Blox_Send_Packet+0x1a>
	{
		U_Blox_Tx.buffer_index=0;
 8000aa8:	4b05      	ldr	r3, [pc, #20]	@ (8000ac0 <U_Blox_Send_Packet+0x24>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
		U_Blox_Tx.Sm=SM_TX_SEND;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	@ (8000ac0 <U_Blox_Send_Packet+0x24>)
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	701a      	strb	r2, [r3, #0]
	}
}
 8000ab6:	bf00      	nop
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	24000818 	.word	0x24000818

08000ac4 <U_Blox_Send_Data>:
void U_Blox_Send_Data(uint8_t data)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b082      	sub	sp, #8
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart3, &data,1, 100);
 8000ace:	1df9      	adds	r1, r7, #7
 8000ad0:	2364      	movs	r3, #100	@ 0x64
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4803      	ldr	r0, [pc, #12]	@ (8000ae4 <U_Blox_Send_Data+0x20>)
 8000ad6:	f004 fa79 	bl	8004fcc <HAL_UART_Transmit>
}
 8000ada:	bf00      	nop
 8000adc:	3708      	adds	r7, #8
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	24000a10 	.word	0x24000a10

08000ae8 <U_Blox_Get_Package>:
void U_Blox_Get_Package(U_Blox_frame_high_layer *U_Blox_frame_high_layer_t) {
 8000ae8:	b480      	push	{r7}
 8000aea:	b085      	sub	sp, #20
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	U_Blox_frame_low_layer *U_Blox_frame_low_layer_t =
 8000af0:	4b15      	ldr	r3, [pc, #84]	@ (8000b48 <U_Blox_Get_Package+0x60>)
 8000af2:	60bb      	str	r3, [r7, #8]
			(U_Blox_frame_low_layer*) U_Blox_Rx.Buffer;

	U_Blox_frame_high_layer_t->length = U_Blox_frame_low_layer_t->length;
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	889a      	ldrh	r2, [r3, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	805a      	strh	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
			U_Blox_frame_low_layer_t->message_class;
 8000afc:	68bb      	ldr	r3, [r7, #8]
 8000afe:	789a      	ldrb	r2, [r3, #2]
	U_Blox_frame_high_layer_t->message_class =
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	701a      	strb	r2, [r3, #0]
	U_Blox_frame_high_layer_t->message_id =
			U_Blox_frame_low_layer_t->message_id;
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	78da      	ldrb	r2, [r3, #3]
	U_Blox_frame_high_layer_t->message_id =
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	705a      	strb	r2, [r3, #1]
	for (int i = 0; i < 500; i++) {
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
 8000b10:	e00d      	b.n	8000b2e <U_Blox_Get_Package+0x46>
		U_Blox_frame_high_layer_t->payload.data[i] =
				U_Blox_frame_low_layer_t->payload[i];
 8000b12:	68ba      	ldr	r2, [r7, #8]
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	4413      	add	r3, r2
 8000b18:	3306      	adds	r3, #6
 8000b1a:	7819      	ldrb	r1, [r3, #0]
		U_Blox_frame_high_layer_t->payload.data[i] =
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	4413      	add	r3, r2
 8000b22:	3304      	adds	r3, #4
 8000b24:	460a      	mov	r2, r1
 8000b26:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 500; i++) {
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	60fb      	str	r3, [r7, #12]
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000b34:	dbed      	blt.n	8000b12 <U_Blox_Get_Package+0x2a>
	}
	U_Blox_Rx.Sm = SM_RX_IDLE;
 8000b36:	4b05      	ldr	r3, [pc, #20]	@ (8000b4c <U_Blox_Get_Package+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	701a      	strb	r2, [r3, #0]
}
 8000b3c:	bf00      	nop
 8000b3e:	3714      	adds	r7, #20
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	24000621 	.word	0x24000621
 8000b4c:	24000620 	.word	0x24000620

08000b50 <RxBufferMove>:
void RxBufferMove(uint16_t move) {
 8000b50:	b480      	push	{r7}
 8000b52:	b085      	sub	sp, #20
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	4603      	mov	r3, r0
 8000b58:	80fb      	strh	r3, [r7, #6]
	int tempMove = move;
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	60bb      	str	r3, [r7, #8]
	int index = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
	while (move < U_Blox_Rx.buffer_index) {
 8000b62:	e00d      	b.n	8000b80 <RxBufferMove+0x30>
		U_Blox_Rx.Buffer[index++] = U_Blox_Rx.Buffer[move++];
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	1c5a      	adds	r2, r3, #1
 8000b68:	80fa      	strh	r2, [r7, #6]
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	1c5a      	adds	r2, r3, #1
 8000b70:	60fa      	str	r2, [r7, #12]
 8000b72:	4a0e      	ldr	r2, [pc, #56]	@ (8000bac <RxBufferMove+0x5c>)
 8000b74:	440a      	add	r2, r1
 8000b76:	7851      	ldrb	r1, [r2, #1]
 8000b78:	4a0c      	ldr	r2, [pc, #48]	@ (8000bac <RxBufferMove+0x5c>)
 8000b7a:	4413      	add	r3, r2
 8000b7c:	460a      	mov	r2, r1
 8000b7e:	705a      	strb	r2, [r3, #1]
	while (move < U_Blox_Rx.buffer_index) {
 8000b80:	4b0a      	ldr	r3, [pc, #40]	@ (8000bac <RxBufferMove+0x5c>)
 8000b82:	f8b3 31f6 	ldrh.w	r3, [r3, #502]	@ 0x1f6
 8000b86:	88fa      	ldrh	r2, [r7, #6]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d3eb      	bcc.n	8000b64 <RxBufferMove+0x14>
	}
	U_Blox_Rx.buffer_index -= tempMove;
 8000b8c:	4b07      	ldr	r3, [pc, #28]	@ (8000bac <RxBufferMove+0x5c>)
 8000b8e:	f8b3 21f6 	ldrh.w	r2, [r3, #502]	@ 0x1f6
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	b29b      	uxth	r3, r3
 8000b96:	1ad3      	subs	r3, r2, r3
 8000b98:	b29a      	uxth	r2, r3
 8000b9a:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <RxBufferMove+0x5c>)
 8000b9c:	f8a3 21f6 	strh.w	r2, [r3, #502]	@ 0x1f6
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	24000620 	.word	0x24000620

08000bb0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8000bb4:	f000 f95a 	bl	8000e6c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bb8:	f000 fb2a 	bl	8001210 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bbc:	f000 f832 	bl	8000c24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000bc0:	f000 f8ea 	bl	8000d98 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000bc4:	f000 f89c 	bl	8000d00 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, &data,1);
 8000bc8:	2201      	movs	r2, #1
 8000bca:	4910      	ldr	r1, [pc, #64]	@ (8000c0c <main+0x5c>)
 8000bcc:	4810      	ldr	r0, [pc, #64]	@ (8000c10 <main+0x60>)
 8000bce:	f004 fa8b 	bl	80050e8 <HAL_UART_Receive_IT>
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_14,1);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bd8:	480e      	ldr	r0, [pc, #56]	@ (8000c14 <main+0x64>)
 8000bda:	f001 fc2b 	bl	8002434 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOE,GPIO_PIN_1,1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2102      	movs	r1, #2
 8000be2:	480d      	ldr	r0, [pc, #52]	@ (8000c18 <main+0x68>)
 8000be4:	f001 fc26 	bl	8002434 <HAL_GPIO_WritePin>
  GNSS_Tanimla(&GNSS_t);
 8000be8:	480c      	ldr	r0, [pc, #48]	@ (8000c1c <main+0x6c>)
 8000bea:	f7ff fd07 	bl	80005fc <GNSS_Tanimla>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    GNSS_Gorev(&GNSS_t);
 8000bee:	480b      	ldr	r0, [pc, #44]	@ (8000c1c <main+0x6c>)
 8000bf0:	f7ff fde8 	bl	80007c4 <GNSS_Gorev>
	    if(GNSS_Veri_Al(&GNSS_t))
 8000bf4:	4809      	ldr	r0, [pc, #36]	@ (8000c1c <main+0x6c>)
 8000bf6:	f7ff fd6b 	bl	80006d0 <GNSS_Veri_Al>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0f6      	beq.n	8000bee <main+0x3e>
	    {
	    	//HAL_UART_Transmit(&huart3, (uint8_t*)("Yil"), 3, 1000);
	    	//HAL_UART_Transmit(&huart3, (uint8_t*)&GNSS_t.yil, 2, 1000);
	    	a++;
 8000c00:	4b07      	ldr	r3, [pc, #28]	@ (8000c20 <main+0x70>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	3301      	adds	r3, #1
 8000c06:	4a06      	ldr	r2, [pc, #24]	@ (8000c20 <main+0x70>)
 8000c08:	6013      	str	r3, [r2, #0]
	    GNSS_Gorev(&GNSS_t);
 8000c0a:	e7f0      	b.n	8000bee <main+0x3e>
 8000c0c:	24000abc 	.word	0x24000abc
 8000c10:	24000a10 	.word	0x24000a10
 8000c14:	58020400 	.word	0x58020400
 8000c18:	58021000 	.word	0x58021000
 8000c1c:	24000aa4 	.word	0x24000aa4
 8000c20:	24000ab8 	.word	0x24000ab8

08000c24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b09c      	sub	sp, #112	@ 0x70
 8000c28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c2e:	224c      	movs	r2, #76	@ 0x4c
 8000c30:	2100      	movs	r1, #0
 8000c32:	4618      	mov	r0, r3
 8000c34:	f006 feb6 	bl	80079a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c38:	1d3b      	adds	r3, r7, #4
 8000c3a:	2220      	movs	r2, #32
 8000c3c:	2100      	movs	r1, #0
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f006 feb0 	bl	80079a4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c44:	2002      	movs	r0, #2
 8000c46:	f001 fc0f 	bl	8002468 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	603b      	str	r3, [r7, #0]
 8000c4e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cfc <SystemClock_Config+0xd8>)
 8000c50:	699b      	ldr	r3, [r3, #24]
 8000c52:	4a2a      	ldr	r2, [pc, #168]	@ (8000cfc <SystemClock_Config+0xd8>)
 8000c54:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000c58:	6193      	str	r3, [r2, #24]
 8000c5a:	4b28      	ldr	r3, [pc, #160]	@ (8000cfc <SystemClock_Config+0xd8>)
 8000c5c:	699b      	ldr	r3, [r3, #24]
 8000c5e:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c66:	bf00      	nop
 8000c68:	4b24      	ldr	r3, [pc, #144]	@ (8000cfc <SystemClock_Config+0xd8>)
 8000c6a:	699b      	ldr	r3, [r3, #24]
 8000c6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c74:	d1f8      	bne.n	8000c68 <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c76:	2301      	movs	r3, #1
 8000c78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c7a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000c7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c80:	2302      	movs	r3, #2
 8000c82:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c84:	2302      	movs	r3, #2
 8000c86:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000c88:	2301      	movs	r3, #1
 8000c8a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 34;
 8000c8c:	2322      	movs	r3, #34	@ 0x22
 8000c8e:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000c90:	2301      	movs	r3, #1
 8000c92:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c94:	2302      	movs	r3, #2
 8000c96:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000ca4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000ca8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000caa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f001 fc14 	bl	80024dc <HAL_RCC_OscConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000cba:	f000 f903 	bl	8000ec4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cbe:	233f      	movs	r3, #63	@ 0x3f
 8000cc0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000cce:	2340      	movs	r3, #64	@ 0x40
 8000cd0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000cd2:	2340      	movs	r3, #64	@ 0x40
 8000cd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000cd6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cda:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000cdc:	2340      	movs	r3, #64	@ 0x40
 8000cde:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ce0:	1d3b      	adds	r3, r7, #4
 8000ce2:	2103      	movs	r1, #3
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f001 ffd3 	bl	8002c90 <HAL_RCC_ClockConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000cf0:	f000 f8e8 	bl	8000ec4 <Error_Handler>
  }
}
 8000cf4:	bf00      	nop
 8000cf6:	3770      	adds	r7, #112	@ 0x70
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	58024800 	.word	0x58024800

08000d00 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d04:	4b22      	ldr	r3, [pc, #136]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d06:	4a23      	ldr	r2, [pc, #140]	@ (8000d94 <MX_USART3_UART_Init+0x94>)
 8000d08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 8000d0a:	4b21      	ldr	r3, [pc, #132]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d0c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000d10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d12:	4b1f      	ldr	r3, [pc, #124]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d18:	4b1d      	ldr	r3, [pc, #116]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d24:	4b1a      	ldr	r3, [pc, #104]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d26:	220c      	movs	r2, #12
 8000d28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d2a:	4b19      	ldr	r3, [pc, #100]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d30:	4b17      	ldr	r3, [pc, #92]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d36:	4b16      	ldr	r3, [pc, #88]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000d3c:	4b14      	ldr	r3, [pc, #80]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d48:	4811      	ldr	r0, [pc, #68]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d4a:	f004 f8ef 	bl	8004f2c <HAL_UART_Init>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000d54:	f000 f8b6 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d58:	2100      	movs	r1, #0
 8000d5a:	480d      	ldr	r0, [pc, #52]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d5c:	f006 fd57 	bl	800780e <HAL_UARTEx_SetTxFifoThreshold>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000d66:	f000 f8ad 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	4808      	ldr	r0, [pc, #32]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d6e:	f006 fd8c 	bl	800788a <HAL_UARTEx_SetRxFifoThreshold>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000d78:	f000 f8a4 	bl	8000ec4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000d7c:	4804      	ldr	r0, [pc, #16]	@ (8000d90 <MX_USART3_UART_Init+0x90>)
 8000d7e:	f006 fd0d 	bl	800779c <HAL_UARTEx_DisableFifoMode>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000d88:	f000 f89c 	bl	8000ec4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d8c:	bf00      	nop
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	24000a10 	.word	0x24000a10
 8000d94:	40004800 	.word	0x40004800

08000d98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d9e:	f107 030c 	add.w	r3, r7, #12
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
 8000dac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dae:	4b2c      	ldr	r3, [pc, #176]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db4:	4a2a      	ldr	r2, [pc, #168]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000db6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dba:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dbe:	4b28      	ldr	r3, [pc, #160]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dcc:	4b24      	ldr	r3, [pc, #144]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000dce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd2:	4a23      	ldr	r2, [pc, #140]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000dd4:	f043 0302 	orr.w	r3, r3, #2
 8000dd8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ddc:	4b20      	ldr	r3, [pc, #128]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000dde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000de2:	f003 0302 	and.w	r3, r3, #2
 8000de6:	607b      	str	r3, [r7, #4]
 8000de8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dea:	4b1d      	ldr	r3, [pc, #116]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000dec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000df0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000df2:	f043 0310 	orr.w	r3, r3, #16
 8000df6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dfa:	4b19      	ldr	r3, [pc, #100]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000dfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	603b      	str	r3, [r7, #0]
 8000e06:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, GPIO_PIN_RESET);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000e0e:	4815      	ldr	r0, [pc, #84]	@ (8000e64 <MX_GPIO_Init+0xcc>)
 8000e10:	f001 fb10 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e14:	2200      	movs	r2, #0
 8000e16:	2102      	movs	r1, #2
 8000e18:	4813      	ldr	r0, [pc, #76]	@ (8000e68 <MX_GPIO_Init+0xd0>)
 8000e1a:	f001 fb0b 	bl	8002434 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e1e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000e22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e24:	2301      	movs	r3, #1
 8000e26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e30:	f107 030c 	add.w	r3, r7, #12
 8000e34:	4619      	mov	r1, r3
 8000e36:	480b      	ldr	r0, [pc, #44]	@ (8000e64 <MX_GPIO_Init+0xcc>)
 8000e38:	f001 f954 	bl	80020e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e4c:	f107 030c 	add.w	r3, r7, #12
 8000e50:	4619      	mov	r1, r3
 8000e52:	4805      	ldr	r0, [pc, #20]	@ (8000e68 <MX_GPIO_Init+0xd0>)
 8000e54:	f001 f946 	bl	80020e4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e58:	bf00      	nop
 8000e5a:	3720      	adds	r7, #32
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}
 8000e60:	58024400 	.word	0x58024400
 8000e64:	58020400 	.word	0x58020400
 8000e68:	58021000 	.word	0x58021000

08000e6c <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b084      	sub	sp, #16
 8000e70:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000e72:	463b      	mov	r3, r7
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000e7e:	f000 fb55 	bl	800152c <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000e82:	2301      	movs	r3, #1
 8000e84:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000e86:	2300      	movs	r3, #0
 8000e88:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000e8e:	231f      	movs	r3, #31
 8000e90:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000e92:	2387      	movs	r3, #135	@ 0x87
 8000e94:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000e96:	2300      	movs	r3, #0
 8000e98:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000eae:	463b      	mov	r3, r7
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f000 fb73 	bl	800159c <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000eb6:	2004      	movs	r0, #4
 8000eb8:	f000 fb50 	bl	800155c <HAL_MPU_Enable>

}
 8000ebc:	bf00      	nop
 8000ebe:	3710      	adds	r7, #16
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ec8:	b672      	cpsid	i
}
 8000eca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <Error_Handler+0x8>

08000ed0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ed8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000edc:	4a08      	ldr	r2, [pc, #32]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ede:	f043 0302 	orr.w	r3, r3, #2
 8000ee2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ee6:	4b06      	ldr	r3, [pc, #24]	@ (8000f00 <HAL_MspInit+0x30>)
 8000ee8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eec:	f003 0302 	and.w	r3, r3, #2
 8000ef0:	607b      	str	r3, [r7, #4]
 8000ef2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ef4:	bf00      	nop
 8000ef6:	370c      	adds	r7, #12
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr
 8000f00:	58024400 	.word	0x58024400

08000f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b0b8      	sub	sp, #224	@ 0xe0
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f0c:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
 8000f16:	609a      	str	r2, [r3, #8]
 8000f18:	60da      	str	r2, [r3, #12]
 8000f1a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f1c:	f107 0310 	add.w	r3, r7, #16
 8000f20:	22b8      	movs	r2, #184	@ 0xb8
 8000f22:	2100      	movs	r1, #0
 8000f24:	4618      	mov	r0, r3
 8000f26:	f006 fd3d 	bl	80079a4 <memset>
  if(huart->Instance==USART3)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a2b      	ldr	r2, [pc, #172]	@ (8000fdc <HAL_UART_MspInit+0xd8>)
 8000f30:	4293      	cmp	r3, r2
 8000f32:	d14e      	bne.n	8000fd2 <HAL_UART_MspInit+0xce>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f34:	f04f 0202 	mov.w	r2, #2
 8000f38:	f04f 0300 	mov.w	r3, #0
 8000f3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f002 fa2c 	bl	80033a8 <HAL_RCCEx_PeriphCLKConfig>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000f56:	f7ff ffb5 	bl	8000ec4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f5a:	4b21      	ldr	r3, [pc, #132]	@ (8000fe0 <HAL_UART_MspInit+0xdc>)
 8000f5c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f60:	4a1f      	ldr	r2, [pc, #124]	@ (8000fe0 <HAL_UART_MspInit+0xdc>)
 8000f62:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f66:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fe0 <HAL_UART_MspInit+0xdc>)
 8000f6c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f70:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f78:	4b19      	ldr	r3, [pc, #100]	@ (8000fe0 <HAL_UART_MspInit+0xdc>)
 8000f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f7e:	4a18      	ldr	r2, [pc, #96]	@ (8000fe0 <HAL_UART_MspInit+0xdc>)
 8000f80:	f043 0302 	orr.w	r3, r3, #2
 8000f84:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f88:	4b15      	ldr	r3, [pc, #84]	@ (8000fe0 <HAL_UART_MspInit+0xdc>)
 8000f8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f8e:	f003 0302 	and.w	r3, r3, #2
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000f96:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f9a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fb0:	2307      	movs	r3, #7
 8000fb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fb6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 8000fba:	4619      	mov	r1, r3
 8000fbc:	4809      	ldr	r0, [pc, #36]	@ (8000fe4 <HAL_UART_MspInit+0xe0>)
 8000fbe:	f001 f891 	bl	80020e4 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 3, 0);
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	2103      	movs	r1, #3
 8000fc6:	2027      	movs	r0, #39	@ 0x27
 8000fc8:	f000 fa7b 	bl	80014c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000fcc:	2027      	movs	r0, #39	@ 0x27
 8000fce:	f000 fa92 	bl	80014f6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8000fd2:	bf00      	nop
 8000fd4:	37e0      	adds	r7, #224	@ 0xe0
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40004800 	.word	0x40004800
 8000fe0:	58024400 	.word	0x58024400
 8000fe4:	58020400 	.word	0x58020400

08000fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fec:	bf00      	nop
 8000fee:	e7fd      	b.n	8000fec <NMI_Handler+0x4>

08000ff0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff4:	bf00      	nop
 8000ff6:	e7fd      	b.n	8000ff4 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	bf00      	nop
 8000ffe:	e7fd      	b.n	8000ffc <MemManage_Handler+0x4>

08001000 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <UsageFault_Handler+0x4>

08001010 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
	...

0800103c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001040:	4807      	ldr	r0, [pc, #28]	@ (8001060 <USART3_IRQHandler+0x24>)
 8001042:	f004 f89d 	bl	8005180 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */
  HAL_UART_Receive_IT(&huart3, &data,1);
 8001046:	2201      	movs	r2, #1
 8001048:	4906      	ldr	r1, [pc, #24]	@ (8001064 <USART3_IRQHandler+0x28>)
 800104a:	4805      	ldr	r0, [pc, #20]	@ (8001060 <USART3_IRQHandler+0x24>)
 800104c:	f004 f84c 	bl	80050e8 <HAL_UART_Receive_IT>
  U_Blox_Receive_Data(data);
 8001050:	4b04      	ldr	r3, [pc, #16]	@ (8001064 <USART3_IRQHandler+0x28>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff fcd7 	bl	8000a08 <U_Blox_Receive_Data>
  /* USER CODE END USART3_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	24000a10 	.word	0x24000a10
 8001064:	24000abc 	.word	0x24000abc

08001068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800106c:	4b32      	ldr	r3, [pc, #200]	@ (8001138 <SystemInit+0xd0>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001072:	4a31      	ldr	r2, [pc, #196]	@ (8001138 <SystemInit+0xd0>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800107c:	4b2f      	ldr	r3, [pc, #188]	@ (800113c <SystemInit+0xd4>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f003 030f 	and.w	r3, r3, #15
 8001084:	2b06      	cmp	r3, #6
 8001086:	d807      	bhi.n	8001098 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001088:	4b2c      	ldr	r3, [pc, #176]	@ (800113c <SystemInit+0xd4>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f023 030f 	bic.w	r3, r3, #15
 8001090:	4a2a      	ldr	r2, [pc, #168]	@ (800113c <SystemInit+0xd4>)
 8001092:	f043 0307 	orr.w	r3, r3, #7
 8001096:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001098:	4b29      	ldr	r3, [pc, #164]	@ (8001140 <SystemInit+0xd8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	4a28      	ldr	r2, [pc, #160]	@ (8001140 <SystemInit+0xd8>)
 800109e:	f043 0301 	orr.w	r3, r3, #1
 80010a2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80010a4:	4b26      	ldr	r3, [pc, #152]	@ (8001140 <SystemInit+0xd8>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80010aa:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <SystemInit+0xd8>)
 80010ac:	681a      	ldr	r2, [r3, #0]
 80010ae:	4924      	ldr	r1, [pc, #144]	@ (8001140 <SystemInit+0xd8>)
 80010b0:	4b24      	ldr	r3, [pc, #144]	@ (8001144 <SystemInit+0xdc>)
 80010b2:	4013      	ands	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80010b6:	4b21      	ldr	r3, [pc, #132]	@ (800113c <SystemInit+0xd4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d007      	beq.n	80010d2 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80010c2:	4b1e      	ldr	r3, [pc, #120]	@ (800113c <SystemInit+0xd4>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f023 030f 	bic.w	r3, r3, #15
 80010ca:	4a1c      	ldr	r2, [pc, #112]	@ (800113c <SystemInit+0xd4>)
 80010cc:	f043 0307 	orr.w	r3, r3, #7
 80010d0:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001140 <SystemInit+0xd8>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010d8:	4b19      	ldr	r3, [pc, #100]	@ (8001140 <SystemInit+0xd8>)
 80010da:	2200      	movs	r2, #0
 80010dc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010de:	4b18      	ldr	r3, [pc, #96]	@ (8001140 <SystemInit+0xd8>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010e4:	4b16      	ldr	r3, [pc, #88]	@ (8001140 <SystemInit+0xd8>)
 80010e6:	4a18      	ldr	r2, [pc, #96]	@ (8001148 <SystemInit+0xe0>)
 80010e8:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010ea:	4b15      	ldr	r3, [pc, #84]	@ (8001140 <SystemInit+0xd8>)
 80010ec:	4a17      	ldr	r2, [pc, #92]	@ (800114c <SystemInit+0xe4>)
 80010ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010f0:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <SystemInit+0xd8>)
 80010f2:	4a17      	ldr	r2, [pc, #92]	@ (8001150 <SystemInit+0xe8>)
 80010f4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010f6:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <SystemInit+0xd8>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010fc:	4b10      	ldr	r3, [pc, #64]	@ (8001140 <SystemInit+0xd8>)
 80010fe:	4a14      	ldr	r2, [pc, #80]	@ (8001150 <SystemInit+0xe8>)
 8001100:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001102:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <SystemInit+0xd8>)
 8001104:	2200      	movs	r2, #0
 8001106:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001108:	4b0d      	ldr	r3, [pc, #52]	@ (8001140 <SystemInit+0xd8>)
 800110a:	4a11      	ldr	r2, [pc, #68]	@ (8001150 <SystemInit+0xe8>)
 800110c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800110e:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <SystemInit+0xd8>)
 8001110:	2200      	movs	r2, #0
 8001112:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001114:	4b0a      	ldr	r3, [pc, #40]	@ (8001140 <SystemInit+0xd8>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a09      	ldr	r2, [pc, #36]	@ (8001140 <SystemInit+0xd8>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800111e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001120:	4b07      	ldr	r3, [pc, #28]	@ (8001140 <SystemInit+0xd8>)
 8001122:	2200      	movs	r2, #0
 8001124:	661a      	str	r2, [r3, #96]	@ 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001126:	4b0b      	ldr	r3, [pc, #44]	@ (8001154 <SystemInit+0xec>)
 8001128:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800112c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000ed00 	.word	0xe000ed00
 800113c:	52002000 	.word	0x52002000
 8001140:	58024400 	.word	0x58024400
 8001144:	eaf6ed7f 	.word	0xeaf6ed7f
 8001148:	02020200 	.word	0x02020200
 800114c:	01ff0000 	.word	0x01ff0000
 8001150:	01010280 	.word	0x01010280
 8001154:	52004000 	.word	0x52004000

08001158 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001158:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001190 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800115c:	f7ff ff84 	bl	8001068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001162:	490d      	ldr	r1, [pc, #52]	@ (8001198 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001164:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001166:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001168:	e002      	b.n	8001170 <LoopCopyDataInit>

0800116a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800116a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800116c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116e:	3304      	adds	r3, #4

08001170 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001170:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001172:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001174:	d3f9      	bcc.n	800116a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001176:	4a0a      	ldr	r2, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001178:	4c0a      	ldr	r4, [pc, #40]	@ (80011a4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800117a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800117c:	e001      	b.n	8001182 <LoopFillZerobss>

0800117e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001180:	3204      	adds	r2, #4

08001182 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001182:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001184:	d3fb      	bcc.n	800117e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001186:	f006 fc15 	bl	80079b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800118a:	f7ff fd11 	bl	8000bb0 <main>
  bx  lr
 800118e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001190:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 8001194:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001198:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 800119c:	08007a78 	.word	0x08007a78
  ldr r2, =_sbss
 80011a0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80011a4:	24000ac8 	.word	0x24000ac8

080011a8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a8:	e7fe      	b.n	80011a8 <ADC3_IRQHandler>
	...

080011ac <SystickGetMs>:
#include "stm32h7xx.h"

static uint32_t ms;

 uint32_t SystickGetMs()
 {
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
   return ms;
 80011b0:	4b03      	ldr	r3, [pc, #12]	@ (80011c0 <SystickGetMs+0x14>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 }
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	24000ac0 	.word	0x24000ac0

080011c4 <SystickCheckMs>:


 uint8_t SystickCheckMs(uint32_t reference,uint32_t time_passed)
 {
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
   if((ms-reference)>=time_passed)
 80011ce:	4b08      	ldr	r3, [pc, #32]	@ (80011f0 <SystickCheckMs+0x2c>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d801      	bhi.n	80011e0 <SystickCheckMs+0x1c>
	   return 1;
 80011dc:	2301      	movs	r3, #1
 80011de:	e000      	b.n	80011e2 <SystickCheckMs+0x1e>
   else
	  return 0;
 80011e0:	2300      	movs	r3, #0
 }
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	24000ac0 	.word	0x24000ac0

080011f4 <SysTick_Handler>:


 void SysTick_Handler(void)
 {
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
   /* USER CODE BEGIN SysTick_IRQn 0 */
    ms++;
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <SysTick_Handler+0x18>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	3301      	adds	r3, #1
 80011fe:	4a03      	ldr	r2, [pc, #12]	@ (800120c <SysTick_Handler+0x18>)
 8001200:	6013      	str	r3, [r2, #0]


   /* USER CODE BEGIN SysTick_IRQn 1 */

   /* USER CODE END SysTick_IRQn 1 */
 }
 8001202:	bf00      	nop
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	24000ac0 	.word	0x24000ac0

08001210 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001216:	2003      	movs	r0, #3
 8001218:	f000 f948 	bl	80014ac <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800121c:	f001 feee 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8001220:	4602      	mov	r2, r0
 8001222:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <HAL_Init+0x68>)
 8001224:	699b      	ldr	r3, [r3, #24]
 8001226:	0a1b      	lsrs	r3, r3, #8
 8001228:	f003 030f 	and.w	r3, r3, #15
 800122c:	4913      	ldr	r1, [pc, #76]	@ (800127c <HAL_Init+0x6c>)
 800122e:	5ccb      	ldrb	r3, [r1, r3]
 8001230:	f003 031f 	and.w	r3, r3, #31
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <HAL_Init+0x68>)
 800123c:	699b      	ldr	r3, [r3, #24]
 800123e:	f003 030f 	and.w	r3, r3, #15
 8001242:	4a0e      	ldr	r2, [pc, #56]	@ (800127c <HAL_Init+0x6c>)
 8001244:	5cd3      	ldrb	r3, [r2, r3]
 8001246:	f003 031f 	and.w	r3, r3, #31
 800124a:	687a      	ldr	r2, [r7, #4]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	4a0b      	ldr	r2, [pc, #44]	@ (8001280 <HAL_Init+0x70>)
 8001252:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001254:	4a0b      	ldr	r2, [pc, #44]	@ (8001284 <HAL_Init+0x74>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800125a:	200f      	movs	r0, #15
 800125c:	f000 f814 	bl	8001288 <HAL_InitTick>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e002      	b.n	8001270 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800126a:	f7ff fe31 	bl	8000ed0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126e:	2300      	movs	r3, #0
}
 8001270:	4618      	mov	r0, r3
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	58024400 	.word	0x58024400
 800127c:	08007a30 	.word	0x08007a30
 8001280:	24000004 	.word	0x24000004
 8001284:	24000000 	.word	0x24000000

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001290:	4b15      	ldr	r3, [pc, #84]	@ (80012e8 <HAL_InitTick+0x60>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e021      	b.n	80012e0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800129c:	4b13      	ldr	r3, [pc, #76]	@ (80012ec <HAL_InitTick+0x64>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <HAL_InitTick+0x60>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	4619      	mov	r1, r3
 80012a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f92d 	bl	8001512 <HAL_SYSTICK_Config>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80012be:	2301      	movs	r3, #1
 80012c0:	e00e      	b.n	80012e0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d80a      	bhi.n	80012de <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f8f7 	bl	80014c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012d4:	4a06      	ldr	r2, [pc, #24]	@ (80012f0 <HAL_InitTick+0x68>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012da:	2300      	movs	r3, #0
 80012dc:	e000      	b.n	80012e0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3708      	adds	r7, #8
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	2400000c 	.word	0x2400000c
 80012ec:	24000000 	.word	0x24000000
 80012f0:	24000008 	.word	0x24000008

080012f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return uwTick;
 80012f8:	4b03      	ldr	r3, [pc, #12]	@ (8001308 <HAL_GetTick+0x14>)
 80012fa:	681b      	ldr	r3, [r3, #0]
}
 80012fc:	4618      	mov	r0, r3
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	24000ac4 	.word	0x24000ac4

0800130c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800130c:	b480      	push	{r7}
 800130e:	b085      	sub	sp, #20
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800131c:	4b0b      	ldr	r3, [pc, #44]	@ (800134c <__NVIC_SetPriorityGrouping+0x40>)
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001322:	68ba      	ldr	r2, [r7, #8]
 8001324:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001328:	4013      	ands	r3, r2
 800132a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <__NVIC_SetPriorityGrouping+0x44>)
 8001336:	4313      	orrs	r3, r2
 8001338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800133a:	4a04      	ldr	r2, [pc, #16]	@ (800134c <__NVIC_SetPriorityGrouping+0x40>)
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	60d3      	str	r3, [r2, #12]
}
 8001340:	bf00      	nop
 8001342:	3714      	adds	r7, #20
 8001344:	46bd      	mov	sp, r7
 8001346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134a:	4770      	bx	lr
 800134c:	e000ed00 	.word	0xe000ed00
 8001350:	05fa0000 	.word	0x05fa0000

08001354 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001358:	4b04      	ldr	r3, [pc, #16]	@ (800136c <__NVIC_GetPriorityGrouping+0x18>)
 800135a:	68db      	ldr	r3, [r3, #12]
 800135c:	0a1b      	lsrs	r3, r3, #8
 800135e:	f003 0307 	and.w	r3, r3, #7
}
 8001362:	4618      	mov	r0, r3
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800137a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137e:	2b00      	cmp	r3, #0
 8001380:	db0b      	blt.n	800139a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001382:	88fb      	ldrh	r3, [r7, #6]
 8001384:	f003 021f 	and.w	r2, r3, #31
 8001388:	4907      	ldr	r1, [pc, #28]	@ (80013a8 <__NVIC_EnableIRQ+0x38>)
 800138a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	2001      	movs	r0, #1
 8001392:	fa00 f202 	lsl.w	r2, r0, r2
 8001396:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800139a:	bf00      	nop
 800139c:	370c      	adds	r7, #12
 800139e:	46bd      	mov	sp, r7
 80013a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a4:	4770      	bx	lr
 80013a6:	bf00      	nop
 80013a8:	e000e100 	.word	0xe000e100

080013ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b083      	sub	sp, #12
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4603      	mov	r3, r0
 80013b4:	6039      	str	r1, [r7, #0]
 80013b6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	db0a      	blt.n	80013d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	b2da      	uxtb	r2, r3
 80013c4:	490c      	ldr	r1, [pc, #48]	@ (80013f8 <__NVIC_SetPriority+0x4c>)
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	0112      	lsls	r2, r2, #4
 80013cc:	b2d2      	uxtb	r2, r2
 80013ce:	440b      	add	r3, r1
 80013d0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d4:	e00a      	b.n	80013ec <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4908      	ldr	r1, [pc, #32]	@ (80013fc <__NVIC_SetPriority+0x50>)
 80013dc:	88fb      	ldrh	r3, [r7, #6]
 80013de:	f003 030f 	and.w	r3, r3, #15
 80013e2:	3b04      	subs	r3, #4
 80013e4:	0112      	lsls	r2, r2, #4
 80013e6:	b2d2      	uxtb	r2, r2
 80013e8:	440b      	add	r3, r1
 80013ea:	761a      	strb	r2, [r3, #24]
}
 80013ec:	bf00      	nop
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001400:	b480      	push	{r7}
 8001402:	b089      	sub	sp, #36	@ 0x24
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800140c:	68fb      	ldr	r3, [r7, #12]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	f1c3 0307 	rsb	r3, r3, #7
 800141a:	2b04      	cmp	r3, #4
 800141c:	bf28      	it	cs
 800141e:	2304      	movcs	r3, #4
 8001420:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001422:	69fb      	ldr	r3, [r7, #28]
 8001424:	3304      	adds	r3, #4
 8001426:	2b06      	cmp	r3, #6
 8001428:	d902      	bls.n	8001430 <NVIC_EncodePriority+0x30>
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	3b03      	subs	r3, #3
 800142e:	e000      	b.n	8001432 <NVIC_EncodePriority+0x32>
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001434:	f04f 32ff 	mov.w	r2, #4294967295
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	43da      	mvns	r2, r3
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001448:	f04f 31ff 	mov.w	r1, #4294967295
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43d9      	mvns	r1, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001458:	4313      	orrs	r3, r2
         );
}
 800145a:	4618      	mov	r0, r3
 800145c:	3724      	adds	r7, #36	@ 0x24
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
	...

08001468 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	3b01      	subs	r3, #1
 8001474:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001478:	d301      	bcc.n	800147e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147a:	2301      	movs	r3, #1
 800147c:	e00f      	b.n	800149e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800147e:	4a0a      	ldr	r2, [pc, #40]	@ (80014a8 <SysTick_Config+0x40>)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	3b01      	subs	r3, #1
 8001484:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001486:	210f      	movs	r1, #15
 8001488:	f04f 30ff 	mov.w	r0, #4294967295
 800148c:	f7ff ff8e 	bl	80013ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001490:	4b05      	ldr	r3, [pc, #20]	@ (80014a8 <SysTick_Config+0x40>)
 8001492:	2200      	movs	r2, #0
 8001494:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001496:	4b04      	ldr	r3, [pc, #16]	@ (80014a8 <SysTick_Config+0x40>)
 8001498:	2207      	movs	r2, #7
 800149a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3708      	adds	r7, #8
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	e000e010 	.word	0xe000e010

080014ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f7ff ff29 	bl	800130c <__NVIC_SetPriorityGrouping>
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b086      	sub	sp, #24
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	60b9      	str	r1, [r7, #8]
 80014cc:	607a      	str	r2, [r7, #4]
 80014ce:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014d0:	f7ff ff40 	bl	8001354 <__NVIC_GetPriorityGrouping>
 80014d4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014d6:	687a      	ldr	r2, [r7, #4]
 80014d8:	68b9      	ldr	r1, [r7, #8]
 80014da:	6978      	ldr	r0, [r7, #20]
 80014dc:	f7ff ff90 	bl	8001400 <NVIC_EncodePriority>
 80014e0:	4602      	mov	r2, r0
 80014e2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014e6:	4611      	mov	r1, r2
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff5f 	bl	80013ac <__NVIC_SetPriority>
}
 80014ee:	bf00      	nop
 80014f0:	3718      	adds	r7, #24
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b082      	sub	sp, #8
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	4603      	mov	r3, r0
 80014fe:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001500:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001504:	4618      	mov	r0, r3
 8001506:	f7ff ff33 	bl	8001370 <__NVIC_EnableIRQ>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}

08001512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001512:	b580      	push	{r7, lr}
 8001514:	b082      	sub	sp, #8
 8001516:	af00      	add	r7, sp, #0
 8001518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800151a:	6878      	ldr	r0, [r7, #4]
 800151c:	f7ff ffa4 	bl	8001468 <SysTick_Config>
 8001520:	4603      	mov	r3, r0
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
	...

0800152c <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001530:	f3bf 8f5f 	dmb	sy
}
 8001534:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8001536:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <HAL_MPU_Disable+0x28>)
 8001538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800153a:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <HAL_MPU_Disable+0x28>)
 800153c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001540:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8001542:	4b05      	ldr	r3, [pc, #20]	@ (8001558 <HAL_MPU_Disable+0x2c>)
 8001544:	2200      	movs	r2, #0
 8001546:	605a      	str	r2, [r3, #4]
}
 8001548:	bf00      	nop
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
 8001552:	bf00      	nop
 8001554:	e000ed00 	.word	0xe000ed00
 8001558:	e000ed90 	.word	0xe000ed90

0800155c <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8001564:	4a0b      	ldr	r2, [pc, #44]	@ (8001594 <HAL_MPU_Enable+0x38>)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f043 0301 	orr.w	r3, r3, #1
 800156c:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_MPU_Enable+0x3c>)
 8001570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001572:	4a09      	ldr	r2, [pc, #36]	@ (8001598 <HAL_MPU_Enable+0x3c>)
 8001574:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001578:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800157a:	f3bf 8f4f 	dsb	sy
}
 800157e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001580:	f3bf 8f6f 	isb	sy
}
 8001584:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	e000ed90 	.word	0xe000ed90
 8001598:	e000ed00 	.word	0xe000ed00

0800159c <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	785a      	ldrb	r2, [r3, #1]
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <HAL_MPU_ConfigRegion+0x7c>)
 80015aa:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80015ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <HAL_MPU_ConfigRegion+0x7c>)
 80015ae:	691b      	ldr	r3, [r3, #16]
 80015b0:	4a19      	ldr	r2, [pc, #100]	@ (8001618 <HAL_MPU_ConfigRegion+0x7c>)
 80015b2:	f023 0301 	bic.w	r3, r3, #1
 80015b6:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80015b8:	4a17      	ldr	r2, [pc, #92]	@ (8001618 <HAL_MPU_ConfigRegion+0x7c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	7b1b      	ldrb	r3, [r3, #12]
 80015c4:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	7adb      	ldrb	r3, [r3, #11]
 80015ca:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80015cc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	7a9b      	ldrb	r3, [r3, #10]
 80015d2:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80015d4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7b5b      	ldrb	r3, [r3, #13]
 80015da:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80015dc:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	7b9b      	ldrb	r3, [r3, #14]
 80015e2:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80015e4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	7bdb      	ldrb	r3, [r3, #15]
 80015ea:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80015ec:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	7a5b      	ldrb	r3, [r3, #9]
 80015f2:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80015f4:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	7a1b      	ldrb	r3, [r3, #8]
 80015fa:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80015fc:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	7812      	ldrb	r2, [r2, #0]
 8001602:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001604:	4a04      	ldr	r2, [pc, #16]	@ (8001618 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8001606:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001608:	6113      	str	r3, [r2, #16]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr
 8001616:	bf00      	nop
 8001618:	e000ed90 	.word	0xe000ed90

0800161c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b086      	sub	sp, #24
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001624:	f7ff fe66 	bl	80012f4 <HAL_GetTick>
 8001628:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d101      	bne.n	8001634 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001630:	2301      	movs	r3, #1
 8001632:	e2dc      	b.n	8001bee <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800163a:	b2db      	uxtb	r3, r3
 800163c:	2b02      	cmp	r3, #2
 800163e:	d008      	beq.n	8001652 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2280      	movs	r2, #128	@ 0x80
 8001644:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2200      	movs	r2, #0
 800164a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e2cd      	b.n	8001bee <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a76      	ldr	r2, [pc, #472]	@ (8001830 <HAL_DMA_Abort+0x214>)
 8001658:	4293      	cmp	r3, r2
 800165a:	d04a      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a74      	ldr	r2, [pc, #464]	@ (8001834 <HAL_DMA_Abort+0x218>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d045      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a73      	ldr	r2, [pc, #460]	@ (8001838 <HAL_DMA_Abort+0x21c>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d040      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a71      	ldr	r2, [pc, #452]	@ (800183c <HAL_DMA_Abort+0x220>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d03b      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a70      	ldr	r2, [pc, #448]	@ (8001840 <HAL_DMA_Abort+0x224>)
 8001680:	4293      	cmp	r3, r2
 8001682:	d036      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a6e      	ldr	r2, [pc, #440]	@ (8001844 <HAL_DMA_Abort+0x228>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d031      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6d      	ldr	r2, [pc, #436]	@ (8001848 <HAL_DMA_Abort+0x22c>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d02c      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a6b      	ldr	r2, [pc, #428]	@ (800184c <HAL_DMA_Abort+0x230>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d027      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a6a      	ldr	r2, [pc, #424]	@ (8001850 <HAL_DMA_Abort+0x234>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d022      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a68      	ldr	r2, [pc, #416]	@ (8001854 <HAL_DMA_Abort+0x238>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d01d      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a67      	ldr	r2, [pc, #412]	@ (8001858 <HAL_DMA_Abort+0x23c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d018      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a65      	ldr	r2, [pc, #404]	@ (800185c <HAL_DMA_Abort+0x240>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a64      	ldr	r2, [pc, #400]	@ (8001860 <HAL_DMA_Abort+0x244>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d00e      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a62      	ldr	r2, [pc, #392]	@ (8001864 <HAL_DMA_Abort+0x248>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d009      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a61      	ldr	r2, [pc, #388]	@ (8001868 <HAL_DMA_Abort+0x24c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d004      	beq.n	80016f2 <HAL_DMA_Abort+0xd6>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a5f      	ldr	r2, [pc, #380]	@ (800186c <HAL_DMA_Abort+0x250>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d101      	bne.n	80016f6 <HAL_DMA_Abort+0xda>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_DMA_Abort+0xdc>
 80016f6:	2300      	movs	r3, #0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d013      	beq.n	8001724 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f022 021e 	bic.w	r2, r2, #30
 800170a:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695a      	ldr	r2, [r3, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800171a:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	e00a      	b.n	800173a <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f022 020e 	bic.w	r2, r2, #14
 8001732:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a3c      	ldr	r2, [pc, #240]	@ (8001830 <HAL_DMA_Abort+0x214>)
 8001740:	4293      	cmp	r3, r2
 8001742:	d072      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a3a      	ldr	r2, [pc, #232]	@ (8001834 <HAL_DMA_Abort+0x218>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d06d      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a39      	ldr	r2, [pc, #228]	@ (8001838 <HAL_DMA_Abort+0x21c>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d068      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a37      	ldr	r2, [pc, #220]	@ (800183c <HAL_DMA_Abort+0x220>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d063      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a36      	ldr	r2, [pc, #216]	@ (8001840 <HAL_DMA_Abort+0x224>)
 8001768:	4293      	cmp	r3, r2
 800176a:	d05e      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a34      	ldr	r2, [pc, #208]	@ (8001844 <HAL_DMA_Abort+0x228>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d059      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a33      	ldr	r2, [pc, #204]	@ (8001848 <HAL_DMA_Abort+0x22c>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d054      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a31      	ldr	r2, [pc, #196]	@ (800184c <HAL_DMA_Abort+0x230>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d04f      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a30      	ldr	r2, [pc, #192]	@ (8001850 <HAL_DMA_Abort+0x234>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d04a      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a2e      	ldr	r2, [pc, #184]	@ (8001854 <HAL_DMA_Abort+0x238>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d045      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a2d      	ldr	r2, [pc, #180]	@ (8001858 <HAL_DMA_Abort+0x23c>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d040      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a2b      	ldr	r2, [pc, #172]	@ (800185c <HAL_DMA_Abort+0x240>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d03b      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a2a      	ldr	r2, [pc, #168]	@ (8001860 <HAL_DMA_Abort+0x244>)
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d036      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a28      	ldr	r2, [pc, #160]	@ (8001864 <HAL_DMA_Abort+0x248>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d031      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a27      	ldr	r2, [pc, #156]	@ (8001868 <HAL_DMA_Abort+0x24c>)
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d02c      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a25      	ldr	r2, [pc, #148]	@ (800186c <HAL_DMA_Abort+0x250>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d027      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a24      	ldr	r2, [pc, #144]	@ (8001870 <HAL_DMA_Abort+0x254>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	d022      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a22      	ldr	r2, [pc, #136]	@ (8001874 <HAL_DMA_Abort+0x258>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d01d      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a21      	ldr	r2, [pc, #132]	@ (8001878 <HAL_DMA_Abort+0x25c>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d018      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <HAL_DMA_Abort+0x260>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d013      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	4a1e      	ldr	r2, [pc, #120]	@ (8001880 <HAL_DMA_Abort+0x264>)
 8001808:	4293      	cmp	r3, r2
 800180a:	d00e      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1c      	ldr	r2, [pc, #112]	@ (8001884 <HAL_DMA_Abort+0x268>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d009      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a1b      	ldr	r2, [pc, #108]	@ (8001888 <HAL_DMA_Abort+0x26c>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d004      	beq.n	800182a <HAL_DMA_Abort+0x20e>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a19      	ldr	r2, [pc, #100]	@ (800188c <HAL_DMA_Abort+0x270>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d132      	bne.n	8001890 <HAL_DMA_Abort+0x274>
 800182a:	2301      	movs	r3, #1
 800182c:	e031      	b.n	8001892 <HAL_DMA_Abort+0x276>
 800182e:	bf00      	nop
 8001830:	40020010 	.word	0x40020010
 8001834:	40020028 	.word	0x40020028
 8001838:	40020040 	.word	0x40020040
 800183c:	40020058 	.word	0x40020058
 8001840:	40020070 	.word	0x40020070
 8001844:	40020088 	.word	0x40020088
 8001848:	400200a0 	.word	0x400200a0
 800184c:	400200b8 	.word	0x400200b8
 8001850:	40020410 	.word	0x40020410
 8001854:	40020428 	.word	0x40020428
 8001858:	40020440 	.word	0x40020440
 800185c:	40020458 	.word	0x40020458
 8001860:	40020470 	.word	0x40020470
 8001864:	40020488 	.word	0x40020488
 8001868:	400204a0 	.word	0x400204a0
 800186c:	400204b8 	.word	0x400204b8
 8001870:	58025408 	.word	0x58025408
 8001874:	5802541c 	.word	0x5802541c
 8001878:	58025430 	.word	0x58025430
 800187c:	58025444 	.word	0x58025444
 8001880:	58025458 	.word	0x58025458
 8001884:	5802546c 	.word	0x5802546c
 8001888:	58025480 	.word	0x58025480
 800188c:	58025494 	.word	0x58025494
 8001890:	2300      	movs	r3, #0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d007      	beq.n	80018a6 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189a:	681a      	ldr	r2, [r3, #0]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80018a4:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a6d      	ldr	r2, [pc, #436]	@ (8001a60 <HAL_DMA_Abort+0x444>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d04a      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a6b      	ldr	r2, [pc, #428]	@ (8001a64 <HAL_DMA_Abort+0x448>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d045      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a6a      	ldr	r2, [pc, #424]	@ (8001a68 <HAL_DMA_Abort+0x44c>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d040      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a68      	ldr	r2, [pc, #416]	@ (8001a6c <HAL_DMA_Abort+0x450>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d03b      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a67      	ldr	r2, [pc, #412]	@ (8001a70 <HAL_DMA_Abort+0x454>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d036      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a65      	ldr	r2, [pc, #404]	@ (8001a74 <HAL_DMA_Abort+0x458>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d031      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a64      	ldr	r2, [pc, #400]	@ (8001a78 <HAL_DMA_Abort+0x45c>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d02c      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a62      	ldr	r2, [pc, #392]	@ (8001a7c <HAL_DMA_Abort+0x460>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d027      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a61      	ldr	r2, [pc, #388]	@ (8001a80 <HAL_DMA_Abort+0x464>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d022      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a5f      	ldr	r2, [pc, #380]	@ (8001a84 <HAL_DMA_Abort+0x468>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d01d      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a5e      	ldr	r2, [pc, #376]	@ (8001a88 <HAL_DMA_Abort+0x46c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d018      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a5c      	ldr	r2, [pc, #368]	@ (8001a8c <HAL_DMA_Abort+0x470>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d013      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a5b      	ldr	r2, [pc, #364]	@ (8001a90 <HAL_DMA_Abort+0x474>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00e      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a59      	ldr	r2, [pc, #356]	@ (8001a94 <HAL_DMA_Abort+0x478>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d009      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a58      	ldr	r2, [pc, #352]	@ (8001a98 <HAL_DMA_Abort+0x47c>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d004      	beq.n	8001946 <HAL_DMA_Abort+0x32a>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a56      	ldr	r2, [pc, #344]	@ (8001a9c <HAL_DMA_Abort+0x480>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d108      	bne.n	8001958 <HAL_DMA_Abort+0x33c>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 0201 	bic.w	r2, r2, #1
 8001954:	601a      	str	r2, [r3, #0]
 8001956:	e007      	b.n	8001968 <HAL_DMA_Abort+0x34c>
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 0201 	bic.w	r2, r2, #1
 8001966:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001968:	e013      	b.n	8001992 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800196a:	f7ff fcc3 	bl	80012f4 <HAL_GetTick>
 800196e:	4602      	mov	r2, r0
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	1ad3      	subs	r3, r2, r3
 8001974:	2b05      	cmp	r3, #5
 8001976:	d90c      	bls.n	8001992 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2220      	movs	r2, #32
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2203      	movs	r2, #3
 8001982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800198e:	2301      	movs	r3, #1
 8001990:	e12d      	b.n	8001bee <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b00      	cmp	r3, #0
 800199c:	d1e5      	bne.n	800196a <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a2f      	ldr	r2, [pc, #188]	@ (8001a60 <HAL_DMA_Abort+0x444>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d04a      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a2d      	ldr	r2, [pc, #180]	@ (8001a64 <HAL_DMA_Abort+0x448>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d045      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a2c      	ldr	r2, [pc, #176]	@ (8001a68 <HAL_DMA_Abort+0x44c>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d040      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a2a      	ldr	r2, [pc, #168]	@ (8001a6c <HAL_DMA_Abort+0x450>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d03b      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	4a29      	ldr	r2, [pc, #164]	@ (8001a70 <HAL_DMA_Abort+0x454>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d036      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a27      	ldr	r2, [pc, #156]	@ (8001a74 <HAL_DMA_Abort+0x458>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d031      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4a26      	ldr	r2, [pc, #152]	@ (8001a78 <HAL_DMA_Abort+0x45c>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d02c      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4a24      	ldr	r2, [pc, #144]	@ (8001a7c <HAL_DMA_Abort+0x460>)
 80019ea:	4293      	cmp	r3, r2
 80019ec:	d027      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	4a23      	ldr	r2, [pc, #140]	@ (8001a80 <HAL_DMA_Abort+0x464>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d022      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a21      	ldr	r2, [pc, #132]	@ (8001a84 <HAL_DMA_Abort+0x468>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d01d      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a20      	ldr	r2, [pc, #128]	@ (8001a88 <HAL_DMA_Abort+0x46c>)
 8001a08:	4293      	cmp	r3, r2
 8001a0a:	d018      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a1e      	ldr	r2, [pc, #120]	@ (8001a8c <HAL_DMA_Abort+0x470>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d013      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a1d      	ldr	r2, [pc, #116]	@ (8001a90 <HAL_DMA_Abort+0x474>)
 8001a1c:	4293      	cmp	r3, r2
 8001a1e:	d00e      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a1b      	ldr	r2, [pc, #108]	@ (8001a94 <HAL_DMA_Abort+0x478>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d009      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a1a      	ldr	r2, [pc, #104]	@ (8001a98 <HAL_DMA_Abort+0x47c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d004      	beq.n	8001a3e <HAL_DMA_Abort+0x422>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a18      	ldr	r2, [pc, #96]	@ (8001a9c <HAL_DMA_Abort+0x480>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d101      	bne.n	8001a42 <HAL_DMA_Abort+0x426>
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e000      	b.n	8001a44 <HAL_DMA_Abort+0x428>
 8001a42:	2300      	movs	r3, #0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d02b      	beq.n	8001aa0 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a4c:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a52:	f003 031f 	and.w	r3, r3, #31
 8001a56:	223f      	movs	r2, #63	@ 0x3f
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68bb      	ldr	r3, [r7, #8]
 8001a5c:	609a      	str	r2, [r3, #8]
 8001a5e:	e02a      	b.n	8001ab6 <HAL_DMA_Abort+0x49a>
 8001a60:	40020010 	.word	0x40020010
 8001a64:	40020028 	.word	0x40020028
 8001a68:	40020040 	.word	0x40020040
 8001a6c:	40020058 	.word	0x40020058
 8001a70:	40020070 	.word	0x40020070
 8001a74:	40020088 	.word	0x40020088
 8001a78:	400200a0 	.word	0x400200a0
 8001a7c:	400200b8 	.word	0x400200b8
 8001a80:	40020410 	.word	0x40020410
 8001a84:	40020428 	.word	0x40020428
 8001a88:	40020440 	.word	0x40020440
 8001a8c:	40020458 	.word	0x40020458
 8001a90:	40020470 	.word	0x40020470
 8001a94:	40020488 	.word	0x40020488
 8001a98:	400204a0 	.word	0x400204a0
 8001a9c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001aa4:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001aaa:	f003 031f 	and.w	r3, r3, #31
 8001aae:	2201      	movs	r2, #1
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	4a4f      	ldr	r2, [pc, #316]	@ (8001bf8 <HAL_DMA_Abort+0x5dc>)
 8001abc:	4293      	cmp	r3, r2
 8001abe:	d072      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a4d      	ldr	r2, [pc, #308]	@ (8001bfc <HAL_DMA_Abort+0x5e0>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d06d      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4a4c      	ldr	r2, [pc, #304]	@ (8001c00 <HAL_DMA_Abort+0x5e4>)
 8001ad0:	4293      	cmp	r3, r2
 8001ad2:	d068      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a4a      	ldr	r2, [pc, #296]	@ (8001c04 <HAL_DMA_Abort+0x5e8>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d063      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a49      	ldr	r2, [pc, #292]	@ (8001c08 <HAL_DMA_Abort+0x5ec>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d05e      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a47      	ldr	r2, [pc, #284]	@ (8001c0c <HAL_DMA_Abort+0x5f0>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d059      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a46      	ldr	r2, [pc, #280]	@ (8001c10 <HAL_DMA_Abort+0x5f4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d054      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a44      	ldr	r2, [pc, #272]	@ (8001c14 <HAL_DMA_Abort+0x5f8>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d04f      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a43      	ldr	r2, [pc, #268]	@ (8001c18 <HAL_DMA_Abort+0x5fc>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d04a      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a41      	ldr	r2, [pc, #260]	@ (8001c1c <HAL_DMA_Abort+0x600>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d045      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a40      	ldr	r2, [pc, #256]	@ (8001c20 <HAL_DMA_Abort+0x604>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d040      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a3e      	ldr	r2, [pc, #248]	@ (8001c24 <HAL_DMA_Abort+0x608>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d03b      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a3d      	ldr	r2, [pc, #244]	@ (8001c28 <HAL_DMA_Abort+0x60c>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d036      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a3b      	ldr	r2, [pc, #236]	@ (8001c2c <HAL_DMA_Abort+0x610>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d031      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a3a      	ldr	r2, [pc, #232]	@ (8001c30 <HAL_DMA_Abort+0x614>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d02c      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a38      	ldr	r2, [pc, #224]	@ (8001c34 <HAL_DMA_Abort+0x618>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d027      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a37      	ldr	r2, [pc, #220]	@ (8001c38 <HAL_DMA_Abort+0x61c>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d022      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	4a35      	ldr	r2, [pc, #212]	@ (8001c3c <HAL_DMA_Abort+0x620>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d01d      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	4a34      	ldr	r2, [pc, #208]	@ (8001c40 <HAL_DMA_Abort+0x624>)
 8001b70:	4293      	cmp	r3, r2
 8001b72:	d018      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a32      	ldr	r2, [pc, #200]	@ (8001c44 <HAL_DMA_Abort+0x628>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d013      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a31      	ldr	r2, [pc, #196]	@ (8001c48 <HAL_DMA_Abort+0x62c>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d00e      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2f      	ldr	r2, [pc, #188]	@ (8001c4c <HAL_DMA_Abort+0x630>)
 8001b8e:	4293      	cmp	r3, r2
 8001b90:	d009      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a2e      	ldr	r2, [pc, #184]	@ (8001c50 <HAL_DMA_Abort+0x634>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d004      	beq.n	8001ba6 <HAL_DMA_Abort+0x58a>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2c      	ldr	r2, [pc, #176]	@ (8001c54 <HAL_DMA_Abort+0x638>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d101      	bne.n	8001baa <HAL_DMA_Abort+0x58e>
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e000      	b.n	8001bac <HAL_DMA_Abort+0x590>
 8001baa:	2300      	movs	r3, #0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d015      	beq.n	8001bdc <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8001bb8:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d00c      	beq.n	8001bdc <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001bcc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001bd0:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8001bda:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2200      	movs	r2, #0
 8001be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	40020010 	.word	0x40020010
 8001bfc:	40020028 	.word	0x40020028
 8001c00:	40020040 	.word	0x40020040
 8001c04:	40020058 	.word	0x40020058
 8001c08:	40020070 	.word	0x40020070
 8001c0c:	40020088 	.word	0x40020088
 8001c10:	400200a0 	.word	0x400200a0
 8001c14:	400200b8 	.word	0x400200b8
 8001c18:	40020410 	.word	0x40020410
 8001c1c:	40020428 	.word	0x40020428
 8001c20:	40020440 	.word	0x40020440
 8001c24:	40020458 	.word	0x40020458
 8001c28:	40020470 	.word	0x40020470
 8001c2c:	40020488 	.word	0x40020488
 8001c30:	400204a0 	.word	0x400204a0
 8001c34:	400204b8 	.word	0x400204b8
 8001c38:	58025408 	.word	0x58025408
 8001c3c:	5802541c 	.word	0x5802541c
 8001c40:	58025430 	.word	0x58025430
 8001c44:	58025444 	.word	0x58025444
 8001c48:	58025458 	.word	0x58025458
 8001c4c:	5802546c 	.word	0x5802546c
 8001c50:	58025480 	.word	0x58025480
 8001c54:	58025494 	.word	0x58025494

08001c58 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e237      	b.n	80020da <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d004      	beq.n	8001c80 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2280      	movs	r2, #128	@ 0x80
 8001c7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e22c      	b.n	80020da <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a5c      	ldr	r2, [pc, #368]	@ (8001df8 <HAL_DMA_Abort_IT+0x1a0>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d04a      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8001dfc <HAL_DMA_Abort_IT+0x1a4>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d045      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a59      	ldr	r2, [pc, #356]	@ (8001e00 <HAL_DMA_Abort_IT+0x1a8>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d040      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a58      	ldr	r2, [pc, #352]	@ (8001e04 <HAL_DMA_Abort_IT+0x1ac>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d03b      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a56      	ldr	r2, [pc, #344]	@ (8001e08 <HAL_DMA_Abort_IT+0x1b0>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d036      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a55      	ldr	r2, [pc, #340]	@ (8001e0c <HAL_DMA_Abort_IT+0x1b4>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d031      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a53      	ldr	r2, [pc, #332]	@ (8001e10 <HAL_DMA_Abort_IT+0x1b8>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d02c      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a52      	ldr	r2, [pc, #328]	@ (8001e14 <HAL_DMA_Abort_IT+0x1bc>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d027      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a50      	ldr	r2, [pc, #320]	@ (8001e18 <HAL_DMA_Abort_IT+0x1c0>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d022      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a4f      	ldr	r2, [pc, #316]	@ (8001e1c <HAL_DMA_Abort_IT+0x1c4>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d01d      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a4d      	ldr	r2, [pc, #308]	@ (8001e20 <HAL_DMA_Abort_IT+0x1c8>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d018      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4a4c      	ldr	r2, [pc, #304]	@ (8001e24 <HAL_DMA_Abort_IT+0x1cc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d013      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a4a      	ldr	r2, [pc, #296]	@ (8001e28 <HAL_DMA_Abort_IT+0x1d0>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d00e      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	4a49      	ldr	r2, [pc, #292]	@ (8001e2c <HAL_DMA_Abort_IT+0x1d4>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d009      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a47      	ldr	r2, [pc, #284]	@ (8001e30 <HAL_DMA_Abort_IT+0x1d8>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d004      	beq.n	8001d20 <HAL_DMA_Abort_IT+0xc8>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a46      	ldr	r2, [pc, #280]	@ (8001e34 <HAL_DMA_Abort_IT+0x1dc>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d101      	bne.n	8001d24 <HAL_DMA_Abort_IT+0xcc>
 8001d20:	2301      	movs	r3, #1
 8001d22:	e000      	b.n	8001d26 <HAL_DMA_Abort_IT+0xce>
 8001d24:	2300      	movs	r3, #0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	f000 8086 	beq.w	8001e38 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2204      	movs	r2, #4
 8001d30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a2f      	ldr	r2, [pc, #188]	@ (8001df8 <HAL_DMA_Abort_IT+0x1a0>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d04a      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a2e      	ldr	r2, [pc, #184]	@ (8001dfc <HAL_DMA_Abort_IT+0x1a4>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d045      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e00 <HAL_DMA_Abort_IT+0x1a8>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d040      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4a2b      	ldr	r2, [pc, #172]	@ (8001e04 <HAL_DMA_Abort_IT+0x1ac>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d03b      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a29      	ldr	r2, [pc, #164]	@ (8001e08 <HAL_DMA_Abort_IT+0x1b0>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d036      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a28      	ldr	r2, [pc, #160]	@ (8001e0c <HAL_DMA_Abort_IT+0x1b4>)
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d031      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a26      	ldr	r2, [pc, #152]	@ (8001e10 <HAL_DMA_Abort_IT+0x1b8>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d02c      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a25      	ldr	r2, [pc, #148]	@ (8001e14 <HAL_DMA_Abort_IT+0x1bc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d027      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a23      	ldr	r2, [pc, #140]	@ (8001e18 <HAL_DMA_Abort_IT+0x1c0>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d022      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a22      	ldr	r2, [pc, #136]	@ (8001e1c <HAL_DMA_Abort_IT+0x1c4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d01d      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	@ (8001e20 <HAL_DMA_Abort_IT+0x1c8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d018      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1f      	ldr	r2, [pc, #124]	@ (8001e24 <HAL_DMA_Abort_IT+0x1cc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	@ (8001e28 <HAL_DMA_Abort_IT+0x1d0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00e      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1c      	ldr	r2, [pc, #112]	@ (8001e2c <HAL_DMA_Abort_IT+0x1d4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8001e30 <HAL_DMA_Abort_IT+0x1d8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_DMA_Abort_IT+0x17c>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a19      	ldr	r2, [pc, #100]	@ (8001e34 <HAL_DMA_Abort_IT+0x1dc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d108      	bne.n	8001de6 <HAL_DMA_Abort_IT+0x18e>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	f022 0201 	bic.w	r2, r2, #1
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	e178      	b.n	80020d8 <HAL_DMA_Abort_IT+0x480>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f022 0201 	bic.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	e16f      	b.n	80020d8 <HAL_DMA_Abort_IT+0x480>
 8001df8:	40020010 	.word	0x40020010
 8001dfc:	40020028 	.word	0x40020028
 8001e00:	40020040 	.word	0x40020040
 8001e04:	40020058 	.word	0x40020058
 8001e08:	40020070 	.word	0x40020070
 8001e0c:	40020088 	.word	0x40020088
 8001e10:	400200a0 	.word	0x400200a0
 8001e14:	400200b8 	.word	0x400200b8
 8001e18:	40020410 	.word	0x40020410
 8001e1c:	40020428 	.word	0x40020428
 8001e20:	40020440 	.word	0x40020440
 8001e24:	40020458 	.word	0x40020458
 8001e28:	40020470 	.word	0x40020470
 8001e2c:	40020488 	.word	0x40020488
 8001e30:	400204a0 	.word	0x400204a0
 8001e34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f022 020e 	bic.w	r2, r2, #14
 8001e46:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a6c      	ldr	r2, [pc, #432]	@ (8002000 <HAL_DMA_Abort_IT+0x3a8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d04a      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a6b      	ldr	r2, [pc, #428]	@ (8002004 <HAL_DMA_Abort_IT+0x3ac>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d045      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a69      	ldr	r2, [pc, #420]	@ (8002008 <HAL_DMA_Abort_IT+0x3b0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d040      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a68      	ldr	r2, [pc, #416]	@ (800200c <HAL_DMA_Abort_IT+0x3b4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d03b      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a66      	ldr	r2, [pc, #408]	@ (8002010 <HAL_DMA_Abort_IT+0x3b8>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d036      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a65      	ldr	r2, [pc, #404]	@ (8002014 <HAL_DMA_Abort_IT+0x3bc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d031      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a63      	ldr	r2, [pc, #396]	@ (8002018 <HAL_DMA_Abort_IT+0x3c0>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d02c      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a62      	ldr	r2, [pc, #392]	@ (800201c <HAL_DMA_Abort_IT+0x3c4>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d027      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a60      	ldr	r2, [pc, #384]	@ (8002020 <HAL_DMA_Abort_IT+0x3c8>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d022      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a5f      	ldr	r2, [pc, #380]	@ (8002024 <HAL_DMA_Abort_IT+0x3cc>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d01d      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a5d      	ldr	r2, [pc, #372]	@ (8002028 <HAL_DMA_Abort_IT+0x3d0>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d018      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a5c      	ldr	r2, [pc, #368]	@ (800202c <HAL_DMA_Abort_IT+0x3d4>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d013      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a5a      	ldr	r2, [pc, #360]	@ (8002030 <HAL_DMA_Abort_IT+0x3d8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00e      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a59      	ldr	r2, [pc, #356]	@ (8002034 <HAL_DMA_Abort_IT+0x3dc>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d009      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a57      	ldr	r2, [pc, #348]	@ (8002038 <HAL_DMA_Abort_IT+0x3e0>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d004      	beq.n	8001ee8 <HAL_DMA_Abort_IT+0x290>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a56      	ldr	r2, [pc, #344]	@ (800203c <HAL_DMA_Abort_IT+0x3e4>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d108      	bne.n	8001efa <HAL_DMA_Abort_IT+0x2a2>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0201 	bic.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	e007      	b.n	8001f0a <HAL_DMA_Abort_IT+0x2b2>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0201 	bic.w	r2, r2, #1
 8001f08:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a3c      	ldr	r2, [pc, #240]	@ (8002000 <HAL_DMA_Abort_IT+0x3a8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d072      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a3a      	ldr	r2, [pc, #232]	@ (8002004 <HAL_DMA_Abort_IT+0x3ac>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d06d      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a39      	ldr	r2, [pc, #228]	@ (8002008 <HAL_DMA_Abort_IT+0x3b0>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d068      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a37      	ldr	r2, [pc, #220]	@ (800200c <HAL_DMA_Abort_IT+0x3b4>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d063      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a36      	ldr	r2, [pc, #216]	@ (8002010 <HAL_DMA_Abort_IT+0x3b8>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d05e      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a34      	ldr	r2, [pc, #208]	@ (8002014 <HAL_DMA_Abort_IT+0x3bc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d059      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a33      	ldr	r2, [pc, #204]	@ (8002018 <HAL_DMA_Abort_IT+0x3c0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d054      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a31      	ldr	r2, [pc, #196]	@ (800201c <HAL_DMA_Abort_IT+0x3c4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d04f      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a30      	ldr	r2, [pc, #192]	@ (8002020 <HAL_DMA_Abort_IT+0x3c8>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d04a      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a2e      	ldr	r2, [pc, #184]	@ (8002024 <HAL_DMA_Abort_IT+0x3cc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d045      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a2d      	ldr	r2, [pc, #180]	@ (8002028 <HAL_DMA_Abort_IT+0x3d0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d040      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <HAL_DMA_Abort_IT+0x3d4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d03b      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2a      	ldr	r2, [pc, #168]	@ (8002030 <HAL_DMA_Abort_IT+0x3d8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d036      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a28      	ldr	r2, [pc, #160]	@ (8002034 <HAL_DMA_Abort_IT+0x3dc>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d031      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a27      	ldr	r2, [pc, #156]	@ (8002038 <HAL_DMA_Abort_IT+0x3e0>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d02c      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a25      	ldr	r2, [pc, #148]	@ (800203c <HAL_DMA_Abort_IT+0x3e4>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d027      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a24      	ldr	r2, [pc, #144]	@ (8002040 <HAL_DMA_Abort_IT+0x3e8>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a22      	ldr	r2, [pc, #136]	@ (8002044 <HAL_DMA_Abort_IT+0x3ec>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d01d      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a21      	ldr	r2, [pc, #132]	@ (8002048 <HAL_DMA_Abort_IT+0x3f0>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d018      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800204c <HAL_DMA_Abort_IT+0x3f4>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d013      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a1e      	ldr	r2, [pc, #120]	@ (8002050 <HAL_DMA_Abort_IT+0x3f8>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00e      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a1c      	ldr	r2, [pc, #112]	@ (8002054 <HAL_DMA_Abort_IT+0x3fc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d009      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a1b      	ldr	r2, [pc, #108]	@ (8002058 <HAL_DMA_Abort_IT+0x400>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d004      	beq.n	8001ffa <HAL_DMA_Abort_IT+0x3a2>
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	4a19      	ldr	r2, [pc, #100]	@ (800205c <HAL_DMA_Abort_IT+0x404>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d132      	bne.n	8002060 <HAL_DMA_Abort_IT+0x408>
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e031      	b.n	8002062 <HAL_DMA_Abort_IT+0x40a>
 8001ffe:	bf00      	nop
 8002000:	40020010 	.word	0x40020010
 8002004:	40020028 	.word	0x40020028
 8002008:	40020040 	.word	0x40020040
 800200c:	40020058 	.word	0x40020058
 8002010:	40020070 	.word	0x40020070
 8002014:	40020088 	.word	0x40020088
 8002018:	400200a0 	.word	0x400200a0
 800201c:	400200b8 	.word	0x400200b8
 8002020:	40020410 	.word	0x40020410
 8002024:	40020428 	.word	0x40020428
 8002028:	40020440 	.word	0x40020440
 800202c:	40020458 	.word	0x40020458
 8002030:	40020470 	.word	0x40020470
 8002034:	40020488 	.word	0x40020488
 8002038:	400204a0 	.word	0x400204a0
 800203c:	400204b8 	.word	0x400204b8
 8002040:	58025408 	.word	0x58025408
 8002044:	5802541c 	.word	0x5802541c
 8002048:	58025430 	.word	0x58025430
 800204c:	58025444 	.word	0x58025444
 8002050:	58025458 	.word	0x58025458
 8002054:	5802546c 	.word	0x5802546c
 8002058:	58025480 	.word	0x58025480
 800205c:	58025494 	.word	0x58025494
 8002060:	2300      	movs	r3, #0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d028      	beq.n	80020b8 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800206a:	681a      	ldr	r2, [r3, #0]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002070:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002074:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	2201      	movs	r2, #1
 8002086:	409a      	lsls	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8002094:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800209a:	2b00      	cmp	r3, #0
 800209c:	d00c      	beq.n	80020b8 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020a8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80020ac:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80020b6:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2200      	movs	r2, #0
 80020c4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80020d4:	6878      	ldr	r0, [r7, #4]
 80020d6:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3710      	adds	r7, #16
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop

080020e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b089      	sub	sp, #36	@ 0x24
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
 80020ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80020f2:	4b86      	ldr	r3, [pc, #536]	@ (800230c <HAL_GPIO_Init+0x228>)
 80020f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80020f6:	e18c      	b.n	8002412 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	2101      	movs	r1, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa01 f303 	lsl.w	r3, r1, r3
 8002104:	4013      	ands	r3, r2
 8002106:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	2b00      	cmp	r3, #0
 800210c:	f000 817e 	beq.w	800240c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	2b01      	cmp	r3, #1
 800211a:	d005      	beq.n	8002128 <HAL_GPIO_Init+0x44>
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0303 	and.w	r3, r3, #3
 8002124:	2b02      	cmp	r3, #2
 8002126:	d130      	bne.n	800218a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	2203      	movs	r2, #3
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	69ba      	ldr	r2, [r7, #24]
 800213c:	4013      	ands	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68da      	ldr	r2, [r3, #12]
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	fa02 f303 	lsl.w	r3, r2, r3
 800214c:	69ba      	ldr	r2, [r7, #24]
 800214e:	4313      	orrs	r3, r2
 8002150:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800215e:	2201      	movs	r2, #1
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	fa02 f303 	lsl.w	r3, r2, r3
 8002166:	43db      	mvns	r3, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4013      	ands	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	091b      	lsrs	r3, r3, #4
 8002174:	f003 0201 	and.w	r2, r3, #1
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	69ba      	ldr	r2, [r7, #24]
 8002188:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f003 0303 	and.w	r3, r3, #3
 8002192:	2b03      	cmp	r3, #3
 8002194:	d017      	beq.n	80021c6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	2203      	movs	r2, #3
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	689a      	ldr	r2, [r3, #8]
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	69ba      	ldr	r2, [r7, #24]
 80021bc:	4313      	orrs	r3, r2
 80021be:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	f003 0303 	and.w	r3, r3, #3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d123      	bne.n	800221a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	08da      	lsrs	r2, r3, #3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	3208      	adds	r2, #8
 80021da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0307 	and.w	r3, r3, #7
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	220f      	movs	r2, #15
 80021ea:	fa02 f303 	lsl.w	r3, r2, r3
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	691a      	ldr	r2, [r3, #16]
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	009b      	lsls	r3, r3, #2
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4313      	orrs	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	08da      	lsrs	r2, r3, #3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	3208      	adds	r2, #8
 8002214:	69b9      	ldr	r1, [r7, #24]
 8002216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002220:	69fb      	ldr	r3, [r7, #28]
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	2203      	movs	r2, #3
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	43db      	mvns	r3, r3
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	4013      	ands	r3, r2
 8002230:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f003 0203 	and.w	r2, r3, #3
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002256:	2b00      	cmp	r3, #0
 8002258:	f000 80d8 	beq.w	800240c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800225c:	4b2c      	ldr	r3, [pc, #176]	@ (8002310 <HAL_GPIO_Init+0x22c>)
 800225e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002262:	4a2b      	ldr	r2, [pc, #172]	@ (8002310 <HAL_GPIO_Init+0x22c>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800226c:	4b28      	ldr	r3, [pc, #160]	@ (8002310 <HAL_GPIO_Init+0x22c>)
 800226e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002272:	f003 0302 	and.w	r3, r3, #2
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800227a:	4a26      	ldr	r2, [pc, #152]	@ (8002314 <HAL_GPIO_Init+0x230>)
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	089b      	lsrs	r3, r3, #2
 8002280:	3302      	adds	r3, #2
 8002282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	009b      	lsls	r3, r3, #2
 8002290:	220f      	movs	r2, #15
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	4a1d      	ldr	r2, [pc, #116]	@ (8002318 <HAL_GPIO_Init+0x234>)
 80022a2:	4293      	cmp	r3, r2
 80022a4:	d04a      	beq.n	800233c <HAL_GPIO_Init+0x258>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a1c      	ldr	r2, [pc, #112]	@ (800231c <HAL_GPIO_Init+0x238>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02b      	beq.n	8002306 <HAL_GPIO_Init+0x222>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002320 <HAL_GPIO_Init+0x23c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d025      	beq.n	8002302 <HAL_GPIO_Init+0x21e>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a1a      	ldr	r2, [pc, #104]	@ (8002324 <HAL_GPIO_Init+0x240>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d01f      	beq.n	80022fe <HAL_GPIO_Init+0x21a>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a19      	ldr	r2, [pc, #100]	@ (8002328 <HAL_GPIO_Init+0x244>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d019      	beq.n	80022fa <HAL_GPIO_Init+0x216>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a18      	ldr	r2, [pc, #96]	@ (800232c <HAL_GPIO_Init+0x248>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d013      	beq.n	80022f6 <HAL_GPIO_Init+0x212>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a17      	ldr	r2, [pc, #92]	@ (8002330 <HAL_GPIO_Init+0x24c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00d      	beq.n	80022f2 <HAL_GPIO_Init+0x20e>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a16      	ldr	r2, [pc, #88]	@ (8002334 <HAL_GPIO_Init+0x250>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d007      	beq.n	80022ee <HAL_GPIO_Init+0x20a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a15      	ldr	r2, [pc, #84]	@ (8002338 <HAL_GPIO_Init+0x254>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d101      	bne.n	80022ea <HAL_GPIO_Init+0x206>
 80022e6:	2309      	movs	r3, #9
 80022e8:	e029      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022ea:	230a      	movs	r3, #10
 80022ec:	e027      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e025      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022f2:	2306      	movs	r3, #6
 80022f4:	e023      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022f6:	2305      	movs	r3, #5
 80022f8:	e021      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022fa:	2304      	movs	r3, #4
 80022fc:	e01f      	b.n	800233e <HAL_GPIO_Init+0x25a>
 80022fe:	2303      	movs	r3, #3
 8002300:	e01d      	b.n	800233e <HAL_GPIO_Init+0x25a>
 8002302:	2302      	movs	r3, #2
 8002304:	e01b      	b.n	800233e <HAL_GPIO_Init+0x25a>
 8002306:	2301      	movs	r3, #1
 8002308:	e019      	b.n	800233e <HAL_GPIO_Init+0x25a>
 800230a:	bf00      	nop
 800230c:	58000080 	.word	0x58000080
 8002310:	58024400 	.word	0x58024400
 8002314:	58000400 	.word	0x58000400
 8002318:	58020000 	.word	0x58020000
 800231c:	58020400 	.word	0x58020400
 8002320:	58020800 	.word	0x58020800
 8002324:	58020c00 	.word	0x58020c00
 8002328:	58021000 	.word	0x58021000
 800232c:	58021400 	.word	0x58021400
 8002330:	58021800 	.word	0x58021800
 8002334:	58021c00 	.word	0x58021c00
 8002338:	58022400 	.word	0x58022400
 800233c:	2300      	movs	r3, #0
 800233e:	69fa      	ldr	r2, [r7, #28]
 8002340:	f002 0203 	and.w	r2, r2, #3
 8002344:	0092      	lsls	r2, r2, #2
 8002346:	4093      	lsls	r3, r2
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234e:	4938      	ldr	r1, [pc, #224]	@ (8002430 <HAL_GPIO_Init+0x34c>)
 8002350:	69fb      	ldr	r3, [r7, #28]
 8002352:	089b      	lsrs	r3, r3, #2
 8002354:	3302      	adds	r3, #2
 8002356:	69ba      	ldr	r2, [r7, #24]
 8002358:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800235c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	43db      	mvns	r3, r3
 8002368:	69ba      	ldr	r2, [r7, #24]
 800236a:	4013      	ands	r3, r2
 800236c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d003      	beq.n	8002382 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800237a:	69ba      	ldr	r2, [r7, #24]
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	4313      	orrs	r3, r2
 8002380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002382:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800238a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023b0:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	43db      	mvns	r3, r3
 80023c2:	69ba      	ldr	r2, [r7, #24]
 80023c4:	4013      	ands	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	685b      	ldr	r3, [r3, #4]
 80023cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d003      	beq.n	80023dc <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	4313      	orrs	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80023e2:	697b      	ldr	r3, [r7, #20]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	43db      	mvns	r3, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4013      	ands	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d003      	beq.n	8002406 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	4313      	orrs	r3, r2
 8002404:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	3301      	adds	r3, #1
 8002410:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	fa22 f303 	lsr.w	r3, r2, r3
 800241c:	2b00      	cmp	r3, #0
 800241e:	f47f ae6b 	bne.w	80020f8 <HAL_GPIO_Init+0x14>
  }
}
 8002422:	bf00      	nop
 8002424:	bf00      	nop
 8002426:	3724      	adds	r7, #36	@ 0x24
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr
 8002430:	58000400 	.word	0x58000400

08002434 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	460b      	mov	r3, r1
 800243e:	807b      	strh	r3, [r7, #2]
 8002440:	4613      	mov	r3, r2
 8002442:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002444:	787b      	ldrb	r3, [r7, #1]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800244a:	887a      	ldrh	r2, [r7, #2]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002450:	e003      	b.n	800245a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002452:	887b      	ldrh	r3, [r7, #2]
 8002454:	041a      	lsls	r2, r3, #16
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	619a      	str	r2, [r3, #24]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
	...

08002468 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b084      	sub	sp, #16
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002470:	4b19      	ldr	r3, [pc, #100]	@ (80024d8 <HAL_PWREx_ConfigSupply+0x70>)
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b04      	cmp	r3, #4
 800247a:	d00a      	beq.n	8002492 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800247c:	4b16      	ldr	r3, [pc, #88]	@ (80024d8 <HAL_PWREx_ConfigSupply+0x70>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	f003 0307 	and.w	r3, r3, #7
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	429a      	cmp	r2, r3
 8002488:	d001      	beq.n	800248e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e01f      	b.n	80024ce <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800248e:	2300      	movs	r3, #0
 8002490:	e01d      	b.n	80024ce <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002492:	4b11      	ldr	r3, [pc, #68]	@ (80024d8 <HAL_PWREx_ConfigSupply+0x70>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	f023 0207 	bic.w	r2, r3, #7
 800249a:	490f      	ldr	r1, [pc, #60]	@ (80024d8 <HAL_PWREx_ConfigSupply+0x70>)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4313      	orrs	r3, r2
 80024a0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024a2:	f7fe ff27 	bl	80012f4 <HAL_GetTick>
 80024a6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024a8:	e009      	b.n	80024be <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80024aa:	f7fe ff23 	bl	80012f4 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80024b8:	d901      	bls.n	80024be <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e007      	b.n	80024ce <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80024be:	4b06      	ldr	r3, [pc, #24]	@ (80024d8 <HAL_PWREx_ConfigSupply+0x70>)
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80024c6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024ca:	d1ee      	bne.n	80024aa <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80024cc:	2300      	movs	r3, #0
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	3710      	adds	r7, #16
 80024d2:	46bd      	mov	sp, r7
 80024d4:	bd80      	pop	{r7, pc}
 80024d6:	bf00      	nop
 80024d8:	58024800 	.word	0x58024800

080024dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b08c      	sub	sp, #48	@ 0x30
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e3c8      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	f000 8087 	beq.w	800260a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fc:	4b88      	ldr	r3, [pc, #544]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002504:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002506:	4b86      	ldr	r3, [pc, #536]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002508:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250a:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800250c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800250e:	2b10      	cmp	r3, #16
 8002510:	d007      	beq.n	8002522 <HAL_RCC_OscConfig+0x46>
 8002512:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002514:	2b18      	cmp	r3, #24
 8002516:	d110      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
 8002518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	2b02      	cmp	r3, #2
 8002520:	d10b      	bne.n	800253a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002522:	4b7f      	ldr	r3, [pc, #508]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252a:	2b00      	cmp	r3, #0
 800252c:	d06c      	beq.n	8002608 <HAL_RCC_OscConfig+0x12c>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d168      	bne.n	8002608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e3a2      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	685b      	ldr	r3, [r3, #4]
 800253e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002542:	d106      	bne.n	8002552 <HAL_RCC_OscConfig+0x76>
 8002544:	4b76      	ldr	r3, [pc, #472]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a75      	ldr	r2, [pc, #468]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800254a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800254e:	6013      	str	r3, [r2, #0]
 8002550:	e02e      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10c      	bne.n	8002574 <HAL_RCC_OscConfig+0x98>
 800255a:	4b71      	ldr	r3, [pc, #452]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a70      	ldr	r2, [pc, #448]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002560:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002564:	6013      	str	r3, [r2, #0]
 8002566:	4b6e      	ldr	r3, [pc, #440]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a6d      	ldr	r2, [pc, #436]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800256c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002570:	6013      	str	r3, [r2, #0]
 8002572:	e01d      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800257c:	d10c      	bne.n	8002598 <HAL_RCC_OscConfig+0xbc>
 800257e:	4b68      	ldr	r3, [pc, #416]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a67      	ldr	r2, [pc, #412]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002588:	6013      	str	r3, [r2, #0]
 800258a:	4b65      	ldr	r3, [pc, #404]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4a64      	ldr	r2, [pc, #400]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002594:	6013      	str	r3, [r2, #0]
 8002596:	e00b      	b.n	80025b0 <HAL_RCC_OscConfig+0xd4>
 8002598:	4b61      	ldr	r3, [pc, #388]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a60      	ldr	r2, [pc, #384]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800259e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025a2:	6013      	str	r3, [r2, #0]
 80025a4:	4b5e      	ldr	r3, [pc, #376]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a5d      	ldr	r2, [pc, #372]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80025aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80025ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d013      	beq.n	80025e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b8:	f7fe fe9c 	bl	80012f4 <HAL_GetTick>
 80025bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025be:	e008      	b.n	80025d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c0:	f7fe fe98 	bl	80012f4 <HAL_GetTick>
 80025c4:	4602      	mov	r2, r0
 80025c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025c8:	1ad3      	subs	r3, r2, r3
 80025ca:	2b64      	cmp	r3, #100	@ 0x64
 80025cc:	d901      	bls.n	80025d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80025ce:	2303      	movs	r3, #3
 80025d0:	e356      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80025d2:	4b53      	ldr	r3, [pc, #332]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d0f0      	beq.n	80025c0 <HAL_RCC_OscConfig+0xe4>
 80025de:	e014      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e0:	f7fe fe88 	bl	80012f4 <HAL_GetTick>
 80025e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025e8:	f7fe fe84 	bl	80012f4 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b64      	cmp	r3, #100	@ 0x64
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e342      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80025fa:	4b49      	ldr	r3, [pc, #292]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1f0      	bne.n	80025e8 <HAL_RCC_OscConfig+0x10c>
 8002606:	e000      	b.n	800260a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	f000 808c 	beq.w	8002730 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002618:	4b41      	ldr	r3, [pc, #260]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002620:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002622:	4b3f      	ldr	r3, [pc, #252]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002624:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002626:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002628:	6a3b      	ldr	r3, [r7, #32]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d007      	beq.n	800263e <HAL_RCC_OscConfig+0x162>
 800262e:	6a3b      	ldr	r3, [r7, #32]
 8002630:	2b18      	cmp	r3, #24
 8002632:	d137      	bne.n	80026a4 <HAL_RCC_OscConfig+0x1c8>
 8002634:	69fb      	ldr	r3, [r7, #28]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d132      	bne.n	80026a4 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800263e:	4b38      	ldr	r3, [pc, #224]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0304 	and.w	r3, r3, #4
 8002646:	2b00      	cmp	r3, #0
 8002648:	d005      	beq.n	8002656 <HAL_RCC_OscConfig+0x17a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	68db      	ldr	r3, [r3, #12]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e314      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002656:	4b32      	ldr	r3, [pc, #200]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f023 0219 	bic.w	r2, r3, #25
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	68db      	ldr	r3, [r3, #12]
 8002662:	492f      	ldr	r1, [pc, #188]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002664:	4313      	orrs	r3, r2
 8002666:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fe44 	bl	80012f4 <HAL_GetTick>
 800266c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002670:	f7fe fe40 	bl	80012f4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e2fe      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002682:	4b27      	ldr	r3, [pc, #156]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 0304 	and.w	r3, r3, #4
 800268a:	2b00      	cmp	r3, #0
 800268c:	d0f0      	beq.n	8002670 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800268e:	4b24      	ldr	r3, [pc, #144]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691b      	ldr	r3, [r3, #16]
 800269a:	061b      	lsls	r3, r3, #24
 800269c:	4920      	ldr	r1, [pc, #128]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80026a2:	e045      	b.n	8002730 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68db      	ldr	r3, [r3, #12]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d026      	beq.n	80026fa <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026ac:	4b1c      	ldr	r3, [pc, #112]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f023 0219 	bic.w	r2, r3, #25
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	4919      	ldr	r1, [pc, #100]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80026ba:	4313      	orrs	r3, r2
 80026bc:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026be:	f7fe fe19 	bl	80012f4 <HAL_GetTick>
 80026c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026c4:	e008      	b.n	80026d8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026c6:	f7fe fe15 	bl	80012f4 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	2b02      	cmp	r3, #2
 80026d2:	d901      	bls.n	80026d8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80026d4:	2303      	movs	r3, #3
 80026d6:	e2d3      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026d8:	4b11      	ldr	r3, [pc, #68]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d0f0      	beq.n	80026c6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	691b      	ldr	r3, [r3, #16]
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	490b      	ldr	r1, [pc, #44]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80026f4:	4313      	orrs	r3, r2
 80026f6:	604b      	str	r3, [r1, #4]
 80026f8:	e01a      	b.n	8002730 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026fa:	4b09      	ldr	r3, [pc, #36]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4a08      	ldr	r2, [pc, #32]	@ (8002720 <HAL_RCC_OscConfig+0x244>)
 8002700:	f023 0301 	bic.w	r3, r3, #1
 8002704:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002706:	f7fe fdf5 	bl	80012f4 <HAL_GetTick>
 800270a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800270e:	f7fe fdf1 	bl	80012f4 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	2b02      	cmp	r3, #2
 800271a:	d903      	bls.n	8002724 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800271c:	2303      	movs	r3, #3
 800271e:	e2af      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
 8002720:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002724:	4b96      	ldr	r3, [pc, #600]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d1ee      	bne.n	800270e <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 0310 	and.w	r3, r3, #16
 8002738:	2b00      	cmp	r3, #0
 800273a:	d06a      	beq.n	8002812 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800273c:	4b90      	ldr	r3, [pc, #576]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002744:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002746:	4b8e      	ldr	r3, [pc, #568]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002748:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800274a:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	2b08      	cmp	r3, #8
 8002750:	d007      	beq.n	8002762 <HAL_RCC_OscConfig+0x286>
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	2b18      	cmp	r3, #24
 8002756:	d11b      	bne.n	8002790 <HAL_RCC_OscConfig+0x2b4>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	2b01      	cmp	r3, #1
 8002760:	d116      	bne.n	8002790 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002762:	4b87      	ldr	r3, [pc, #540]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800276a:	2b00      	cmp	r3, #0
 800276c:	d005      	beq.n	800277a <HAL_RCC_OscConfig+0x29e>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	2b80      	cmp	r3, #128	@ 0x80
 8002774:	d001      	beq.n	800277a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e282      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800277a:	4b81      	ldr	r3, [pc, #516]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a1b      	ldr	r3, [r3, #32]
 8002786:	061b      	lsls	r3, r3, #24
 8002788:	497d      	ldr	r1, [pc, #500]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800278a:	4313      	orrs	r3, r2
 800278c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800278e:	e040      	b.n	8002812 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	69db      	ldr	r3, [r3, #28]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d023      	beq.n	80027e0 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002798:	4b79      	ldr	r3, [pc, #484]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a78      	ldr	r2, [pc, #480]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800279e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fda6 	bl	80012f4 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027ac:	f7fe fda2 	bl	80012f4 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e260      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80027be:	4b70      	ldr	r3, [pc, #448]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0f0      	beq.n	80027ac <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80027ca:	4b6d      	ldr	r3, [pc, #436]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6a1b      	ldr	r3, [r3, #32]
 80027d6:	061b      	lsls	r3, r3, #24
 80027d8:	4969      	ldr	r1, [pc, #420]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	60cb      	str	r3, [r1, #12]
 80027de:	e018      	b.n	8002812 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80027e0:	4b67      	ldr	r3, [pc, #412]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a66      	ldr	r2, [pc, #408]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80027e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ec:	f7fe fd82 	bl	80012f4 <HAL_GetTick>
 80027f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80027f2:	e008      	b.n	8002806 <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80027f4:	f7fe fd7e 	bl	80012f4 <HAL_GetTick>
 80027f8:	4602      	mov	r2, r0
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	1ad3      	subs	r3, r2, r3
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d901      	bls.n	8002806 <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 8002802:	2303      	movs	r3, #3
 8002804:	e23c      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002806:	4b5e      	ldr	r3, [pc, #376]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f0      	bne.n	80027f4 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 0308 	and.w	r3, r3, #8
 800281a:	2b00      	cmp	r3, #0
 800281c:	d036      	beq.n	800288c <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d019      	beq.n	800285a <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002826:	4b56      	ldr	r3, [pc, #344]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002828:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800282a:	4a55      	ldr	r2, [pc, #340]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fd5f 	bl	80012f4 <HAL_GetTick>
 8002836:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fd5b 	bl	80012f4 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e219      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800284c:	4b4c      	ldr	r3, [pc, #304]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800284e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d0f0      	beq.n	800283a <HAL_RCC_OscConfig+0x35e>
 8002858:	e018      	b.n	800288c <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800285a:	4b49      	ldr	r3, [pc, #292]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800285c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800285e:	4a48      	ldr	r2, [pc, #288]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002860:	f023 0301 	bic.w	r3, r3, #1
 8002864:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002866:	f7fe fd45 	bl	80012f4 <HAL_GetTick>
 800286a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800286c:	e008      	b.n	8002880 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286e:	f7fe fd41 	bl	80012f4 <HAL_GetTick>
 8002872:	4602      	mov	r2, r0
 8002874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e1ff      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002880:	4b3f      	ldr	r3, [pc, #252]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002882:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1f0      	bne.n	800286e <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0320 	and.w	r3, r3, #32
 8002894:	2b00      	cmp	r3, #0
 8002896:	d036      	beq.n	8002906 <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d019      	beq.n	80028d4 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80028a0:	4b37      	ldr	r3, [pc, #220]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a36      	ldr	r2, [pc, #216]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80028a6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fd22 	bl	80012f4 <HAL_GetTick>
 80028b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028b4:	f7fe fd1e 	bl	80012f4 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e1dc      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80028c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x3d8>
 80028d2:	e018      	b.n	8002906 <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80028d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a29      	ldr	r2, [pc, #164]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80028da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028de:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80028e0:	f7fe fd08 	bl	80012f4 <HAL_GetTick>
 80028e4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028e6:	e008      	b.n	80028fa <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80028e8:	f7fe fd04 	bl	80012f4 <HAL_GetTick>
 80028ec:	4602      	mov	r2, r0
 80028ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f0:	1ad3      	subs	r3, r2, r3
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e1c2      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80028fa:	4b21      	ldr	r3, [pc, #132]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d1f0      	bne.n	80028e8 <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0304 	and.w	r3, r3, #4
 800290e:	2b00      	cmp	r3, #0
 8002910:	f000 8086 	beq.w	8002a20 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002914:	4b1b      	ldr	r3, [pc, #108]	@ (8002984 <HAL_RCC_OscConfig+0x4a8>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a1a      	ldr	r2, [pc, #104]	@ (8002984 <HAL_RCC_OscConfig+0x4a8>)
 800291a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800291e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002920:	f7fe fce8 	bl	80012f4 <HAL_GetTick>
 8002924:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002928:	f7fe fce4 	bl	80012f4 <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e1a2      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800293a:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_RCC_OscConfig+0x4a8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d106      	bne.n	800295c <HAL_RCC_OscConfig+0x480>
 800294e:	4b0c      	ldr	r3, [pc, #48]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002952:	4a0b      	ldr	r2, [pc, #44]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002954:	f043 0301 	orr.w	r3, r3, #1
 8002958:	6713      	str	r3, [r2, #112]	@ 0x70
 800295a:	e032      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e6>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d111      	bne.n	8002988 <HAL_RCC_OscConfig+0x4ac>
 8002964:	4b06      	ldr	r3, [pc, #24]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002968:	4a05      	ldr	r2, [pc, #20]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 800296a:	f023 0301 	bic.w	r3, r3, #1
 800296e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002970:	4b03      	ldr	r3, [pc, #12]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002972:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002974:	4a02      	ldr	r2, [pc, #8]	@ (8002980 <HAL_RCC_OscConfig+0x4a4>)
 8002976:	f023 0304 	bic.w	r3, r3, #4
 800297a:	6713      	str	r3, [r2, #112]	@ 0x70
 800297c:	e021      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e6>
 800297e:	bf00      	nop
 8002980:	58024400 	.word	0x58024400
 8002984:	58024800 	.word	0x58024800
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	2b05      	cmp	r3, #5
 800298e:	d10c      	bne.n	80029aa <HAL_RCC_OscConfig+0x4ce>
 8002990:	4b83      	ldr	r3, [pc, #524]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	4a82      	ldr	r2, [pc, #520]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002996:	f043 0304 	orr.w	r3, r3, #4
 800299a:	6713      	str	r3, [r2, #112]	@ 0x70
 800299c:	4b80      	ldr	r3, [pc, #512]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a0:	4a7f      	ldr	r2, [pc, #508]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 80029a2:	f043 0301 	orr.w	r3, r3, #1
 80029a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a8:	e00b      	b.n	80029c2 <HAL_RCC_OscConfig+0x4e6>
 80029aa:	4b7d      	ldr	r3, [pc, #500]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 80029ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ae:	4a7c      	ldr	r2, [pc, #496]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 80029b0:	f023 0301 	bic.w	r3, r3, #1
 80029b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80029b6:	4b7a      	ldr	r3, [pc, #488]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 80029b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ba:	4a79      	ldr	r2, [pc, #484]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 80029bc:	f023 0304 	bic.w	r3, r3, #4
 80029c0:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	689b      	ldr	r3, [r3, #8]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d015      	beq.n	80029f6 <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ca:	f7fe fc93 	bl	80012f4 <HAL_GetTick>
 80029ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029d0:	e00a      	b.n	80029e8 <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029d2:	f7fe fc8f 	bl	80012f4 <HAL_GetTick>
 80029d6:	4602      	mov	r2, r0
 80029d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029da:	1ad3      	subs	r3, r2, r3
 80029dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d901      	bls.n	80029e8 <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 80029e4:	2303      	movs	r3, #3
 80029e6:	e14b      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029e8:	4b6d      	ldr	r3, [pc, #436]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 80029ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029ec:	f003 0302 	and.w	r3, r3, #2
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d0ee      	beq.n	80029d2 <HAL_RCC_OscConfig+0x4f6>
 80029f4:	e014      	b.n	8002a20 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7fe fc7d 	bl	80012f4 <HAL_GetTick>
 80029fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80029fc:	e00a      	b.n	8002a14 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029fe:	f7fe fc79 	bl	80012f4 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d901      	bls.n	8002a14 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8002a10:	2303      	movs	r3, #3
 8002a12:	e135      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a14:	4b62      	ldr	r3, [pc, #392]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a18:	f003 0302 	and.w	r3, r3, #2
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d1ee      	bne.n	80029fe <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 812a 	beq.w	8002c7e <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002a2a:	4b5d      	ldr	r3, [pc, #372]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002a2c:	691b      	ldr	r3, [r3, #16]
 8002a2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a32:	2b18      	cmp	r3, #24
 8002a34:	f000 80ba 	beq.w	8002bac <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	f040 8095 	bne.w	8002b6c <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a42:	4b57      	ldr	r3, [pc, #348]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a56      	ldr	r2, [pc, #344]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002a48:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a4e:	f7fe fc51 	bl	80012f4 <HAL_GetTick>
 8002a52:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a56:	f7fe fc4d 	bl	80012f4 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e10b      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a68:	4b4d      	ldr	r3, [pc, #308]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d1f0      	bne.n	8002a56 <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a74:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002a76:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002a78:	4b4a      	ldr	r3, [pc, #296]	@ (8002ba4 <HAL_RCC_OscConfig+0x6c8>)
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	687a      	ldr	r2, [r7, #4]
 8002a7e:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002a84:	0112      	lsls	r2, r2, #4
 8002a86:	430a      	orrs	r2, r1
 8002a88:	4945      	ldr	r1, [pc, #276]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	628b      	str	r3, [r1, #40]	@ 0x28
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	3b01      	subs	r3, #1
 8002a94:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	025b      	lsls	r3, r3, #9
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	431a      	orrs	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	041b      	lsls	r3, r3, #16
 8002aac:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ab6:	3b01      	subs	r3, #1
 8002ab8:	061b      	lsls	r3, r3, #24
 8002aba:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002abe:	4938      	ldr	r1, [pc, #224]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002ac4:	4b36      	ldr	r3, [pc, #216]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002ac6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac8:	4a35      	ldr	r2, [pc, #212]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002ad0:	4b33      	ldr	r3, [pc, #204]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002ad2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002ad4:	4b34      	ldr	r3, [pc, #208]	@ (8002ba8 <HAL_RCC_OscConfig+0x6cc>)
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	687a      	ldr	r2, [r7, #4]
 8002ada:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002adc:	00d2      	lsls	r2, r2, #3
 8002ade:	4930      	ldr	r1, [pc, #192]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002ae4:	4b2e      	ldr	r3, [pc, #184]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	f023 020c 	bic.w	r2, r3, #12
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002af0:	492b      	ldr	r1, [pc, #172]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002af6:	4b2a      	ldr	r3, [pc, #168]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002af8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002afa:	f023 0202 	bic.w	r2, r3, #2
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b02:	4927      	ldr	r1, [pc, #156]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002b08:	4b25      	ldr	r3, [pc, #148]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b0c:	4a24      	ldr	r2, [pc, #144]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b12:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b14:	4b22      	ldr	r3, [pc, #136]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b18:	4a21      	ldr	r2, [pc, #132]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b1a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b1e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002b20:	4b1f      	ldr	r3, [pc, #124]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b24:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b26:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b30:	4a1b      	ldr	r2, [pc, #108]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b32:	f043 0301 	orr.w	r3, r3, #1
 8002b36:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b38:	4b19      	ldr	r3, [pc, #100]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b44:	f7fe fbd6 	bl	80012f4 <HAL_GetTick>
 8002b48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b4a:	e008      	b.n	8002b5e <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b4c:	f7fe fbd2 	bl	80012f4 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e090      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0f0      	beq.n	8002b4c <HAL_RCC_OscConfig+0x670>
 8002b6a:	e088      	b.n	8002c7e <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0b      	ldr	r2, [pc, #44]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b78:	f7fe fbbc 	bl	80012f4 <HAL_GetTick>
 8002b7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7e:	e008      	b.n	8002b92 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b80:	f7fe fbb8 	bl	80012f4 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	2b02      	cmp	r3, #2
 8002b8c:	d901      	bls.n	8002b92 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e076      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b92:	4b03      	ldr	r3, [pc, #12]	@ (8002ba0 <HAL_RCC_OscConfig+0x6c4>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d1f0      	bne.n	8002b80 <HAL_RCC_OscConfig+0x6a4>
 8002b9e:	e06e      	b.n	8002c7e <HAL_RCC_OscConfig+0x7a2>
 8002ba0:	58024400 	.word	0x58024400
 8002ba4:	fffffc0c 	.word	0xfffffc0c
 8002ba8:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002bac:	4b36      	ldr	r3, [pc, #216]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bb0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002bb2:	4b35      	ldr	r3, [pc, #212]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbc:	2b01      	cmp	r3, #1
 8002bbe:	d031      	beq.n	8002c24 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	f003 0203 	and.w	r2, r3, #3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bca:	429a      	cmp	r2, r3
 8002bcc:	d12a      	bne.n	8002c24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	091b      	lsrs	r3, r3, #4
 8002bd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d122      	bne.n	8002c24 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002be8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d11a      	bne.n	8002c24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	0a5b      	lsrs	r3, r3, #9
 8002bf2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002bfa:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d111      	bne.n	8002c24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	0c1b      	lsrs	r3, r3, #16
 8002c04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c0c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002c0e:	429a      	cmp	r2, r3
 8002c10:	d108      	bne.n	8002c24 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	0e1b      	lsrs	r3, r3, #24
 8002c16:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002c20:	429a      	cmp	r2, r3
 8002c22:	d001      	beq.n	8002c28 <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e02b      	b.n	8002c80 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002c28:	4b17      	ldr	r3, [pc, #92]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002c2c:	08db      	lsrs	r3, r3, #3
 8002c2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c32:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d01f      	beq.n	8002c7e <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002c3e:	4b12      	ldr	r3, [pc, #72]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002c40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c42:	4a11      	ldr	r2, [pc, #68]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002c44:	f023 0301 	bic.w	r3, r3, #1
 8002c48:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002c4a:	f7fe fb53 	bl	80012f4 <HAL_GetTick>
 8002c4e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002c50:	bf00      	nop
 8002c52:	f7fe fb4f 	bl	80012f4 <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d0f9      	beq.n	8002c52 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002c60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002c62:	4b0a      	ldr	r3, [pc, #40]	@ (8002c8c <HAL_RCC_OscConfig+0x7b0>)
 8002c64:	4013      	ands	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002c6a:	00d2      	lsls	r2, r2, #3
 8002c6c:	4906      	ldr	r1, [pc, #24]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002c72:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c76:	4a04      	ldr	r2, [pc, #16]	@ (8002c88 <HAL_RCC_OscConfig+0x7ac>)
 8002c78:	f043 0301 	orr.w	r3, r3, #1
 8002c7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002c7e:	2300      	movs	r3, #0
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3730      	adds	r7, #48	@ 0x30
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	ffff0007 	.word	0xffff0007

08002c90 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e19c      	b.n	8002fde <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b8a      	ldr	r3, [pc, #552]	@ (8002ed0 <HAL_RCC_ClockConfig+0x240>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 030f 	and.w	r3, r3, #15
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d910      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b87      	ldr	r3, [pc, #540]	@ (8002ed0 <HAL_RCC_ClockConfig+0x240>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 020f 	bic.w	r2, r3, #15
 8002cba:	4985      	ldr	r1, [pc, #532]	@ (8002ed0 <HAL_RCC_ClockConfig+0x240>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b83      	ldr	r3, [pc, #524]	@ (8002ed0 <HAL_RCC_ClockConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e184      	b.n	8002fde <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d010      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	691a      	ldr	r2, [r3, #16]
 8002ce4:	4b7b      	ldr	r3, [pc, #492]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002ce6:	699b      	ldr	r3, [r3, #24]
 8002ce8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d908      	bls.n	8002d02 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002cf0:	4b78      	ldr	r3, [pc, #480]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002cf2:	699b      	ldr	r3, [r3, #24]
 8002cf4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	691b      	ldr	r3, [r3, #16]
 8002cfc:	4975      	ldr	r1, [pc, #468]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0308 	and.w	r3, r3, #8
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	695a      	ldr	r2, [r3, #20]
 8002d12:	4b70      	ldr	r3, [pc, #448]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d14:	69db      	ldr	r3, [r3, #28]
 8002d16:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d908      	bls.n	8002d30 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d1e:	4b6d      	ldr	r3, [pc, #436]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d20:	69db      	ldr	r3, [r3, #28]
 8002d22:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	695b      	ldr	r3, [r3, #20]
 8002d2a:	496a      	ldr	r1, [pc, #424]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0310 	and.w	r3, r3, #16
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d010      	beq.n	8002d5e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	699a      	ldr	r2, [r3, #24]
 8002d40:	4b64      	ldr	r3, [pc, #400]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d42:	69db      	ldr	r3, [r3, #28]
 8002d44:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d908      	bls.n	8002d5e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d4c:	4b61      	ldr	r3, [pc, #388]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d4e:	69db      	ldr	r3, [r3, #28]
 8002d50:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	699b      	ldr	r3, [r3, #24]
 8002d58:	495e      	ldr	r1, [pc, #376]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d010      	beq.n	8002d8c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69da      	ldr	r2, [r3, #28]
 8002d6e:	4b59      	ldr	r3, [pc, #356]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d70:	6a1b      	ldr	r3, [r3, #32]
 8002d72:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d908      	bls.n	8002d8c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002d7a:	4b56      	ldr	r3, [pc, #344]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	69db      	ldr	r3, [r3, #28]
 8002d86:	4953      	ldr	r1, [pc, #332]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 0302 	and.w	r3, r3, #2
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d010      	beq.n	8002dba <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	68da      	ldr	r2, [r3, #12]
 8002d9c:	4b4d      	ldr	r3, [pc, #308]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002d9e:	699b      	ldr	r3, [r3, #24]
 8002da0:	f003 030f 	and.w	r3, r3, #15
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d908      	bls.n	8002dba <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002da8:	4b4a      	ldr	r3, [pc, #296]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	f023 020f 	bic.w	r2, r3, #15
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	4947      	ldr	r1, [pc, #284]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002db6:	4313      	orrs	r3, r2
 8002db8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f003 0301 	and.w	r3, r3, #1
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d055      	beq.n	8002e72 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002dc6:	4b43      	ldr	r3, [pc, #268]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	4940      	ldr	r1, [pc, #256]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d107      	bne.n	8002df0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002de0:	4b3c      	ldr	r3, [pc, #240]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d121      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e0f6      	b.n	8002fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d107      	bne.n	8002e08 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002df8:	4b36      	ldr	r3, [pc, #216]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d115      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0ea      	b.n	8002fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002e10:	4b30      	ldr	r3, [pc, #192]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d109      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e0de      	b.n	8002fde <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002e20:	4b2c      	ldr	r3, [pc, #176]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d101      	bne.n	8002e30 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e0d6      	b.n	8002fde <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e30:	4b28      	ldr	r3, [pc, #160]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	f023 0207 	bic.w	r2, r3, #7
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4925      	ldr	r1, [pc, #148]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002e3e:	4313      	orrs	r3, r2
 8002e40:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e42:	f7fe fa57 	bl	80012f4 <HAL_GetTick>
 8002e46:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e48:	e00a      	b.n	8002e60 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e4a:	f7fe fa53 	bl	80012f4 <HAL_GetTick>
 8002e4e:	4602      	mov	r2, r0
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	1ad3      	subs	r3, r2, r3
 8002e54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d901      	bls.n	8002e60 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e0be      	b.n	8002fde <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e60:	4b1c      	ldr	r3, [pc, #112]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002e62:	691b      	ldr	r3, [r3, #16]
 8002e64:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d1eb      	bne.n	8002e4a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f003 0302 	and.w	r3, r3, #2
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d010      	beq.n	8002ea0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	68da      	ldr	r2, [r3, #12]
 8002e82:	4b14      	ldr	r3, [pc, #80]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002e84:	699b      	ldr	r3, [r3, #24]
 8002e86:	f003 030f 	and.w	r3, r3, #15
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d208      	bcs.n	8002ea0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e8e:	4b11      	ldr	r3, [pc, #68]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	699b      	ldr	r3, [r3, #24]
 8002e92:	f023 020f 	bic.w	r2, r3, #15
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	490e      	ldr	r1, [pc, #56]	@ (8002ed4 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ea0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ed0 <HAL_RCC_ClockConfig+0x240>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d214      	bcs.n	8002ed8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eae:	4b08      	ldr	r3, [pc, #32]	@ (8002ed0 <HAL_RCC_ClockConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 020f 	bic.w	r2, r3, #15
 8002eb6:	4906      	ldr	r1, [pc, #24]	@ (8002ed0 <HAL_RCC_ClockConfig+0x240>)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ebe:	4b04      	ldr	r3, [pc, #16]	@ (8002ed0 <HAL_RCC_ClockConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 030f 	and.w	r3, r3, #15
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	429a      	cmp	r2, r3
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002ecc:	2301      	movs	r3, #1
 8002ece:	e086      	b.n	8002fde <HAL_RCC_ClockConfig+0x34e>
 8002ed0:	52002000 	.word	0x52002000
 8002ed4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0304 	and.w	r3, r3, #4
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d010      	beq.n	8002f06 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	4b3f      	ldr	r3, [pc, #252]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002eea:	699b      	ldr	r3, [r3, #24]
 8002eec:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d208      	bcs.n	8002f06 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002ef6:	699b      	ldr	r3, [r3, #24]
 8002ef8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	691b      	ldr	r3, [r3, #16]
 8002f00:	4939      	ldr	r1, [pc, #228]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f003 0308 	and.w	r3, r3, #8
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d010      	beq.n	8002f34 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	695a      	ldr	r2, [r3, #20]
 8002f16:	4b34      	ldr	r3, [pc, #208]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f1e:	429a      	cmp	r2, r3
 8002f20:	d208      	bcs.n	8002f34 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002f22:	4b31      	ldr	r3, [pc, #196]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f24:	69db      	ldr	r3, [r3, #28]
 8002f26:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	695b      	ldr	r3, [r3, #20]
 8002f2e:	492e      	ldr	r1, [pc, #184]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d010      	beq.n	8002f62 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699a      	ldr	r2, [r3, #24]
 8002f44:	4b28      	ldr	r3, [pc, #160]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f46:	69db      	ldr	r3, [r3, #28]
 8002f48:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d208      	bcs.n	8002f62 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002f50:	4b25      	ldr	r3, [pc, #148]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f52:	69db      	ldr	r3, [r3, #28]
 8002f54:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	699b      	ldr	r3, [r3, #24]
 8002f5c:	4922      	ldr	r1, [pc, #136]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0320 	and.w	r3, r3, #32
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d010      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	69da      	ldr	r2, [r3, #28]
 8002f72:	4b1d      	ldr	r3, [pc, #116]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d208      	bcs.n	8002f90 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	4917      	ldr	r1, [pc, #92]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002f90:	f000 f834 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b14      	ldr	r3, [pc, #80]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002f98:	699b      	ldr	r3, [r3, #24]
 8002f9a:	0a1b      	lsrs	r3, r3, #8
 8002f9c:	f003 030f 	and.w	r3, r3, #15
 8002fa0:	4912      	ldr	r1, [pc, #72]	@ (8002fec <HAL_RCC_ClockConfig+0x35c>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	f003 031f 	and.w	r3, r3, #31
 8002fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fac:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002fae:	4b0e      	ldr	r3, [pc, #56]	@ (8002fe8 <HAL_RCC_ClockConfig+0x358>)
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	f003 030f 	and.w	r3, r3, #15
 8002fb6:	4a0d      	ldr	r2, [pc, #52]	@ (8002fec <HAL_RCC_ClockConfig+0x35c>)
 8002fb8:	5cd3      	ldrb	r3, [r2, r3]
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002fc4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff0 <HAL_RCC_ClockConfig+0x360>)
 8002fc6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ff4 <HAL_RCC_ClockConfig+0x364>)
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002fce:	4b0a      	ldr	r3, [pc, #40]	@ (8002ff8 <HAL_RCC_ClockConfig+0x368>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7fe f958 	bl	8001288 <HAL_InitTick>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3718      	adds	r7, #24
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
 8002fe6:	bf00      	nop
 8002fe8:	58024400 	.word	0x58024400
 8002fec:	08007a30 	.word	0x08007a30
 8002ff0:	24000004 	.word	0x24000004
 8002ff4:	24000000 	.word	0x24000000
 8002ff8:	24000008 	.word	0x24000008

08002ffc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b089      	sub	sp, #36	@ 0x24
 8003000:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003002:	4bb3      	ldr	r3, [pc, #716]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800300a:	2b18      	cmp	r3, #24
 800300c:	f200 8155 	bhi.w	80032ba <HAL_RCC_GetSysClockFreq+0x2be>
 8003010:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800307d 	.word	0x0800307d
 800301c:	080032bb 	.word	0x080032bb
 8003020:	080032bb 	.word	0x080032bb
 8003024:	080032bb 	.word	0x080032bb
 8003028:	080032bb 	.word	0x080032bb
 800302c:	080032bb 	.word	0x080032bb
 8003030:	080032bb 	.word	0x080032bb
 8003034:	080032bb 	.word	0x080032bb
 8003038:	080030a3 	.word	0x080030a3
 800303c:	080032bb 	.word	0x080032bb
 8003040:	080032bb 	.word	0x080032bb
 8003044:	080032bb 	.word	0x080032bb
 8003048:	080032bb 	.word	0x080032bb
 800304c:	080032bb 	.word	0x080032bb
 8003050:	080032bb 	.word	0x080032bb
 8003054:	080032bb 	.word	0x080032bb
 8003058:	080030a9 	.word	0x080030a9
 800305c:	080032bb 	.word	0x080032bb
 8003060:	080032bb 	.word	0x080032bb
 8003064:	080032bb 	.word	0x080032bb
 8003068:	080032bb 	.word	0x080032bb
 800306c:	080032bb 	.word	0x080032bb
 8003070:	080032bb 	.word	0x080032bb
 8003074:	080032bb 	.word	0x080032bb
 8003078:	080030af 	.word	0x080030af
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800307c:	4b94      	ldr	r3, [pc, #592]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0320 	and.w	r3, r3, #32
 8003084:	2b00      	cmp	r3, #0
 8003086:	d009      	beq.n	800309c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003088:	4b91      	ldr	r3, [pc, #580]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	08db      	lsrs	r3, r3, #3
 800308e:	f003 0303 	and.w	r3, r3, #3
 8003092:	4a90      	ldr	r2, [pc, #576]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003094:	fa22 f303 	lsr.w	r3, r2, r3
 8003098:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800309a:	e111      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800309c:	4b8d      	ldr	r3, [pc, #564]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800309e:	61bb      	str	r3, [r7, #24]
      break;
 80030a0:	e10e      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80030a2:	4b8d      	ldr	r3, [pc, #564]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030a4:	61bb      	str	r3, [r7, #24]
      break;
 80030a6:	e10b      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80030a8:	4b8c      	ldr	r3, [pc, #560]	@ (80032dc <HAL_RCC_GetSysClockFreq+0x2e0>)
 80030aa:	61bb      	str	r3, [r7, #24]
      break;
 80030ac:	e108      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030ae:	4b88      	ldr	r3, [pc, #544]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b2:	f003 0303 	and.w	r3, r3, #3
 80030b6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80030b8:	4b85      	ldr	r3, [pc, #532]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030bc:	091b      	lsrs	r3, r3, #4
 80030be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030c2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80030c4:	4b82      	ldr	r3, [pc, #520]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c8:	f003 0301 	and.w	r3, r3, #1
 80030cc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80030ce:	4b80      	ldr	r3, [pc, #512]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030d2:	08db      	lsrs	r3, r3, #3
 80030d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030d8:	68fa      	ldr	r2, [r7, #12]
 80030da:	fb02 f303 	mul.w	r3, r2, r3
 80030de:	ee07 3a90 	vmov	s15, r3
 80030e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030e6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f000 80e1 	beq.w	80032b4 <HAL_RCC_GetSysClockFreq+0x2b8>
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f000 8083 	beq.w	8003200 <HAL_RCC_GetSysClockFreq+0x204>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	2b02      	cmp	r3, #2
 80030fe:	f200 80a1 	bhi.w	8003244 <HAL_RCC_GetSysClockFreq+0x248>
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d003      	beq.n	8003110 <HAL_RCC_GetSysClockFreq+0x114>
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	2b01      	cmp	r3, #1
 800310c:	d056      	beq.n	80031bc <HAL_RCC_GetSysClockFreq+0x1c0>
 800310e:	e099      	b.n	8003244 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003110:	4b6f      	ldr	r3, [pc, #444]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0320 	and.w	r3, r3, #32
 8003118:	2b00      	cmp	r3, #0
 800311a:	d02d      	beq.n	8003178 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800311c:	4b6c      	ldr	r3, [pc, #432]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	08db      	lsrs	r3, r3, #3
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	4a6b      	ldr	r2, [pc, #428]	@ (80032d4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003128:	fa22 f303 	lsr.w	r3, r2, r3
 800312c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	ee07 3a90 	vmov	s15, r3
 8003134:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003142:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003146:	4b62      	ldr	r3, [pc, #392]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800314a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800314e:	ee07 3a90 	vmov	s15, r3
 8003152:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003156:	ed97 6a02 	vldr	s12, [r7, #8]
 800315a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80032e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800315e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003162:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003166:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800316a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800316e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003172:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003176:	e087      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	ee07 3a90 	vmov	s15, r3
 800317e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003182:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80032e4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003186:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800318a:	4b51      	ldr	r3, [pc, #324]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800318e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003192:	ee07 3a90 	vmov	s15, r3
 8003196:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800319a:	ed97 6a02 	vldr	s12, [r7, #8]
 800319e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80032e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031ba:	e065      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	ee07 3a90 	vmov	s15, r3
 80031c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031c6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80032e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80031ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031ce:	4b40      	ldr	r3, [pc, #256]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031d6:	ee07 3a90 	vmov	s15, r3
 80031da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031de:	ed97 6a02 	vldr	s12, [r7, #8]
 80031e2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80032e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80031e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80031fe:	e043      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	ee07 3a90 	vmov	s15, r3
 8003206:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800320a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80032ec <HAL_RCC_GetSysClockFreq+0x2f0>
 800320e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003212:	4b2f      	ldr	r3, [pc, #188]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003216:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321a:	ee07 3a90 	vmov	s15, r3
 800321e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003222:	ed97 6a02 	vldr	s12, [r7, #8]
 8003226:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80032e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800322a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800322e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003232:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003236:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800323a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800323e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003242:	e021      	b.n	8003288 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	ee07 3a90 	vmov	s15, r3
 800324a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800324e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80032e8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003252:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003256:	4b1e      	ldr	r3, [pc, #120]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800325a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325e:	ee07 3a90 	vmov	s15, r3
 8003262:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003266:	ed97 6a02 	vldr	s12, [r7, #8]
 800326a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80032e0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800326e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003272:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003276:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800327a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800327e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003282:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003286:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003288:	4b11      	ldr	r3, [pc, #68]	@ (80032d0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800328a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800328c:	0a5b      	lsrs	r3, r3, #9
 800328e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003292:	3301      	adds	r3, #1
 8003294:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	ee07 3a90 	vmov	s15, r3
 800329c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80032a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032ac:	ee17 3a90 	vmov	r3, s15
 80032b0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80032b2:	e005      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80032b4:	2300      	movs	r3, #0
 80032b6:	61bb      	str	r3, [r7, #24]
      break;
 80032b8:	e002      	b.n	80032c0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80032ba:	4b07      	ldr	r3, [pc, #28]	@ (80032d8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80032bc:	61bb      	str	r3, [r7, #24]
      break;
 80032be:	bf00      	nop
  }

  return sysclockfreq;
 80032c0:	69bb      	ldr	r3, [r7, #24]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3724      	adds	r7, #36	@ 0x24
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	58024400 	.word	0x58024400
 80032d4:	03d09000 	.word	0x03d09000
 80032d8:	003d0900 	.word	0x003d0900
 80032dc:	007a1200 	.word	0x007a1200
 80032e0:	46000000 	.word	0x46000000
 80032e4:	4c742400 	.word	0x4c742400
 80032e8:	4a742400 	.word	0x4a742400
 80032ec:	4af42400 	.word	0x4af42400

080032f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80032f6:	f7ff fe81 	bl	8002ffc <HAL_RCC_GetSysClockFreq>
 80032fa:	4602      	mov	r2, r0
 80032fc:	4b10      	ldr	r3, [pc, #64]	@ (8003340 <HAL_RCC_GetHCLKFreq+0x50>)
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	0a1b      	lsrs	r3, r3, #8
 8003302:	f003 030f 	and.w	r3, r3, #15
 8003306:	490f      	ldr	r1, [pc, #60]	@ (8003344 <HAL_RCC_GetHCLKFreq+0x54>)
 8003308:	5ccb      	ldrb	r3, [r1, r3]
 800330a:	f003 031f 	and.w	r3, r3, #31
 800330e:	fa22 f303 	lsr.w	r3, r2, r3
 8003312:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003314:	4b0a      	ldr	r3, [pc, #40]	@ (8003340 <HAL_RCC_GetHCLKFreq+0x50>)
 8003316:	699b      	ldr	r3, [r3, #24]
 8003318:	f003 030f 	and.w	r3, r3, #15
 800331c:	4a09      	ldr	r2, [pc, #36]	@ (8003344 <HAL_RCC_GetHCLKFreq+0x54>)
 800331e:	5cd3      	ldrb	r3, [r2, r3]
 8003320:	f003 031f 	and.w	r3, r3, #31
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	fa22 f303 	lsr.w	r3, r2, r3
 800332a:	4a07      	ldr	r2, [pc, #28]	@ (8003348 <HAL_RCC_GetHCLKFreq+0x58>)
 800332c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800332e:	4a07      	ldr	r2, [pc, #28]	@ (800334c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003334:	4b04      	ldr	r3, [pc, #16]	@ (8003348 <HAL_RCC_GetHCLKFreq+0x58>)
 8003336:	681b      	ldr	r3, [r3, #0]
}
 8003338:	4618      	mov	r0, r3
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	58024400 	.word	0x58024400
 8003344:	08007a30 	.word	0x08007a30
 8003348:	24000004 	.word	0x24000004
 800334c:	24000000 	.word	0x24000000

08003350 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003354:	f7ff ffcc 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003358:	4602      	mov	r2, r0
 800335a:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_RCC_GetPCLK1Freq+0x24>)
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	091b      	lsrs	r3, r3, #4
 8003360:	f003 0307 	and.w	r3, r3, #7
 8003364:	4904      	ldr	r1, [pc, #16]	@ (8003378 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003366:	5ccb      	ldrb	r3, [r1, r3]
 8003368:	f003 031f 	and.w	r3, r3, #31
 800336c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003370:	4618      	mov	r0, r3
 8003372:	bd80      	pop	{r7, pc}
 8003374:	58024400 	.word	0x58024400
 8003378:	08007a30 	.word	0x08007a30

0800337c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003380:	f7ff ffb6 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 8003384:	4602      	mov	r2, r0
 8003386:	4b06      	ldr	r3, [pc, #24]	@ (80033a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003388:	69db      	ldr	r3, [r3, #28]
 800338a:	0a1b      	lsrs	r3, r3, #8
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	4904      	ldr	r1, [pc, #16]	@ (80033a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003392:	5ccb      	ldrb	r3, [r1, r3]
 8003394:	f003 031f 	and.w	r3, r3, #31
 8003398:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800339c:	4618      	mov	r0, r3
 800339e:	bd80      	pop	{r7, pc}
 80033a0:	58024400 	.word	0x58024400
 80033a4:	08007a30 	.word	0x08007a30

080033a8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80033a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033ac:	b0c6      	sub	sp, #280	@ 0x118
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	f8c7 0104 	str.w	r0, [r7, #260]	@ 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80033b4:	2300      	movs	r3, #0
 80033b6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80033ba:	2300      	movs	r3, #0
 80033bc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033c8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80033cc:	2500      	movs	r5, #0
 80033ce:	ea54 0305 	orrs.w	r3, r4, r5
 80033d2:	d049      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80033d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80033d8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033de:	d02f      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80033e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80033e4:	d828      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033ea:	d01a      	beq.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80033ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80033f0:	d822      	bhi.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x56>
 80033f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033fa:	d007      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033fc:	e01c      	b.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033fe:	4bab      	ldr	r3, [pc, #684]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003402:	4aaa      	ldr	r2, [pc, #680]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003404:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003408:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800340a:	e01a      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800340c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003410:	3308      	adds	r3, #8
 8003412:	2102      	movs	r1, #2
 8003414:	4618      	mov	r0, r3
 8003416:	f001 fc25 	bl	8004c64 <RCCEx_PLL2_Config>
 800341a:	4603      	mov	r3, r0
 800341c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003420:	e00f      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003422:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003426:	3328      	adds	r3, #40	@ 0x28
 8003428:	2102      	movs	r1, #2
 800342a:	4618      	mov	r0, r3
 800342c:	f001 fccc 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003430:	4603      	mov	r3, r0
 8003432:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003436:	e004      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800343e:	e000      	b.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003440:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003442:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003446:	2b00      	cmp	r3, #0
 8003448:	d10a      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800344a:	4b98      	ldr	r3, [pc, #608]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800344c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800344e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003452:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003456:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003458:	4a94      	ldr	r2, [pc, #592]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800345a:	430b      	orrs	r3, r1
 800345c:	6513      	str	r3, [r2, #80]	@ 0x50
 800345e:	e003      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003464:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003468:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003474:	f04f 0900 	mov.w	r9, #0
 8003478:	ea58 0309 	orrs.w	r3, r8, r9
 800347c:	d047      	beq.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800347e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003482:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003484:	2b04      	cmp	r3, #4
 8003486:	d82a      	bhi.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003488:	a201      	add	r2, pc, #4	@ (adr r2, 8003490 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800348a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800348e:	bf00      	nop
 8003490:	080034a5 	.word	0x080034a5
 8003494:	080034b3 	.word	0x080034b3
 8003498:	080034c9 	.word	0x080034c9
 800349c:	080034e7 	.word	0x080034e7
 80034a0:	080034e7 	.word	0x080034e7
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a4:	4b81      	ldr	r3, [pc, #516]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034a8:	4a80      	ldr	r2, [pc, #512]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034b0:	e01a      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034b6:	3308      	adds	r3, #8
 80034b8:	2100      	movs	r1, #0
 80034ba:	4618      	mov	r0, r3
 80034bc:	f001 fbd2 	bl	8004c64 <RCCEx_PLL2_Config>
 80034c0:	4603      	mov	r3, r0
 80034c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034c6:	e00f      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80034c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034cc:	3328      	adds	r3, #40	@ 0x28
 80034ce:	2100      	movs	r1, #0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f001 fc79 	bl	8004dc8 <RCCEx_PLL3_Config>
 80034d6:	4603      	mov	r3, r0
 80034d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80034dc:	e004      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034de:	2301      	movs	r3, #1
 80034e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80034e4:	e000      	b.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80034e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d10a      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034f0:	4b6e      	ldr	r3, [pc, #440]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80034f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034f4:	f023 0107 	bic.w	r1, r3, #7
 80034f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80034fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034fe:	4a6b      	ldr	r2, [pc, #428]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003500:	430b      	orrs	r3, r1
 8003502:	6513      	str	r3, [r2, #80]	@ 0x50
 8003504:	e003      	b.n	800350e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003506:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800350a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800350e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003512:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003516:	f402 6a80 	and.w	sl, r2, #1024	@ 0x400
 800351a:	f04f 0b00 	mov.w	fp, #0
 800351e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003522:	d05b      	beq.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003524:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003528:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800352c:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003530:	d03b      	beq.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x202>
 8003532:	f5b3 0f20 	cmp.w	r3, #10485760	@ 0xa00000
 8003536:	d834      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003538:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800353c:	d037      	beq.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x206>
 800353e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003542:	d82e      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003544:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003548:	d033      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800354a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800354e:	d828      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8003550:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003554:	d01a      	beq.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8003556:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800355a:	d822      	bhi.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8003560:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003564:	d007      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8003566:	e01c      	b.n	80035a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003568:	4b50      	ldr	r3, [pc, #320]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800356a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800356c:	4a4f      	ldr	r2, [pc, #316]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 800356e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003572:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003574:	e01e      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003576:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800357a:	3308      	adds	r3, #8
 800357c:	2100      	movs	r1, #0
 800357e:	4618      	mov	r0, r3
 8003580:	f001 fb70 	bl	8004c64 <RCCEx_PLL2_Config>
 8003584:	4603      	mov	r3, r0
 8003586:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800358a:	e013      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800358c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003590:	3328      	adds	r3, #40	@ 0x28
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f001 fc17 	bl	8004dc8 <RCCEx_PLL3_Config>
 800359a:	4603      	mov	r3, r0
 800359c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80035a0:	e008      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80035a2:	2301      	movs	r3, #1
 80035a4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80035a8:	e004      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035aa:	bf00      	nop
 80035ac:	e002      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035ae:	bf00      	nop
 80035b0:	e000      	b.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 80035b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d10b      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80035bc:	4b3b      	ldr	r3, [pc, #236]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c0:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80035c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035c8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80035cc:	4a37      	ldr	r2, [pc, #220]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80035ce:	430b      	orrs	r3, r1
 80035d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80035d2:	e003      	b.n	80035dc <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80035d8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80035dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80035e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e4:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80035e8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80035ec:	2300      	movs	r3, #0
 80035ee:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80035f2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80035f6:	460b      	mov	r3, r1
 80035f8:	4313      	orrs	r3, r2
 80035fa:	d05d      	beq.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80035fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003600:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8003604:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8003608:	d03b      	beq.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800360a:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800360e:	d834      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003610:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003614:	d037      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8003616:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800361a:	d82e      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 800361c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003620:	d033      	beq.n	800368a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8003622:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003626:	d828      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003628:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800362c:	d01a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 800362e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003632:	d822      	bhi.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8003638:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800363c:	d007      	beq.n	800364e <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800363e:	e01c      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003640:	4b1a      	ldr	r3, [pc, #104]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	4a19      	ldr	r2, [pc, #100]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003646:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800364a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800364c:	e01e      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800364e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003652:	3308      	adds	r3, #8
 8003654:	2100      	movs	r1, #0
 8003656:	4618      	mov	r0, r3
 8003658:	f001 fb04 	bl	8004c64 <RCCEx_PLL2_Config>
 800365c:	4603      	mov	r3, r0
 800365e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003662:	e013      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003668:	3328      	adds	r3, #40	@ 0x28
 800366a:	2100      	movs	r1, #0
 800366c:	4618      	mov	r0, r3
 800366e:	f001 fbab 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003672:	4603      	mov	r3, r0
 8003674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003678:	e008      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003680:	e004      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003682:	bf00      	nop
 8003684:	e002      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8003686:	bf00      	nop
 8003688:	e000      	b.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 800368a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800368c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003690:	2b00      	cmp	r3, #0
 8003692:	d10d      	bne.n	80036b0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8003696:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003698:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800369c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036a0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80036a4:	4a01      	ldr	r2, [pc, #4]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x304>)
 80036a6:	430b      	orrs	r3, r1
 80036a8:	6593      	str	r3, [r2, #88]	@ 0x58
 80036aa:	e005      	b.n	80036b8 <HAL_RCCEx_PeriphCLKConfig+0x310>
 80036ac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036b0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80036b4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80036b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80036c4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 80036c8:	2300      	movs	r3, #0
 80036ca:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80036ce:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 80036d2:	460b      	mov	r3, r1
 80036d4:	4313      	orrs	r3, r2
 80036d6:	d03a      	beq.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 80036d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80036dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036de:	2b30      	cmp	r3, #48	@ 0x30
 80036e0:	d01f      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 80036e2:	2b30      	cmp	r3, #48	@ 0x30
 80036e4:	d819      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036e6:	2b20      	cmp	r3, #32
 80036e8:	d00c      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 80036ea:	2b20      	cmp	r3, #32
 80036ec:	d815      	bhi.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x372>
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d019      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d111      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036f6:	4baa      	ldr	r3, [pc, #680]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036fa:	4aa9      	ldr	r2, [pc, #676]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80036fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003700:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003702:	e011      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003704:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003708:	3308      	adds	r3, #8
 800370a:	2102      	movs	r1, #2
 800370c:	4618      	mov	r0, r3
 800370e:	f001 faa9 	bl	8004c64 <RCCEx_PLL2_Config>
 8003712:	4603      	mov	r3, r0
 8003714:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8003718:	e006      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800371a:	2301      	movs	r3, #1
 800371c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003720:	e002      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003722:	bf00      	nop
 8003724:	e000      	b.n	8003728 <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8003726:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003728:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003730:	4b9b      	ldr	r3, [pc, #620]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003732:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003734:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003738:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800373c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800373e:	4a98      	ldr	r2, [pc, #608]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003740:	430b      	orrs	r3, r1
 8003742:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003744:	e003      	b.n	800374e <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003746:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800374a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800374e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003756:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800375a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800375e:	2300      	movs	r3, #0
 8003760:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003764:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d051      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800376e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003774:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003778:	d035      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800377a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800377e:	d82e      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003780:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003784:	d031      	beq.n	80037ea <HAL_RCCEx_PeriphCLKConfig+0x442>
 8003786:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800378a:	d828      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x436>
 800378c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003790:	d01a      	beq.n	80037c8 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003796:	d822      	bhi.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x436>
 8003798:	2b00      	cmp	r3, #0
 800379a:	d003      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 800379c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037a0:	d007      	beq.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 80037a2:	e01c      	b.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80037a4:	4b7e      	ldr	r3, [pc, #504]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037a8:	4a7d      	ldr	r2, [pc, #500]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80037ae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037b0:	e01c      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80037b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037b6:	3308      	adds	r3, #8
 80037b8:	2100      	movs	r1, #0
 80037ba:	4618      	mov	r0, r3
 80037bc:	f001 fa52 	bl	8004c64 <RCCEx_PLL2_Config>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037c6:	e011      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80037cc:	3328      	adds	r3, #40	@ 0x28
 80037ce:	2100      	movs	r1, #0
 80037d0:	4618      	mov	r0, r3
 80037d2:	f001 faf9 	bl	8004dc8 <RCCEx_PLL3_Config>
 80037d6:	4603      	mov	r3, r0
 80037d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80037dc:	e006      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80037e4:	e002      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 80037ea:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ec:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80037f4:	4b6a      	ldr	r3, [pc, #424]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80037f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037f8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80037fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003800:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003802:	4a67      	ldr	r2, [pc, #412]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003804:	430b      	orrs	r3, r1
 8003806:	6513      	str	r3, [r2, #80]	@ 0x50
 8003808:	e003      	b.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800380e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003812:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800381e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003822:	2300      	movs	r3, #0
 8003824:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003828:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800382c:	460b      	mov	r3, r1
 800382e:	4313      	orrs	r3, r2
 8003830:	d053      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003832:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003836:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003838:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800383c:	d033      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 800383e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003842:	d82c      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003844:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003848:	d02f      	beq.n	80038aa <HAL_RCCEx_PeriphCLKConfig+0x502>
 800384a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800384e:	d826      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003850:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003854:	d02b      	beq.n	80038ae <HAL_RCCEx_PeriphCLKConfig+0x506>
 8003856:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800385a:	d820      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 800385c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003860:	d012      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8003862:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003866:	d81a      	bhi.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8003868:	2b00      	cmp	r3, #0
 800386a:	d022      	beq.n	80038b2 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 800386c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003870:	d115      	bne.n	800389e <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003872:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003876:	3308      	adds	r3, #8
 8003878:	2101      	movs	r1, #1
 800387a:	4618      	mov	r0, r3
 800387c:	f001 f9f2 	bl	8004c64 <RCCEx_PLL2_Config>
 8003880:	4603      	mov	r3, r0
 8003882:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003886:	e015      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003888:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800388c:	3328      	adds	r3, #40	@ 0x28
 800388e:	2101      	movs	r1, #1
 8003890:	4618      	mov	r0, r3
 8003892:	f001 fa99 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003896:	4603      	mov	r3, r0
 8003898:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800389c:	e00a      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80038a4:	e006      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038a6:	bf00      	nop
 80038a8:	e004      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038aa:	bf00      	nop
 80038ac:	e002      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038ae:	bf00      	nop
 80038b0:	e000      	b.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 80038b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038b4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80038bc:	4b38      	ldr	r3, [pc, #224]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80038c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038ca:	4a35      	ldr	r2, [pc, #212]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 80038cc:	430b      	orrs	r3, r1
 80038ce:	6513      	str	r3, [r2, #80]	@ 0x50
 80038d0:	e003      	b.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038d2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80038d6:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80038da:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e2:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80038e6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80038f0:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80038f4:	460b      	mov	r3, r1
 80038f6:	4313      	orrs	r3, r2
 80038f8:	d058      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80038fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80038fe:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003902:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003906:	d033      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 8003908:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800390c:	d82c      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800390e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003912:	d02f      	beq.n	8003974 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 8003914:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003918:	d826      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 800391a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800391e:	d02b      	beq.n	8003978 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 8003920:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003924:	d820      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800392a:	d012      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 800392c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003930:	d81a      	bhi.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 8003932:	2b00      	cmp	r3, #0
 8003934:	d022      	beq.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800393a:	d115      	bne.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800393c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003940:	3308      	adds	r3, #8
 8003942:	2101      	movs	r1, #1
 8003944:	4618      	mov	r0, r3
 8003946:	f001 f98d 	bl	8004c64 <RCCEx_PLL2_Config>
 800394a:	4603      	mov	r3, r0
 800394c:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003950:	e015      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003952:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003956:	3328      	adds	r3, #40	@ 0x28
 8003958:	2101      	movs	r1, #1
 800395a:	4618      	mov	r0, r3
 800395c:	f001 fa34 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003960:	4603      	mov	r3, r0
 8003962:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003966:	e00a      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800396e:	e006      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003970:	bf00      	nop
 8003972:	e004      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003974:	bf00      	nop
 8003976:	e002      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8003978:	bf00      	nop
 800397a:	e000      	b.n	800397e <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 800397c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800397e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003982:	2b00      	cmp	r3, #0
 8003984:	d10e      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003986:	4b06      	ldr	r3, [pc, #24]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800398a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800398e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003992:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003996:	4a02      	ldr	r2, [pc, #8]	@ (80039a0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8003998:	430b      	orrs	r3, r1
 800399a:	6593      	str	r3, [r2, #88]	@ 0x58
 800399c:	e006      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x604>
 800399e:	bf00      	nop
 80039a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80039a8:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80039ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 80039b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80039c2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	d037      	beq.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80039cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80039d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039d6:	d00e      	beq.n	80039f6 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 80039d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80039dc:	d816      	bhi.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x664>
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d018      	beq.n	8003a14 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80039e2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80039e6:	d111      	bne.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039e8:	4bc4      	ldr	r3, [pc, #784]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ec:	4ac3      	ldr	r2, [pc, #780]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80039ee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039f2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80039f4:	e00f      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80039fa:	3308      	adds	r3, #8
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f001 f930 	bl	8004c64 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003a0a:	e004      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003a12:	e000      	b.n	8003a16 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 8003a14:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a16:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003a1e:	4bb7      	ldr	r3, [pc, #732]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a22:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003a26:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003a2c:	4ab3      	ldr	r2, [pc, #716]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6513      	str	r3, [r2, #80]	@ 0x50
 8003a32:	e003      	b.n	8003a3c <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a34:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003a38:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003a3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a44:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003a48:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003a52:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003a56:	460b      	mov	r3, r1
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	d039      	beq.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003a5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a62:	2b03      	cmp	r3, #3
 8003a64:	d81c      	bhi.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 8003a66:	a201      	add	r2, pc, #4	@ (adr r2, 8003a6c <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6c:	08003aa9 	.word	0x08003aa9
 8003a70:	08003a7d 	.word	0x08003a7d
 8003a74:	08003a8b 	.word	0x08003a8b
 8003a78:	08003aa9 	.word	0x08003aa9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a7c:	4b9f      	ldr	r3, [pc, #636]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a80:	4a9e      	ldr	r2, [pc, #632]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003a82:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a86:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a88:	e00f      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003a8e:	3308      	adds	r3, #8
 8003a90:	2102      	movs	r1, #2
 8003a92:	4618      	mov	r0, r3
 8003a94:	f001 f8e6 	bl	8004c64 <RCCEx_PLL2_Config>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003a9e:	e004      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003aa6:	e000      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 8003aa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003aaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003ab2:	4b92      	ldr	r3, [pc, #584]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ab4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ab6:	f023 0103 	bic.w	r1, r3, #3
 8003aba:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003abe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ac0:	4a8e      	ldr	r2, [pc, #568]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003ac2:	430b      	orrs	r3, r1
 8003ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003ac6:	e003      	b.n	8003ad0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ac8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003acc:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ad0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003adc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003ae6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003aea:	460b      	mov	r3, r1
 8003aec:	4313      	orrs	r3, r2
 8003aee:	f000 8099 	beq.w	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003af2:	4b83      	ldr	r3, [pc, #524]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a82      	ldr	r2, [pc, #520]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003af8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003afc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003afe:	f7fd fbf9 	bl	80012f4 <HAL_GetTick>
 8003b02:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b06:	e00b      	b.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b08:	f7fd fbf4 	bl	80012f4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b12:	1ad3      	subs	r3, r2, r3
 8003b14:	2b64      	cmp	r3, #100	@ 0x64
 8003b16:	d903      	bls.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 8003b18:	2303      	movs	r3, #3
 8003b1a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003b1e:	e005      	b.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003b20:	4b77      	ldr	r3, [pc, #476]	@ (8003d00 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d0ed      	beq.n	8003b08 <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 8003b2c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d173      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003b34:	4b71      	ldr	r3, [pc, #452]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b36:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003b38:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b40:	4053      	eors	r3, r2
 8003b42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d015      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003b4a:	4b6c      	ldr	r3, [pc, #432]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b4e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b52:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003b56:	4b69      	ldr	r3, [pc, #420]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b5a:	4a68      	ldr	r2, [pc, #416]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b60:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003b62:	4b66      	ldr	r3, [pc, #408]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003b66:	4a65      	ldr	r2, [pc, #404]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b68:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b6c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003b6e:	4a63      	ldr	r2, [pc, #396]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003b70:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003b74:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003b76:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003b7a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003b7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b82:	d118      	bne.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b84:	f7fd fbb6 	bl	80012f4 <HAL_GetTick>
 8003b88:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003b8c:	e00d      	b.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b8e:	f7fd fbb1 	bl	80012f4 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8003b98:	1ad2      	subs	r2, r2, r3
 8003b9a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d903      	bls.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
            break;
 8003ba8:	e005      	b.n	8003bb6 <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003baa:	4b54      	ldr	r3, [pc, #336]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003bae:	f003 0302 	and.w	r3, r3, #2
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d0eb      	beq.n	8003b8e <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 8003bb6:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d129      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bc2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003bc6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003bce:	d10e      	bne.n	8003bee <HAL_RCCEx_PeriphCLKConfig+0x846>
 8003bd0:	4b4a      	ldr	r3, [pc, #296]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bd2:	691b      	ldr	r3, [r3, #16]
 8003bd4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003bd8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003bdc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003be0:	091a      	lsrs	r2, r3, #4
 8003be2:	4b48      	ldr	r3, [pc, #288]	@ (8003d04 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8003be4:	4013      	ands	r3, r2
 8003be6:	4a45      	ldr	r2, [pc, #276]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003be8:	430b      	orrs	r3, r1
 8003bea:	6113      	str	r3, [r2, #16]
 8003bec:	e005      	b.n	8003bfa <HAL_RCCEx_PeriphCLKConfig+0x852>
 8003bee:	4b43      	ldr	r3, [pc, #268]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf0:	691b      	ldr	r3, [r3, #16]
 8003bf2:	4a42      	ldr	r2, [pc, #264]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bf4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003bf8:	6113      	str	r3, [r2, #16]
 8003bfa:	4b40      	ldr	r3, [pc, #256]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003bfc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003bfe:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c02:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c0a:	4a3c      	ldr	r2, [pc, #240]	@ (8003cfc <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8003c0c:	430b      	orrs	r3, r1
 8003c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003c10:	e008      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c12:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c16:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
 8003c1a:	e003      	b.n	8003c24 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c1c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003c20:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003c24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2c:	f002 0301 	and.w	r3, r2, #1
 8003c30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c34:	2300      	movs	r3, #0
 8003c36:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8003c3a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003c3e:	460b      	mov	r3, r1
 8003c40:	4313      	orrs	r3, r2
 8003c42:	f000 808f 	beq.w	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003c46:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003c4a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003c4c:	2b28      	cmp	r3, #40	@ 0x28
 8003c4e:	d871      	bhi.n	8003d34 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 8003c50:	a201      	add	r2, pc, #4	@ (adr r2, 8003c58 <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 8003c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c56:	bf00      	nop
 8003c58:	08003d3d 	.word	0x08003d3d
 8003c5c:	08003d35 	.word	0x08003d35
 8003c60:	08003d35 	.word	0x08003d35
 8003c64:	08003d35 	.word	0x08003d35
 8003c68:	08003d35 	.word	0x08003d35
 8003c6c:	08003d35 	.word	0x08003d35
 8003c70:	08003d35 	.word	0x08003d35
 8003c74:	08003d35 	.word	0x08003d35
 8003c78:	08003d09 	.word	0x08003d09
 8003c7c:	08003d35 	.word	0x08003d35
 8003c80:	08003d35 	.word	0x08003d35
 8003c84:	08003d35 	.word	0x08003d35
 8003c88:	08003d35 	.word	0x08003d35
 8003c8c:	08003d35 	.word	0x08003d35
 8003c90:	08003d35 	.word	0x08003d35
 8003c94:	08003d35 	.word	0x08003d35
 8003c98:	08003d1f 	.word	0x08003d1f
 8003c9c:	08003d35 	.word	0x08003d35
 8003ca0:	08003d35 	.word	0x08003d35
 8003ca4:	08003d35 	.word	0x08003d35
 8003ca8:	08003d35 	.word	0x08003d35
 8003cac:	08003d35 	.word	0x08003d35
 8003cb0:	08003d35 	.word	0x08003d35
 8003cb4:	08003d35 	.word	0x08003d35
 8003cb8:	08003d3d 	.word	0x08003d3d
 8003cbc:	08003d35 	.word	0x08003d35
 8003cc0:	08003d35 	.word	0x08003d35
 8003cc4:	08003d35 	.word	0x08003d35
 8003cc8:	08003d35 	.word	0x08003d35
 8003ccc:	08003d35 	.word	0x08003d35
 8003cd0:	08003d35 	.word	0x08003d35
 8003cd4:	08003d35 	.word	0x08003d35
 8003cd8:	08003d3d 	.word	0x08003d3d
 8003cdc:	08003d35 	.word	0x08003d35
 8003ce0:	08003d35 	.word	0x08003d35
 8003ce4:	08003d35 	.word	0x08003d35
 8003ce8:	08003d35 	.word	0x08003d35
 8003cec:	08003d35 	.word	0x08003d35
 8003cf0:	08003d35 	.word	0x08003d35
 8003cf4:	08003d35 	.word	0x08003d35
 8003cf8:	08003d3d 	.word	0x08003d3d
 8003cfc:	58024400 	.word	0x58024400
 8003d00:	58024800 	.word	0x58024800
 8003d04:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d0c:	3308      	adds	r3, #8
 8003d0e:	2101      	movs	r1, #1
 8003d10:	4618      	mov	r0, r3
 8003d12:	f000 ffa7 	bl	8004c64 <RCCEx_PLL2_Config>
 8003d16:	4603      	mov	r3, r0
 8003d18:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d1c:	e00f      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d22:	3328      	adds	r3, #40	@ 0x28
 8003d24:	2101      	movs	r1, #1
 8003d26:	4618      	mov	r0, r3
 8003d28:	f001 f84e 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003d32:	e004      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003d3a:	e000      	b.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 8003d3c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d3e:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10a      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003d46:	4bbf      	ldr	r3, [pc, #764]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003d4e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d52:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d54:	4abb      	ldr	r2, [pc, #748]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003d56:	430b      	orrs	r3, r1
 8003d58:	6553      	str	r3, [r2, #84]	@ 0x54
 8003d5a:	e003      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003d60:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003d64:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6c:	f002 0302 	and.w	r3, r2, #2
 8003d70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003d74:	2300      	movs	r3, #0
 8003d76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d7a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003d7e:	460b      	mov	r3, r1
 8003d80:	4313      	orrs	r3, r2
 8003d82:	d041      	beq.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003d88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d8a:	2b05      	cmp	r3, #5
 8003d8c:	d824      	bhi.n	8003dd8 <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8003d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8003d94 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8003d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d94:	08003de1 	.word	0x08003de1
 8003d98:	08003dad 	.word	0x08003dad
 8003d9c:	08003dc3 	.word	0x08003dc3
 8003da0:	08003de1 	.word	0x08003de1
 8003da4:	08003de1 	.word	0x08003de1
 8003da8:	08003de1 	.word	0x08003de1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003db0:	3308      	adds	r3, #8
 8003db2:	2101      	movs	r1, #1
 8003db4:	4618      	mov	r0, r3
 8003db6:	f000 ff55 	bl	8004c64 <RCCEx_PLL2_Config>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dc0:	e00f      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003dc2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003dc6:	3328      	adds	r3, #40	@ 0x28
 8003dc8:	2101      	movs	r1, #1
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fffc 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003dd6:	e004      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003dde:	e000      	b.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8003de0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003de2:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d10a      	bne.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003dea:	4b96      	ldr	r3, [pc, #600]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dee:	f023 0107 	bic.w	r1, r3, #7
 8003df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003df6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003df8:	4a92      	ldr	r2, [pc, #584]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003dfa:	430b      	orrs	r3, r1
 8003dfc:	6553      	str	r3, [r2, #84]	@ 0x54
 8003dfe:	e003      	b.n	8003e08 <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e00:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e04:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e10:	f002 0304 	and.w	r3, r2, #4
 8003e14:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003e18:	2300      	movs	r3, #0
 8003e1a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003e1e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003e22:	460b      	mov	r3, r1
 8003e24:	4313      	orrs	r3, r2
 8003e26:	d044      	beq.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d825      	bhi.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 8003e34:	a201      	add	r2, pc, #4	@ (adr r2, 8003e3c <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 8003e36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3a:	bf00      	nop
 8003e3c:	08003e89 	.word	0x08003e89
 8003e40:	08003e55 	.word	0x08003e55
 8003e44:	08003e6b 	.word	0x08003e6b
 8003e48:	08003e89 	.word	0x08003e89
 8003e4c:	08003e89 	.word	0x08003e89
 8003e50:	08003e89 	.word	0x08003e89
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e54:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e58:	3308      	adds	r3, #8
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	f000 ff01 	bl	8004c64 <RCCEx_PLL2_Config>
 8003e62:	4603      	mov	r3, r0
 8003e64:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e68:	e00f      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e6a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e6e:	3328      	adds	r3, #40	@ 0x28
 8003e70:	2101      	movs	r1, #1
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 ffa8 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003e7e:	e004      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e80:	2301      	movs	r3, #1
 8003e82:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003e86:	e000      	b.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 8003e88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e8a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003e92:	4b6c      	ldr	r3, [pc, #432]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003e94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e96:	f023 0107 	bic.w	r1, r3, #7
 8003e9a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ea2:	4a68      	ldr	r2, [pc, #416]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003ea4:	430b      	orrs	r3, r1
 8003ea6:	6593      	str	r3, [r2, #88]	@ 0x58
 8003ea8:	e003      	b.n	8003eb2 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eaa:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003eae:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003eb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eba:	f002 0320 	and.w	r3, r2, #32
 8003ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003ec8:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003ecc:	460b      	mov	r3, r1
 8003ece:	4313      	orrs	r3, r2
 8003ed0:	d055      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ed6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003eda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ede:	d033      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8003ee0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003ee4:	d82c      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ee6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eea:	d02f      	beq.n	8003f4c <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8003eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ef0:	d826      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003ef2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003ef6:	d02b      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 8003ef8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003efc:	d820      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003efe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f02:	d012      	beq.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0xb82>
 8003f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f08:	d81a      	bhi.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d022      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 8003f0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003f12:	d115      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f14:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f18:	3308      	adds	r3, #8
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f000 fea1 	bl	8004c64 <RCCEx_PLL2_Config>
 8003f22:	4603      	mov	r3, r0
 8003f24:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f28:	e015      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003f2a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f2e:	3328      	adds	r3, #40	@ 0x28
 8003f30:	2102      	movs	r1, #2
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 ff48 	bl	8004dc8 <RCCEx_PLL3_Config>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003f3e:	e00a      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f40:	2301      	movs	r3, #1
 8003f42:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8003f46:	e006      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f48:	bf00      	nop
 8003f4a:	e004      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f4c:	bf00      	nop
 8003f4e:	e002      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f50:	bf00      	nop
 8003f52:	e000      	b.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 8003f54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f56:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003f5e:	4b39      	ldr	r3, [pc, #228]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f60:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f62:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003f66:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f6e:	4a35      	ldr	r2, [pc, #212]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8003f70:	430b      	orrs	r3, r1
 8003f72:	6553      	str	r3, [r2, #84]	@ 0x54
 8003f74:	e003      	b.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f76:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8003f7a:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003f7e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f86:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8003f8a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f8e:	2300      	movs	r3, #0
 8003f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f94:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003f98:	460b      	mov	r3, r1
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	d058      	beq.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003f9e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fa2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003fa6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003faa:	d033      	beq.n	8004014 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8003fac:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003fb0:	d82c      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fb2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fb6:	d02f      	beq.n	8004018 <HAL_RCCEx_PeriphCLKConfig+0xc70>
 8003fb8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003fbc:	d826      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fbe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fc2:	d02b      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8003fc4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003fc8:	d820      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fce:	d012      	beq.n	8003ff6 <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8003fd0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003fd4:	d81a      	bhi.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d022      	beq.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fde:	d115      	bne.n	800400c <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003fe4:	3308      	adds	r3, #8
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fe3b 	bl	8004c64 <RCCEx_PLL2_Config>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ff4:	e015      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ff6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8003ffa:	3328      	adds	r3, #40	@ 0x28
 8003ffc:	2102      	movs	r1, #2
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fee2 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004004:	4603      	mov	r3, r0
 8004006:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800400a:	e00a      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004012:	e006      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004014:	bf00      	nop
 8004016:	e004      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004018:	bf00      	nop
 800401a:	e002      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 800401c:	bf00      	nop
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 8004020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004022:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10e      	bne.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800402a:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800402c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800402e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004032:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004036:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800403a:	4a02      	ldr	r2, [pc, #8]	@ (8004044 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 800403c:	430b      	orrs	r3, r1
 800403e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004040:	e006      	b.n	8004050 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 8004042:	bf00      	nop
 8004044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004048:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800404c:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004050:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004058:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800405c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004060:	2300      	movs	r3, #0
 8004062:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004066:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800406a:	460b      	mov	r3, r1
 800406c:	4313      	orrs	r3, r2
 800406e:	d055      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004070:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004074:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004078:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800407c:	d033      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 800407e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8004082:	d82c      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004084:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004088:	d02f      	beq.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0xd42>
 800408a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800408e:	d826      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8004090:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8004094:	d02b      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0xd46>
 8004096:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800409a:	d820      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 800409c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040a0:	d012      	beq.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0xd20>
 80040a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040a6:	d81a      	bhi.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd36>
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d022      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 80040ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80040b0:	d115      	bne.n	80040de <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040b2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040b6:	3308      	adds	r3, #8
 80040b8:	2100      	movs	r1, #0
 80040ba:	4618      	mov	r0, r3
 80040bc:	f000 fdd2 	bl	8004c64 <RCCEx_PLL2_Config>
 80040c0:	4603      	mov	r3, r0
 80040c2:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040c6:	e015      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80040cc:	3328      	adds	r3, #40	@ 0x28
 80040ce:	2102      	movs	r1, #2
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fe79 	bl	8004dc8 <RCCEx_PLL3_Config>
 80040d6:	4603      	mov	r3, r0
 80040d8:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80040dc:	e00a      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80040de:	2301      	movs	r3, #1
 80040e0:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80040e4:	e006      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040e6:	bf00      	nop
 80040e8:	e004      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040ea:	bf00      	nop
 80040ec:	e002      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040ee:	bf00      	nop
 80040f0:	e000      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 80040f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80040f4:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80040fc:	4ba0      	ldr	r3, [pc, #640]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80040fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004100:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004104:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004108:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800410c:	4a9c      	ldr	r2, [pc, #624]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800410e:	430b      	orrs	r3, r1
 8004110:	6593      	str	r3, [r2, #88]	@ 0x58
 8004112:	e003      	b.n	800411c <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004114:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004118:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 800411c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004124:	f002 0308 	and.w	r3, r2, #8
 8004128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800412c:	2300      	movs	r3, #0
 800412e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8004132:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8004136:	460b      	mov	r3, r1
 8004138:	4313      	orrs	r3, r2
 800413a:	d01e      	beq.n	800417a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 800413c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004140:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004148:	d10c      	bne.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800414a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800414e:	3328      	adds	r3, #40	@ 0x28
 8004150:	2102      	movs	r1, #2
 8004152:	4618      	mov	r0, r3
 8004154:	f000 fe38 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004158:	4603      	mov	r3, r0
 800415a:	2b00      	cmp	r3, #0
 800415c:	d002      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 800415e:	2301      	movs	r3, #1
 8004160:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8004164:	4b86      	ldr	r3, [pc, #536]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004168:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800416c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004170:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004174:	4a82      	ldr	r2, [pc, #520]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004176:	430b      	orrs	r3, r1
 8004178:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800417a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800417e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004182:	f002 0310 	and.w	r3, r2, #16
 8004186:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800418a:	2300      	movs	r3, #0
 800418c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004190:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004194:	460b      	mov	r3, r1
 8004196:	4313      	orrs	r3, r2
 8004198:	d01e      	beq.n	80041d8 <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800419a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800419e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a6:	d10c      	bne.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80041a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ac:	3328      	adds	r3, #40	@ 0x28
 80041ae:	2102      	movs	r1, #2
 80041b0:	4618      	mov	r0, r3
 80041b2:	f000 fe09 	bl	8004dc8 <RCCEx_PLL3_Config>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d002      	beq.n	80041c2 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80041c2:	4b6f      	ldr	r3, [pc, #444]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041c6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80041ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80041d2:	4a6b      	ldr	r2, [pc, #428]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80041d4:	430b      	orrs	r3, r1
 80041d6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80041d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80041e4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80041e6:	2300      	movs	r3, #0
 80041e8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80041ea:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80041ee:	460b      	mov	r3, r1
 80041f0:	4313      	orrs	r3, r2
 80041f2:	d03e      	beq.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80041f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80041f8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80041fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004200:	d022      	beq.n	8004248 <HAL_RCCEx_PeriphCLKConfig+0xea0>
 8004202:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004206:	d81b      	bhi.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004210:	d00b      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xe82>
 8004212:	e015      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004214:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004218:	3308      	adds	r3, #8
 800421a:	2100      	movs	r1, #0
 800421c:	4618      	mov	r0, r3
 800421e:	f000 fd21 	bl	8004c64 <RCCEx_PLL2_Config>
 8004222:	4603      	mov	r3, r0
 8004224:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004228:	e00f      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800422a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800422e:	3328      	adds	r3, #40	@ 0x28
 8004230:	2102      	movs	r1, #2
 8004232:	4618      	mov	r0, r3
 8004234:	f000 fdc8 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004238:	4603      	mov	r3, r0
 800423a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 800423e:	e004      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 8004246:	e000      	b.n	800424a <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 8004248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800424a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800424e:	2b00      	cmp	r3, #0
 8004250:	d10b      	bne.n	800426a <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004252:	4b4b      	ldr	r3, [pc, #300]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004254:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004256:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800425a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800425e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8004262:	4a47      	ldr	r2, [pc, #284]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004264:	430b      	orrs	r3, r1
 8004266:	6593      	str	r3, [r2, #88]	@ 0x58
 8004268:	e003      	b.n	8004272 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800426a:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800426e:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004272:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800427a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800427e:	673b      	str	r3, [r7, #112]	@ 0x70
 8004280:	2300      	movs	r3, #0
 8004282:	677b      	str	r3, [r7, #116]	@ 0x74
 8004284:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004288:	460b      	mov	r3, r1
 800428a:	4313      	orrs	r3, r2
 800428c:	d03b      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800428e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004292:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004296:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800429a:	d01f      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800429c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80042a0:	d818      	bhi.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 80042a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042a6:	d003      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80042a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80042ac:	d007      	beq.n	80042be <HAL_RCCEx_PeriphCLKConfig+0xf16>
 80042ae:	e011      	b.n	80042d4 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042b0:	4b33      	ldr	r3, [pc, #204]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b4:	4a32      	ldr	r2, [pc, #200]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80042bc:	e00f      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80042be:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042c2:	3328      	adds	r3, #40	@ 0x28
 80042c4:	2101      	movs	r1, #1
 80042c6:	4618      	mov	r0, r3
 80042c8:	f000 fd7e 	bl	8004dc8 <RCCEx_PLL3_Config>
 80042cc:	4603      	mov	r3, r0
 80042ce:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 80042d2:	e004      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 80042da:	e000      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 80042dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042de:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10b      	bne.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042e6:	4b26      	ldr	r3, [pc, #152]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80042ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80042f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f6:	4a22      	ldr	r2, [pc, #136]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80042f8:	430b      	orrs	r3, r1
 80042fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80042fc:	e003      	b.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042fe:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004302:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004306:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800430a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800430e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004312:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004314:	2300      	movs	r3, #0
 8004316:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004318:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800431c:	460b      	mov	r3, r1
 800431e:	4313      	orrs	r3, r2
 8004320:	d034      	beq.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004322:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004326:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004328:	2b00      	cmp	r3, #0
 800432a:	d003      	beq.n	8004334 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 800432c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004330:	d007      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8004332:	e011      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004334:	4b12      	ldr	r3, [pc, #72]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004336:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004338:	4a11      	ldr	r2, [pc, #68]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800433a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800433e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004340:	e00e      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004342:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004346:	3308      	adds	r3, #8
 8004348:	2102      	movs	r1, #2
 800434a:	4618      	mov	r0, r3
 800434c:	f000 fc8a 	bl	8004c64 <RCCEx_PLL2_Config>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004356:	e003      	b.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800435e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004360:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10d      	bne.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004368:	4b05      	ldr	r3, [pc, #20]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 800436a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004370:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004376:	4a02      	ldr	r2, [pc, #8]	@ (8004380 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8004378:	430b      	orrs	r3, r1
 800437a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800437c:	e006      	b.n	800438c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 800437e:	bf00      	nop
 8004380:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004384:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004388:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800438c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004394:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8004398:	663b      	str	r3, [r7, #96]	@ 0x60
 800439a:	2300      	movs	r3, #0
 800439c:	667b      	str	r3, [r7, #100]	@ 0x64
 800439e:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80043a2:	460b      	mov	r3, r1
 80043a4:	4313      	orrs	r3, r2
 80043a6:	d00c      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043ac:	3328      	adds	r3, #40	@ 0x28
 80043ae:	2102      	movs	r1, #2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f000 fd09 	bl	8004dc8 <RCCEx_PLL3_Config>
 80043b6:	4603      	mov	r3, r0
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 80043bc:	2301      	movs	r3, #1
 80043be:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80043c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80043ce:	65bb      	str	r3, [r7, #88]	@ 0x58
 80043d0:	2300      	movs	r3, #0
 80043d2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043d4:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80043d8:	460b      	mov	r3, r1
 80043da:	4313      	orrs	r3, r2
 80043dc:	d036      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 80043de:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80043e2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80043e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043e8:	d018      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0x1074>
 80043ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ee:	d811      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043f4:	d014      	beq.n	8004420 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 80043f6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043fa:	d80b      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d011      	beq.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8004400:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004404:	d106      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004406:	4bb7      	ldr	r3, [pc, #732]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	4ab6      	ldr	r2, [pc, #728]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800440c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004412:	e008      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
        break;
 800441a:	e004      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 800441c:	bf00      	nop
 800441e:	e002      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004420:	bf00      	nop
 8004422:	e000      	b.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8004424:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004426:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800442a:	2b00      	cmp	r3, #0
 800442c:	d10a      	bne.n	8004444 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800442e:	4bad      	ldr	r3, [pc, #692]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004430:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004432:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004436:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800443a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800443c:	4aa9      	ldr	r2, [pc, #676]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800443e:	430b      	orrs	r3, r1
 8004440:	6553      	str	r3, [r2, #84]	@ 0x54
 8004442:	e003      	b.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004444:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004448:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800444c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004450:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004454:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8004458:	653b      	str	r3, [r7, #80]	@ 0x50
 800445a:	2300      	movs	r3, #0
 800445c:	657b      	str	r3, [r7, #84]	@ 0x54
 800445e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8004462:	460b      	mov	r3, r1
 8004464:	4313      	orrs	r3, r2
 8004466:	d009      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004468:	4b9e      	ldr	r3, [pc, #632]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800446a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800446c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8004470:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004474:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004476:	4a9b      	ldr	r2, [pc, #620]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004478:	430b      	orrs	r3, r1
 800447a:	6513      	str	r3, [r2, #80]	@ 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800447c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004488:	64bb      	str	r3, [r7, #72]	@ 0x48
 800448a:	2300      	movs	r3, #0
 800448c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d009      	beq.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004498:	4b92      	ldr	r3, [pc, #584]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 800449a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800449c:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80044a0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80044a6:	4a8f      	ldr	r2, [pc, #572]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044a8:	430b      	orrs	r3, r1
 80044aa:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80044ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044b4:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80044b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80044ba:	2300      	movs	r3, #0
 80044bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80044be:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80044c2:	460b      	mov	r3, r1
 80044c4:	4313      	orrs	r3, r2
 80044c6:	d00e      	beq.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80044c8:	4b86      	ldr	r3, [pc, #536]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	4a85      	ldr	r2, [pc, #532]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044ce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80044d2:	6113      	str	r3, [r2, #16]
 80044d4:	4b83      	ldr	r3, [pc, #524]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044d6:	6919      	ldr	r1, [r3, #16]
 80044d8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044dc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80044e0:	4a80      	ldr	r2, [pc, #512]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 80044e2:	430b      	orrs	r3, r1
 80044e4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80044e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80044ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ee:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80044f2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80044f4:	2300      	movs	r3, #0
 80044f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80044f8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80044fc:	460b      	mov	r3, r1
 80044fe:	4313      	orrs	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004502:	4b78      	ldr	r3, [pc, #480]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004506:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800450a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	4a74      	ldr	r2, [pc, #464]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004512:	430b      	orrs	r3, r1
 8004514:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004516:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8004522:	633b      	str	r3, [r7, #48]	@ 0x30
 8004524:	2300      	movs	r3, #0
 8004526:	637b      	str	r3, [r7, #52]	@ 0x34
 8004528:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800452c:	460b      	mov	r3, r1
 800452e:	4313      	orrs	r3, r2
 8004530:	d00a      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004532:	4b6c      	ldr	r3, [pc, #432]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004536:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800453a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800453e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004542:	4a68      	ldr	r2, [pc, #416]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8004544:	430b      	orrs	r3, r1
 8004546:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004548:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800454c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004550:	2100      	movs	r1, #0
 8004552:	62b9      	str	r1, [r7, #40]	@ 0x28
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800455a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800455e:	460b      	mov	r3, r1
 8004560:	4313      	orrs	r3, r2
 8004562:	d011      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004564:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004568:	3308      	adds	r3, #8
 800456a:	2100      	movs	r1, #0
 800456c:	4618      	mov	r0, r3
 800456e:	f000 fb79 	bl	8004c64 <RCCEx_PLL2_Config>
 8004572:	4603      	mov	r3, r0
 8004574:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004578:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800457c:	2b00      	cmp	r3, #0
 800457e:	d003      	beq.n	8004588 <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004580:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004584:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004588:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800458c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004590:	2100      	movs	r1, #0
 8004592:	6239      	str	r1, [r7, #32]
 8004594:	f003 0302 	and.w	r3, r3, #2
 8004598:	627b      	str	r3, [r7, #36]	@ 0x24
 800459a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800459e:	460b      	mov	r3, r1
 80045a0:	4313      	orrs	r3, r2
 80045a2:	d011      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80045a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045a8:	3308      	adds	r3, #8
 80045aa:	2101      	movs	r1, #1
 80045ac:	4618      	mov	r0, r3
 80045ae:	f000 fb59 	bl	8004c64 <RCCEx_PLL2_Config>
 80045b2:	4603      	mov	r3, r0
 80045b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80045c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045d0:	2100      	movs	r1, #0
 80045d2:	61b9      	str	r1, [r7, #24]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	61fb      	str	r3, [r7, #28]
 80045da:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80045de:	460b      	mov	r3, r1
 80045e0:	4313      	orrs	r3, r2
 80045e2:	d011      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80045e8:	3308      	adds	r3, #8
 80045ea:	2102      	movs	r1, #2
 80045ec:	4618      	mov	r0, r3
 80045ee:	f000 fb39 	bl	8004c64 <RCCEx_PLL2_Config>
 80045f2:	4603      	mov	r3, r0
 80045f4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80045f8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d003      	beq.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004600:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004604:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004608:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800460c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004610:	2100      	movs	r1, #0
 8004612:	6139      	str	r1, [r7, #16]
 8004614:	f003 0308 	and.w	r3, r3, #8
 8004618:	617b      	str	r3, [r7, #20]
 800461a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800461e:	460b      	mov	r3, r1
 8004620:	4313      	orrs	r3, r2
 8004622:	d011      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004628:	3328      	adds	r3, #40	@ 0x28
 800462a:	2100      	movs	r1, #0
 800462c:	4618      	mov	r0, r3
 800462e:	f000 fbcb 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004632:	4603      	mov	r3, r0
 8004634:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
  
    if (ret == HAL_OK)
 8004638:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800463c:	2b00      	cmp	r3, #0
 800463e:	d003      	beq.n	8004648 <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004640:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004644:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004648:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	2100      	movs	r1, #0
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	60fb      	str	r3, [r7, #12]
 800465a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800465e:	460b      	mov	r3, r1
 8004660:	4313      	orrs	r3, r2
 8004662:	d011      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004664:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8004668:	3328      	adds	r3, #40	@ 0x28
 800466a:	2101      	movs	r1, #1
 800466c:	4618      	mov	r0, r3
 800466e:	f000 fbab 	bl	8004dc8 <RCCEx_PLL3_Config>
 8004672:	4603      	mov	r3, r0
 8004674:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 8004678:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004680:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 8004684:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004688:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	2100      	movs	r1, #0
 8004692:	6039      	str	r1, [r7, #0]
 8004694:	f003 0320 	and.w	r3, r3, #32
 8004698:	607b      	str	r3, [r7, #4]
 800469a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d011      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80046a4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80046a8:	3328      	adds	r3, #40	@ 0x28
 80046aa:	2102      	movs	r1, #2
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 fb8b 	bl	8004dc8 <RCCEx_PLL3_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 3117 	strb.w	r3, [r7, #279]	@ 0x117
    
    if (ret == HAL_OK)
 80046b8:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 3117 	ldrb.w	r3, [r7, #279]	@ 0x117
 80046c4:	f887 3116 	strb.w	r3, [r7, #278]	@ 0x116
    } 
  }

  if (status == HAL_OK)
 80046c8:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d101      	bne.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	e000      	b.n	80046d6 <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
}
 80046d6:	4618      	mov	r0, r3
 80046d8:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80046dc:	46bd      	mov	sp, r7
 80046de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046e2:	bf00      	nop
 80046e4:	58024400 	.word	0x58024400

080046e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80046ec:	f7fe fe00 	bl	80032f0 <HAL_RCC_GetHCLKFreq>
 80046f0:	4602      	mov	r2, r0
 80046f2:	4b06      	ldr	r3, [pc, #24]	@ (800470c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	091b      	lsrs	r3, r3, #4
 80046f8:	f003 0307 	and.w	r3, r3, #7
 80046fc:	4904      	ldr	r1, [pc, #16]	@ (8004710 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80046fe:	5ccb      	ldrb	r3, [r1, r3]
 8004700:	f003 031f 	and.w	r3, r3, #31
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	58024400 	.word	0x58024400
 8004710:	08007a30 	.word	0x08007a30

08004714 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004714:	b480      	push	{r7}
 8004716:	b089      	sub	sp, #36	@ 0x24
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800471c:	4ba1      	ldr	r3, [pc, #644]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800471e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004720:	f003 0303 	and.w	r3, r3, #3
 8004724:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004726:	4b9f      	ldr	r3, [pc, #636]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472a:	0b1b      	lsrs	r3, r3, #12
 800472c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004730:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004732:	4b9c      	ldr	r3, [pc, #624]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0301 	and.w	r3, r3, #1
 800473c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800473e:	4b99      	ldr	r3, [pc, #612]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004742:	08db      	lsrs	r3, r3, #3
 8004744:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	fb02 f303 	mul.w	r3, r2, r3
 800474e:	ee07 3a90 	vmov	s15, r3
 8004752:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004756:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	2b00      	cmp	r3, #0
 800475e:	f000 8111 	beq.w	8004984 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	2b02      	cmp	r3, #2
 8004766:	f000 8083 	beq.w	8004870 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800476a:	69bb      	ldr	r3, [r7, #24]
 800476c:	2b02      	cmp	r3, #2
 800476e:	f200 80a1 	bhi.w	80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d003      	beq.n	8004780 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004778:	69bb      	ldr	r3, [r7, #24]
 800477a:	2b01      	cmp	r3, #1
 800477c:	d056      	beq.n	800482c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800477e:	e099      	b.n	80048b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004780:	4b88      	ldr	r3, [pc, #544]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0320 	and.w	r3, r3, #32
 8004788:	2b00      	cmp	r3, #0
 800478a:	d02d      	beq.n	80047e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800478c:	4b85      	ldr	r3, [pc, #532]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	08db      	lsrs	r3, r3, #3
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	4a84      	ldr	r2, [pc, #528]	@ (80049a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004798:	fa22 f303 	lsr.w	r3, r2, r3
 800479c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	ee07 3a90 	vmov	s15, r3
 80047a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	ee07 3a90 	vmov	s15, r3
 80047ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047b6:	4b7b      	ldr	r3, [pc, #492]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047be:	ee07 3a90 	vmov	s15, r3
 80047c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ca:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80047da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80047e6:	e087      	b.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	ee07 3a90 	vmov	s15, r3
 80047ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047f2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80049b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80047f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047fa:	4b6a      	ldr	r3, [pc, #424]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004802:	ee07 3a90 	vmov	s15, r3
 8004806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800480a:	ed97 6a03 	vldr	s12, [r7, #12]
 800480e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800481a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800481e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800482a:	e065      	b.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	ee07 3a90 	vmov	s15, r3
 8004832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004836:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800483a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800483e:	4b59      	ldr	r3, [pc, #356]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004840:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004846:	ee07 3a90 	vmov	s15, r3
 800484a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800484e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004852:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800485a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800485e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800486a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800486e:	e043      	b.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80049b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800487e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004882:	4b48      	ldr	r3, [pc, #288]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004884:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800488a:	ee07 3a90 	vmov	s15, r3
 800488e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004892:	ed97 6a03 	vldr	s12, [r7, #12]
 8004896:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800489a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800489e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048b2:	e021      	b.n	80048f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80048b4:	697b      	ldr	r3, [r7, #20]
 80048b6:	ee07 3a90 	vmov	s15, r3
 80048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048be:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80049b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80048c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80048c6:	4b37      	ldr	r3, [pc, #220]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80048ce:	ee07 3a90 	vmov	s15, r3
 80048d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80048d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80048da:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80049ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80048de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80048e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80048e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80048ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80048ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80048f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 80048f8:	4b2a      	ldr	r3, [pc, #168]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80048fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048fc:	0a5b      	lsrs	r3, r3, #9
 80048fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004902:	ee07 3a90 	vmov	s15, r3
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800490e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004912:	edd7 6a07 	vldr	s13, [r7, #28]
 8004916:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800491a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800491e:	ee17 2a90 	vmov	r2, s15
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004926:	4b1f      	ldr	r3, [pc, #124]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800492a:	0c1b      	lsrs	r3, r3, #16
 800492c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004930:	ee07 3a90 	vmov	s15, r3
 8004934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004938:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800493c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004940:	edd7 6a07 	vldr	s13, [r7, #28]
 8004944:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004948:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494c:	ee17 2a90 	vmov	r2, s15
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004954:	4b13      	ldr	r3, [pc, #76]	@ (80049a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004956:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004958:	0e1b      	lsrs	r3, r3, #24
 800495a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800495e:	ee07 3a90 	vmov	s15, r3
 8004962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004966:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800496a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800496e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004972:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004976:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800497a:	ee17 2a90 	vmov	r2, s15
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004982:	e008      	b.n	8004996 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2200      	movs	r2, #0
 8004988:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2200      	movs	r2, #0
 800498e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	609a      	str	r2, [r3, #8]
}
 8004996:	bf00      	nop
 8004998:	3724      	adds	r7, #36	@ 0x24
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
 80049a2:	bf00      	nop
 80049a4:	58024400 	.word	0x58024400
 80049a8:	03d09000 	.word	0x03d09000
 80049ac:	46000000 	.word	0x46000000
 80049b0:	4c742400 	.word	0x4c742400
 80049b4:	4a742400 	.word	0x4a742400
 80049b8:	4af42400 	.word	0x4af42400

080049bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80049bc:	b480      	push	{r7}
 80049be:	b089      	sub	sp, #36	@ 0x24
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80049c4:	4ba1      	ldr	r3, [pc, #644]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c8:	f003 0303 	and.w	r3, r3, #3
 80049cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80049ce:	4b9f      	ldr	r3, [pc, #636]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d2:	0d1b      	lsrs	r3, r3, #20
 80049d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80049da:	4b9c      	ldr	r3, [pc, #624]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049de:	0a1b      	lsrs	r3, r3, #8
 80049e0:	f003 0301 	and.w	r3, r3, #1
 80049e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80049e6:	4b99      	ldr	r3, [pc, #612]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ea:	08db      	lsrs	r3, r3, #3
 80049ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	fb02 f303 	mul.w	r3, r2, r3
 80049f6:	ee07 3a90 	vmov	s15, r3
 80049fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004a02:	697b      	ldr	r3, [r7, #20]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	f000 8111 	beq.w	8004c2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004a0a:	69bb      	ldr	r3, [r7, #24]
 8004a0c:	2b02      	cmp	r3, #2
 8004a0e:	f000 8083 	beq.w	8004b18 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004a12:	69bb      	ldr	r3, [r7, #24]
 8004a14:	2b02      	cmp	r3, #2
 8004a16:	f200 80a1 	bhi.w	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d056      	beq.n	8004ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004a26:	e099      	b.n	8004b5c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a28:	4b88      	ldr	r3, [pc, #544]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d02d      	beq.n	8004a90 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004a34:	4b85      	ldr	r3, [pc, #532]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	08db      	lsrs	r3, r3, #3
 8004a3a:	f003 0303 	and.w	r3, r3, #3
 8004a3e:	4a84      	ldr	r2, [pc, #528]	@ (8004c50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004a40:	fa22 f303 	lsr.w	r3, r2, r3
 8004a44:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	ee07 3a90 	vmov	s15, r3
 8004a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	ee07 3a90 	vmov	s15, r3
 8004a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a5e:	4b7b      	ldr	r3, [pc, #492]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a66:	ee07 3a90 	vmov	s15, r3
 8004a6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a72:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004a82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a8a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004a8e:	e087      	b.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	ee07 3a90 	vmov	s15, r3
 8004a96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a9a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004c58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004a9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004aa2:	4b6a      	ldr	r3, [pc, #424]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aaa:	ee07 3a90 	vmov	s15, r3
 8004aae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ab2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ab6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004aba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004abe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ac2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ace:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ad2:	e065      	b.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	ee07 3a90 	vmov	s15, r3
 8004ada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ade:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ae6:	4b59      	ldr	r3, [pc, #356]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004aee:	ee07 3a90 	vmov	s15, r3
 8004af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004af6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004afa:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004afe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b16:	e043      	b.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004c60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b2a:	4b48      	ldr	r3, [pc, #288]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b32:	ee07 3a90 	vmov	s15, r3
 8004b36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b3e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b56:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b5a:	e021      	b.n	8004ba0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	ee07 3a90 	vmov	s15, r3
 8004b62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b66:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004c5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004b6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b6e:	4b37      	ldr	r3, [pc, #220]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b76:	ee07 3a90 	vmov	s15, r3
 8004b7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b82:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004c54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004b86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004b9e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ba0:	4b2a      	ldr	r3, [pc, #168]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ba4:	0a5b      	lsrs	r3, r3, #9
 8004ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004baa:	ee07 3a90 	vmov	s15, r3
 8004bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bb2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004bb6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004bba:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bc6:	ee17 2a90 	vmov	r2, s15
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004bce:	4b1f      	ldr	r3, [pc, #124]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd2:	0c1b      	lsrs	r3, r3, #16
 8004bd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004bd8:	ee07 3a90 	vmov	s15, r3
 8004bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004be0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004be4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bf4:	ee17 2a90 	vmov	r2, s15
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004bfc:	4b13      	ldr	r3, [pc, #76]	@ (8004c4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004bfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c00:	0e1b      	lsrs	r3, r3, #24
 8004c02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c06:	ee07 3a90 	vmov	s15, r3
 8004c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004c12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004c16:	edd7 6a07 	vldr	s13, [r7, #28]
 8004c1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004c1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004c22:	ee17 2a90 	vmov	r2, s15
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004c2a:	e008      	b.n	8004c3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	609a      	str	r2, [r3, #8]
}
 8004c3e:	bf00      	nop
 8004c40:	3724      	adds	r7, #36	@ 0x24
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	03d09000 	.word	0x03d09000
 8004c54:	46000000 	.word	0x46000000
 8004c58:	4c742400 	.word	0x4c742400
 8004c5c:	4a742400 	.word	0x4a742400
 8004c60:	4af42400 	.word	0x4af42400

08004c64 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b084      	sub	sp, #16
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
 8004c6c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004c6e:	2300      	movs	r3, #0
 8004c70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004c72:	4b53      	ldr	r3, [pc, #332]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004c74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c76:	f003 0303 	and.w	r3, r3, #3
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d101      	bne.n	8004c82 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e099      	b.n	8004db6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004c82:	4b4f      	ldr	r3, [pc, #316]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	4a4e      	ldr	r2, [pc, #312]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004c88:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004c8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c8e:	f7fc fb31 	bl	80012f4 <HAL_GetTick>
 8004c92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004c96:	f7fc fb2d 	bl	80012f4 <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b02      	cmp	r3, #2
 8004ca2:	d901      	bls.n	8004ca8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e086      	b.n	8004db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ca8:	4b45      	ldr	r3, [pc, #276]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004cb4:	4b42      	ldr	r3, [pc, #264]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	031b      	lsls	r3, r3, #12
 8004cc2:	493f      	ldr	r1, [pc, #252]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	628b      	str	r3, [r1, #40]	@ 0x28
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	3b01      	subs	r3, #1
 8004cce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	3b01      	subs	r3, #1
 8004cd8:	025b      	lsls	r3, r3, #9
 8004cda:	b29b      	uxth	r3, r3
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	041b      	lsls	r3, r3, #16
 8004ce6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004cea:	431a      	orrs	r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	691b      	ldr	r3, [r3, #16]
 8004cf0:	3b01      	subs	r3, #1
 8004cf2:	061b      	lsls	r3, r3, #24
 8004cf4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004cf8:	4931      	ldr	r1, [pc, #196]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004cfe:	4b30      	ldr	r3, [pc, #192]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	492d      	ldr	r1, [pc, #180]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004d10:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d14:	f023 0220 	bic.w	r2, r3, #32
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	699b      	ldr	r3, [r3, #24]
 8004d1c:	4928      	ldr	r1, [pc, #160]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004d22:	4b27      	ldr	r3, [pc, #156]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d26:	4a26      	ldr	r2, [pc, #152]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d28:	f023 0310 	bic.w	r3, r3, #16
 8004d2c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004d2e:	4b24      	ldr	r3, [pc, #144]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d30:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d32:	4b24      	ldr	r3, [pc, #144]	@ (8004dc4 <RCCEx_PLL2_Config+0x160>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	69d2      	ldr	r2, [r2, #28]
 8004d3a:	00d2      	lsls	r2, r2, #3
 8004d3c:	4920      	ldr	r1, [pc, #128]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004d42:	4b1f      	ldr	r3, [pc, #124]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d46:	4a1e      	ldr	r2, [pc, #120]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d48:	f043 0310 	orr.w	r3, r3, #16
 8004d4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d106      	bne.n	8004d62 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004d54:	4b1a      	ldr	r3, [pc, #104]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d58:	4a19      	ldr	r2, [pc, #100]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d5a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004d5e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d60:	e00f      	b.n	8004d82 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	2b01      	cmp	r3, #1
 8004d66:	d106      	bne.n	8004d76 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004d68:	4b15      	ldr	r3, [pc, #84]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	4a14      	ldr	r2, [pc, #80]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d6e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004d72:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004d74:	e005      	b.n	8004d82 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004d76:	4b12      	ldr	r3, [pc, #72]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d7a:	4a11      	ldr	r2, [pc, #68]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d7c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004d80:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004d82:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	4a0e      	ldr	r2, [pc, #56]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004d88:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d8c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d8e:	f7fc fab1 	bl	80012f4 <HAL_GetTick>
 8004d92:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004d94:	e008      	b.n	8004da8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004d96:	f7fc faad 	bl	80012f4 <HAL_GetTick>
 8004d9a:	4602      	mov	r2, r0
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	1ad3      	subs	r3, r2, r3
 8004da0:	2b02      	cmp	r3, #2
 8004da2:	d901      	bls.n	8004da8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004da4:	2303      	movs	r3, #3
 8004da6:	e006      	b.n	8004db6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <RCCEx_PLL2_Config+0x15c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d0f0      	beq.n	8004d96 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}
 8004dbe:	bf00      	nop
 8004dc0:	58024400 	.word	0x58024400
 8004dc4:	ffff0007 	.word	0xffff0007

08004dc8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
 8004dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dd2:	2300      	movs	r3, #0
 8004dd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004dd6:	4b53      	ldr	r3, [pc, #332]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004dd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dda:	f003 0303 	and.w	r3, r3, #3
 8004dde:	2b03      	cmp	r3, #3
 8004de0:	d101      	bne.n	8004de6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	e099      	b.n	8004f1a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004de6:	4b4f      	ldr	r3, [pc, #316]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a4e      	ldr	r2, [pc, #312]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004dec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004df0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004df2:	f7fc fa7f 	bl	80012f4 <HAL_GetTick>
 8004df6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004df8:	e008      	b.n	8004e0c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004dfa:	f7fc fa7b 	bl	80012f4 <HAL_GetTick>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	1ad3      	subs	r3, r2, r3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d901      	bls.n	8004e0c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004e08:	2303      	movs	r3, #3
 8004e0a:	e086      	b.n	8004f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004e0c:	4b45      	ldr	r3, [pc, #276]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d1f0      	bne.n	8004dfa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004e18:	4b42      	ldr	r3, [pc, #264]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e1c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	051b      	lsls	r3, r3, #20
 8004e26:	493f      	ldr	r1, [pc, #252]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	628b      	str	r3, [r1, #40]	@ 0x28
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	3b01      	subs	r3, #1
 8004e32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	025b      	lsls	r3, r3, #9
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	431a      	orrs	r2, r3
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	68db      	ldr	r3, [r3, #12]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	041b      	lsls	r3, r3, #16
 8004e4a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004e4e:	431a      	orrs	r2, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	691b      	ldr	r3, [r3, #16]
 8004e54:	3b01      	subs	r3, #1
 8004e56:	061b      	lsls	r3, r3, #24
 8004e58:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004e5c:	4931      	ldr	r1, [pc, #196]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004e62:	4b30      	ldr	r3, [pc, #192]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	492d      	ldr	r1, [pc, #180]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e70:	4313      	orrs	r3, r2
 8004e72:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004e74:	4b2b      	ldr	r3, [pc, #172]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e78:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	699b      	ldr	r3, [r3, #24]
 8004e80:	4928      	ldr	r1, [pc, #160]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e82:	4313      	orrs	r3, r2
 8004e84:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004e86:	4b27      	ldr	r3, [pc, #156]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8a:	4a26      	ldr	r2, [pc, #152]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e90:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004e92:	4b24      	ldr	r3, [pc, #144]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004e94:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e96:	4b24      	ldr	r3, [pc, #144]	@ (8004f28 <RCCEx_PLL3_Config+0x160>)
 8004e98:	4013      	ands	r3, r2
 8004e9a:	687a      	ldr	r2, [r7, #4]
 8004e9c:	69d2      	ldr	r2, [r2, #28]
 8004e9e:	00d2      	lsls	r2, r2, #3
 8004ea0:	4920      	ldr	r1, [pc, #128]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ea2:	4313      	orrs	r3, r2
 8004ea4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004eac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004eb0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d106      	bne.n	8004ec6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004eb8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebc:	4a19      	ldr	r2, [pc, #100]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ebe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004ec2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ec4:	e00f      	b.n	8004ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	d106      	bne.n	8004eda <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004ecc:	4b15      	ldr	r3, [pc, #84]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ed0:	4a14      	ldr	r2, [pc, #80]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ed2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004ed6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004ed8:	e005      	b.n	8004ee6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004eda:	4b12      	ldr	r3, [pc, #72]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004edc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ede:	4a11      	ldr	r2, [pc, #68]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ee0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004ee4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004ee6:	4b0f      	ldr	r3, [pc, #60]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a0e      	ldr	r2, [pc, #56]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004eec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ef0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ef2:	f7fc f9ff 	bl	80012f4 <HAL_GetTick>
 8004ef6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ef8:	e008      	b.n	8004f0c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004efa:	f7fc f9fb 	bl	80012f4 <HAL_GetTick>
 8004efe:	4602      	mov	r2, r0
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	1ad3      	subs	r3, r2, r3
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d901      	bls.n	8004f0c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e006      	b.n	8004f1a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004f0c:	4b05      	ldr	r3, [pc, #20]	@ (8004f24 <RCCEx_PLL3_Config+0x15c>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d0f0      	beq.n	8004efa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3710      	adds	r7, #16
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	58024400 	.word	0x58024400
 8004f28:	ffff0007 	.word	0xffff0007

08004f2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e042      	b.n	8004fc4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d106      	bne.n	8004f56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f7fb ffd7 	bl	8000f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2224      	movs	r2, #36	@ 0x24
 8004f5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f022 0201 	bic.w	r2, r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d002      	beq.n	8004f7c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f001 fb52 	bl	8006620 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 fce3 	bl	8005948 <UART_SetConfig>
 8004f82:	4603      	mov	r3, r0
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d101      	bne.n	8004f8c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004f88:	2301      	movs	r3, #1
 8004f8a:	e01b      	b.n	8004fc4 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004f9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004faa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	681a      	ldr	r2, [r3, #0]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f042 0201 	orr.w	r2, r2, #1
 8004fba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f001 fbd1 	bl	8006764 <UART_CheckIdleState>
 8004fc2:	4603      	mov	r3, r0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3708      	adds	r7, #8
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b08a      	sub	sp, #40	@ 0x28
 8004fd0:	af02      	add	r7, sp, #8
 8004fd2:	60f8      	str	r0, [r7, #12]
 8004fd4:	60b9      	str	r1, [r7, #8]
 8004fd6:	603b      	str	r3, [r7, #0]
 8004fd8:	4613      	mov	r3, r2
 8004fda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fe2:	2b20      	cmp	r3, #32
 8004fe4:	d17b      	bne.n	80050de <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d002      	beq.n	8004ff2 <HAL_UART_Transmit+0x26>
 8004fec:	88fb      	ldrh	r3, [r7, #6]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e074      	b.n	80050e0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	2221      	movs	r2, #33	@ 0x21
 8005002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005006:	f7fc f975 	bl	80012f4 <HAL_GetTick>
 800500a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	88fa      	ldrh	r2, [r7, #6]
 8005010:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	88fa      	ldrh	r2, [r7, #6]
 8005018:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005024:	d108      	bne.n	8005038 <HAL_UART_Transmit+0x6c>
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d104      	bne.n	8005038 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800502e:	2300      	movs	r3, #0
 8005030:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005032:	68bb      	ldr	r3, [r7, #8]
 8005034:	61bb      	str	r3, [r7, #24]
 8005036:	e003      	b.n	8005040 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800503c:	2300      	movs	r3, #0
 800503e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005040:	e030      	b.n	80050a4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	2200      	movs	r2, #0
 800504a:	2180      	movs	r1, #128	@ 0x80
 800504c:	68f8      	ldr	r0, [r7, #12]
 800504e:	f001 fc33 	bl	80068b8 <UART_WaitOnFlagUntilTimeout>
 8005052:	4603      	mov	r3, r0
 8005054:	2b00      	cmp	r3, #0
 8005056:	d005      	beq.n	8005064 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2220      	movs	r2, #32
 800505c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005060:	2303      	movs	r3, #3
 8005062:	e03d      	b.n	80050e0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005064:	69fb      	ldr	r3, [r7, #28]
 8005066:	2b00      	cmp	r3, #0
 8005068:	d10b      	bne.n	8005082 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800506a:	69bb      	ldr	r3, [r7, #24]
 800506c:	881b      	ldrh	r3, [r3, #0]
 800506e:	461a      	mov	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005078:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	3302      	adds	r3, #2
 800507e:	61bb      	str	r3, [r7, #24]
 8005080:	e007      	b.n	8005092 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	781a      	ldrb	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	3301      	adds	r3, #1
 8005090:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005098:	b29b      	uxth	r3, r3
 800509a:	3b01      	subs	r3, #1
 800509c:	b29a      	uxth	r2, r3
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d1c8      	bne.n	8005042 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	9300      	str	r3, [sp, #0]
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	2200      	movs	r2, #0
 80050b8:	2140      	movs	r1, #64	@ 0x40
 80050ba:	68f8      	ldr	r0, [r7, #12]
 80050bc:	f001 fbfc 	bl	80068b8 <UART_WaitOnFlagUntilTimeout>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d005      	beq.n	80050d2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80050ce:	2303      	movs	r3, #3
 80050d0:	e006      	b.n	80050e0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2220      	movs	r2, #32
 80050d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80050da:	2300      	movs	r3, #0
 80050dc:	e000      	b.n	80050e0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80050de:	2302      	movs	r3, #2
  }
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b08a      	sub	sp, #40	@ 0x28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	4613      	mov	r3, r2
 80050f4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80050fc:	2b20      	cmp	r3, #32
 80050fe:	d137      	bne.n	8005170 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d002      	beq.n	800510c <HAL_UART_Receive_IT+0x24>
 8005106:	88fb      	ldrh	r3, [r7, #6]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d101      	bne.n	8005110 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e030      	b.n	8005172 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	2200      	movs	r2, #0
 8005114:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a18      	ldr	r2, [pc, #96]	@ (800517c <HAL_UART_Receive_IT+0x94>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d01f      	beq.n	8005160 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	613b      	str	r3, [r7, #16]
   return(result);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	461a      	mov	r2, r3
 800514a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800514c:	623b      	str	r3, [r7, #32]
 800514e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	69f9      	ldr	r1, [r7, #28]
 8005152:	6a3a      	ldr	r2, [r7, #32]
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	61bb      	str	r3, [r7, #24]
   return(result);
 800515a:	69bb      	ldr	r3, [r7, #24]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e6      	bne.n	800512e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005160:	88fb      	ldrh	r3, [r7, #6]
 8005162:	461a      	mov	r2, r3
 8005164:	68b9      	ldr	r1, [r7, #8]
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f001 fc14 	bl	8006994 <UART_Start_Receive_IT>
 800516c:	4603      	mov	r3, r0
 800516e:	e000      	b.n	8005172 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005170:	2302      	movs	r3, #2
  }
}
 8005172:	4618      	mov	r0, r3
 8005174:	3728      	adds	r7, #40	@ 0x28
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	58000c00 	.word	0x58000c00

08005180 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b0ba      	sub	sp, #232	@ 0xe8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80051a6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80051aa:	f640 030f 	movw	r3, #2063	@ 0x80f
 80051ae:	4013      	ands	r3, r2
 80051b0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80051b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d11b      	bne.n	80051f4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80051bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80051c0:	f003 0320 	and.w	r3, r3, #32
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d015      	beq.n	80051f4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80051c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051cc:	f003 0320 	and.w	r3, r3, #32
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d105      	bne.n	80051e0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80051d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80051d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d009      	beq.n	80051f4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	f000 8377 	beq.w	80058d8 <HAL_UART_IRQHandler+0x758>
      {
        huart->RxISR(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	4798      	blx	r3
      }
      return;
 80051f2:	e371      	b.n	80058d8 <HAL_UART_IRQHandler+0x758>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80051f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	f000 8123 	beq.w	8005444 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80051fe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005202:	4b8d      	ldr	r3, [pc, #564]	@ (8005438 <HAL_UART_IRQHandler+0x2b8>)
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d106      	bne.n	8005218 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800520a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800520e:	4b8b      	ldr	r3, [pc, #556]	@ (800543c <HAL_UART_IRQHandler+0x2bc>)
 8005210:	4013      	ands	r3, r2
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8116 	beq.w	8005444 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005218:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d011      	beq.n	8005248 <HAL_UART_IRQHandler+0xc8>
 8005224:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00b      	beq.n	8005248 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2201      	movs	r2, #1
 8005236:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800523e:	f043 0201 	orr.w	r2, r3, #1
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005248:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d011      	beq.n	8005278 <HAL_UART_IRQHandler+0xf8>
 8005254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005258:	f003 0301 	and.w	r3, r3, #1
 800525c:	2b00      	cmp	r3, #0
 800525e:	d00b      	beq.n	8005278 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2202      	movs	r2, #2
 8005266:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800526e:	f043 0204 	orr.w	r2, r3, #4
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005278:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800527c:	f003 0304 	and.w	r3, r3, #4
 8005280:	2b00      	cmp	r3, #0
 8005282:	d011      	beq.n	80052a8 <HAL_UART_IRQHandler+0x128>
 8005284:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d00b      	beq.n	80052a8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	2204      	movs	r2, #4
 8005296:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052ac:	f003 0308 	and.w	r3, r3, #8
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d017      	beq.n	80052e4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d105      	bne.n	80052cc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80052c0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80052c4:	4b5c      	ldr	r3, [pc, #368]	@ (8005438 <HAL_UART_IRQHandler+0x2b8>)
 80052c6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00b      	beq.n	80052e4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	2208      	movs	r2, #8
 80052d2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80052da:	f043 0208 	orr.w	r2, r3, #8
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80052e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80052e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d012      	beq.n	8005316 <HAL_UART_IRQHandler+0x196>
 80052f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80052f4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d00c      	beq.n	8005316 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005304:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800530c:	f043 0220 	orr.w	r2, r3, #32
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800531c:	2b00      	cmp	r3, #0
 800531e:	f000 82dd 	beq.w	80058dc <HAL_UART_IRQHandler+0x75c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005326:	f003 0320 	and.w	r3, r3, #32
 800532a:	2b00      	cmp	r3, #0
 800532c:	d013      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800532e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005332:	f003 0320 	and.w	r3, r3, #32
 8005336:	2b00      	cmp	r3, #0
 8005338:	d105      	bne.n	8005346 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800533a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800533e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d007      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800535c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	689b      	ldr	r3, [r3, #8]
 8005366:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800536a:	2b40      	cmp	r3, #64	@ 0x40
 800536c:	d005      	beq.n	800537a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800536e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005372:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005376:	2b00      	cmp	r3, #0
 8005378:	d054      	beq.n	8005424 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f001 fc2c 	bl	8006bd8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538a:	2b40      	cmp	r3, #64	@ 0x40
 800538c:	d146      	bne.n	800541c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800539c:	e853 3f00 	ldrex	r3, [r3]
 80053a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80053a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80053a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80053ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3308      	adds	r3, #8
 80053b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80053ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80053be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80053c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80053d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d1d9      	bne.n	800538e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d017      	beq.n	8005414 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053ea:	4a15      	ldr	r2, [pc, #84]	@ (8005440 <HAL_UART_IRQHandler+0x2c0>)
 80053ec:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053f4:	4618      	mov	r0, r3
 80053f6:	f7fc fc2f 	bl	8001c58 <HAL_DMA_Abort_IT>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d019      	beq.n	8005434 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005406:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005408:	687a      	ldr	r2, [r7, #4]
 800540a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800540e:	4610      	mov	r0, r2
 8005410:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005412:	e00f      	b.n	8005434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 fa81 	bl	800591c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800541a:	e00b      	b.n	8005434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fa7d 	bl	800591c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005422:	e007      	b.n	8005434 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005424:	6878      	ldr	r0, [r7, #4]
 8005426:	f000 fa79 	bl	800591c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005432:	e253      	b.n	80058dc <HAL_UART_IRQHandler+0x75c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005434:	bf00      	nop
    return;
 8005436:	e251      	b.n	80058dc <HAL_UART_IRQHandler+0x75c>
 8005438:	10000001 	.word	0x10000001
 800543c:	04000120 	.word	0x04000120
 8005440:	08006ca5 	.word	0x08006ca5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005448:	2b01      	cmp	r3, #1
 800544a:	f040 81e7 	bne.w	800581c <HAL_UART_IRQHandler+0x69c>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0310 	and.w	r3, r3, #16
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 81e0 	beq.w	800581c <HAL_UART_IRQHandler+0x69c>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800545c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005460:	f003 0310 	and.w	r3, r3, #16
 8005464:	2b00      	cmp	r3, #0
 8005466:	f000 81d9 	beq.w	800581c <HAL_UART_IRQHandler+0x69c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	2210      	movs	r2, #16
 8005470:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800547c:	2b40      	cmp	r3, #64	@ 0x40
 800547e:	f040 8151 	bne.w	8005724 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a96      	ldr	r2, [pc, #600]	@ (80056e4 <HAL_UART_IRQHandler+0x564>)
 800548c:	4293      	cmp	r3, r2
 800548e:	d068      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a93      	ldr	r2, [pc, #588]	@ (80056e8 <HAL_UART_IRQHandler+0x568>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d061      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a91      	ldr	r2, [pc, #580]	@ (80056ec <HAL_UART_IRQHandler+0x56c>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d05a      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a8e      	ldr	r2, [pc, #568]	@ (80056f0 <HAL_UART_IRQHandler+0x570>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d053      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a8c      	ldr	r2, [pc, #560]	@ (80056f4 <HAL_UART_IRQHandler+0x574>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d04c      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a89      	ldr	r2, [pc, #548]	@ (80056f8 <HAL_UART_IRQHandler+0x578>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d045      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a87      	ldr	r2, [pc, #540]	@ (80056fc <HAL_UART_IRQHandler+0x57c>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d03e      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a84      	ldr	r2, [pc, #528]	@ (8005700 <HAL_UART_IRQHandler+0x580>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d037      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a82      	ldr	r2, [pc, #520]	@ (8005704 <HAL_UART_IRQHandler+0x584>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d030      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a7f      	ldr	r2, [pc, #508]	@ (8005708 <HAL_UART_IRQHandler+0x588>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d029      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a7d      	ldr	r2, [pc, #500]	@ (800570c <HAL_UART_IRQHandler+0x58c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d022      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4a7a      	ldr	r2, [pc, #488]	@ (8005710 <HAL_UART_IRQHandler+0x590>)
 8005526:	4293      	cmp	r3, r2
 8005528:	d01b      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a78      	ldr	r2, [pc, #480]	@ (8005714 <HAL_UART_IRQHandler+0x594>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d014      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a75      	ldr	r2, [pc, #468]	@ (8005718 <HAL_UART_IRQHandler+0x598>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d00d      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a73      	ldr	r2, [pc, #460]	@ (800571c <HAL_UART_IRQHandler+0x59c>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d006      	beq.n	8005562 <HAL_UART_IRQHandler+0x3e2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4a70      	ldr	r2, [pc, #448]	@ (8005720 <HAL_UART_IRQHandler+0x5a0>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d106      	bne.n	8005570 <HAL_UART_IRQHandler+0x3f0>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	b29b      	uxth	r3, r3
 800556e:	e005      	b.n	800557c <HAL_UART_IRQHandler+0x3fc>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	685b      	ldr	r3, [r3, #4]
 800557a:	b29b      	uxth	r3, r3
 800557c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005580:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005584:	2b00      	cmp	r3, #0
 8005586:	f000 81ab 	beq.w	80058e0 <HAL_UART_IRQHandler+0x760>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8005590:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005594:	429a      	cmp	r2, r3
 8005596:	f080 81a3 	bcs.w	80058e0 <HAL_UART_IRQHandler+0x760>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80055a0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055aa:	69db      	ldr	r3, [r3, #28]
 80055ac:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80055b0:	f000 8087 	beq.w	80056c2 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80055c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80055cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80055d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	461a      	mov	r2, r3
 80055da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80055de:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80055e2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80055ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80055ee:	e841 2300 	strex	r3, r2, [r1]
 80055f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80055f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d1da      	bne.n	80055b4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	3308      	adds	r3, #8
 8005604:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005606:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005608:	e853 3f00 	ldrex	r3, [r3]
 800560c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800560e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005610:	f023 0301 	bic.w	r3, r3, #1
 8005614:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	3308      	adds	r3, #8
 800561e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005622:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005626:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005628:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800562a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800562e:	e841 2300 	strex	r3, r2, [r1]
 8005632:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005634:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005636:	2b00      	cmp	r3, #0
 8005638:	d1e1      	bne.n	80055fe <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	3308      	adds	r3, #8
 8005640:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005642:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005644:	e853 3f00 	ldrex	r3, [r3]
 8005648:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800564a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800564c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005650:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	3308      	adds	r3, #8
 800565a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800565e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005660:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005664:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005666:	e841 2300 	strex	r3, r2, [r1]
 800566a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800566c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1e3      	bne.n	800563a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2220      	movs	r2, #32
 8005676:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005688:	e853 3f00 	ldrex	r3, [r3]
 800568c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800568e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005690:	f023 0310 	bic.w	r3, r3, #16
 8005694:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	461a      	mov	r2, r3
 800569e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80056a2:	65bb      	str	r3, [r7, #88]	@ 0x58
 80056a4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80056a8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80056b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e4      	bne.n	8005680 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056bc:	4618      	mov	r0, r3
 80056be:	f7fb ffad 	bl	800161c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80056d4:	b29b      	uxth	r3, r3
 80056d6:	1ad3      	subs	r3, r2, r3
 80056d8:	b29b      	uxth	r3, r3
 80056da:	4619      	mov	r1, r3
 80056dc:	6878      	ldr	r0, [r7, #4]
 80056de:	f000 f927 	bl	8005930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80056e2:	e0fd      	b.n	80058e0 <HAL_UART_IRQHandler+0x760>
 80056e4:	40020010 	.word	0x40020010
 80056e8:	40020028 	.word	0x40020028
 80056ec:	40020040 	.word	0x40020040
 80056f0:	40020058 	.word	0x40020058
 80056f4:	40020070 	.word	0x40020070
 80056f8:	40020088 	.word	0x40020088
 80056fc:	400200a0 	.word	0x400200a0
 8005700:	400200b8 	.word	0x400200b8
 8005704:	40020410 	.word	0x40020410
 8005708:	40020428 	.word	0x40020428
 800570c:	40020440 	.word	0x40020440
 8005710:	40020458 	.word	0x40020458
 8005714:	40020470 	.word	0x40020470
 8005718:	40020488 	.word	0x40020488
 800571c:	400204a0 	.word	0x400204a0
 8005720:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8005730:	b29b      	uxth	r3, r3
 8005732:	1ad3      	subs	r3, r2, r3
 8005734:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800573e:	b29b      	uxth	r3, r3
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80cf 	beq.w	80058e4 <HAL_UART_IRQHandler+0x764>
          && (nb_rx_data > 0U))
 8005746:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800574a:	2b00      	cmp	r3, #0
 800574c:	f000 80ca 	beq.w	80058e4 <HAL_UART_IRQHandler+0x764>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005758:	e853 3f00 	ldrex	r3, [r3]
 800575c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800575e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005764:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	461a      	mov	r2, r3
 800576e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8005772:	647b      	str	r3, [r7, #68]	@ 0x44
 8005774:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005776:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800577a:	e841 2300 	strex	r3, r2, [r1]
 800577e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005782:	2b00      	cmp	r3, #0
 8005784:	d1e4      	bne.n	8005750 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3308      	adds	r3, #8
 800578c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	e853 3f00 	ldrex	r3, [r3]
 8005794:	623b      	str	r3, [r7, #32]
   return(result);
 8005796:	6a3a      	ldr	r2, [r7, #32]
 8005798:	4b55      	ldr	r3, [pc, #340]	@ (80058f0 <HAL_UART_IRQHandler+0x770>)
 800579a:	4013      	ands	r3, r2
 800579c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3308      	adds	r3, #8
 80057a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80057aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80057ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057b2:	e841 2300 	strex	r3, r2, [r1]
 80057b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d1e3      	bne.n	8005786 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2220      	movs	r2, #32
 80057c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	e853 3f00 	ldrex	r3, [r3]
 80057de:	60fb      	str	r3, [r7, #12]
   return(result);
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0310 	bic.w	r3, r3, #16
 80057e6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	461a      	mov	r2, r3
 80057f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80057f4:	61fb      	str	r3, [r7, #28]
 80057f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f8:	69b9      	ldr	r1, [r7, #24]
 80057fa:	69fa      	ldr	r2, [r7, #28]
 80057fc:	e841 2300 	strex	r3, r2, [r1]
 8005800:	617b      	str	r3, [r7, #20]
   return(result);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d1e4      	bne.n	80057d2 <HAL_UART_IRQHandler+0x652>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800580e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f000 f88b 	bl	8005930 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800581a:	e063      	b.n	80058e4 <HAL_UART_IRQHandler+0x764>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800581c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005820:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d00e      	beq.n	8005846 <HAL_UART_IRQHandler+0x6c6>
 8005828:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800582c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005830:	2b00      	cmp	r3, #0
 8005832:	d008      	beq.n	8005846 <HAL_UART_IRQHandler+0x6c6>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800583c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f001 ff8e 	bl	8007760 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005844:	e051      	b.n	80058ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005846:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800584a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800584e:	2b00      	cmp	r3, #0
 8005850:	d014      	beq.n	800587c <HAL_UART_IRQHandler+0x6fc>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005852:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005856:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585a:	2b00      	cmp	r3, #0
 800585c:	d105      	bne.n	800586a <HAL_UART_IRQHandler+0x6ea>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800585e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005862:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005866:	2b00      	cmp	r3, #0
 8005868:	d008      	beq.n	800587c <HAL_UART_IRQHandler+0x6fc>
  {
    if (huart->TxISR != NULL)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800586e:	2b00      	cmp	r3, #0
 8005870:	d03a      	beq.n	80058e8 <HAL_UART_IRQHandler+0x768>
    {
      huart->TxISR(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	4798      	blx	r3
    }
    return;
 800587a:	e035      	b.n	80058e8 <HAL_UART_IRQHandler+0x768>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800587c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005884:	2b00      	cmp	r3, #0
 8005886:	d009      	beq.n	800589c <HAL_UART_IRQHandler+0x71c>
 8005888:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800588c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_UART_IRQHandler+0x71c>
  {
    UART_EndTransmit_IT(huart);
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f001 fa1b 	bl	8006cd0 <UART_EndTransmit_IT>
    return;
 800589a:	e026      	b.n	80058ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800589c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d009      	beq.n	80058bc <HAL_UART_IRQHandler+0x73c>
 80058a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058ac:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <HAL_UART_IRQHandler+0x73c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80058b4:	6878      	ldr	r0, [r7, #4]
 80058b6:	f001 ff67 	bl	8007788 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058ba:	e016      	b.n	80058ea <HAL_UART_IRQHandler+0x76a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80058bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d010      	beq.n	80058ea <HAL_UART_IRQHandler+0x76a>
 80058c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	da0c      	bge.n	80058ea <HAL_UART_IRQHandler+0x76a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f001 ff4f 	bl	8007774 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80058d6:	e008      	b.n	80058ea <HAL_UART_IRQHandler+0x76a>
      return;
 80058d8:	bf00      	nop
 80058da:	e006      	b.n	80058ea <HAL_UART_IRQHandler+0x76a>
    return;
 80058dc:	bf00      	nop
 80058de:	e004      	b.n	80058ea <HAL_UART_IRQHandler+0x76a>
      return;
 80058e0:	bf00      	nop
 80058e2:	e002      	b.n	80058ea <HAL_UART_IRQHandler+0x76a>
      return;
 80058e4:	bf00      	nop
 80058e6:	e000      	b.n	80058ea <HAL_UART_IRQHandler+0x76a>
    return;
 80058e8:	bf00      	nop
  }
}
 80058ea:	37e8      	adds	r7, #232	@ 0xe8
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}
 80058f0:	effffffe 	.word	0xeffffffe

080058f4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005906:	4770      	bx	lr

08005908 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005908:	b480      	push	{r7}
 800590a:	b083      	sub	sp, #12
 800590c:	af00      	add	r7, sp, #0
 800590e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8005910:	bf00      	nop
 8005912:	370c      	adds	r7, #12
 8005914:	46bd      	mov	sp, r7
 8005916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591a:	4770      	bx	lr

0800591c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800591c:	b480      	push	{r7}
 800591e:	b083      	sub	sp, #12
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005924:	bf00      	nop
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr

08005930 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	460b      	mov	r3, r1
 800593a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800593c:	bf00      	nop
 800593e:	370c      	adds	r7, #12
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005948:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800594c:	b092      	sub	sp, #72	@ 0x48
 800594e:	af00      	add	r7, sp, #0
 8005950:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005952:	2300      	movs	r3, #0
 8005954:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	689a      	ldr	r2, [r3, #8]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	691b      	ldr	r3, [r3, #16]
 8005960:	431a      	orrs	r2, r3
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	431a      	orrs	r2, r3
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	69db      	ldr	r3, [r3, #28]
 800596c:	4313      	orrs	r3, r2
 800596e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	4bbe      	ldr	r3, [pc, #760]	@ (8005c70 <UART_SetConfig+0x328>)
 8005978:	4013      	ands	r3, r2
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	6812      	ldr	r2, [r2, #0]
 800597e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8005980:	430b      	orrs	r3, r1
 8005982:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	68da      	ldr	r2, [r3, #12]
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	699b      	ldr	r3, [r3, #24]
 800599e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4ab3      	ldr	r2, [pc, #716]	@ (8005c74 <UART_SetConfig+0x32c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	6a1b      	ldr	r3, [r3, #32]
 80059ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059b0:	4313      	orrs	r3, r2
 80059b2:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	4baf      	ldr	r3, [pc, #700]	@ (8005c78 <UART_SetConfig+0x330>)
 80059bc:	4013      	ands	r3, r2
 80059be:	697a      	ldr	r2, [r7, #20]
 80059c0:	6812      	ldr	r2, [r2, #0]
 80059c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80059c4:	430b      	orrs	r3, r1
 80059c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ce:	f023 010f 	bic.w	r1, r3, #15
 80059d2:	697b      	ldr	r3, [r7, #20]
 80059d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	430a      	orrs	r2, r1
 80059dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4aa6      	ldr	r2, [pc, #664]	@ (8005c7c <UART_SetConfig+0x334>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d177      	bne.n	8005ad8 <UART_SetConfig+0x190>
 80059e8:	4ba5      	ldr	r3, [pc, #660]	@ (8005c80 <UART_SetConfig+0x338>)
 80059ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059f0:	2b28      	cmp	r3, #40	@ 0x28
 80059f2:	d86d      	bhi.n	8005ad0 <UART_SetConfig+0x188>
 80059f4:	a201      	add	r2, pc, #4	@ (adr r2, 80059fc <UART_SetConfig+0xb4>)
 80059f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fa:	bf00      	nop
 80059fc:	08005aa1 	.word	0x08005aa1
 8005a00:	08005ad1 	.word	0x08005ad1
 8005a04:	08005ad1 	.word	0x08005ad1
 8005a08:	08005ad1 	.word	0x08005ad1
 8005a0c:	08005ad1 	.word	0x08005ad1
 8005a10:	08005ad1 	.word	0x08005ad1
 8005a14:	08005ad1 	.word	0x08005ad1
 8005a18:	08005ad1 	.word	0x08005ad1
 8005a1c:	08005aa9 	.word	0x08005aa9
 8005a20:	08005ad1 	.word	0x08005ad1
 8005a24:	08005ad1 	.word	0x08005ad1
 8005a28:	08005ad1 	.word	0x08005ad1
 8005a2c:	08005ad1 	.word	0x08005ad1
 8005a30:	08005ad1 	.word	0x08005ad1
 8005a34:	08005ad1 	.word	0x08005ad1
 8005a38:	08005ad1 	.word	0x08005ad1
 8005a3c:	08005ab1 	.word	0x08005ab1
 8005a40:	08005ad1 	.word	0x08005ad1
 8005a44:	08005ad1 	.word	0x08005ad1
 8005a48:	08005ad1 	.word	0x08005ad1
 8005a4c:	08005ad1 	.word	0x08005ad1
 8005a50:	08005ad1 	.word	0x08005ad1
 8005a54:	08005ad1 	.word	0x08005ad1
 8005a58:	08005ad1 	.word	0x08005ad1
 8005a5c:	08005ab9 	.word	0x08005ab9
 8005a60:	08005ad1 	.word	0x08005ad1
 8005a64:	08005ad1 	.word	0x08005ad1
 8005a68:	08005ad1 	.word	0x08005ad1
 8005a6c:	08005ad1 	.word	0x08005ad1
 8005a70:	08005ad1 	.word	0x08005ad1
 8005a74:	08005ad1 	.word	0x08005ad1
 8005a78:	08005ad1 	.word	0x08005ad1
 8005a7c:	08005ac1 	.word	0x08005ac1
 8005a80:	08005ad1 	.word	0x08005ad1
 8005a84:	08005ad1 	.word	0x08005ad1
 8005a88:	08005ad1 	.word	0x08005ad1
 8005a8c:	08005ad1 	.word	0x08005ad1
 8005a90:	08005ad1 	.word	0x08005ad1
 8005a94:	08005ad1 	.word	0x08005ad1
 8005a98:	08005ad1 	.word	0x08005ad1
 8005a9c:	08005ac9 	.word	0x08005ac9
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aa6:	e326      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005aa8:	2304      	movs	r3, #4
 8005aaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005aae:	e322      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ab0:	2308      	movs	r3, #8
 8005ab2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ab6:	e31e      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ab8:	2310      	movs	r3, #16
 8005aba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005abe:	e31a      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ac0:	2320      	movs	r3, #32
 8005ac2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ac6:	e316      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ac8:	2340      	movs	r3, #64	@ 0x40
 8005aca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ace:	e312      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ad0:	2380      	movs	r3, #128	@ 0x80
 8005ad2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ad6:	e30e      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ad8:	697b      	ldr	r3, [r7, #20]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a69      	ldr	r2, [pc, #420]	@ (8005c84 <UART_SetConfig+0x33c>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d130      	bne.n	8005b44 <UART_SetConfig+0x1fc>
 8005ae2:	4b67      	ldr	r3, [pc, #412]	@ (8005c80 <UART_SetConfig+0x338>)
 8005ae4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae6:	f003 0307 	and.w	r3, r3, #7
 8005aea:	2b05      	cmp	r3, #5
 8005aec:	d826      	bhi.n	8005b3c <UART_SetConfig+0x1f4>
 8005aee:	a201      	add	r2, pc, #4	@ (adr r2, 8005af4 <UART_SetConfig+0x1ac>)
 8005af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005af4:	08005b0d 	.word	0x08005b0d
 8005af8:	08005b15 	.word	0x08005b15
 8005afc:	08005b1d 	.word	0x08005b1d
 8005b00:	08005b25 	.word	0x08005b25
 8005b04:	08005b2d 	.word	0x08005b2d
 8005b08:	08005b35 	.word	0x08005b35
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b12:	e2f0      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b14:	2304      	movs	r3, #4
 8005b16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b1a:	e2ec      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b1c:	2308      	movs	r3, #8
 8005b1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b22:	e2e8      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b24:	2310      	movs	r3, #16
 8005b26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b2a:	e2e4      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b2c:	2320      	movs	r3, #32
 8005b2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b32:	e2e0      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b34:	2340      	movs	r3, #64	@ 0x40
 8005b36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b3a:	e2dc      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b3c:	2380      	movs	r3, #128	@ 0x80
 8005b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b42:	e2d8      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b44:	697b      	ldr	r3, [r7, #20]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a4f      	ldr	r2, [pc, #316]	@ (8005c88 <UART_SetConfig+0x340>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d130      	bne.n	8005bb0 <UART_SetConfig+0x268>
 8005b4e:	4b4c      	ldr	r3, [pc, #304]	@ (8005c80 <UART_SetConfig+0x338>)
 8005b50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b52:	f003 0307 	and.w	r3, r3, #7
 8005b56:	2b05      	cmp	r3, #5
 8005b58:	d826      	bhi.n	8005ba8 <UART_SetConfig+0x260>
 8005b5a:	a201      	add	r2, pc, #4	@ (adr r2, 8005b60 <UART_SetConfig+0x218>)
 8005b5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b60:	08005b79 	.word	0x08005b79
 8005b64:	08005b81 	.word	0x08005b81
 8005b68:	08005b89 	.word	0x08005b89
 8005b6c:	08005b91 	.word	0x08005b91
 8005b70:	08005b99 	.word	0x08005b99
 8005b74:	08005ba1 	.word	0x08005ba1
 8005b78:	2300      	movs	r3, #0
 8005b7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b7e:	e2ba      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b80:	2304      	movs	r3, #4
 8005b82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b86:	e2b6      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b88:	2308      	movs	r3, #8
 8005b8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b8e:	e2b2      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b90:	2310      	movs	r3, #16
 8005b92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b96:	e2ae      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005b98:	2320      	movs	r3, #32
 8005b9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005b9e:	e2aa      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ba0:	2340      	movs	r3, #64	@ 0x40
 8005ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ba6:	e2a6      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ba8:	2380      	movs	r3, #128	@ 0x80
 8005baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bae:	e2a2      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a35      	ldr	r2, [pc, #212]	@ (8005c8c <UART_SetConfig+0x344>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d130      	bne.n	8005c1c <UART_SetConfig+0x2d4>
 8005bba:	4b31      	ldr	r3, [pc, #196]	@ (8005c80 <UART_SetConfig+0x338>)
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005bbe:	f003 0307 	and.w	r3, r3, #7
 8005bc2:	2b05      	cmp	r3, #5
 8005bc4:	d826      	bhi.n	8005c14 <UART_SetConfig+0x2cc>
 8005bc6:	a201      	add	r2, pc, #4	@ (adr r2, 8005bcc <UART_SetConfig+0x284>)
 8005bc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bcc:	08005be5 	.word	0x08005be5
 8005bd0:	08005bed 	.word	0x08005bed
 8005bd4:	08005bf5 	.word	0x08005bf5
 8005bd8:	08005bfd 	.word	0x08005bfd
 8005bdc:	08005c05 	.word	0x08005c05
 8005be0:	08005c0d 	.word	0x08005c0d
 8005be4:	2300      	movs	r3, #0
 8005be6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bea:	e284      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005bec:	2304      	movs	r3, #4
 8005bee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bf2:	e280      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005bf4:	2308      	movs	r3, #8
 8005bf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005bfa:	e27c      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005bfc:	2310      	movs	r3, #16
 8005bfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c02:	e278      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c04:	2320      	movs	r3, #32
 8005c06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c0a:	e274      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c0c:	2340      	movs	r3, #64	@ 0x40
 8005c0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c12:	e270      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c14:	2380      	movs	r3, #128	@ 0x80
 8005c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c1a:	e26c      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a1b      	ldr	r2, [pc, #108]	@ (8005c90 <UART_SetConfig+0x348>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d142      	bne.n	8005cac <UART_SetConfig+0x364>
 8005c26:	4b16      	ldr	r3, [pc, #88]	@ (8005c80 <UART_SetConfig+0x338>)
 8005c28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2a:	f003 0307 	and.w	r3, r3, #7
 8005c2e:	2b05      	cmp	r3, #5
 8005c30:	d838      	bhi.n	8005ca4 <UART_SetConfig+0x35c>
 8005c32:	a201      	add	r2, pc, #4	@ (adr r2, 8005c38 <UART_SetConfig+0x2f0>)
 8005c34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c38:	08005c51 	.word	0x08005c51
 8005c3c:	08005c59 	.word	0x08005c59
 8005c40:	08005c61 	.word	0x08005c61
 8005c44:	08005c69 	.word	0x08005c69
 8005c48:	08005c95 	.word	0x08005c95
 8005c4c:	08005c9d 	.word	0x08005c9d
 8005c50:	2300      	movs	r3, #0
 8005c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c56:	e24e      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c58:	2304      	movs	r3, #4
 8005c5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c5e:	e24a      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c60:	2308      	movs	r3, #8
 8005c62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c66:	e246      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c6e:	e242      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c70:	cfff69f3 	.word	0xcfff69f3
 8005c74:	58000c00 	.word	0x58000c00
 8005c78:	11fff4ff 	.word	0x11fff4ff
 8005c7c:	40011000 	.word	0x40011000
 8005c80:	58024400 	.word	0x58024400
 8005c84:	40004400 	.word	0x40004400
 8005c88:	40004800 	.word	0x40004800
 8005c8c:	40004c00 	.word	0x40004c00
 8005c90:	40005000 	.word	0x40005000
 8005c94:	2320      	movs	r3, #32
 8005c96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005c9a:	e22c      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005c9c:	2340      	movs	r3, #64	@ 0x40
 8005c9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005ca2:	e228      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005ca4:	2380      	movs	r3, #128	@ 0x80
 8005ca6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005caa:	e224      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	4ab1      	ldr	r2, [pc, #708]	@ (8005f78 <UART_SetConfig+0x630>)
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d176      	bne.n	8005da4 <UART_SetConfig+0x45c>
 8005cb6:	4bb1      	ldr	r3, [pc, #708]	@ (8005f7c <UART_SetConfig+0x634>)
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cbe:	2b28      	cmp	r3, #40	@ 0x28
 8005cc0:	d86c      	bhi.n	8005d9c <UART_SetConfig+0x454>
 8005cc2:	a201      	add	r2, pc, #4	@ (adr r2, 8005cc8 <UART_SetConfig+0x380>)
 8005cc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cc8:	08005d6d 	.word	0x08005d6d
 8005ccc:	08005d9d 	.word	0x08005d9d
 8005cd0:	08005d9d 	.word	0x08005d9d
 8005cd4:	08005d9d 	.word	0x08005d9d
 8005cd8:	08005d9d 	.word	0x08005d9d
 8005cdc:	08005d9d 	.word	0x08005d9d
 8005ce0:	08005d9d 	.word	0x08005d9d
 8005ce4:	08005d9d 	.word	0x08005d9d
 8005ce8:	08005d75 	.word	0x08005d75
 8005cec:	08005d9d 	.word	0x08005d9d
 8005cf0:	08005d9d 	.word	0x08005d9d
 8005cf4:	08005d9d 	.word	0x08005d9d
 8005cf8:	08005d9d 	.word	0x08005d9d
 8005cfc:	08005d9d 	.word	0x08005d9d
 8005d00:	08005d9d 	.word	0x08005d9d
 8005d04:	08005d9d 	.word	0x08005d9d
 8005d08:	08005d7d 	.word	0x08005d7d
 8005d0c:	08005d9d 	.word	0x08005d9d
 8005d10:	08005d9d 	.word	0x08005d9d
 8005d14:	08005d9d 	.word	0x08005d9d
 8005d18:	08005d9d 	.word	0x08005d9d
 8005d1c:	08005d9d 	.word	0x08005d9d
 8005d20:	08005d9d 	.word	0x08005d9d
 8005d24:	08005d9d 	.word	0x08005d9d
 8005d28:	08005d85 	.word	0x08005d85
 8005d2c:	08005d9d 	.word	0x08005d9d
 8005d30:	08005d9d 	.word	0x08005d9d
 8005d34:	08005d9d 	.word	0x08005d9d
 8005d38:	08005d9d 	.word	0x08005d9d
 8005d3c:	08005d9d 	.word	0x08005d9d
 8005d40:	08005d9d 	.word	0x08005d9d
 8005d44:	08005d9d 	.word	0x08005d9d
 8005d48:	08005d8d 	.word	0x08005d8d
 8005d4c:	08005d9d 	.word	0x08005d9d
 8005d50:	08005d9d 	.word	0x08005d9d
 8005d54:	08005d9d 	.word	0x08005d9d
 8005d58:	08005d9d 	.word	0x08005d9d
 8005d5c:	08005d9d 	.word	0x08005d9d
 8005d60:	08005d9d 	.word	0x08005d9d
 8005d64:	08005d9d 	.word	0x08005d9d
 8005d68:	08005d95 	.word	0x08005d95
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d72:	e1c0      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005d74:	2304      	movs	r3, #4
 8005d76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d7a:	e1bc      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005d7c:	2308      	movs	r3, #8
 8005d7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d82:	e1b8      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005d84:	2310      	movs	r3, #16
 8005d86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d8a:	e1b4      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005d8c:	2320      	movs	r3, #32
 8005d8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d92:	e1b0      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005d94:	2340      	movs	r3, #64	@ 0x40
 8005d96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005d9a:	e1ac      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005d9c:	2380      	movs	r3, #128	@ 0x80
 8005d9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005da2:	e1a8      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005da4:	697b      	ldr	r3, [r7, #20]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a75      	ldr	r2, [pc, #468]	@ (8005f80 <UART_SetConfig+0x638>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d130      	bne.n	8005e10 <UART_SetConfig+0x4c8>
 8005dae:	4b73      	ldr	r3, [pc, #460]	@ (8005f7c <UART_SetConfig+0x634>)
 8005db0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005db2:	f003 0307 	and.w	r3, r3, #7
 8005db6:	2b05      	cmp	r3, #5
 8005db8:	d826      	bhi.n	8005e08 <UART_SetConfig+0x4c0>
 8005dba:	a201      	add	r2, pc, #4	@ (adr r2, 8005dc0 <UART_SetConfig+0x478>)
 8005dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dc0:	08005dd9 	.word	0x08005dd9
 8005dc4:	08005de1 	.word	0x08005de1
 8005dc8:	08005de9 	.word	0x08005de9
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dde:	e18a      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005de0:	2304      	movs	r3, #4
 8005de2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005de6:	e186      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005de8:	2308      	movs	r3, #8
 8005dea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dee:	e182      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005df0:	2310      	movs	r3, #16
 8005df2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005df6:	e17e      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005df8:	2320      	movs	r3, #32
 8005dfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005dfe:	e17a      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e00:	2340      	movs	r3, #64	@ 0x40
 8005e02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e06:	e176      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e08:	2380      	movs	r3, #128	@ 0x80
 8005e0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e0e:	e172      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a5b      	ldr	r2, [pc, #364]	@ (8005f84 <UART_SetConfig+0x63c>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d130      	bne.n	8005e7c <UART_SetConfig+0x534>
 8005e1a:	4b58      	ldr	r3, [pc, #352]	@ (8005f7c <UART_SetConfig+0x634>)
 8005e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e1e:	f003 0307 	and.w	r3, r3, #7
 8005e22:	2b05      	cmp	r3, #5
 8005e24:	d826      	bhi.n	8005e74 <UART_SetConfig+0x52c>
 8005e26:	a201      	add	r2, pc, #4	@ (adr r2, 8005e2c <UART_SetConfig+0x4e4>)
 8005e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e2c:	08005e45 	.word	0x08005e45
 8005e30:	08005e4d 	.word	0x08005e4d
 8005e34:	08005e55 	.word	0x08005e55
 8005e38:	08005e5d 	.word	0x08005e5d
 8005e3c:	08005e65 	.word	0x08005e65
 8005e40:	08005e6d 	.word	0x08005e6d
 8005e44:	2300      	movs	r3, #0
 8005e46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e4a:	e154      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e4c:	2304      	movs	r3, #4
 8005e4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e52:	e150      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e54:	2308      	movs	r3, #8
 8005e56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e5a:	e14c      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e5c:	2310      	movs	r3, #16
 8005e5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e62:	e148      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e64:	2320      	movs	r3, #32
 8005e66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e6a:	e144      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e6c:	2340      	movs	r3, #64	@ 0x40
 8005e6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e72:	e140      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e74:	2380      	movs	r3, #128	@ 0x80
 8005e76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005e7a:	e13c      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a41      	ldr	r2, [pc, #260]	@ (8005f88 <UART_SetConfig+0x640>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	f040 8082 	bne.w	8005f8c <UART_SetConfig+0x644>
 8005e88:	4b3c      	ldr	r3, [pc, #240]	@ (8005f7c <UART_SetConfig+0x634>)
 8005e8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e8c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e90:	2b28      	cmp	r3, #40	@ 0x28
 8005e92:	d86d      	bhi.n	8005f70 <UART_SetConfig+0x628>
 8005e94:	a201      	add	r2, pc, #4	@ (adr r2, 8005e9c <UART_SetConfig+0x554>)
 8005e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9a:	bf00      	nop
 8005e9c:	08005f41 	.word	0x08005f41
 8005ea0:	08005f71 	.word	0x08005f71
 8005ea4:	08005f71 	.word	0x08005f71
 8005ea8:	08005f71 	.word	0x08005f71
 8005eac:	08005f71 	.word	0x08005f71
 8005eb0:	08005f71 	.word	0x08005f71
 8005eb4:	08005f71 	.word	0x08005f71
 8005eb8:	08005f71 	.word	0x08005f71
 8005ebc:	08005f49 	.word	0x08005f49
 8005ec0:	08005f71 	.word	0x08005f71
 8005ec4:	08005f71 	.word	0x08005f71
 8005ec8:	08005f71 	.word	0x08005f71
 8005ecc:	08005f71 	.word	0x08005f71
 8005ed0:	08005f71 	.word	0x08005f71
 8005ed4:	08005f71 	.word	0x08005f71
 8005ed8:	08005f71 	.word	0x08005f71
 8005edc:	08005f51 	.word	0x08005f51
 8005ee0:	08005f71 	.word	0x08005f71
 8005ee4:	08005f71 	.word	0x08005f71
 8005ee8:	08005f71 	.word	0x08005f71
 8005eec:	08005f71 	.word	0x08005f71
 8005ef0:	08005f71 	.word	0x08005f71
 8005ef4:	08005f71 	.word	0x08005f71
 8005ef8:	08005f71 	.word	0x08005f71
 8005efc:	08005f59 	.word	0x08005f59
 8005f00:	08005f71 	.word	0x08005f71
 8005f04:	08005f71 	.word	0x08005f71
 8005f08:	08005f71 	.word	0x08005f71
 8005f0c:	08005f71 	.word	0x08005f71
 8005f10:	08005f71 	.word	0x08005f71
 8005f14:	08005f71 	.word	0x08005f71
 8005f18:	08005f71 	.word	0x08005f71
 8005f1c:	08005f61 	.word	0x08005f61
 8005f20:	08005f71 	.word	0x08005f71
 8005f24:	08005f71 	.word	0x08005f71
 8005f28:	08005f71 	.word	0x08005f71
 8005f2c:	08005f71 	.word	0x08005f71
 8005f30:	08005f71 	.word	0x08005f71
 8005f34:	08005f71 	.word	0x08005f71
 8005f38:	08005f71 	.word	0x08005f71
 8005f3c:	08005f69 	.word	0x08005f69
 8005f40:	2301      	movs	r3, #1
 8005f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f46:	e0d6      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005f48:	2304      	movs	r3, #4
 8005f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f4e:	e0d2      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005f50:	2308      	movs	r3, #8
 8005f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f56:	e0ce      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005f58:	2310      	movs	r3, #16
 8005f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f5e:	e0ca      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005f60:	2320      	movs	r3, #32
 8005f62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f66:	e0c6      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005f68:	2340      	movs	r3, #64	@ 0x40
 8005f6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f6e:	e0c2      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005f70:	2380      	movs	r3, #128	@ 0x80
 8005f72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005f76:	e0be      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8005f78:	40011400 	.word	0x40011400
 8005f7c:	58024400 	.word	0x58024400
 8005f80:	40007800 	.word	0x40007800
 8005f84:	40007c00 	.word	0x40007c00
 8005f88:	40011800 	.word	0x40011800
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4aad      	ldr	r2, [pc, #692]	@ (8006248 <UART_SetConfig+0x900>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d176      	bne.n	8006084 <UART_SetConfig+0x73c>
 8005f96:	4bad      	ldr	r3, [pc, #692]	@ (800624c <UART_SetConfig+0x904>)
 8005f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005f9e:	2b28      	cmp	r3, #40	@ 0x28
 8005fa0:	d86c      	bhi.n	800607c <UART_SetConfig+0x734>
 8005fa2:	a201      	add	r2, pc, #4	@ (adr r2, 8005fa8 <UART_SetConfig+0x660>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	0800604d 	.word	0x0800604d
 8005fac:	0800607d 	.word	0x0800607d
 8005fb0:	0800607d 	.word	0x0800607d
 8005fb4:	0800607d 	.word	0x0800607d
 8005fb8:	0800607d 	.word	0x0800607d
 8005fbc:	0800607d 	.word	0x0800607d
 8005fc0:	0800607d 	.word	0x0800607d
 8005fc4:	0800607d 	.word	0x0800607d
 8005fc8:	08006055 	.word	0x08006055
 8005fcc:	0800607d 	.word	0x0800607d
 8005fd0:	0800607d 	.word	0x0800607d
 8005fd4:	0800607d 	.word	0x0800607d
 8005fd8:	0800607d 	.word	0x0800607d
 8005fdc:	0800607d 	.word	0x0800607d
 8005fe0:	0800607d 	.word	0x0800607d
 8005fe4:	0800607d 	.word	0x0800607d
 8005fe8:	0800605d 	.word	0x0800605d
 8005fec:	0800607d 	.word	0x0800607d
 8005ff0:	0800607d 	.word	0x0800607d
 8005ff4:	0800607d 	.word	0x0800607d
 8005ff8:	0800607d 	.word	0x0800607d
 8005ffc:	0800607d 	.word	0x0800607d
 8006000:	0800607d 	.word	0x0800607d
 8006004:	0800607d 	.word	0x0800607d
 8006008:	08006065 	.word	0x08006065
 800600c:	0800607d 	.word	0x0800607d
 8006010:	0800607d 	.word	0x0800607d
 8006014:	0800607d 	.word	0x0800607d
 8006018:	0800607d 	.word	0x0800607d
 800601c:	0800607d 	.word	0x0800607d
 8006020:	0800607d 	.word	0x0800607d
 8006024:	0800607d 	.word	0x0800607d
 8006028:	0800606d 	.word	0x0800606d
 800602c:	0800607d 	.word	0x0800607d
 8006030:	0800607d 	.word	0x0800607d
 8006034:	0800607d 	.word	0x0800607d
 8006038:	0800607d 	.word	0x0800607d
 800603c:	0800607d 	.word	0x0800607d
 8006040:	0800607d 	.word	0x0800607d
 8006044:	0800607d 	.word	0x0800607d
 8006048:	08006075 	.word	0x08006075
 800604c:	2301      	movs	r3, #1
 800604e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006052:	e050      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8006054:	2304      	movs	r3, #4
 8006056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800605a:	e04c      	b.n	80060f6 <UART_SetConfig+0x7ae>
 800605c:	2308      	movs	r3, #8
 800605e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006062:	e048      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8006064:	2310      	movs	r3, #16
 8006066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800606a:	e044      	b.n	80060f6 <UART_SetConfig+0x7ae>
 800606c:	2320      	movs	r3, #32
 800606e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006072:	e040      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8006074:	2340      	movs	r3, #64	@ 0x40
 8006076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800607a:	e03c      	b.n	80060f6 <UART_SetConfig+0x7ae>
 800607c:	2380      	movs	r3, #128	@ 0x80
 800607e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006082:	e038      	b.n	80060f6 <UART_SetConfig+0x7ae>
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a71      	ldr	r2, [pc, #452]	@ (8006250 <UART_SetConfig+0x908>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d130      	bne.n	80060f0 <UART_SetConfig+0x7a8>
 800608e:	4b6f      	ldr	r3, [pc, #444]	@ (800624c <UART_SetConfig+0x904>)
 8006090:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006092:	f003 0307 	and.w	r3, r3, #7
 8006096:	2b05      	cmp	r3, #5
 8006098:	d826      	bhi.n	80060e8 <UART_SetConfig+0x7a0>
 800609a:	a201      	add	r2, pc, #4	@ (adr r2, 80060a0 <UART_SetConfig+0x758>)
 800609c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060a0:	080060b9 	.word	0x080060b9
 80060a4:	080060c1 	.word	0x080060c1
 80060a8:	080060c9 	.word	0x080060c9
 80060ac:	080060d1 	.word	0x080060d1
 80060b0:	080060d9 	.word	0x080060d9
 80060b4:	080060e1 	.word	0x080060e1
 80060b8:	2302      	movs	r3, #2
 80060ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060be:	e01a      	b.n	80060f6 <UART_SetConfig+0x7ae>
 80060c0:	2304      	movs	r3, #4
 80060c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060c6:	e016      	b.n	80060f6 <UART_SetConfig+0x7ae>
 80060c8:	2308      	movs	r3, #8
 80060ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ce:	e012      	b.n	80060f6 <UART_SetConfig+0x7ae>
 80060d0:	2310      	movs	r3, #16
 80060d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060d6:	e00e      	b.n	80060f6 <UART_SetConfig+0x7ae>
 80060d8:	2320      	movs	r3, #32
 80060da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060de:	e00a      	b.n	80060f6 <UART_SetConfig+0x7ae>
 80060e0:	2340      	movs	r3, #64	@ 0x40
 80060e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060e6:	e006      	b.n	80060f6 <UART_SetConfig+0x7ae>
 80060e8:	2380      	movs	r3, #128	@ 0x80
 80060ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80060ee:	e002      	b.n	80060f6 <UART_SetConfig+0x7ae>
 80060f0:	2380      	movs	r3, #128	@ 0x80
 80060f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a55      	ldr	r2, [pc, #340]	@ (8006250 <UART_SetConfig+0x908>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	f040 80f8 	bne.w	80062f2 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006102:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006106:	2b20      	cmp	r3, #32
 8006108:	dc46      	bgt.n	8006198 <UART_SetConfig+0x850>
 800610a:	2b02      	cmp	r3, #2
 800610c:	db75      	blt.n	80061fa <UART_SetConfig+0x8b2>
 800610e:	3b02      	subs	r3, #2
 8006110:	2b1e      	cmp	r3, #30
 8006112:	d872      	bhi.n	80061fa <UART_SetConfig+0x8b2>
 8006114:	a201      	add	r2, pc, #4	@ (adr r2, 800611c <UART_SetConfig+0x7d4>)
 8006116:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800611a:	bf00      	nop
 800611c:	0800619f 	.word	0x0800619f
 8006120:	080061fb 	.word	0x080061fb
 8006124:	080061a7 	.word	0x080061a7
 8006128:	080061fb 	.word	0x080061fb
 800612c:	080061fb 	.word	0x080061fb
 8006130:	080061fb 	.word	0x080061fb
 8006134:	080061b7 	.word	0x080061b7
 8006138:	080061fb 	.word	0x080061fb
 800613c:	080061fb 	.word	0x080061fb
 8006140:	080061fb 	.word	0x080061fb
 8006144:	080061fb 	.word	0x080061fb
 8006148:	080061fb 	.word	0x080061fb
 800614c:	080061fb 	.word	0x080061fb
 8006150:	080061fb 	.word	0x080061fb
 8006154:	080061c7 	.word	0x080061c7
 8006158:	080061fb 	.word	0x080061fb
 800615c:	080061fb 	.word	0x080061fb
 8006160:	080061fb 	.word	0x080061fb
 8006164:	080061fb 	.word	0x080061fb
 8006168:	080061fb 	.word	0x080061fb
 800616c:	080061fb 	.word	0x080061fb
 8006170:	080061fb 	.word	0x080061fb
 8006174:	080061fb 	.word	0x080061fb
 8006178:	080061fb 	.word	0x080061fb
 800617c:	080061fb 	.word	0x080061fb
 8006180:	080061fb 	.word	0x080061fb
 8006184:	080061fb 	.word	0x080061fb
 8006188:	080061fb 	.word	0x080061fb
 800618c:	080061fb 	.word	0x080061fb
 8006190:	080061fb 	.word	0x080061fb
 8006194:	080061ed 	.word	0x080061ed
 8006198:	2b40      	cmp	r3, #64	@ 0x40
 800619a:	d02a      	beq.n	80061f2 <UART_SetConfig+0x8aa>
 800619c:	e02d      	b.n	80061fa <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800619e:	f7fe faa3 	bl	80046e8 <HAL_RCCEx_GetD3PCLK1Freq>
 80061a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80061a4:	e02f      	b.n	8006206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80061a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fe fab2 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80061b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061b4:	e027      	b.n	8006206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80061b6:	f107 0318 	add.w	r3, r7, #24
 80061ba:	4618      	mov	r0, r3
 80061bc:	f7fe fbfe 	bl	80049bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80061c0:	69fb      	ldr	r3, [r7, #28]
 80061c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061c4:	e01f      	b.n	8006206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80061c6:	4b21      	ldr	r3, [pc, #132]	@ (800624c <UART_SetConfig+0x904>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 0320 	and.w	r3, r3, #32
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d009      	beq.n	80061e6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80061d2:	4b1e      	ldr	r3, [pc, #120]	@ (800624c <UART_SetConfig+0x904>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	08db      	lsrs	r3, r3, #3
 80061d8:	f003 0303 	and.w	r3, r3, #3
 80061dc:	4a1d      	ldr	r2, [pc, #116]	@ (8006254 <UART_SetConfig+0x90c>)
 80061de:	fa22 f303 	lsr.w	r3, r2, r3
 80061e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80061e4:	e00f      	b.n	8006206 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80061e6:	4b1b      	ldr	r3, [pc, #108]	@ (8006254 <UART_SetConfig+0x90c>)
 80061e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061ea:	e00c      	b.n	8006206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80061ec:	4b1a      	ldr	r3, [pc, #104]	@ (8006258 <UART_SetConfig+0x910>)
 80061ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f0:	e009      	b.n	8006206 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80061f8:	e005      	b.n	8006206 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80061fa:	2300      	movs	r3, #0
 80061fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8006204:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006206:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006208:	2b00      	cmp	r3, #0
 800620a:	f000 81ee 	beq.w	80065ea <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006212:	4a12      	ldr	r2, [pc, #72]	@ (800625c <UART_SetConfig+0x914>)
 8006214:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006218:	461a      	mov	r2, r3
 800621a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800621c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006220:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	685a      	ldr	r2, [r3, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	4413      	add	r3, r2
 800622c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800622e:	429a      	cmp	r2, r3
 8006230:	d305      	bcc.n	800623e <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800623a:	429a      	cmp	r2, r3
 800623c:	d910      	bls.n	8006260 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 800623e:	2301      	movs	r3, #1
 8006240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006244:	e1d1      	b.n	80065ea <UART_SetConfig+0xca2>
 8006246:	bf00      	nop
 8006248:	40011c00 	.word	0x40011c00
 800624c:	58024400 	.word	0x58024400
 8006250:	58000c00 	.word	0x58000c00
 8006254:	03d09000 	.word	0x03d09000
 8006258:	003d0900 	.word	0x003d0900
 800625c:	08007a40 	.word	0x08007a40
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006260:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006262:	2200      	movs	r2, #0
 8006264:	60bb      	str	r3, [r7, #8]
 8006266:	60fa      	str	r2, [r7, #12]
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626c:	4ac0      	ldr	r2, [pc, #768]	@ (8006570 <UART_SetConfig+0xc28>)
 800626e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006272:	b29b      	uxth	r3, r3
 8006274:	2200      	movs	r2, #0
 8006276:	603b      	str	r3, [r7, #0]
 8006278:	607a      	str	r2, [r7, #4]
 800627a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800627e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006282:	f7fa f843 	bl	800030c <__aeabi_uldivmod>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4610      	mov	r0, r2
 800628c:	4619      	mov	r1, r3
 800628e:	f04f 0200 	mov.w	r2, #0
 8006292:	f04f 0300 	mov.w	r3, #0
 8006296:	020b      	lsls	r3, r1, #8
 8006298:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800629c:	0202      	lsls	r2, r0, #8
 800629e:	6979      	ldr	r1, [r7, #20]
 80062a0:	6849      	ldr	r1, [r1, #4]
 80062a2:	0849      	lsrs	r1, r1, #1
 80062a4:	2000      	movs	r0, #0
 80062a6:	460c      	mov	r4, r1
 80062a8:	4605      	mov	r5, r0
 80062aa:	eb12 0804 	adds.w	r8, r2, r4
 80062ae:	eb43 0905 	adc.w	r9, r3, r5
 80062b2:	697b      	ldr	r3, [r7, #20]
 80062b4:	685b      	ldr	r3, [r3, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	469a      	mov	sl, r3
 80062ba:	4693      	mov	fp, r2
 80062bc:	4652      	mov	r2, sl
 80062be:	465b      	mov	r3, fp
 80062c0:	4640      	mov	r0, r8
 80062c2:	4649      	mov	r1, r9
 80062c4:	f7fa f822 	bl	800030c <__aeabi_uldivmod>
 80062c8:	4602      	mov	r2, r0
 80062ca:	460b      	mov	r3, r1
 80062cc:	4613      	mov	r3, r2
 80062ce:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062d2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80062d6:	d308      	bcc.n	80062ea <UART_SetConfig+0x9a2>
 80062d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80062de:	d204      	bcs.n	80062ea <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 80062e0:	697b      	ldr	r3, [r7, #20]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062e6:	60da      	str	r2, [r3, #12]
 80062e8:	e17f      	b.n	80065ea <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 80062ea:	2301      	movs	r3, #1
 80062ec:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80062f0:	e17b      	b.n	80065ea <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	69db      	ldr	r3, [r3, #28]
 80062f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80062fa:	f040 80bd 	bne.w	8006478 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 80062fe:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006302:	2b20      	cmp	r3, #32
 8006304:	dc48      	bgt.n	8006398 <UART_SetConfig+0xa50>
 8006306:	2b00      	cmp	r3, #0
 8006308:	db7b      	blt.n	8006402 <UART_SetConfig+0xaba>
 800630a:	2b20      	cmp	r3, #32
 800630c:	d879      	bhi.n	8006402 <UART_SetConfig+0xaba>
 800630e:	a201      	add	r2, pc, #4	@ (adr r2, 8006314 <UART_SetConfig+0x9cc>)
 8006310:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006314:	0800639f 	.word	0x0800639f
 8006318:	080063a7 	.word	0x080063a7
 800631c:	08006403 	.word	0x08006403
 8006320:	08006403 	.word	0x08006403
 8006324:	080063af 	.word	0x080063af
 8006328:	08006403 	.word	0x08006403
 800632c:	08006403 	.word	0x08006403
 8006330:	08006403 	.word	0x08006403
 8006334:	080063bf 	.word	0x080063bf
 8006338:	08006403 	.word	0x08006403
 800633c:	08006403 	.word	0x08006403
 8006340:	08006403 	.word	0x08006403
 8006344:	08006403 	.word	0x08006403
 8006348:	08006403 	.word	0x08006403
 800634c:	08006403 	.word	0x08006403
 8006350:	08006403 	.word	0x08006403
 8006354:	080063cf 	.word	0x080063cf
 8006358:	08006403 	.word	0x08006403
 800635c:	08006403 	.word	0x08006403
 8006360:	08006403 	.word	0x08006403
 8006364:	08006403 	.word	0x08006403
 8006368:	08006403 	.word	0x08006403
 800636c:	08006403 	.word	0x08006403
 8006370:	08006403 	.word	0x08006403
 8006374:	08006403 	.word	0x08006403
 8006378:	08006403 	.word	0x08006403
 800637c:	08006403 	.word	0x08006403
 8006380:	08006403 	.word	0x08006403
 8006384:	08006403 	.word	0x08006403
 8006388:	08006403 	.word	0x08006403
 800638c:	08006403 	.word	0x08006403
 8006390:	08006403 	.word	0x08006403
 8006394:	080063f5 	.word	0x080063f5
 8006398:	2b40      	cmp	r3, #64	@ 0x40
 800639a:	d02e      	beq.n	80063fa <UART_SetConfig+0xab2>
 800639c:	e031      	b.n	8006402 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800639e:	f7fc ffd7 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 80063a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063a4:	e033      	b.n	800640e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063a6:	f7fc ffe9 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 80063aa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80063ac:	e02f      	b.n	800640e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063b2:	4618      	mov	r0, r3
 80063b4:	f7fe f9ae 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063bc:	e027      	b.n	800640e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063be:	f107 0318 	add.w	r3, r7, #24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7fe fafa 	bl	80049bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80063c8:	69fb      	ldr	r3, [r7, #28]
 80063ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063cc:	e01f      	b.n	800640e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80063ce:	4b69      	ldr	r3, [pc, #420]	@ (8006574 <UART_SetConfig+0xc2c>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80063da:	4b66      	ldr	r3, [pc, #408]	@ (8006574 <UART_SetConfig+0xc2c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	08db      	lsrs	r3, r3, #3
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	4a64      	ldr	r2, [pc, #400]	@ (8006578 <UART_SetConfig+0xc30>)
 80063e6:	fa22 f303 	lsr.w	r3, r2, r3
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80063ec:	e00f      	b.n	800640e <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 80063ee:	4b62      	ldr	r3, [pc, #392]	@ (8006578 <UART_SetConfig+0xc30>)
 80063f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f2:	e00c      	b.n	800640e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80063f4:	4b61      	ldr	r3, [pc, #388]	@ (800657c <UART_SetConfig+0xc34>)
 80063f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80063f8:	e009      	b.n	800640e <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006400:	e005      	b.n	800640e <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 8006402:	2300      	movs	r3, #0
 8006404:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800640c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800640e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 80ea 	beq.w	80065ea <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	4a55      	ldr	r2, [pc, #340]	@ (8006570 <UART_SetConfig+0xc28>)
 800641c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006420:	461a      	mov	r2, r3
 8006422:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006424:	fbb3 f3f2 	udiv	r3, r3, r2
 8006428:	005a      	lsls	r2, r3, #1
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	685b      	ldr	r3, [r3, #4]
 800642e:	085b      	lsrs	r3, r3, #1
 8006430:	441a      	add	r2, r3
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	fbb2 f3f3 	udiv	r3, r2, r3
 800643a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800643c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643e:	2b0f      	cmp	r3, #15
 8006440:	d916      	bls.n	8006470 <UART_SetConfig+0xb28>
 8006442:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006444:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006448:	d212      	bcs.n	8006470 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800644a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644c:	b29b      	uxth	r3, r3
 800644e:	f023 030f 	bic.w	r3, r3, #15
 8006452:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006456:	085b      	lsrs	r3, r3, #1
 8006458:	b29b      	uxth	r3, r3
 800645a:	f003 0307 	and.w	r3, r3, #7
 800645e:	b29a      	uxth	r2, r3
 8006460:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006462:	4313      	orrs	r3, r2
 8006464:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800646c:	60da      	str	r2, [r3, #12]
 800646e:	e0bc      	b.n	80065ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8006476:	e0b8      	b.n	80065ea <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006478:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800647c:	2b20      	cmp	r3, #32
 800647e:	dc4b      	bgt.n	8006518 <UART_SetConfig+0xbd0>
 8006480:	2b00      	cmp	r3, #0
 8006482:	f2c0 8087 	blt.w	8006594 <UART_SetConfig+0xc4c>
 8006486:	2b20      	cmp	r3, #32
 8006488:	f200 8084 	bhi.w	8006594 <UART_SetConfig+0xc4c>
 800648c:	a201      	add	r2, pc, #4	@ (adr r2, 8006494 <UART_SetConfig+0xb4c>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	0800651f 	.word	0x0800651f
 8006498:	08006527 	.word	0x08006527
 800649c:	08006595 	.word	0x08006595
 80064a0:	08006595 	.word	0x08006595
 80064a4:	0800652f 	.word	0x0800652f
 80064a8:	08006595 	.word	0x08006595
 80064ac:	08006595 	.word	0x08006595
 80064b0:	08006595 	.word	0x08006595
 80064b4:	0800653f 	.word	0x0800653f
 80064b8:	08006595 	.word	0x08006595
 80064bc:	08006595 	.word	0x08006595
 80064c0:	08006595 	.word	0x08006595
 80064c4:	08006595 	.word	0x08006595
 80064c8:	08006595 	.word	0x08006595
 80064cc:	08006595 	.word	0x08006595
 80064d0:	08006595 	.word	0x08006595
 80064d4:	0800654f 	.word	0x0800654f
 80064d8:	08006595 	.word	0x08006595
 80064dc:	08006595 	.word	0x08006595
 80064e0:	08006595 	.word	0x08006595
 80064e4:	08006595 	.word	0x08006595
 80064e8:	08006595 	.word	0x08006595
 80064ec:	08006595 	.word	0x08006595
 80064f0:	08006595 	.word	0x08006595
 80064f4:	08006595 	.word	0x08006595
 80064f8:	08006595 	.word	0x08006595
 80064fc:	08006595 	.word	0x08006595
 8006500:	08006595 	.word	0x08006595
 8006504:	08006595 	.word	0x08006595
 8006508:	08006595 	.word	0x08006595
 800650c:	08006595 	.word	0x08006595
 8006510:	08006595 	.word	0x08006595
 8006514:	08006587 	.word	0x08006587
 8006518:	2b40      	cmp	r3, #64	@ 0x40
 800651a:	d037      	beq.n	800658c <UART_SetConfig+0xc44>
 800651c:	e03a      	b.n	8006594 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800651e:	f7fc ff17 	bl	8003350 <HAL_RCC_GetPCLK1Freq>
 8006522:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8006524:	e03c      	b.n	80065a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006526:	f7fc ff29 	bl	800337c <HAL_RCC_GetPCLK2Freq>
 800652a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800652c:	e038      	b.n	80065a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800652e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe f8ee 	bl	8004714 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800653a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800653c:	e030      	b.n	80065a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800653e:	f107 0318 	add.w	r3, r7, #24
 8006542:	4618      	mov	r0, r3
 8006544:	f7fe fa3a 	bl	80049bc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800654c:	e028      	b.n	80065a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800654e:	4b09      	ldr	r3, [pc, #36]	@ (8006574 <UART_SetConfig+0xc2c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	f003 0320 	and.w	r3, r3, #32
 8006556:	2b00      	cmp	r3, #0
 8006558:	d012      	beq.n	8006580 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800655a:	4b06      	ldr	r3, [pc, #24]	@ (8006574 <UART_SetConfig+0xc2c>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	08db      	lsrs	r3, r3, #3
 8006560:	f003 0303 	and.w	r3, r3, #3
 8006564:	4a04      	ldr	r2, [pc, #16]	@ (8006578 <UART_SetConfig+0xc30>)
 8006566:	fa22 f303 	lsr.w	r3, r2, r3
 800656a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800656c:	e018      	b.n	80065a0 <UART_SetConfig+0xc58>
 800656e:	bf00      	nop
 8006570:	08007a40 	.word	0x08007a40
 8006574:	58024400 	.word	0x58024400
 8006578:	03d09000 	.word	0x03d09000
 800657c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8006580:	4b24      	ldr	r3, [pc, #144]	@ (8006614 <UART_SetConfig+0xccc>)
 8006582:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006584:	e00c      	b.n	80065a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8006586:	4b24      	ldr	r3, [pc, #144]	@ (8006618 <UART_SetConfig+0xcd0>)
 8006588:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800658a:	e009      	b.n	80065a0 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800658c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8006592:	e005      	b.n	80065a0 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8006594:	2300      	movs	r3, #0
 8006596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8006598:	2301      	movs	r3, #1
 800659a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800659e:	bf00      	nop
    }

    if (pclk != 0U)
 80065a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d021      	beq.n	80065ea <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065a6:	697b      	ldr	r3, [r7, #20]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	4a1c      	ldr	r2, [pc, #112]	@ (800661c <UART_SetConfig+0xcd4>)
 80065ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065b0:	461a      	mov	r2, r3
 80065b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065b4:	fbb3 f2f2 	udiv	r2, r3, r2
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	685b      	ldr	r3, [r3, #4]
 80065bc:	085b      	lsrs	r3, r3, #1
 80065be:	441a      	add	r2, r3
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80065c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065cc:	2b0f      	cmp	r3, #15
 80065ce:	d909      	bls.n	80065e4 <UART_SetConfig+0xc9c>
 80065d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80065d6:	d205      	bcs.n	80065e4 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	b29a      	uxth	r2, r3
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	60da      	str	r2, [r3, #12]
 80065e2:	e002      	b.n	80065ea <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 80065e4:	2301      	movs	r3, #1
 80065e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2201      	movs	r2, #1
 80065ee:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	2201      	movs	r2, #1
 80065f6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	2200      	movs	r2, #0
 80065fe:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006606:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800660a:	4618      	mov	r0, r3
 800660c:	3748      	adds	r7, #72	@ 0x48
 800660e:	46bd      	mov	sp, r7
 8006610:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006614:	03d09000 	.word	0x03d09000
 8006618:	003d0900 	.word	0x003d0900
 800661c:	08007a40 	.word	0x08007a40

08006620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006620:	b480      	push	{r7}
 8006622:	b083      	sub	sp, #12
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800662c:	f003 0308 	and.w	r3, r3, #8
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00a      	beq.n	800664a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	685b      	ldr	r3, [r3, #4]
 800663a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	430a      	orrs	r2, r1
 8006648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800664e:	f003 0301 	and.w	r3, r3, #1
 8006652:	2b00      	cmp	r3, #0
 8006654:	d00a      	beq.n	800666c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	430a      	orrs	r2, r1
 800666a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d00a      	beq.n	800668e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	430a      	orrs	r2, r1
 800668c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006692:	f003 0304 	and.w	r3, r3, #4
 8006696:	2b00      	cmp	r3, #0
 8006698:	d00a      	beq.n	80066b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	430a      	orrs	r2, r1
 80066ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066b4:	f003 0310 	and.w	r3, r3, #16
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00a      	beq.n	80066d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	689b      	ldr	r3, [r3, #8]
 80066c2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	430a      	orrs	r2, r1
 80066d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066d6:	f003 0320 	and.w	r3, r3, #32
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d00a      	beq.n	80066f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	689b      	ldr	r3, [r3, #8]
 80066e4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	430a      	orrs	r2, r1
 80066f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d01a      	beq.n	8006736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800671e:	d10a      	bne.n	8006736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	685b      	ldr	r3, [r3, #4]
 8006726:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	430a      	orrs	r2, r1
 8006734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800673a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800673e:	2b00      	cmp	r3, #0
 8006740:	d00a      	beq.n	8006758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	430a      	orrs	r2, r1
 8006756:	605a      	str	r2, [r3, #4]
  }
}
 8006758:	bf00      	nop
 800675a:	370c      	adds	r7, #12
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b098      	sub	sp, #96	@ 0x60
 8006768:	af02      	add	r7, sp, #8
 800676a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006774:	f7fa fdbe 	bl	80012f4 <HAL_GetTick>
 8006778:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	f003 0308 	and.w	r3, r3, #8
 8006784:	2b08      	cmp	r3, #8
 8006786:	d12f      	bne.n	80067e8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006788:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800678c:	9300      	str	r3, [sp, #0]
 800678e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006790:	2200      	movs	r2, #0
 8006792:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f88e 	bl	80068b8 <UART_WaitOnFlagUntilTimeout>
 800679c:	4603      	mov	r3, r0
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d022      	beq.n	80067e8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80067aa:	e853 3f00 	ldrex	r3, [r3]
 80067ae:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80067b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80067b2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80067b6:	653b      	str	r3, [r7, #80]	@ 0x50
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	461a      	mov	r2, r3
 80067be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80067c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80067c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80067c8:	e841 2300 	strex	r3, r2, [r1]
 80067cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d1e6      	bne.n	80067a2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2220      	movs	r2, #32
 80067d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2200      	movs	r2, #0
 80067e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067e4:	2303      	movs	r3, #3
 80067e6:	e063      	b.n	80068b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0304 	and.w	r3, r3, #4
 80067f2:	2b04      	cmp	r3, #4
 80067f4:	d149      	bne.n	800688a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067f6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80067fe:	2200      	movs	r2, #0
 8006800:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f857 	bl	80068b8 <UART_WaitOnFlagUntilTimeout>
 800680a:	4603      	mov	r3, r0
 800680c:	2b00      	cmp	r3, #0
 800680e:	d03c      	beq.n	800688a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	623b      	str	r3, [r7, #32]
   return(result);
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006824:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800682e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006830:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800683c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3308      	adds	r3, #8
 8006848:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	e853 3f00 	ldrex	r3, [r3]
 8006850:	60fb      	str	r3, [r7, #12]
   return(result);
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	f023 0301 	bic.w	r3, r3, #1
 8006858:	64bb      	str	r3, [r7, #72]	@ 0x48
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	3308      	adds	r3, #8
 8006860:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006862:	61fa      	str	r2, [r7, #28]
 8006864:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006866:	69b9      	ldr	r1, [r7, #24]
 8006868:	69fa      	ldr	r2, [r7, #28]
 800686a:	e841 2300 	strex	r3, r2, [r1]
 800686e:	617b      	str	r3, [r7, #20]
   return(result);
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d1e5      	bne.n	8006842 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006886:	2303      	movs	r3, #3
 8006888:	e012      	b.n	80068b0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	2220      	movs	r2, #32
 800688e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2220      	movs	r2, #32
 8006896:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2200      	movs	r2, #0
 80068aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80068ae:	2300      	movs	r3, #0
}
 80068b0:	4618      	mov	r0, r3
 80068b2:	3758      	adds	r7, #88	@ 0x58
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	60f8      	str	r0, [r7, #12]
 80068c0:	60b9      	str	r1, [r7, #8]
 80068c2:	603b      	str	r3, [r7, #0]
 80068c4:	4613      	mov	r3, r2
 80068c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068c8:	e04f      	b.n	800696a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068ca:	69bb      	ldr	r3, [r7, #24]
 80068cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d0:	d04b      	beq.n	800696a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80068d2:	f7fa fd0f 	bl	80012f4 <HAL_GetTick>
 80068d6:	4602      	mov	r2, r0
 80068d8:	683b      	ldr	r3, [r7, #0]
 80068da:	1ad3      	subs	r3, r2, r3
 80068dc:	69ba      	ldr	r2, [r7, #24]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d302      	bcc.n	80068e8 <UART_WaitOnFlagUntilTimeout+0x30>
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d101      	bne.n	80068ec <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e04e      	b.n	800698a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f003 0304 	and.w	r3, r3, #4
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d037      	beq.n	800696a <UART_WaitOnFlagUntilTimeout+0xb2>
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	2b80      	cmp	r3, #128	@ 0x80
 80068fe:	d034      	beq.n	800696a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006900:	68bb      	ldr	r3, [r7, #8]
 8006902:	2b40      	cmp	r3, #64	@ 0x40
 8006904:	d031      	beq.n	800696a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	f003 0308 	and.w	r3, r3, #8
 8006910:	2b08      	cmp	r3, #8
 8006912:	d110      	bne.n	8006936 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	2208      	movs	r2, #8
 800691a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 f95b 	bl	8006bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2208      	movs	r2, #8
 8006926:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	2200      	movs	r2, #0
 800692e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e029      	b.n	800698a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006940:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006944:	d111      	bne.n	800696a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800694e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f941 	bl	8006bd8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2220      	movs	r2, #32
 800695a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2200      	movs	r2, #0
 8006962:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e00f      	b.n	800698a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	69da      	ldr	r2, [r3, #28]
 8006970:	68bb      	ldr	r3, [r7, #8]
 8006972:	4013      	ands	r3, r2
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	429a      	cmp	r2, r3
 8006978:	bf0c      	ite	eq
 800697a:	2301      	moveq	r3, #1
 800697c:	2300      	movne	r3, #0
 800697e:	b2db      	uxtb	r3, r3
 8006980:	461a      	mov	r2, r3
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	429a      	cmp	r2, r3
 8006986:	d0a0      	beq.n	80068ca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006994:	b480      	push	{r7}
 8006996:	b0a3      	sub	sp, #140	@ 0x8c
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4613      	mov	r3, r2
 80069a0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	68ba      	ldr	r2, [r7, #8]
 80069a6:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	88fa      	ldrh	r2, [r7, #6]
 80069ac:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	88fa      	ldrh	r2, [r7, #6]
 80069b4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2200      	movs	r2, #0
 80069bc:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	689b      	ldr	r3, [r3, #8]
 80069c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c6:	d10e      	bne.n	80069e6 <UART_Start_Receive_IT+0x52>
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d105      	bne.n	80069dc <UART_Start_Receive_IT+0x48>
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80069d6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069da:	e02d      	b.n	8006a38 <UART_Start_Receive_IT+0xa4>
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	22ff      	movs	r2, #255	@ 0xff
 80069e0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069e4:	e028      	b.n	8006a38 <UART_Start_Receive_IT+0xa4>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d10d      	bne.n	8006a0a <UART_Start_Receive_IT+0x76>
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	691b      	ldr	r3, [r3, #16]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d104      	bne.n	8006a00 <UART_Start_Receive_IT+0x6c>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	22ff      	movs	r2, #255	@ 0xff
 80069fa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80069fe:	e01b      	b.n	8006a38 <UART_Start_Receive_IT+0xa4>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	227f      	movs	r2, #127	@ 0x7f
 8006a04:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a08:	e016      	b.n	8006a38 <UART_Start_Receive_IT+0xa4>
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006a12:	d10d      	bne.n	8006a30 <UART_Start_Receive_IT+0x9c>
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	691b      	ldr	r3, [r3, #16]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d104      	bne.n	8006a26 <UART_Start_Receive_IT+0x92>
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	227f      	movs	r2, #127	@ 0x7f
 8006a20:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a24:	e008      	b.n	8006a38 <UART_Start_Receive_IT+0xa4>
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	223f      	movs	r2, #63	@ 0x3f
 8006a2a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8006a2e:	e003      	b.n	8006a38 <UART_Start_Receive_IT+0xa4>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	2200      	movs	r2, #0
 8006a34:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	2222      	movs	r2, #34	@ 0x22
 8006a44:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3308      	adds	r3, #8
 8006a4e:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a52:	e853 3f00 	ldrex	r3, [r3]
 8006a56:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8006a58:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a5a:	f043 0301 	orr.w	r3, r3, #1
 8006a5e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	3308      	adds	r3, #8
 8006a68:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8006a6c:	673a      	str	r2, [r7, #112]	@ 0x70
 8006a6e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a70:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8006a72:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006a74:	e841 2300 	strex	r3, r2, [r1]
 8006a78:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8006a7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d1e3      	bne.n	8006a48 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006a84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006a88:	d14f      	bne.n	8006b2a <UART_Start_Receive_IT+0x196>
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8006a90:	88fa      	ldrh	r2, [r7, #6]
 8006a92:	429a      	cmp	r2, r3
 8006a94:	d349      	bcc.n	8006b2a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a9e:	d107      	bne.n	8006ab0 <UART_Start_Receive_IT+0x11c>
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d103      	bne.n	8006ab0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	4a47      	ldr	r2, [pc, #284]	@ (8006bc8 <UART_Start_Receive_IT+0x234>)
 8006aac:	675a      	str	r2, [r3, #116]	@ 0x74
 8006aae:	e002      	b.n	8006ab6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a46      	ldr	r2, [pc, #280]	@ (8006bcc <UART_Start_Receive_IT+0x238>)
 8006ab4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	691b      	ldr	r3, [r3, #16]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d01a      	beq.n	8006af4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ac4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ac6:	e853 3f00 	ldrex	r3, [r3]
 8006aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ace:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006ad2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006ae0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ae2:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ae4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006ae6:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006ae8:	e841 2300 	strex	r3, r2, [r1]
 8006aec:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e4      	bne.n	8006abe <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	3308      	adds	r3, #8
 8006afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006afe:	e853 3f00 	ldrex	r3, [r3]
 8006b02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006b0a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	3308      	adds	r3, #8
 8006b12:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8006b14:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006b16:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b1a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e5      	bne.n	8006af4 <UART_Start_Receive_IT+0x160>
 8006b28:	e046      	b.n	8006bb8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	689b      	ldr	r3, [r3, #8]
 8006b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b32:	d107      	bne.n	8006b44 <UART_Start_Receive_IT+0x1b0>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	691b      	ldr	r3, [r3, #16]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d103      	bne.n	8006b44 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4a24      	ldr	r2, [pc, #144]	@ (8006bd0 <UART_Start_Receive_IT+0x23c>)
 8006b40:	675a      	str	r2, [r3, #116]	@ 0x74
 8006b42:	e002      	b.n	8006b4a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	4a23      	ldr	r2, [pc, #140]	@ (8006bd4 <UART_Start_Receive_IT+0x240>)
 8006b48:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d019      	beq.n	8006b86 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b5a:	e853 3f00 	ldrex	r3, [r3]
 8006b5e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b62:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8006b66:	677b      	str	r3, [r7, #116]	@ 0x74
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006b70:	637b      	str	r3, [r7, #52]	@ 0x34
 8006b72:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b74:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b76:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006b78:	e841 2300 	strex	r3, r2, [r1]
 8006b7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006b7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d1e6      	bne.n	8006b52 <UART_Start_Receive_IT+0x1be>
 8006b84:	e018      	b.n	8006bb8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	e853 3f00 	ldrex	r3, [r3]
 8006b92:	613b      	str	r3, [r7, #16]
   return(result);
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	f043 0320 	orr.w	r3, r3, #32
 8006b9a:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	461a      	mov	r2, r3
 8006ba2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ba4:	623b      	str	r3, [r7, #32]
 8006ba6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ba8:	69f9      	ldr	r1, [r7, #28]
 8006baa:	6a3a      	ldr	r2, [r7, #32]
 8006bac:	e841 2300 	strex	r3, r2, [r1]
 8006bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d1e6      	bne.n	8006b86 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8006bb8:	2300      	movs	r3, #0
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	378c      	adds	r7, #140	@ 0x8c
 8006bbe:	46bd      	mov	sp, r7
 8006bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc4:	4770      	bx	lr
 8006bc6:	bf00      	nop
 8006bc8:	080073f9 	.word	0x080073f9
 8006bcc:	08007099 	.word	0x08007099
 8006bd0:	08006ee1 	.word	0x08006ee1
 8006bd4:	08006d29 	.word	0x08006d29

08006bd8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b095      	sub	sp, #84	@ 0x54
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bf0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bf4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	461a      	mov	r2, r3
 8006bfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bfe:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c00:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c02:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c04:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c06:	e841 2300 	strex	r3, r2, [r1]
 8006c0a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d1e6      	bne.n	8006be0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	3308      	adds	r3, #8
 8006c18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c1a:	6a3b      	ldr	r3, [r7, #32]
 8006c1c:	e853 3f00 	ldrex	r3, [r3]
 8006c20:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	4b1e      	ldr	r3, [pc, #120]	@ (8006ca0 <UART_EndRxTransfer+0xc8>)
 8006c26:	4013      	ands	r3, r2
 8006c28:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	3308      	adds	r3, #8
 8006c30:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c32:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c36:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c38:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d1e5      	bne.n	8006c12 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d118      	bne.n	8006c80 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	e853 3f00 	ldrex	r3, [r3]
 8006c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	f023 0310 	bic.w	r3, r3, #16
 8006c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006c6c:	61bb      	str	r3, [r7, #24]
 8006c6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c70:	6979      	ldr	r1, [r7, #20]
 8006c72:	69ba      	ldr	r2, [r7, #24]
 8006c74:	e841 2300 	strex	r3, r2, [r1]
 8006c78:	613b      	str	r3, [r7, #16]
   return(result);
 8006c7a:	693b      	ldr	r3, [r7, #16]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d1e6      	bne.n	8006c4e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2220      	movs	r2, #32
 8006c84:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006c94:	bf00      	nop
 8006c96:	3754      	adds	r7, #84	@ 0x54
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	effffffe 	.word	0xeffffffe

08006ca4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006cb0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f7fe fe2a 	bl	800591c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006cc8:	bf00      	nop
 8006cca:	3710      	adds	r7, #16
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b088      	sub	sp, #32
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cec:	61fb      	str	r3, [r7, #28]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	61bb      	str	r3, [r7, #24]
 8006cf8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6979      	ldr	r1, [r7, #20]
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	613b      	str	r3, [r7, #16]
   return(result);
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e6      	bne.n	8006cd8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2220      	movs	r2, #32
 8006d0e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f7fe fdeb 	bl	80058f4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1e:	bf00      	nop
 8006d20:	3720      	adds	r7, #32
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
	...

08006d28 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b09c      	sub	sp, #112	@ 0x70
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006d36:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006d40:	2b22      	cmp	r3, #34	@ 0x22
 8006d42:	f040 80be 	bne.w	8006ec2 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d4c:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d50:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8006d54:	b2d9      	uxtb	r1, r3
 8006d56:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006d5a:	b2da      	uxtb	r2, r3
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d60:	400a      	ands	r2, r1
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006d6a:	1c5a      	adds	r2, r3, #1
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	b29a      	uxth	r2, r3
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006d88:	b29b      	uxth	r3, r3
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f040 80a1 	bne.w	8006ed2 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d98:	e853 3f00 	ldrex	r3, [r3]
 8006d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006da0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006da4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	461a      	mov	r2, r3
 8006dac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dae:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006db0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006db4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006db6:	e841 2300 	strex	r3, r2, [r1]
 8006dba:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006dbc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d1e6      	bne.n	8006d90 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	3308      	adds	r3, #8
 8006dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dcc:	e853 3f00 	ldrex	r3, [r3]
 8006dd0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd4:	f023 0301 	bic.w	r3, r3, #1
 8006dd8:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	3308      	adds	r3, #8
 8006de0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006de2:	647a      	str	r2, [r7, #68]	@ 0x44
 8006de4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006de8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006dea:	e841 2300 	strex	r3, r2, [r1]
 8006dee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006df0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d1e5      	bne.n	8006dc2 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	2220      	movs	r2, #32
 8006dfa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a33      	ldr	r2, [pc, #204]	@ (8006edc <UART_RxISR_8BIT+0x1b4>)
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d01f      	beq.n	8006e54 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d018      	beq.n	8006e54 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006e30:	6a3b      	ldr	r3, [r7, #32]
 8006e32:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006e36:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	461a      	mov	r2, r3
 8006e3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006e40:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e42:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e46:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e6      	bne.n	8006e22 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d12e      	bne.n	8006eba <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	e853 3f00 	ldrex	r3, [r3]
 8006e6e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	f023 0310 	bic.w	r3, r3, #16
 8006e76:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e80:	61fb      	str	r3, [r7, #28]
 8006e82:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e84:	69b9      	ldr	r1, [r7, #24]
 8006e86:	69fa      	ldr	r2, [r7, #28]
 8006e88:	e841 2300 	strex	r3, r2, [r1]
 8006e8c:	617b      	str	r3, [r7, #20]
   return(result);
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d1e6      	bne.n	8006e62 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	69db      	ldr	r3, [r3, #28]
 8006e9a:	f003 0310 	and.w	r3, r3, #16
 8006e9e:	2b10      	cmp	r3, #16
 8006ea0:	d103      	bne.n	8006eaa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	2210      	movs	r2, #16
 8006ea8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	6878      	ldr	r0, [r7, #4]
 8006eb4:	f7fe fd3c 	bl	8005930 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006eb8:	e00b      	b.n	8006ed2 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fe fd24 	bl	8005908 <HAL_UART_RxCpltCallback>
}
 8006ec0:	e007      	b.n	8006ed2 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	699a      	ldr	r2, [r3, #24]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f042 0208 	orr.w	r2, r2, #8
 8006ed0:	619a      	str	r2, [r3, #24]
}
 8006ed2:	bf00      	nop
 8006ed4:	3770      	adds	r7, #112	@ 0x70
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	58000c00 	.word	0x58000c00

08006ee0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b09c      	sub	sp, #112	@ 0x70
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8006eee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006ef8:	2b22      	cmp	r3, #34	@ 0x22
 8006efa:	f040 80be 	bne.w	800707a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8006f0e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8006f12:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8006f16:	4013      	ands	r3, r2
 8006f18:	b29a      	uxth	r2, r3
 8006f1a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006f1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006f22:	1c9a      	adds	r2, r3, #2
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f2e:	b29b      	uxth	r3, r3
 8006f30:	3b01      	subs	r3, #1
 8006f32:	b29a      	uxth	r2, r3
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 80a1 	bne.w	800708a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f50:	e853 3f00 	ldrex	r3, [r3]
 8006f54:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006f56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f58:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f5c:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f66:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f68:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006f6c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f6e:	e841 2300 	strex	r3, r2, [r1]
 8006f72:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006f74:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d1e6      	bne.n	8006f48 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	3308      	adds	r3, #8
 8006f80:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f84:	e853 3f00 	ldrex	r3, [r3]
 8006f88:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f8c:	f023 0301 	bic.w	r3, r3, #1
 8006f90:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	3308      	adds	r3, #8
 8006f98:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006f9a:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006fa0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006fa2:	e841 2300 	strex	r3, r2, [r1]
 8006fa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d1e5      	bne.n	8006f7a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2220      	movs	r2, #32
 8006fb2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2200      	movs	r2, #0
 8006fc0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a33      	ldr	r2, [pc, #204]	@ (8007094 <UART_RxISR_16BIT+0x1b4>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d01f      	beq.n	800700c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d018      	beq.n	800700c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	e853 3f00 	ldrex	r3, [r3]
 8006fe6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006fe8:	69fb      	ldr	r3, [r7, #28]
 8006fea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006fee:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	461a      	mov	r2, r3
 8006ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006ff8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ffa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ffc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ffe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007000:	e841 2300 	strex	r3, r2, [r1]
 8007004:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007008:	2b00      	cmp	r3, #0
 800700a:	d1e6      	bne.n	8006fda <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007010:	2b01      	cmp	r3, #1
 8007012:	d12e      	bne.n	8007072 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	e853 3f00 	ldrex	r3, [r3]
 8007026:	60bb      	str	r3, [r7, #8]
   return(result);
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	f023 0310 	bic.w	r3, r3, #16
 800702e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	461a      	mov	r2, r3
 8007036:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800703c:	6979      	ldr	r1, [r7, #20]
 800703e:	69ba      	ldr	r2, [r7, #24]
 8007040:	e841 2300 	strex	r3, r2, [r1]
 8007044:	613b      	str	r3, [r7, #16]
   return(result);
 8007046:	693b      	ldr	r3, [r7, #16]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d1e6      	bne.n	800701a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	f003 0310 	and.w	r3, r3, #16
 8007056:	2b10      	cmp	r3, #16
 8007058:	d103      	bne.n	8007062 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	2210      	movs	r2, #16
 8007060:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007068:	4619      	mov	r1, r3
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f7fe fc60 	bl	8005930 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007070:	e00b      	b.n	800708a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f7fe fc48 	bl	8005908 <HAL_UART_RxCpltCallback>
}
 8007078:	e007      	b.n	800708a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	699a      	ldr	r2, [r3, #24]
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f042 0208 	orr.w	r2, r2, #8
 8007088:	619a      	str	r2, [r3, #24]
}
 800708a:	bf00      	nop
 800708c:	3770      	adds	r7, #112	@ 0x70
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	58000c00 	.word	0x58000c00

08007098 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b0ac      	sub	sp, #176	@ 0xb0
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80070a6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	69db      	ldr	r3, [r3, #28]
 80070b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80070ce:	2b22      	cmp	r3, #34	@ 0x22
 80070d0:	f040 8180 	bne.w	80073d4 <UART_RxISR_8BIT_FIFOEN+0x33c>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070da:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070de:	e123      	b.n	8007328 <UART_RxISR_8BIT_FIFOEN+0x290>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070e6:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80070ea:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 80070ee:	b2d9      	uxtb	r1, r3
 80070f0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80070f4:	b2da      	uxtb	r2, r3
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80070fa:	400a      	ands	r2, r1
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007104:	1c5a      	adds	r2, r3, #1
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007110:	b29b      	uxth	r3, r3
 8007112:	3b01      	subs	r3, #1
 8007114:	b29a      	uxth	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	69db      	ldr	r3, [r3, #28]
 8007122:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007126:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800712a:	f003 0307 	and.w	r3, r3, #7
 800712e:	2b00      	cmp	r3, #0
 8007130:	d053      	beq.n	80071da <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007132:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007136:	f003 0301 	and.w	r3, r3, #1
 800713a:	2b00      	cmp	r3, #0
 800713c:	d011      	beq.n	8007162 <UART_RxISR_8BIT_FIFOEN+0xca>
 800713e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007142:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00b      	beq.n	8007162 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	2201      	movs	r2, #1
 8007150:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007158:	f043 0201 	orr.w	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007166:	f003 0302 	and.w	r3, r3, #2
 800716a:	2b00      	cmp	r3, #0
 800716c:	d011      	beq.n	8007192 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800716e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2202      	movs	r2, #2
 8007180:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007188:	f043 0204 	orr.w	r2, r3, #4
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007192:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007196:	f003 0304 	and.w	r3, r3, #4
 800719a:	2b00      	cmp	r3, #0
 800719c:	d011      	beq.n	80071c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800719e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d00b      	beq.n	80071c2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2204      	movs	r2, #4
 80071b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071b8:	f043 0202 	orr.w	r2, r3, #2
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d006      	beq.n	80071da <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f7fe fba5 	bl	800591c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	2200      	movs	r2, #0
 80071d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f040 80a0 	bne.w	8007328 <UART_RxISR_8BIT_FIFOEN+0x290>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80071f0:	e853 3f00 	ldrex	r3, [r3]
 80071f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80071f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80071f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	461a      	mov	r2, r3
 8007206:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800720a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800720c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800720e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007210:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007212:	e841 2300 	strex	r3, r2, [r1]
 8007216:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007218:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800721a:	2b00      	cmp	r3, #0
 800721c:	d1e4      	bne.n	80071e8 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	3308      	adds	r3, #8
 8007224:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007226:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007228:	e853 3f00 	ldrex	r3, [r3]
 800722c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800722e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007230:	4b6e      	ldr	r3, [pc, #440]	@ (80073ec <UART_RxISR_8BIT_FIFOEN+0x354>)
 8007232:	4013      	ands	r3, r2
 8007234:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007242:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007244:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007246:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007248:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800724a:	e841 2300 	strex	r3, r2, [r1]
 800724e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007250:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007252:	2b00      	cmp	r3, #0
 8007254:	d1e3      	bne.n	800721e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	2220      	movs	r2, #32
 800725a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	2200      	movs	r2, #0
 8007262:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a60      	ldr	r2, [pc, #384]	@ (80073f0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d021      	beq.n	80072b8 <UART_RxISR_8BIT_FIFOEN+0x220>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	685b      	ldr	r3, [r3, #4]
 800727a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800727e:	2b00      	cmp	r3, #0
 8007280:	d01a      	beq.n	80072b8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007290:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007292:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007296:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80072a4:	657b      	str	r3, [r7, #84]	@ 0x54
 80072a6:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a8:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80072aa:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80072ac:	e841 2300 	strex	r3, r2, [r1]
 80072b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80072b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d1e4      	bne.n	8007282 <UART_RxISR_8BIT_FIFOEN+0x1ea>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d130      	bne.n	8007322 <UART_RxISR_8BIT_FIFOEN+0x28a>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2200      	movs	r2, #0
 80072c4:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072ce:	e853 3f00 	ldrex	r3, [r3]
 80072d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	f023 0310 	bic.w	r3, r3, #16
 80072da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	461a      	mov	r2, r3
 80072e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80072e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80072ea:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ec:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80072ee:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80072f0:	e841 2300 	strex	r3, r2, [r1]
 80072f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80072f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1e4      	bne.n	80072c6 <UART_RxISR_8BIT_FIFOEN+0x22e>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	69db      	ldr	r3, [r3, #28]
 8007302:	f003 0310 	and.w	r3, r3, #16
 8007306:	2b10      	cmp	r3, #16
 8007308:	d103      	bne.n	8007312 <UART_RxISR_8BIT_FIFOEN+0x27a>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2210      	movs	r2, #16
 8007310:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007318:	4619      	mov	r1, r3
 800731a:	6878      	ldr	r0, [r7, #4]
 800731c:	f7fe fb08 	bl	8005930 <HAL_UARTEx_RxEventCallback>
 8007320:	e002      	b.n	8007328 <UART_RxISR_8BIT_FIFOEN+0x290>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f7fe faf0 	bl	8005908 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007328:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800732c:	2b00      	cmp	r3, #0
 800732e:	d006      	beq.n	800733e <UART_RxISR_8BIT_FIFOEN+0x2a6>
 8007330:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007334:	f003 0320 	and.w	r3, r3, #32
 8007338:	2b00      	cmp	r3, #0
 800733a:	f47f aed1 	bne.w	80070e0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007344:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007348:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800734c:	2b00      	cmp	r3, #0
 800734e:	d049      	beq.n	80073e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007356:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 800735a:	429a      	cmp	r2, r3
 800735c:	d242      	bcs.n	80073e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	3308      	adds	r3, #8
 8007364:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007366:	6a3b      	ldr	r3, [r7, #32]
 8007368:	e853 3f00 	ldrex	r3, [r3]
 800736c:	61fb      	str	r3, [r7, #28]
   return(result);
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007374:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	3308      	adds	r3, #8
 800737e:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007384:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800738a:	e841 2300 	strex	r3, r2, [r1]
 800738e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007392:	2b00      	cmp	r3, #0
 8007394:	d1e3      	bne.n	800735e <UART_RxISR_8BIT_FIFOEN+0x2c6>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a16      	ldr	r2, [pc, #88]	@ (80073f4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800739a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	e853 3f00 	ldrex	r3, [r3]
 80073a8:	60bb      	str	r3, [r7, #8]
   return(result);
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f043 0320 	orr.w	r3, r3, #32
 80073b0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	461a      	mov	r2, r3
 80073ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80073be:	61bb      	str	r3, [r7, #24]
 80073c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073c2:	6979      	ldr	r1, [r7, #20]
 80073c4:	69ba      	ldr	r2, [r7, #24]
 80073c6:	e841 2300 	strex	r3, r2, [r1]
 80073ca:	613b      	str	r3, [r7, #16]
   return(result);
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1e4      	bne.n	800739c <UART_RxISR_8BIT_FIFOEN+0x304>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073d2:	e007      	b.n	80073e4 <UART_RxISR_8BIT_FIFOEN+0x34c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	699a      	ldr	r2, [r3, #24]
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f042 0208 	orr.w	r2, r2, #8
 80073e2:	619a      	str	r2, [r3, #24]
}
 80073e4:	bf00      	nop
 80073e6:	37b0      	adds	r7, #176	@ 0xb0
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	effffffe 	.word	0xeffffffe
 80073f0:	58000c00 	.word	0x58000c00
 80073f4:	08006d29 	.word	0x08006d29

080073f8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b0ae      	sub	sp, #184	@ 0xb8
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007406:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800742e:	2b22      	cmp	r3, #34	@ 0x22
 8007430:	f040 8184 	bne.w	800773c <UART_RxISR_16BIT_FIFOEN+0x344>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800743a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800743e:	e127      	b.n	8007690 <UART_RxISR_16BIT_FIFOEN+0x298>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007446:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800744e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007452:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007456:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 800745a:	4013      	ands	r3, r2
 800745c:	b29a      	uxth	r2, r3
 800745e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007462:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007468:	1c9a      	adds	r2, r3, #2
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007474:	b29b      	uxth	r3, r3
 8007476:	3b01      	subs	r3, #1
 8007478:	b29a      	uxth	r2, r3
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	69db      	ldr	r3, [r3, #28]
 8007486:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800748a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800748e:	f003 0307 	and.w	r3, r3, #7
 8007492:	2b00      	cmp	r3, #0
 8007494:	d053      	beq.n	800753e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007496:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d011      	beq.n	80074c6 <UART_RxISR_16BIT_FIFOEN+0xce>
 80074a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80074a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d00b      	beq.n	80074c6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2201      	movs	r2, #1
 80074b4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074bc:	f043 0201 	orr.w	r2, r3, #1
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074ca:	f003 0302 	and.w	r3, r3, #2
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d011      	beq.n	80074f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 80074d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80074d6:	f003 0301 	and.w	r3, r3, #1
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	2202      	movs	r2, #2
 80074e4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80074ec:	f043 0204 	orr.w	r2, r3, #4
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80074fa:	f003 0304 	and.w	r3, r3, #4
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d011      	beq.n	8007526 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007502:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d00b      	beq.n	8007526 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2204      	movs	r2, #4
 8007514:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800751c:	f043 0202 	orr.w	r2, r3, #2
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800752c:	2b00      	cmp	r3, #0
 800752e:	d006      	beq.n	800753e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007530:	6878      	ldr	r0, [r7, #4]
 8007532:	f7fe f9f3 	bl	800591c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2200      	movs	r2, #0
 800753a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007544:	b29b      	uxth	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	f040 80a2 	bne.w	8007690 <UART_RxISR_16BIT_FIFOEN+0x298>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007552:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007554:	e853 3f00 	ldrex	r3, [r3]
 8007558:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800755a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800755c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007560:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	461a      	mov	r2, r3
 800756a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800756e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007572:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007574:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007576:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800757a:	e841 2300 	strex	r3, r2, [r1]
 800757e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007580:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1e2      	bne.n	800754c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	3308      	adds	r3, #8
 800758c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800758e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007590:	e853 3f00 	ldrex	r3, [r3]
 8007594:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007596:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007598:	4b6e      	ldr	r3, [pc, #440]	@ (8007754 <UART_RxISR_16BIT_FIFOEN+0x35c>)
 800759a:	4013      	ands	r3, r2
 800759c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	3308      	adds	r3, #8
 80075a6:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80075aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80075ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80075b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80075b2:	e841 2300 	strex	r3, r2, [r1]
 80075b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80075b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1e3      	bne.n	8007586 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2220      	movs	r2, #32
 80075c2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2200      	movs	r2, #0
 80075ca:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a60      	ldr	r2, [pc, #384]	@ (8007758 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d021      	beq.n	8007620 <UART_RxISR_16BIT_FIFOEN+0x228>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01a      	beq.n	8007620 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80075f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075fa:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80075fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	461a      	mov	r2, r3
 8007608:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800760c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800760e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007610:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007612:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007614:	e841 2300 	strex	r3, r2, [r1]
 8007618:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800761a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1e4      	bne.n	80075ea <UART_RxISR_16BIT_FIFOEN+0x1f2>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007624:	2b01      	cmp	r3, #1
 8007626:	d130      	bne.n	800768a <UART_RxISR_16BIT_FIFOEN+0x292>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2200      	movs	r2, #0
 800762c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800763c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800763e:	f023 0310 	bic.w	r3, r3, #16
 8007642:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007650:	647b      	str	r3, [r7, #68]	@ 0x44
 8007652:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007654:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007656:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007658:	e841 2300 	strex	r3, r2, [r1]
 800765c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800765e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d1e4      	bne.n	800762e <UART_RxISR_16BIT_FIFOEN+0x236>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	69db      	ldr	r3, [r3, #28]
 800766a:	f003 0310 	and.w	r3, r3, #16
 800766e:	2b10      	cmp	r3, #16
 8007670:	d103      	bne.n	800767a <UART_RxISR_16BIT_FIFOEN+0x282>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2210      	movs	r2, #16
 8007678:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007680:	4619      	mov	r1, r3
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f7fe f954 	bl	8005930 <HAL_UARTEx_RxEventCallback>
 8007688:	e002      	b.n	8007690 <UART_RxISR_16BIT_FIFOEN+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f7fe f93c 	bl	8005908 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007690:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007694:	2b00      	cmp	r3, #0
 8007696:	d006      	beq.n	80076a6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
 8007698:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f47f aecd 	bne.w	8007440 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80076ac:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80076b0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d049      	beq.n	800774c <UART_RxISR_16BIT_FIFOEN+0x354>
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80076be:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d242      	bcs.n	800774c <UART_RxISR_16BIT_FIFOEN+0x354>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	3308      	adds	r3, #8
 80076cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076d0:	e853 3f00 	ldrex	r3, [r3]
 80076d4:	623b      	str	r3, [r7, #32]
   return(result);
 80076d6:	6a3b      	ldr	r3, [r7, #32]
 80076d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3308      	adds	r3, #8
 80076e6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 80076ea:	633a      	str	r2, [r7, #48]	@ 0x30
 80076ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80076f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80076f2:	e841 2300 	strex	r3, r2, [r1]
 80076f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80076f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1e3      	bne.n	80076c6 <UART_RxISR_16BIT_FIFOEN+0x2ce>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	4a16      	ldr	r2, [pc, #88]	@ (800775c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007702:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800770a:	693b      	ldr	r3, [r7, #16]
 800770c:	e853 3f00 	ldrex	r3, [r3]
 8007710:	60fb      	str	r3, [r7, #12]
   return(result);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	f043 0320 	orr.w	r3, r3, #32
 8007718:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007726:	61fb      	str	r3, [r7, #28]
 8007728:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800772a:	69b9      	ldr	r1, [r7, #24]
 800772c:	69fa      	ldr	r2, [r7, #28]
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	617b      	str	r3, [r7, #20]
   return(result);
 8007734:	697b      	ldr	r3, [r7, #20]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e4      	bne.n	8007704 <UART_RxISR_16BIT_FIFOEN+0x30c>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800773a:	e007      	b.n	800774c <UART_RxISR_16BIT_FIFOEN+0x354>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699a      	ldr	r2, [r3, #24]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 0208 	orr.w	r2, r2, #8
 800774a:	619a      	str	r2, [r3, #24]
}
 800774c:	bf00      	nop
 800774e:	37b8      	adds	r7, #184	@ 0xb8
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	effffffe 	.word	0xeffffffe
 8007758:	58000c00 	.word	0x58000c00
 800775c:	08006ee1 	.word	0x08006ee1

08007760 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007768:	bf00      	nop
 800776a:	370c      	adds	r7, #12
 800776c:	46bd      	mov	sp, r7
 800776e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007772:	4770      	bx	lr

08007774 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007774:	b480      	push	{r7}
 8007776:	b083      	sub	sp, #12
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800777c:	bf00      	nop
 800777e:	370c      	adds	r7, #12
 8007780:	46bd      	mov	sp, r7
 8007782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007786:	4770      	bx	lr

08007788 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007788:	b480      	push	{r7}
 800778a:	b083      	sub	sp, #12
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007790:	bf00      	nop
 8007792:	370c      	adds	r7, #12
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr

0800779c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800779c:	b480      	push	{r7}
 800779e:	b085      	sub	sp, #20
 80077a0:	af00      	add	r7, sp, #0
 80077a2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d101      	bne.n	80077b2 <HAL_UARTEx_DisableFifoMode+0x16>
 80077ae:	2302      	movs	r3, #2
 80077b0:	e027      	b.n	8007802 <HAL_UARTEx_DisableFifoMode+0x66>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2201      	movs	r2, #1
 80077b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	2224      	movs	r2, #36	@ 0x24
 80077be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f022 0201 	bic.w	r2, r2, #1
 80077d8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80077e0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2200      	movs	r2, #0
 80077e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	68fa      	ldr	r2, [r7, #12]
 80077ee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2220      	movs	r2, #32
 80077f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007800:	2300      	movs	r3, #0
}
 8007802:	4618      	mov	r0, r3
 8007804:	3714      	adds	r7, #20
 8007806:	46bd      	mov	sp, r7
 8007808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780c:	4770      	bx	lr

0800780e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800780e:	b580      	push	{r7, lr}
 8007810:	b084      	sub	sp, #16
 8007812:	af00      	add	r7, sp, #0
 8007814:	6078      	str	r0, [r7, #4]
 8007816:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800781e:	2b01      	cmp	r3, #1
 8007820:	d101      	bne.n	8007826 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007822:	2302      	movs	r3, #2
 8007824:	e02d      	b.n	8007882 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2224      	movs	r2, #36	@ 0x24
 8007832:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	f022 0201 	bic.w	r2, r2, #1
 800784c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	683a      	ldr	r2, [r7, #0]
 800785e:	430a      	orrs	r2, r1
 8007860:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f850 	bl	8007908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2220      	movs	r2, #32
 8007874:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007880:	2300      	movs	r3, #0
}
 8007882:	4618      	mov	r0, r3
 8007884:	3710      	adds	r7, #16
 8007886:	46bd      	mov	sp, r7
 8007888:	bd80      	pop	{r7, pc}

0800788a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800788a:	b580      	push	{r7, lr}
 800788c:	b084      	sub	sp, #16
 800788e:	af00      	add	r7, sp, #0
 8007890:	6078      	str	r0, [r7, #4]
 8007892:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800789a:	2b01      	cmp	r3, #1
 800789c:	d101      	bne.n	80078a2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800789e:	2302      	movs	r3, #2
 80078a0:	e02d      	b.n	80078fe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	2201      	movs	r2, #1
 80078a6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2224      	movs	r2, #36	@ 0x24
 80078ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	681a      	ldr	r2, [r3, #0]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f022 0201 	bic.w	r2, r2, #1
 80078c8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	689b      	ldr	r3, [r3, #8]
 80078d0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	683a      	ldr	r2, [r7, #0]
 80078da:	430a      	orrs	r2, r1
 80078dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f812 	bl	8007908 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68fa      	ldr	r2, [r7, #12]
 80078ea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2220      	movs	r2, #32
 80078f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2200      	movs	r2, #0
 80078f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}
	...

08007908 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007914:	2b00      	cmp	r3, #0
 8007916:	d108      	bne.n	800792a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2201      	movs	r2, #1
 8007924:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007928:	e031      	b.n	800798e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800792a:	2310      	movs	r3, #16
 800792c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800792e:	2310      	movs	r3, #16
 8007930:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	0e5b      	lsrs	r3, r3, #25
 800793a:	b2db      	uxtb	r3, r3
 800793c:	f003 0307 	and.w	r3, r3, #7
 8007940:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	0f5b      	lsrs	r3, r3, #29
 800794a:	b2db      	uxtb	r3, r3
 800794c:	f003 0307 	and.w	r3, r3, #7
 8007950:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007952:	7bbb      	ldrb	r3, [r7, #14]
 8007954:	7b3a      	ldrb	r2, [r7, #12]
 8007956:	4911      	ldr	r1, [pc, #68]	@ (800799c <UARTEx_SetNbDataToProcess+0x94>)
 8007958:	5c8a      	ldrb	r2, [r1, r2]
 800795a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800795e:	7b3a      	ldrb	r2, [r7, #12]
 8007960:	490f      	ldr	r1, [pc, #60]	@ (80079a0 <UARTEx_SetNbDataToProcess+0x98>)
 8007962:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007964:	fb93 f3f2 	sdiv	r3, r3, r2
 8007968:	b29a      	uxth	r2, r3
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	7b7a      	ldrb	r2, [r7, #13]
 8007974:	4909      	ldr	r1, [pc, #36]	@ (800799c <UARTEx_SetNbDataToProcess+0x94>)
 8007976:	5c8a      	ldrb	r2, [r1, r2]
 8007978:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800797c:	7b7a      	ldrb	r2, [r7, #13]
 800797e:	4908      	ldr	r1, [pc, #32]	@ (80079a0 <UARTEx_SetNbDataToProcess+0x98>)
 8007980:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007982:	fb93 f3f2 	sdiv	r3, r3, r2
 8007986:	b29a      	uxth	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800798e:	bf00      	nop
 8007990:	3714      	adds	r7, #20
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr
 800799a:	bf00      	nop
 800799c:	08007a58 	.word	0x08007a58
 80079a0:	08007a60 	.word	0x08007a60

080079a4 <memset>:
 80079a4:	4402      	add	r2, r0
 80079a6:	4603      	mov	r3, r0
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d100      	bne.n	80079ae <memset+0xa>
 80079ac:	4770      	bx	lr
 80079ae:	f803 1b01 	strb.w	r1, [r3], #1
 80079b2:	e7f9      	b.n	80079a8 <memset+0x4>

080079b4 <__libc_init_array>:
 80079b4:	b570      	push	{r4, r5, r6, lr}
 80079b6:	4d0d      	ldr	r5, [pc, #52]	@ (80079ec <__libc_init_array+0x38>)
 80079b8:	4c0d      	ldr	r4, [pc, #52]	@ (80079f0 <__libc_init_array+0x3c>)
 80079ba:	1b64      	subs	r4, r4, r5
 80079bc:	10a4      	asrs	r4, r4, #2
 80079be:	2600      	movs	r6, #0
 80079c0:	42a6      	cmp	r6, r4
 80079c2:	d109      	bne.n	80079d8 <__libc_init_array+0x24>
 80079c4:	4d0b      	ldr	r5, [pc, #44]	@ (80079f4 <__libc_init_array+0x40>)
 80079c6:	4c0c      	ldr	r4, [pc, #48]	@ (80079f8 <__libc_init_array+0x44>)
 80079c8:	f000 f826 	bl	8007a18 <_init>
 80079cc:	1b64      	subs	r4, r4, r5
 80079ce:	10a4      	asrs	r4, r4, #2
 80079d0:	2600      	movs	r6, #0
 80079d2:	42a6      	cmp	r6, r4
 80079d4:	d105      	bne.n	80079e2 <__libc_init_array+0x2e>
 80079d6:	bd70      	pop	{r4, r5, r6, pc}
 80079d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079dc:	4798      	blx	r3
 80079de:	3601      	adds	r6, #1
 80079e0:	e7ee      	b.n	80079c0 <__libc_init_array+0xc>
 80079e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079e6:	4798      	blx	r3
 80079e8:	3601      	adds	r6, #1
 80079ea:	e7f2      	b.n	80079d2 <__libc_init_array+0x1e>
 80079ec:	08007a70 	.word	0x08007a70
 80079f0:	08007a70 	.word	0x08007a70
 80079f4:	08007a70 	.word	0x08007a70
 80079f8:	08007a74 	.word	0x08007a74

080079fc <memcpy>:
 80079fc:	440a      	add	r2, r1
 80079fe:	4291      	cmp	r1, r2
 8007a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a04:	d100      	bne.n	8007a08 <memcpy+0xc>
 8007a06:	4770      	bx	lr
 8007a08:	b510      	push	{r4, lr}
 8007a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a12:	4291      	cmp	r1, r2
 8007a14:	d1f9      	bne.n	8007a0a <memcpy+0xe>
 8007a16:	bd10      	pop	{r4, pc}

08007a18 <_init>:
 8007a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a1a:	bf00      	nop
 8007a1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a1e:	bc08      	pop	{r3}
 8007a20:	469e      	mov	lr, r3
 8007a22:	4770      	bx	lr

08007a24 <_fini>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	bf00      	nop
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc08      	pop	{r3}
 8007a2c:	469e      	mov	lr, r3
 8007a2e:	4770      	bx	lr
